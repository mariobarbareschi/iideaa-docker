#include "evoapproxlib.h"
#include <assert.h>
#include <stdlib.h>
#include <limits>
#include <stdio.h>

using namespace evoapproxlib;

evoapproxlib::evoapprox_t::mult_8u_t evoapproxlib::evoapprox_t::mult_8u_array[mult_8u_N]= {
   {.fptr = evoapproxlib::evoapprox_t::mul8u_exa,  .power = 1 ,     .area = 1000 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_1JFF, .power = 0.391 , .area = 709.6 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_2P7 , .power = 0.386 , .area = 676.3 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_KEM , .power = 0.370 , .area = 637.8 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_CK5 , .power = 0.345 , .area = 604.5 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_2HH , .power = 0.302 , .area = 542.5 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_19DB, .power = 0.206 , .area = 395.6 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_17KS, .power = 0.104 , .area = 239.3 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_JV3 , .power = 0.034 , .area = 110.8 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_17QU, .power = 0.0017, .area = 13.1 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_E9R , .power = 0.000 , .area = 0.0},
   {.fptr = evoapproxlib::evoapprox_t::mul8u_Y48 , .power = 0.390 , .area = 682.8 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_LM7 , .power = 0.380 , .area = 663.6 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_150Q, .power = 0.360 , .area = 660.3 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_2AC , .power = 0.311 , .area = 508.3 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_185Q, .power = 0.206 , .area = 427.5 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_FTA , .power = 0.084 , .area = 214.5 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_13QR, .power = 0.0085, .area =  41.3 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_125K, .power = 0.384 , .area = 674.9 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_14VP, .power = 0.364 , .area = 654.2 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_ZFB , .power = 0.304 , .area = 590.4 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_12N4, .power = 0.142 , .area = 390.5 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_QKX , .power = 0.029 , .area = 112.2 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_1446, .power = 0.388 , .area = 683.3 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_JQQ , .power = 0.371 , .area = 661.2 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_GS2 , .power = 0.356 , .area = 632.6 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_7C1 , .power = 0.329 , .area = 606.8 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_RCG , .power = 0.309 , .area = 561.8 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_1CMB, .power = 0.237 , .area = 479.2 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_L40 , .power = 0.189 , .area = 437.4 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_YX7 , .power = 0.061 , .area = 220.6 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_QJD , .power = 0.344 , .area = 624.2 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_NGR , .power = 0.276 , .area = 511.5 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_DM1 , .power = 0.195 , .area = 401.7 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_1AGV, .power = 0.095 , .area = 228.5 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_18DU, .power = 0.031 , .area = 96.7 },
   {.fptr = evoapproxlib::evoapprox_t::mul8u_17C8, .power = 0.0019, .area =  15.5 },
};

evoapproxlib::evoapprox_t::add_8u_t evoapproxlib::evoapprox_t::add_8u_array[add_8u_N]= {
   {.fptr = evoapproxlib::evoapprox_t::add8u_exa, .power = 1,      .area = 100},
   {.fptr = evoapproxlib::evoapprox_t::add8u_0FP, .power = 0.033,  .area = 70.400},
   {.fptr = evoapproxlib::evoapprox_t::add8u_5R3, .power = 0.029,  .area = 63.800},
   {.fptr = evoapproxlib::evoapprox_t::add8u_5QL, .power = 0.024,  .area = 57.300},
   {.fptr = evoapproxlib::evoapprox_t::add8u_5LT, .power = 0.021,  .area = 56.300},
   {.fptr = evoapproxlib::evoapprox_t::add8u_5HQ, .power = 0.017,  .area = 53.000},
   {.fptr = evoapproxlib::evoapprox_t::add8u_5SY, .power = 0.012,  .area = 28.200},
   {.fptr = evoapproxlib::evoapprox_t::add8u_8LL, .power = 0.0095, .area = 25.800},
   {.fptr = evoapproxlib::evoapprox_t::add8u_006, .power = 0.0046, .area = 15.000},
   {.fptr = evoapproxlib::evoapprox_t::add8u_8ES, .power = 0.0015, .area = 8},
   {.fptr = evoapproxlib::evoapprox_t::add8u_88L, .power = 0,      .area = 0},
   {.fptr = evoapproxlib::evoapprox_t::add8u_4T8, .power = 0.028,  .area = 61.5},
   {.fptr = evoapproxlib::evoapprox_t::add8u_01R, .power = 0.023,  .area = 52.6},
   {.fptr = evoapproxlib::evoapprox_t::add8u_5EZ, .power = 0.019,  .area = 43.6},
   {.fptr = evoapproxlib::evoapprox_t::add8u_1DK, .power = 0.016,  .area = 53},
   {.fptr = evoapproxlib::evoapprox_t::add8u_2XT, .power = 0.012,  .area = 26.8},
   {.fptr = evoapproxlib::evoapprox_t::add8u_0H4, .power = 0.0075, .area = 17.8},
   {.fptr = evoapproxlib::evoapprox_t::add8u_8AS, .power = 0.0032, .area = 8.9},
   {.fptr = evoapproxlib::evoapprox_t::add8u_04A, .power = 0,      .area = 0},
   {.fptr = evoapproxlib::evoapprox_t::add8u_5ME, .power = 0.019,  .area = 48.3},
   {.fptr = evoapproxlib::evoapprox_t::add8u_5G5, .power = 0.014,  .area = 37.1},
   {.fptr = evoapproxlib::evoapprox_t::add8u_8KZ, .power = 0.011,  .area = 32.9},
   {.fptr = evoapproxlib::evoapprox_t::add8u_8GM, .power = 0.0015, .area = 8},
   {.fptr = evoapproxlib::evoapprox_t::add8u_5NQ, .power = 0.026,  .area = 63.8},
   {.fptr = evoapproxlib::evoapprox_t::add8u_8MK, .power = 0.023,  .area = 65.7},
   {.fptr = evoapproxlib::evoapprox_t::add8u_8FF, .power = 0.019,  .area = 56.8},
   {.fptr = evoapproxlib::evoapprox_t::add8u_8FD, .power = 0.018,  .area = 65.2},
   {.fptr = evoapproxlib::evoapprox_t::add8u_8KJ, .power = 0.014,  .area = 45.5},
   {.fptr = evoapproxlib::evoapprox_t::add8u_8BB, .power = 0.0092, .area = 35.2},
   {.fptr = evoapproxlib::evoapprox_t::add8u_5M7, .power = 0.023,  .area = 50.7},
   {.fptr = evoapproxlib::evoapprox_t::add8u_5NH, .power = 0.014,  .area = 34.7},
   {.fptr = evoapproxlib::evoapprox_t::add8u_0CA, .power = 0.0032, .area = 8.9},
};

evoapproxlib::evoapprox_t::add_8s_t evoapproxlib::evoapprox_t::add_8s_array[add_8s_N]= {
   {.fptr = evoapproxlib::evoapprox_t::add8s_exa,  .power = 1,        .area = 100},
   {.fptr = evoapproxlib::evoapprox_t::add8s_83C,  .power = 0.034,    .area = 70.4},
   {.fptr = evoapproxlib::evoapprox_t::add8s_83N,  .power = 0.033,    .area = 74.1},
   {.fptr = evoapproxlib::evoapprox_t::add8s_6FR,  .power = 0.032,    .area = 67.1},
   {.fptr = evoapproxlib::evoapprox_t::add8s_6TR,  .power = 0.03,     .area = 67.6},
   {.fptr = evoapproxlib::evoapprox_t::add8s_6UN,  .power = 0.025,    .area = 57.3},
   {.fptr = evoapproxlib::evoapprox_t::add8s_6PM,  .power = 0.021,    .area = 48.3},
   {.fptr = evoapproxlib::evoapprox_t::add8s_6H2,  .power = 0.017,    .area = 44.6},
   {.fptr = evoapproxlib::evoapprox_t::add8s_6J2,  .power = 0.012,    .area = 32.9},
   {.fptr = evoapproxlib::evoapprox_t::add8s_701,  .power = 0.0054,   .area = 21.6},
   {.fptr = evoapproxlib::evoapprox_t::add8s_6HF,  .power = 0,        .area = 0},
   {.fptr = evoapproxlib::evoapprox_t::add8s_6X7,  .power = 0.033,    .area = 64.8},
   {.fptr = evoapproxlib::evoapprox_t::add8s_6SN,  .power = 0.032,    .area = 71.8},
   {.fptr = evoapproxlib::evoapprox_t::add8s_6FC,  .power = 0.027,    .area = 55.8},
   {.fptr = evoapproxlib::evoapprox_t::add8s_6ZP,  .power = 0.025,    .area = 57.3},
   {.fptr = evoapproxlib::evoapprox_t::add8s_6X9,  .power = 0.016,    .area = 39.4},
   {.fptr = evoapproxlib::evoapprox_t::add8s_6T8,  .power = 0.0063,   .area = 26.8},
   {.fptr = evoapproxlib::evoapprox_t::add8s_6XL,  .power = 0.03,     .area = 63.8},
   {.fptr = evoapproxlib::evoapprox_t::add8s_704,  .power = 0.024,    .area = 54.4},
   {.fptr = evoapproxlib::evoapprox_t::add8s_6UC,  .power = 0.02,     .area = 51.2},
   {.fptr = evoapproxlib::evoapprox_t::add8s_6PA,  .power = 0.017,    .area = 40.8},
   {.fptr = evoapproxlib::evoapprox_t::add8s_6YG,  .power = 0.031,    .area = 75.6},
   {.fptr = evoapproxlib::evoapprox_t::add8s_7YK,  .power = 0.03,     .area = 71.8},
   {.fptr = evoapproxlib::evoapprox_t::add8s_6S5,  .power = 0.028,    .area = 63.4},
   {.fptr = evoapproxlib::evoapprox_t::add8s_70Z,  .power = 0.02,     .area = 57.7},
   {.fptr = evoapproxlib::evoapprox_t::add8s_6QJ,  .power = 0.029,    .area = 60.5},
   {.fptr = evoapproxlib::evoapprox_t::add8s_6TN,  .power = 0.022,    .area = 56.8},
   {.fptr = evoapproxlib::evoapprox_t::add8s_6YE,  .power = 0.017,    .area = 38},
   {.fptr = evoapproxlib::evoapprox_t::add8s_70S,  .power = 0.013,    .area = 31.4},
   {.fptr = evoapproxlib::evoapprox_t::add8s_70F,  .power = 0.0099,   .area = 35.7},
   {.fptr = evoapproxlib::evoapprox_t::add8s_6R6,  .power = 0.0039,   .area = 18.8},
   {.fptr = evoapproxlib::evoapprox_t::add8se_7A2, .power = 0.035,    .area = 74.6},
   {.fptr = evoapproxlib::evoapprox_t::add8se_8YC, .power = 0.034,    .area = 70.4},
   {.fptr = evoapproxlib::evoapprox_t::add8se_72D, .power = 0.03,     .area = 65.7},
   {.fptr = evoapproxlib::evoapprox_t::add8se_7LN, .power = 0.026,    .area = 59.1},
   {.fptr = evoapproxlib::evoapprox_t::add8se_7J7, .power = 0.021,    .area = 52.6},
   {.fptr = evoapproxlib::evoapprox_t::add8se_91D, .power = 0.019,    .area = 39.9},
   {.fptr = evoapproxlib::evoapprox_t::add8se_92J, .power = 0.014,    .area = 31},
   {.fptr = evoapproxlib::evoapprox_t::add8se_90Z, .power = 0.0093,   .area = 22.1},
   {.fptr = evoapproxlib::evoapprox_t::add8se_8UN, .power = 0.0042,   .area = 11.7},
   {.fptr = evoapproxlib::evoapprox_t::add8se_8XS, .power = 0,        .area = 0},
   {.fptr = evoapproxlib::evoapprox_t::add8se_91X, .power = 0.032,    .area = 70.4},
   {.fptr = evoapproxlib::evoapprox_t::add8se_76P, .power = 0.016,    .area = 41.3},
   {.fptr = evoapproxlib::evoapprox_t::add8se_8UF, .power = 0.0094,   .area = 23.5},
   {.fptr = evoapproxlib::evoapprox_t::add8se_7N1, .power = 0.002,    .area = 10.8},
   {.fptr = evoapproxlib::evoapprox_t::add8se_90X, .power = 0.000065, .area = 1.4},
   {.fptr = evoapproxlib::evoapprox_t::add8se_7C9, .power = 0.034,    .area = 78.4},
   {.fptr = evoapproxlib::evoapprox_t::add8se_78P, .power = 0.03,     .area = 65.2},
   {.fptr = evoapproxlib::evoapprox_t::add8se_90J, .power = 0.024,    .area = 54.9},
   {.fptr = evoapproxlib::evoapprox_t::add8se_8VV, .power = 0.019,    .area = 41.3},
   {.fptr = evoapproxlib::evoapprox_t::add8se_8V4, .power = 0.033,    .area = 66.6},
   {.fptr = evoapproxlib::evoapprox_t::add8se_91Y, .power = 0.028,    .area = 57.7},
   {.fptr = evoapproxlib::evoapprox_t::add8se_90R, .power = 0.023,    .area = 48.8},
   {.fptr = evoapproxlib::evoapprox_t::add8se_8UT, .power = 0.019,    .area = 41.3},
   {.fptr = evoapproxlib::evoapprox_t::add8se_8ZX, .power = 0.014,    .area = 32.4},
   {.fptr = evoapproxlib::evoapprox_t::add8se_8TX, .power = 0.0094,   .area = 23.5},
   {.fptr = evoapproxlib::evoapprox_t::add8se_91V, .power = 0.0042,   .area = 11.7}
};

evoapproxlib::evoapprox_t::mult_8s_t evoapproxlib::evoapprox_t::mult_8s_array[mult_8s_N] = {
   {.fptr = evoapproxlib::evoapprox_t::mul8s_exa,  .power = 1,     .area = 1000},
   {.fptr = evoapproxlib::evoapprox_t::mul8s_1KV8, .power = 0.425, .area = 729.800},
   {.fptr = evoapproxlib::evoapprox_t::mul8s_1KVA, .power = 0.422, .area = 711.000},
   {.fptr = evoapproxlib::evoapprox_t::mul8s_1KVB, .power = 0.41,  .area = 685.200},
   {.fptr = evoapproxlib::evoapprox_t::mul8s_1KR6, .power = 0.363, .area = 635.000},
   {.fptr = evoapproxlib::evoapprox_t::mul8s_1L2H, .power = 0.301, .area = 558.900},
   {.fptr = evoapproxlib::evoapprox_t::mul8s_1L2D, .power = 0.2,   .area = 411.600},
   {.fptr = evoapproxlib::evoapprox_t::mul8s_1L1G, .power = 0.126, .area = 284.900},
   {.fptr = evoapproxlib::evoapprox_t::mul8s_1KR3, .power = 0.052, .area = 172.200},
   {.fptr = evoapproxlib::evoapprox_t::mul8s_1KX2, .power = 0.391, .area = 641.1},
   {.fptr = evoapproxlib::evoapprox_t::mul8s_1KRC, .power = 0.351, .area = 599.8},
   {.fptr = evoapproxlib::evoapprox_t::mul8s_1KVL, .power = 0.289, .area = 543},
   {.fptr = evoapproxlib::evoapprox_t::mul8s_1KR8, .power = 0.369, .area = 652.8},
   {.fptr = evoapproxlib::evoapprox_t::mul8s_1KTY, .power = 0.237, .area = 482.4},
};

evoapproxlib::evoapprox_t::add_16u_t evoapproxlib::evoapprox_t::add_16u_array[add_16u_N] = {
   {.fptr = evoapproxlib::evoapprox_t::add16u_exa,	.power = 1,    	   .area = 200},
   {.fptr = evoapproxlib::evoapprox_t::add16u_1E2,	.power = 0.072,	   .area = 141.7},
   {.fptr = evoapproxlib::evoapprox_t::add16u_0EM,	.power = 0.057,	   .area = 115},
   {.fptr = evoapproxlib::evoapprox_t::add16u_1JH,	.power = 0.051,	   .area = 100.4},
   {.fptr = evoapproxlib::evoapprox_t::add16u_073,	.power = 0.043,	   .area = 90.6},
   {.fptr = evoapproxlib::evoapprox_t::add16u_0M0,	.power = 0.036,	   .area = 71.3},
   {.fptr = evoapproxlib::evoapprox_t::add16u_00G,	.power = 0.026,	   .area = 55.4},
   {.fptr = evoapproxlib::evoapprox_t::add16u_0GK,	.power = 0.018,	   .area = 45.5},
   {.fptr = evoapproxlib::evoapprox_t::add16u_02E,	.power = 0.011,	   .area = 31.9},
   {.fptr = evoapproxlib::evoapprox_t::add16u_0MH,	.power = 0.0041,  	.area = 18.3},
   {.fptr = evoapproxlib::evoapprox_t::add16u_0RN,	.power = 0.06, 	   .area = 115.9},
   {.fptr = evoapproxlib::evoapprox_t::add16u_08F,	.power = 0.052,	   .area = 106.1},
   {.fptr = evoapproxlib::evoapprox_t::add16u_05T,	.power = 0.041,	   .area = 82.6},
   {.fptr = evoapproxlib::evoapprox_t::add16u_09P,	.power = 0.036,	   .area = 73.7},
   {.fptr = evoapproxlib::evoapprox_t::add16u_02U,	.power = 0.027,	   .area = 55.8},
   {.fptr = evoapproxlib::evoapprox_t::add16u_0B4,	.power = 0.022,	   .area = 46.9},
   {.fptr = evoapproxlib::evoapprox_t::add16u_0QG,	.power = 0.013,	   .area = 29.1},
   {.fptr = evoapproxlib::evoapprox_t::add16u_0KC,	.power = 0.0079,  	.area = 20.2},
   {.fptr = evoapproxlib::evoapprox_t::add16u_1B4,	.power = 0.067,	   .area = 132.8},
   {.fptr = evoapproxlib::evoapprox_t::add16u_0NK,	.power = 0.057,	   .area = 115},
   {.fptr = evoapproxlib::evoapprox_t::add16u_0FJ,	.power = 0.05,	      .area = 98.1},
   {.fptr = evoapproxlib::evoapprox_t::add16u_0DL,	.power = 0.026,	   .area = 55.8},
   {.fptr = evoapproxlib::evoapprox_t::add16u_1NN,	.power = 0.069,	   .area = 144.5},
   {.fptr = evoapproxlib::evoapprox_t::add16u_1HK,	.power = 0.066,	   .area = 144.5},
   {.fptr = evoapproxlib::evoapprox_t::add16u_1DM,	.power = 0.065,	   .area = 138.4},
   {.fptr = evoapproxlib::evoapprox_t::add16u_1MB,	.power = 0.062,	   .area = 136.1},
   {.fptr = evoapproxlib::evoapprox_t::add16u_1US,	.power = 0.057,	   .area = 143.1},
   {.fptr = evoapproxlib::evoapprox_t::add16u_1X9,	.power = 0.052,	   .area = 122},
   {.fptr = evoapproxlib::evoapprox_t::add16u_0Q7,	.power = 0.051,	   .area = 100.4},
   {.fptr = evoapproxlib::evoapprox_t::add16u_0QC,	.power = 0.043,	   .area = 90.6},
   {.fptr = evoapproxlib::evoapprox_t::add16u_0M6,	.power = 0.022,	   .area = 46.9},
};

evoapproxlib::evoapprox_t::mul_16u_t evoapproxlib::evoapprox_t::mul_16u_array[mul_16u_N] = {
   {.fptr = evoapproxlib::evoapprox_t::mul16u_exa, .power = 3,     	.area = 4000},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_BMC, .power = 2.202, 	.area = 3203},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_AQ1, .power = 2.188, 	.area = 3118.5},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_5FA, .power = 2.135, 	.area = 3019.9},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_DAE, .power = 1.952, 	.area = 2800.8},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_F6B, .power = 1.648, 	.area = 2404.2},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_CK3, .power = 1.231, 	.area = 1900.2},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_8VH, .power = 0.791, 	.area = 1284.9},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_GPF, .power = 0.482, 	.area = 746.2},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_HGP, .power = 0.106, 	.area = 269.4},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_HF0, .power = 0.0003,	.area = 2.3},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_CG0, .power = 2.176, 	.area = 3128.4},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_4YJ, .power = 2.106, 	.area = 2992.3},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_3HJ, .power = 1.893, 	.area = 2782.9},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_GPE, .power = 0.401, 	.area = 642},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_H6G, .power = 0.101, 	.area = 244},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_FGL, .power = 2.149, 	.area = 3064.1},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_A7Z, .power = 2.002, 	.area = 2889.5},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_EHF, .power = 1.783, 	.area = 2589.1},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_3BB, .power = 0.984, 	.area = 1599.4},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_6NY, .power = 0.512, 	.area = 872.9},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_HGK, .power = 0.176, 	.area = 385.8},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_FGN, .power = 2.184, 	.area = 3084.2},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_60L, .power = 2.173, 	.area = 3052.3},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_34S, .power = 2.153, 	.area = 3086.1},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_0ZG, .power = 1.984, 	.area = 3094.1},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_GZ7, .power = 1.859, 	.area = 2332.4},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_52B, .power = 2.18,	   .area = 3109.1},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_C37, .power = 2.087, 	.area = 2977.2},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_679, .power = 1.855, 	.area = 2685.3},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_94L, .power = 1.23,  	.area = 2044.7},
   {.fptr = evoapproxlib::evoapprox_t::mul16u_G9P, .power = 0.00063,  .area = 4.7},
};

evoapproxlib::evoapprox_t::add_16s_t evoapproxlib::evoapprox_t::add_16s_array[add_16s_N] = {
   {.fptr = evoapproxlib::evoapprox_t::add16se_exa, .power = 1,	   .area = 200},
   {.fptr = evoapproxlib::evoapprox_t::add16se_2DN, .power = 0.072,	.area = 141.7},
   {.fptr = evoapproxlib::evoapprox_t::add16se_26Q, .power = 0.071,	.area = 138},
   {.fptr = evoapproxlib::evoapprox_t::add16se_20J, .power = 0.066,	.area = 129.1},
   {.fptr = evoapproxlib::evoapprox_t::add16se_2JY, .power = 0.062,	.area = 120.1},
   {.fptr = evoapproxlib::evoapprox_t::add16se_28H, .power = 0.062,	.area = 127.6},
   {.fptr = evoapproxlib::evoapprox_t::add16se_2GE, .power = 0.052,	.area = 106.1},
   {.fptr = evoapproxlib::evoapprox_t::add16se_29A, .power = 0.052,	.area = 104.7},
   {.fptr = evoapproxlib::evoapprox_t::add16se_2JB, .power = 0.048,	.area = 97.1},
   {.fptr = evoapproxlib::evoapprox_t::add16se_2AS, .power = 0.043,	.area = 85.9},
   {.fptr = evoapproxlib::evoapprox_t::add16se_1Y7, .power = 0.057,	.area = 111.2},
   {.fptr = evoapproxlib::evoapprox_t::add16se_2E1, .power = 0.043,	.area = 86.8},
   {.fptr = evoapproxlib::evoapprox_t::add16se_2KV, .power = 0.066,	.area = 130.5},
   {.fptr = evoapproxlib::evoapprox_t::add16se_294, .power = 0.057,	.area = 113.6},
   {.fptr = evoapproxlib::evoapprox_t::add16se_25S, .power = 0.051,	.area = 112.2},
   {.fptr = evoapproxlib::evoapprox_t::add16se_2LJ, .power = 0.075,	.area = 159.6},
   {.fptr = evoapproxlib::evoapprox_t::add16se_2H0, .power = 0.072,	.area = 148.3},
   {.fptr = evoapproxlib::evoapprox_t::add16se_2BY, .power = 0.063,	.area = 126.2},
   {.fptr = evoapproxlib::evoapprox_t::add16se_259, .power = 0.062,	.area = 121.5},
};

evoapproxlib::evoapprox_t::mul_16s_t evoapproxlib::evoapprox_t::mul_16s_array[mul_16s_N] = {
   {.fptr = evoapproxlib::evoapprox_t::mul16s_exa,	.power = 4, 	   .area = 4000},
   {.fptr = evoapproxlib::evoapprox_t::mul16s_HEB,	.power = 2.4,	   .area = 2614},
   {.fptr = evoapproxlib::evoapprox_t::mul16s_HDG,	.power = 2.13,	   .area = 2576.5},
   {.fptr = evoapproxlib::evoapprox_t::mul16s_HFZ,	.power = 1.483,	.area = 1935.9},
   {.fptr = evoapproxlib::evoapprox_t::mul16s_GAT,	.power = 1.396,	.area = 1932.6},
   {.fptr = evoapproxlib::evoapprox_t::mul16s_HHP,	.power = 1.775,	.area = 2031.1},
   {.fptr = evoapproxlib::evoapprox_t::mul16s_GK2,	.power = 2.124,	.area = 2640.3},
   {.fptr = evoapproxlib::evoapprox_t::mul16s_G80,	.power = 2.326,	.area = 2764.2},
   {.fptr = evoapproxlib::evoapprox_t::mul16s_G7Z,	.power = 2.325,	.area = 2760.4},
   {.fptr = evoapproxlib::evoapprox_t::mul16s_G7F,	.power = 1.961,	.area = 2495.7},
};

evoapproxlib::evoapprox_t evoapproxlib::evoapprox_t::operator+(const evoapprox_t& rhs) const
{
   assert (approx_component == rhs.approx_component);
   // If both operands are signed or both are unsigned, the operand with lesser
   // conversion rank is converted to the operand with the greater integer
   // conversion rank.
   if (is_signed() && rhs.is_signed())
   {
      if (internal_type == int8 && rhs.internal_type == int8)
         return evoapprox_t(
            internal_type > rhs.internal_type ? internal_type : rhs.internal_type,
            //(uint64_t)((int64_t) actual_value + (int64_t) rhs.actual_value), 
            add8s(actual_value, rhs.actual_value),
            approx_component);
      return evoapprox_t(
            internal_type > rhs.internal_type ? internal_type : rhs.internal_type,
            //(uint64_t)((int64_t) actual_value + (int64_t) rhs.actual_value), 
            add16s(actual_value, rhs.actual_value),
            approx_component);
   }

   if (!is_signed() && !rhs.is_signed())
   {
      if (internal_type == uint8 && rhs.internal_type == uint8)
         return evoapprox_t(
            internal_type > rhs.internal_type ? internal_type : rhs.internal_type,
            //(uint64_t)((int64_t) actual_value + (int64_t) rhs.actual_value), 
            add8u(actual_value, rhs.actual_value),
            approx_component);
      return evoapprox_t(
            internal_type > rhs.internal_type ? internal_type : rhs.internal_type,
            //(uint64_t)((int64_t) actual_value + (int64_t) rhs.actual_value), 
            add16u(actual_value, rhs.actual_value),
            approx_component);
   }


   // or... (read below!)
   //if ( !is_signed() && !rhs.is_signed())
   //  return ((uint64_t) (actual_value & apprx_mask)) < ((uint64_t) (rhs.actual_value & rhs.apprx_mask));
   // Otherwise, if the unsigned operand's conversion rank is greater or equal to
   // the conversion rank of the signed operand, the signed operand is converted
   // to the unsigned operand's type.
   // In our case, this condition equals to the following.
   // Otherwise, both operands are converted to the unsigned counterpart of the
   // signed operand's type.
   // For convenience, operands are converted both to uint64_t.
   return evoapprox_t(
      internal_type > rhs.internal_type ? internal_type : rhs.internal_type,
      add16u(actual_value, rhs.actual_value), 
      approx_component);
}

evoapproxlib::evoapprox_t evoapproxlib::evoapprox_t::operator*(const evoapprox_t& rhs) const
{
   assert (approx_component == rhs.approx_component);
   // If both operands are signed or both are unsigned, the operand with lesser
   // conversion rank is converted to the operand with the greater integer
   // conversion rank.
   if (is_signed() && rhs.is_signed())
   {
      if (internal_type == int8 && rhs.internal_type == int8)
         return evoapprox_t(
            internal_type > rhs.internal_type ? internal_type : rhs.internal_type,
            //(uint64_t)((int64_t) actual_value + (int64_t) rhs.actual_value), 
            mul8s(actual_value, rhs.actual_value),
            approx_component);
      return evoapprox_t(
            internal_type > rhs.internal_type ? internal_type : rhs.internal_type,
            //(uint64_t)((int64_t) actual_value + (int64_t) rhs.actual_value), 
            mul16s(actual_value, rhs.actual_value),
            approx_component);
   }

   if (!is_signed() && !rhs.is_signed())
   {
      if (internal_type == uint8 && rhs.internal_type == uint8)
         return evoapprox_t(
            internal_type > rhs.internal_type ? internal_type : rhs.internal_type,
            //(uint64_t)((int64_t) actual_value + (int64_t) rhs.actual_value), 
            mul8u(actual_value, rhs.actual_value),
            approx_component);
      return evoapprox_t(
            internal_type > rhs.internal_type ? internal_type : rhs.internal_type,
            //(uint64_t)((int64_t) actual_value + (int64_t) rhs.actual_value), 
            mul16u(actual_value, rhs.actual_value),
            approx_component);
   }


   // or... (read below!)
   //if ( !is_signed() && !rhs.is_signed())
   //  return ((uint64_t) (actual_value & apprx_mask)) < ((uint64_t) (rhs.actual_value & rhs.apprx_mask));
   // Otherwise, if the unsigned operand's conversion rank is greater or equal to
   // the conversion rank of the signed operand, the signed operand is converted
   // to the unsigned operand's type.
   // In our case, this condition equals to the following.
   // Otherwise, both operands are converted to the unsigned counterpart of the
   // signed operand's type.
   // For convenience, operands are converted both to uint64_t.
   return evoapprox_t(
      internal_type > rhs.internal_type ? internal_type : rhs.internal_type,
      mul16u(actual_value, rhs.actual_value), 
      approx_component);
}

float evoapproxlib::evoapprox_t::getAddArea() const {
   switch (internal_type) {
      case int8:   return  add8s_area();
      case uint8:  return  add8u_area();
      case int16:  return add16s_area();
      case uint16: return add16u_area();
   }
}

float evoapproxlib::evoapprox_t::getAddPower() const {
   switch (internal_type) {
      case int8:   return  add8s_power();
      case uint8:  return  add8u_power();
      case int16:  return add16s_power();
      case uint16: return add16u_power();
   }
}

float evoapproxlib::evoapprox_t::getMulArea() const {
   switch (internal_type) {
      case int8:   return  mul8s_area();
      case uint8:  return  mul8u_area();
      case int16:  return  mul16s_area();
      case uint16: return  mul16u_area();
   }
}

float evoapproxlib::evoapprox_t::getMulPower() const {
   switch (internal_type) {
      case int8:   return  mul8s_power();
      case uint8:  return  mul8u_power();
      case int16:  return  mul16s_power();
      case uint16: return  mul16u_power();
   }
}

bool evoapproxlib::evoapprox_t::is_signed() const
{
   if (internal_type == int8 || internal_type == int16)
      return true;
   return false;
}

int8_t evoapproxlib::evoapprox_t::add8s (int8_t addendum1, int8_t addendum2) const {
  assert (approx_component < add_8s_N);
  return add_8s_array[approx_component].fptr(addendum1, addendum2);
}

float evoapproxlib::evoapprox_t::add8s_power() const {
  assert (approx_component < add_8s_N);
  return add_8s_array[approx_component].power;
}

float evoapproxlib::evoapprox_t::add8s_area() const {
  assert (approx_component < add_8s_N);
  return add_8s_array[approx_component].area;
}

int16_t evoapproxlib::evoapprox_t::mul8s (int8_t multiplicand, int8_t multiplier) const {
  assert (approx_component < mult_8s_N);
  return mult_8s_array[approx_component].fptr(multiplicand, multiplier);
}

float evoapproxlib::evoapprox_t::mul8s_power() const
{
  assert (approx_component < mult_8s_N);
  return mult_8s_array[approx_component].power;
}

float evoapproxlib::evoapprox_t::mul8s_area() const
{
  assert (approx_component < mult_8s_N);
  return mult_8s_array[approx_component].area;
}

uint8_t evoapproxlib::evoapprox_t::add8u (uint8_t addendum1, uint8_t addendum2) const {
  assert (approx_component < add_8u_N);
  return add_8u_array[approx_component].fptr(addendum1, addendum2);
}
float evoapproxlib::evoapprox_t::add8u_power() const {
  assert (approx_component < add_8u_N);
  return add_8u_array[approx_component].power;
}

float evoapproxlib::evoapprox_t::add8u_area() const {
  assert (approx_component < add_8u_N);
  return add_8u_array[approx_component].area;
}

uint16_t evoapproxlib::evoapprox_t::mul8u (uint8_t multiplicand, uint8_t multiplier) const
{
  assert (approx_component < mult_8u_N);
  return mult_8u_array[approx_component].fptr(multiplicand, multiplier);
}

float evoapproxlib::evoapprox_t::mul8u_power() const
{
  assert (approx_component < mult_8u_N);
  return mult_8u_array[approx_component].power;
}

float evoapproxlib::evoapprox_t::mul8u_area() const
{
  assert (approx_component < mult_8u_N);
  return mult_8u_array[approx_component].area;
}

int16_t  evoapproxlib::evoapprox_t::add16s (int16_t addendum1, int16_t addendum2) const {
   assert (approx_component < add_16s_N);
   return add_16s_array[approx_component].fptr(addendum1, addendum2);
}

float   evoapproxlib::evoapprox_t::add16s_power() const {
   assert (approx_component < add_16s_N);
   return add_16s_array[approx_component].power;
}

float   evoapproxlib::evoapprox_t::add16s_area() const {
   assert (approx_component < add_16s_N);
   return add_16s_array[approx_component].area;
}

int32_t  evoapproxlib::evoapprox_t::mul16s (int16_t multiplicand, int16_t multiplier) const {
   //printf("%s (%d) %d * %d = %d\n", __func__, approx_component, multiplicand, multiplier, mul_16s_array[approx_component].fptr(multiplicand, multiplier));
   assert (approx_component < mul_16s_N);
   return mul_16s_array[approx_component].fptr(multiplicand, multiplier);
}

float   evoapproxlib::evoapprox_t::mul16s_power() const {
   assert (approx_component < mul_16s_N);
   return mul_16s_array[approx_component].power;
}

float   evoapproxlib::evoapprox_t::mul16s_area() const {
   assert (approx_component < mul_16s_N);
   return mul_16s_array[approx_component].area;
}

uint16_t evoapproxlib::evoapprox_t::add16u (uint16_t addendum1, uint16_t addendum2) const {
   assert (approx_component < add_16u_N);
   return add_16u_array[approx_component].fptr(addendum1, addendum2);
}

float   evoapproxlib::evoapprox_t::add16u_power() const {
   assert (approx_component < add_16u_N);
   return add_16u_array[approx_component].power;
}

float   evoapproxlib::evoapprox_t::add16u_area() const {
   assert (approx_component < add_16u_N);
   return add_16u_array[approx_component].area;
}

uint32_t evoapproxlib::evoapprox_t::mul16u (uint16_t multiplicand, uint16_t multiplier) const {
   //printf("%s (%d) %d * %d = %d \n", __func__, approx_component, multiplicand, multiplier, mul_16u_array[approx_component].fptr(multiplicand, multiplier));
   assert (approx_component < mul_16u_N);
   return mul_16u_array[approx_component].fptr(multiplicand, multiplier);
}

float   evoapproxlib::evoapprox_t::mul16u_power() const {
   assert (approx_component < mul_16u_N);
   return mul_16u_array[approx_component].power;
}

float   evoapproxlib::evoapprox_t::mul16u_area() const {
   assert (approx_component < mul_16u_N);
   return mul_16u_array[approx_component].area;
}

uint64_t evoapproxlib::evoapprox_t::add8u_exa (uint64_t a, uint64_t b)
{
  return a + b;
}

uint64_t evoapproxlib::evoapprox_t::mul8u_exa (const uint64_t B,const uint64_t A)
{
  return A * B;
}

uint64_t evoapproxlib::evoapprox_t::add8s_exa (const uint64_t B,const uint64_t A)
{
  return A + B;
}

int16_t evoapproxlib::evoapprox_t::mul8s_exa (int8_t A, int8_t B)
{
  return A * B;
}

uint64_t evoapproxlib::evoapprox_t::add16u_exa (uint64_t a, uint64_t b)
{
  return a + b;
}

uint32_t evoapproxlib::evoapprox_t::mul16u_exa (const uint16_t B,const uint16_t A)
{
  return A * B;
}

uint64_t evoapproxlib::evoapprox_t::add16se_exa (const uint64_t B,const uint64_t A)
{
  return A + B;
}

int32_t evoapproxlib::evoapprox_t::mul16s_exa (int16_t A, int16_t B)
{
  return A * B;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 44.77 %
// MAE = 57 
// WCE% = 100.00 %
// WCE = 128 
// WCRE% = 6200.00 %
// EP% = 85.42 %
// MRE% = 146.36 %
// MSE = 5003 
// PDK45_PWR = 0.020 mW
// PDK45_AREA = 57.7 um2
// PDK45_DELAY = 0.45 ns

uint64_t evoapproxlib::evoapprox_t::add8s_70Z(const uint64_t B,const uint64_t A)
{
   uint64_t dout_16, dout_17, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_46, dout_47, dout_48, dout_49;
   uint64_t O;

   dout_16=((A >> 0)&1)^((B >> 0)&1);
   dout_17=((A >> 0)&1)&((B >> 0)&1);
   dout_18=((A >> 1)&1)^((B >> 1)&1);
   dout_19=((A >> 1)&1)&((B >> 1)&1);
   dout_20=dout_18&dout_17;
   dout_21=(dout_18&dout_17)^0xFFFFFFFFFFFFFFFFU;
   dout_22=dout_19|dout_20;
   dout_23=((A >> 2)&1)^((B >> 2)&1);
   dout_24=((A >> 2)&1)&((B >> 2)&1);
   dout_25=dout_23&dout_22;
   dout_26=dout_23^dout_22;
   dout_27=dout_24|dout_25;
   dout_28=((A >> 3)&1)^((B >> 3)&1);
   dout_29=((A >> 3)&1)&((B >> 3)&1);
   dout_30=dout_28&dout_27;
   dout_31=dout_28^dout_27;
   dout_32=dout_29|dout_30;
   dout_33=((A >> 4)&1)^((B >> 4)&1);
   dout_34=((A >> 4)&1)&((B >> 4)&1);
   dout_35=dout_33&dout_32;
   dout_36=dout_33^dout_32;
   dout_37=dout_34|dout_35;
   dout_38=((A >> 5)&1)^((B >> 5)&1);
   dout_39=((A >> 5)&1)&((B >> 5)&1);
   dout_40=dout_38&dout_34;
   dout_41=dout_38|dout_37;
   dout_42=(dout_39&dout_40)^0xFFFFFFFFFFFFFFFFU;
   dout_43=((A >> 6)&1)^((A >> 7)&1);
   dout_46=((A >> 7)&1)|dout_42;
   dout_47=((A >> 6)&1)|dout_43;
   dout_48=(((A >> 7)&1)&((B >> 7)&1))^0xFFFFFFFFFFFFFFFFU;
   dout_49=dout_48|dout_47;

   O = 0;
   O |= (dout_16&1) << 0;
   O |= (dout_21&1) << 1;
   O |= (dout_26&1) << 2;
   O |= (dout_31&1) << 3;
   O |= (dout_36&1) << 4;
   O |= (dout_41&1) << 5;
   O |= (dout_46&1) << 6;
   O |= (dout_49&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek and R. Hrbacek, "Role of circuit representation in evolutionary design of energy-efficient approximate circuits" in IET Computers & Digital Techniques, vol. 12, no. 4, pp. 139-149, 7 2018. doi: 10.1049/iet-cdt.2017.0188 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.00 %
// MAE = 0 
// WCE% = 0.00 %
// WCE = 0 
// WCRE% = 0.00 %
// EP% = 0.00 %
// MRE% = 0.00 %
// MSE = 0 
// PDK45_PWR = 0.033 mW
// PDK45_AREA = 70.4 um2
// PDK45_DELAY = 0.63 ns


uint64_t evoapproxlib::evoapprox_t::add8u_0FP(uint64_t a, uint64_t b) {
  uint64_t o = 0;
  int n_198=0, n_36=0, n_189=0, n_195=0, n_42=0, n_192=0, n_23=0, n_21=0, n_20=0, n_27=0;
  int n_40=0, n_24=0, n_48=0, n_147=0, n_66=0, n_60=0, n_201=0, n_108=0, n_129=0, n_39=0;
  int n_207=0, n_204=0, n_120=0, n_8=0, n_9=0, n_4=0, n_5=0, n_6=0, n_7=0, n_0=0;
  int n_1=0, n_2=0, n_3=0, n_33=0, n_34=0, n_18=0, n_19=0, n_16=0, n_17=0, n_14=0;
  int n_15=0, n_12=0, n_13=0, n_10=0, n_11=0, n_114=0, n_45=0, n_78=0, n_93=0, n_111=0;
  int n_150=0, n_75=0, n_51=0, n_57=0, n_54=0, n_46=0, n_213=0, n_210=0, n_132=0;
  n_0 = (a >> 0) & 0x1;
  n_1 = (a >> 1) & 0x1;
  n_2 = (a >> 2) & 0x1;
  n_3 = (a >> 3) & 0x1;
  n_4 = (a >> 4) & 0x1;
  n_5 = (a >> 5) & 0x1;
  n_6 = (a >> 6) & 0x1;
  n_7 = (a >> 7) & 0x1;
  n_8 = (b >> 0) & 0x1;
  n_9 = (b >> 1) & 0x1;
  n_10 = (b >> 2) & 0x1;
  n_11 = (b >> 3) & 0x1;
  n_12 = (b >> 4) & 0x1;
  n_13 = (b >> 5) & 0x1;
  n_14 = (b >> 6) & 0x1;
  n_15 = (b >> 7) & 0x1;
  n_16 = n_2 | n_10;
  n_17 = n_9 | n_1;
  n_18 = n_0 & n_8;
  n_19 = n_13 | n_5;
  n_20 = n_2 & n_10;
  n_21 = n_1 ^ n_9;
  n_23 = n_18 & n_17;
  n_24 = n_1 & n_9;
  n_27 = n_10 ^ n_2;
  n_33 = n_3 ^ n_11;
  n_34 = n_14 | n_6;
  n_36 = n_3 & n_11;
  n_39 = n_4 ^ n_12;
  n_40 = n_11 | n_3;
  n_42 = n_4 & n_12;
  n_45 = n_5 ^ n_13;
  n_46 = n_0 ^ n_8;
  n_48 = n_5 & n_13;
  n_51 = n_6 ^ n_14;
  n_54 = n_6 & n_14;
  n_57 = n_7 ^ n_15;
  n_60 = n_7 & n_15;
  n_66 = n_23 | n_24;
  n_75 = n_66 & n_16;
  n_78 = n_20 | n_75;
  n_93 = n_78 & n_40;
  n_108 = n_93 | n_36;
  n_111 = n_108 & n_39;
  n_114 = ~(n_111 | n_42);
  n_120 = ~n_114;
  n_129 = n_120 & n_19;
  n_132 = n_129 | n_48;
  n_147 = n_132 & n_34;
  n_150 = n_147 | n_54;
  n_189 = n_21 ^ n_18;
  n_192 = n_27 ^ n_66;
  n_195 = n_33 ^ n_78;
  n_198 = n_39 ^ n_108;
  n_201 = n_45 ^ n_120;
  n_204 = n_51 ^ n_132;
  n_207 = n_57 ^ n_150;
  n_210 = n_57 & n_150;
  n_213 = n_60 | n_210;
  o |= (n_46 & 0x01) << 0;
  o |= (n_189 & 0x01) << 1;
  o |= (n_192 & 0x01) << 2;
  o |= (n_195 & 0x01) << 3;
  o |= (n_198 & 0x01) << 4;
  o |= (n_201 & 0x01) << 5;
  o |= (n_204 & 0x01) << 6;
  o |= (n_207 & 0x01) << 7;
  o |= (n_213 & 0x01) << 8;
  return o;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.051 %
// MAE = 33 
// WCE% = 0.21 %
// WCE = 137 
// WCRE% = 900.00 %
// EP% = 74.80 %
// MRE% = 2.73 %
// MSE = 2746 
// PDK45_PWR = 0.363 mW
// PDK45_AREA = 635.0 um2
// PDK45_DELAY = 1.37 ns


int16_t evoapproxlib::evoapprox_t::mul8s_1KR6(int8_t A, int8_t B)
{
  int16_t P, P_;
  uint8_t tmp, C_1_6,C_1_7,C_2_1,C_2_2,C_2_3,C_2_4,C_2_5,C_2_6,C_2_7,C_3_0,C_3_1,C_3_2,C_3_3,C_3_4,C_3_5,C_3_6,C_3_7,C_4_0,C_4_1,C_4_2,C_4_3,C_4_4,C_4_5,C_4_6,C_4_7,C_5_0,C_5_1,C_5_2,C_5_3,C_5_4,C_5_5,C_5_6,C_5_7,C_6_0,C_6_1,C_6_2,C_6_3,C_6_4,C_6_5,C_6_6,C_6_7,C_7_0,C_7_1,C_7_2,C_7_3,C_7_4,C_7_5,C_7_6,C_7_7,C_8_0,C_8_1,C_8_2,C_8_3,C_8_4,C_8_5,C_8_6,C_8_7,S_0_7,S_1_2,S_1_3,S_1_4,S_1_5,S_1_6,S_1_7,S_2_1,S_2_2,S_2_3,S_2_4,S_2_5,S_2_6,S_2_7,S_3_0,S_3_1,S_3_2,S_3_3,S_3_4,S_3_5,S_3_6,S_3_7,S_4_0,S_4_1,S_4_2,S_4_3,S_4_4,S_4_5,S_4_6,S_4_7,S_5_0,S_5_1,S_5_2,S_5_3,S_5_4,S_5_5,S_5_6,S_5_7,S_6_0,S_6_1,S_6_2,S_6_3,S_6_4,S_6_5,S_6_6,S_6_7,S_7_0,S_7_1,S_7_2,S_7_3,S_7_4,S_7_5,S_7_6,S_7_7,S_8_0,S_8_1,S_8_2,S_8_3,S_8_4,S_8_5,S_8_6,S_8_7;
  S_0_7 = 1;
  S_1_2 = (((A>>1)&1) & ((B>>2)&1));
  S_1_3 = (((A>>1)&1) & ((B>>3)&1));
  S_1_4 = (((A>>1)&1) & ((B>>4)&1));
  S_1_5 = (((A>>1)&1) & ((B>>5)&1));
  S_1_6 = S_0_7^(((A>>1)&1) & ((B>>6)&1));
  C_1_6 = S_0_7&(((A>>1)&1) & ((B>>6)&1));
  S_1_7 = 1^(((((A>>1)&1) & ((B>>7)&1)))^1);
  C_1_7 = 1&(((((A>>1)&1) & ((B>>7)&1)))^1);
  S_2_1 = S_1_2^(((A>>2)&1) & ((B>>1)&1));
  C_2_1 = S_1_2&(((A>>2)&1) & ((B>>1)&1));
  S_2_2 = S_1_3^(((A>>2)&1) & ((B>>2)&1));
  C_2_2 = S_1_3&(((A>>2)&1) & ((B>>2)&1));
  S_2_3 = S_1_4^(((A>>2)&1) & ((B>>3)&1));
  C_2_3 = S_1_4&(((A>>2)&1) & ((B>>3)&1));
  S_2_4 = S_1_5^(((A>>2)&1) & ((B>>4)&1));
  C_2_4 = S_1_5&(((A>>2)&1) & ((B>>4)&1));
  S_2_5 = S_1_6^(((A>>2)&1) & ((B>>5)&1));
  C_2_5 = S_1_6&(((A>>2)&1) & ((B>>5)&1));
  tmp = S_1_7^C_1_6;
  S_2_6 = tmp^(((A>>2)&1) & ((B>>6)&1));
  C_2_6 = (tmp&(((A>>2)&1) & ((B>>6)&1)))|(S_1_7&C_1_6);
  S_2_7 = C_1_7^(((((A>>2)&1) & ((B>>7)&1)))^1);
  C_2_7 = C_1_7&(((((A>>2)&1) & ((B>>7)&1)))^1);
  S_3_0 = S_2_1^(((A>>3)&1) & ((B>>0)&1));
  C_3_0 = S_2_1&(((A>>3)&1) & ((B>>0)&1));
  tmp = S_2_2^C_2_1;
  S_3_1 = tmp^(((A>>3)&1) & ((B>>1)&1));
  C_3_1 = (tmp&(((A>>3)&1) & ((B>>1)&1)))|(S_2_2&C_2_1);
  tmp = S_2_3^C_2_2;
  S_3_2 = tmp^(((A>>3)&1) & ((B>>2)&1));
  C_3_2 = (tmp&(((A>>3)&1) & ((B>>2)&1)))|(S_2_3&C_2_2);
  tmp = S_2_4^C_2_3;
  S_3_3 = tmp^(((A>>3)&1) & ((B>>3)&1));
  C_3_3 = (tmp&(((A>>3)&1) & ((B>>3)&1)))|(S_2_4&C_2_3);
  tmp = S_2_5^C_2_4;
  S_3_4 = tmp^(((A>>3)&1) & ((B>>4)&1));
  C_3_4 = (tmp&(((A>>3)&1) & ((B>>4)&1)))|(S_2_5&C_2_4);
  tmp = S_2_6^C_2_5;
  S_3_5 = tmp^(((A>>3)&1) & ((B>>5)&1));
  C_3_5 = (tmp&(((A>>3)&1) & ((B>>5)&1)))|(S_2_6&C_2_5);
  tmp = S_2_7^C_2_6;
  S_3_6 = tmp^(((A>>3)&1) & ((B>>6)&1));
  C_3_6 = (tmp&(((A>>3)&1) & ((B>>6)&1)))|(S_2_7&C_2_6);
  S_3_7 = C_2_7^(((((A>>3)&1) & ((B>>7)&1)))^1);
  C_3_7 = C_2_7&(((((A>>3)&1) & ((B>>7)&1)))^1);
  tmp = S_3_1^C_3_0;
  S_4_0 = tmp^(((A>>4)&1) & ((B>>0)&1));
  C_4_0 = (tmp&(((A>>4)&1) & ((B>>0)&1)))|(S_3_1&C_3_0);
  tmp = S_3_2^C_3_1;
  S_4_1 = tmp^(((A>>4)&1) & ((B>>1)&1));
  C_4_1 = (tmp&(((A>>4)&1) & ((B>>1)&1)))|(S_3_2&C_3_1);
  tmp = S_3_3^C_3_2;
  S_4_2 = tmp^(((A>>4)&1) & ((B>>2)&1));
  C_4_2 = (tmp&(((A>>4)&1) & ((B>>2)&1)))|(S_3_3&C_3_2);
  tmp = S_3_4^C_3_3;
  S_4_3 = tmp^(((A>>4)&1) & ((B>>3)&1));
  C_4_3 = (tmp&(((A>>4)&1) & ((B>>3)&1)))|(S_3_4&C_3_3);
  tmp = S_3_5^C_3_4;
  S_4_4 = tmp^(((A>>4)&1) & ((B>>4)&1));
  C_4_4 = (tmp&(((A>>4)&1) & ((B>>4)&1)))|(S_3_5&C_3_4);
  tmp = S_3_6^C_3_5;
  S_4_5 = tmp^(((A>>4)&1) & ((B>>5)&1));
  C_4_5 = (tmp&(((A>>4)&1) & ((B>>5)&1)))|(S_3_6&C_3_5);
  tmp = S_3_7^C_3_6;
  S_4_6 = tmp^(((A>>4)&1) & ((B>>6)&1));
  C_4_6 = (tmp&(((A>>4)&1) & ((B>>6)&1)))|(S_3_7&C_3_6);
  S_4_7 = C_3_7^(((((A>>4)&1) & ((B>>7)&1)))^1);
  C_4_7 = C_3_7&(((((A>>4)&1) & ((B>>7)&1)))^1);
  tmp = S_4_1^C_4_0;
  S_5_0 = tmp^(((A>>5)&1) & ((B>>0)&1));
  C_5_0 = (tmp&(((A>>5)&1) & ((B>>0)&1)))|(S_4_1&C_4_0);
  tmp = S_4_2^C_4_1;
  S_5_1 = tmp^(((A>>5)&1) & ((B>>1)&1));
  C_5_1 = (tmp&(((A>>5)&1) & ((B>>1)&1)))|(S_4_2&C_4_1);
  tmp = S_4_3^C_4_2;
  S_5_2 = tmp^(((A>>5)&1) & ((B>>2)&1));
  C_5_2 = (tmp&(((A>>5)&1) & ((B>>2)&1)))|(S_4_3&C_4_2);
  tmp = S_4_4^C_4_3;
  S_5_3 = tmp^(((A>>5)&1) & ((B>>3)&1));
  C_5_3 = (tmp&(((A>>5)&1) & ((B>>3)&1)))|(S_4_4&C_4_3);
  tmp = S_4_5^C_4_4;
  S_5_4 = tmp^(((A>>5)&1) & ((B>>4)&1));
  C_5_4 = (tmp&(((A>>5)&1) & ((B>>4)&1)))|(S_4_5&C_4_4);
  tmp = S_4_6^C_4_5;
  S_5_5 = tmp^(((A>>5)&1) & ((B>>5)&1));
  C_5_5 = (tmp&(((A>>5)&1) & ((B>>5)&1)))|(S_4_6&C_4_5);
  tmp = S_4_7^C_4_6;
  S_5_6 = tmp^(((A>>5)&1) & ((B>>6)&1));
  C_5_6 = (tmp&(((A>>5)&1) & ((B>>6)&1)))|(S_4_7&C_4_6);
  S_5_7 = C_4_7^(((((A>>5)&1) & ((B>>7)&1)))^1);
  C_5_7 = C_4_7&(((((A>>5)&1) & ((B>>7)&1)))^1);
  tmp = S_5_1^C_5_0;
  S_6_0 = tmp^(((A>>6)&1) & ((B>>0)&1));
  C_6_0 = (tmp&(((A>>6)&1) & ((B>>0)&1)))|(S_5_1&C_5_0);
  tmp = S_5_2^C_5_1;
  S_6_1 = tmp^(((A>>6)&1) & ((B>>1)&1));
  C_6_1 = (tmp&(((A>>6)&1) & ((B>>1)&1)))|(S_5_2&C_5_1);
  tmp = S_5_3^C_5_2;
  S_6_2 = tmp^(((A>>6)&1) & ((B>>2)&1));
  C_6_2 = (tmp&(((A>>6)&1) & ((B>>2)&1)))|(S_5_3&C_5_2);
  tmp = S_5_4^C_5_3;
  S_6_3 = tmp^(((A>>6)&1) & ((B>>3)&1));
  C_6_3 = (tmp&(((A>>6)&1) & ((B>>3)&1)))|(S_5_4&C_5_3);
  tmp = S_5_5^C_5_4;
  S_6_4 = tmp^(((A>>6)&1) & ((B>>4)&1));
  C_6_4 = (tmp&(((A>>6)&1) & ((B>>4)&1)))|(S_5_5&C_5_4);
  tmp = S_5_6^C_5_5;
  S_6_5 = tmp^(((A>>6)&1) & ((B>>5)&1));
  C_6_5 = (tmp&(((A>>6)&1) & ((B>>5)&1)))|(S_5_6&C_5_5);
  tmp = S_5_7^C_5_6;
  S_6_6 = tmp^(((A>>6)&1) & ((B>>6)&1));
  C_6_6 = (tmp&(((A>>6)&1) & ((B>>6)&1)))|(S_5_7&C_5_6);
  S_6_7 = C_5_7^(((((A>>6)&1) & ((B>>7)&1)))^1);
  C_6_7 = C_5_7&(((((A>>6)&1) & ((B>>7)&1)))^1);
  tmp = S_6_1^C_6_0;
  S_7_0 = tmp^(((((A>>7)&1) & ((B>>0)&1)))^1);
  C_7_0 = (tmp&(((((A>>7)&1) & ((B>>0)&1)))^1))|(S_6_1&C_6_0);
  tmp = S_6_2^C_6_1;
  S_7_1 = tmp^(((((A>>7)&1) & ((B>>1)&1)))^1);
  C_7_1 = (tmp&(((((A>>7)&1) & ((B>>1)&1)))^1))|(S_6_2&C_6_1);
  tmp = S_6_3^C_6_2;
  S_7_2 = tmp^(((((A>>7)&1) & ((B>>2)&1)))^1);
  C_7_2 = (tmp&(((((A>>7)&1) & ((B>>2)&1)))^1))|(S_6_3&C_6_2);
  tmp = S_6_4^C_6_3;
  S_7_3 = tmp^(((((A>>7)&1) & ((B>>3)&1)))^1);
  C_7_3 = (tmp&(((((A>>7)&1) & ((B>>3)&1)))^1))|(S_6_4&C_6_3);
  tmp = S_6_5^C_6_4;
  S_7_4 = tmp^(((((A>>7)&1) & ((B>>4)&1)))^1);
  C_7_4 = (tmp&(((((A>>7)&1) & ((B>>4)&1)))^1))|(S_6_5&C_6_4);
  tmp = S_6_6^C_6_5;
  S_7_5 = tmp^(((((A>>7)&1) & ((B>>5)&1)))^1);
  C_7_5 = (tmp&(((((A>>7)&1) & ((B>>5)&1)))^1))|(S_6_6&C_6_5);
  tmp = S_6_7^C_6_6;
  S_7_6 = tmp^(((((A>>7)&1) & ((B>>6)&1)))^1);
  C_7_6 = (tmp&(((((A>>7)&1) & ((B>>6)&1)))^1))|(S_6_7&C_6_6);
  S_7_7 = C_6_7^(((A>>7)&1) & ((B>>7)&1));
  C_7_7 = C_6_7&(((A>>7)&1) & ((B>>7)&1));
  S_8_0 = S_7_1^C_7_0;
  C_8_0 = S_7_1&C_7_0;
  tmp = S_7_2^C_8_0;
  S_8_1 = tmp^C_7_1;
  C_8_1 = (tmp&C_7_1)|(S_7_2&C_8_0);
  tmp = S_7_3^C_8_1;
  S_8_2 = tmp^C_7_2;
  C_8_2 = (tmp&C_7_2)|(S_7_3&C_8_1);
  tmp = S_7_4^C_8_2;
  S_8_3 = tmp^C_7_3;
  C_8_3 = (tmp&C_7_3)|(S_7_4&C_8_2);
  tmp = S_7_5^C_8_3;
  S_8_4 = tmp^C_7_4;
  C_8_4 = (tmp&C_7_4)|(S_7_5&C_8_3);
  tmp = S_7_6^C_8_4;
  S_8_5 = tmp^C_7_5;
  C_8_5 = (tmp&C_7_5)|(S_7_6&C_8_4);
  tmp = S_7_7^C_8_5;
  S_8_6 = tmp^C_7_6;
  C_8_6 = (tmp&C_7_6)|(S_7_7&C_8_5);
  tmp = 1^C_8_6;
  S_8_7 = tmp^C_7_7;
  C_8_7 = (tmp&C_7_7)|(1&C_8_6);
  P = 0;
  P |= (S_3_0 & 1) << 3;
  P |= (S_4_0 & 1) << 4;
  P |= (S_5_0 & 1) << 5;
  P |= (S_6_0 & 1) << 6;
  P |= (S_7_0 & 1) << 7;
  P |= (S_8_0 & 1) << 8;
  P |= (S_8_1 & 1) << 9;
  P |= (S_8_2 & 1) << 10;
  P |= (S_8_3 & 1) << 11;
  P |= (S_8_4 & 1) << 12;
  P |= (S_8_5 & 1) << 13;
  P |= (S_8_6 & 1) << 14;
  P |= (S_8_7 & 1) << 15;
  return P;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mse parameters
***/
// MAE% = 0.90 %
// MAE = 4.6 
// WCE% = 2.93 %
// WCE = 15 
// WCRE% = 800.00 %
// EP% = 93.75 %
// MRE% = 2.47 %
// MSE = 32 
// PDK45_PWR = 0.014 mW
// PDK45_AREA = 34.7 um2
// PDK45_DELAY = 0.31 ns


uint64_t evoapproxlib::evoapprox_t::add8u_5NH(uint64_t a, uint64_t b)
{
  uint16_t c = 0;
  uint8_t n6 = (a >> 3) & 0x1;
  uint8_t n8 = (a >> 4) & 0x1;
  uint8_t n10 = (a >> 5) & 0x1;
  uint8_t n12 = (a >> 6) & 0x1;
  uint8_t n14 = (a >> 7) & 0x1;
  uint8_t n22 = (b >> 3) & 0x1;
  uint8_t n24 = (b >> 4) & 0x1;
  uint8_t n26 = (b >> 5) & 0x1;
  uint8_t n28 = (b >> 6) & 0x1;
  uint8_t n30 = (b >> 7) & 0x1;
  uint8_t n37;
  uint8_t n45;
  uint8_t n64;
  uint8_t n65;
  uint8_t n68;
  uint8_t n69;
  uint8_t n70;
  uint8_t n71;
  uint8_t n78;
  uint8_t n79;
  uint8_t n86;
  uint8_t n87;
  uint8_t n96;
  uint8_t n97;
  uint8_t n134;
  uint8_t n135;
  uint8_t n162;
  uint8_t n181;
  uint8_t n226;
  uint8_t n227;
  uint8_t n245;
  uint8_t n255;
  uint8_t n272;
  uint8_t n394;
  uint8_t n404;
  uint8_t n412;
  uint8_t n413;
  uint8_t n422;

  n37 = ~(n30 ^ n30);
  n45 = n28 | n12;
  n64 = n45;
  n65 = n45;
  n68 = n8 ^ n24;
  n69 = n8 & n24;
  n70 = n69;
  n71 = n69;
  n78 = n10 ^ n26;
  n79 = n10 & n26;
  n86 = n12 ^ n28;
  n87 = n12 & n28;
  n96 = n14 ^ n30;
  n97 = n14 & n30;
  n134 = n26 ^ n10;
  n135 = n26 & n10;
  n162 = n65 & n135;
  n181 = n87 | n162;
  n226 = n134 & n70;
  n227 = n134 & n70;
  n245 = n79 | n227;
  n255 = n64 & n226;
  n272 = n181 | n255;
  n394 = n78 ^ n71;
  n404 = n86 ^ n245;
  n412 = n96 ^ n272;
  n413 = n96 & n272;
  n422 = n97 | n413;

  c |= (n37 & 0x1) << 0;
  c |= (n22 & 0x1) << 1;
  c |= (n6 & 0x1) << 2;
  c |= (n37 & 0x1) << 3;
  c |= (n68 & 0x1) << 4;
  c |= (n394 & 0x1) << 5;
  c |= (n404 & 0x1) << 6;
  c |= (n412 & 0x1) << 7;
  c |= (n422 & 0x1) << 8;

  return c;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 2.19 %
// MAE = 2.8 
// WCE% = 10.16 %
// WCE = 13 
// WCRE% = 400.00 %
// EP% = 88.98 %
// MRE% = 12.68 %
// MSE = 12 
// PDK45_PWR = 0.024 mW
// PDK45_AREA = 54.4 um2
// PDK45_DELAY = 0.49 ns


uint64_t evoapproxlib::evoapprox_t::add8s_704(const uint64_t B,const uint64_t A)
{
   uint64_t dout_16, dout_20, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_44, dout_45, dout_46, dout_47, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_60, dout_61, dout_62, dout_63, dout_64;
   uint64_t O;

   dout_16=((B >> 2)&1)&((A >> 2)&1);
   dout_20=((B >> 7)&1)&((A >> 7)&1);
   dout_22=((A >> 3)&1)&((B >> 3)&1);
   dout_23=((A >> 3)&1)^((B >> 3)&1);
   dout_24=((A >> 4)&1)&((B >> 4)&1);
   dout_25=((A >> 4)&1)^((B >> 4)&1);
   dout_26=((A >> 5)&1)&((B >> 5)&1);
   dout_27=((A >> 5)&1)^((B >> 5)&1);
   dout_28=((A >> 6)&1)&((B >> 6)&1);
   dout_29=((A >> 6)&1)^((B >> 6)&1);
   dout_30=((A >> 7)&1)^((B >> 7)&1);
   dout_33=dout_20|dout_16;
   dout_34=dout_25&dout_22;
   dout_35=dout_25&dout_23;
   dout_36=dout_24|dout_34;
   dout_37=dout_29&dout_26;
   dout_38=dout_29&dout_27;
   dout_39=dout_28|dout_37;
   dout_44=dout_27&dout_36;
   dout_45=dout_27&dout_35;
   dout_46=dout_26|dout_44;
   dout_47=dout_38&dout_36;
   dout_49=dout_39|dout_47;
   dout_50=dout_23&dout_33;
   dout_51=dout_22|dout_50;
   dout_52=dout_35&dout_50;
   dout_53=dout_36|dout_52;
   dout_54=dout_45&dout_50;
   dout_55=dout_46|dout_54;
   dout_56=dout_38&dout_52;
   dout_57=dout_49|dout_56;
   dout_60=dout_23^dout_33;
   dout_61=dout_25^dout_51;
   dout_62=dout_27^dout_53;
   dout_63=dout_29^dout_55;
   dout_64=dout_30^dout_57;

   O = 0;
   O |= (dout_62&1) << 0;
   O |= (dout_63&1) << 1;
   O |= (((A >> 1)&1)&1) << 2;
   O |= (dout_60&1) << 3;
   O |= (dout_61&1) << 4;
   O |= (dout_62&1) << 5;
   O |= (dout_63&1) << 6;
   O |= (dout_64&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 0.82 %
// MAE = 2.1 
// WCE% = 2.73 %
// WCE = 7.0 
// WCRE% = 350.00 %
// EP% = 84.38 %
// MRE% = 8.19 %
// MSE = 7.2 
// PDK45_PWR = 0.021 mW
// PDK45_AREA = 52.6 um2
// PDK45_DELAY = 0.39 ns


uint64_t evoapproxlib::evoapprox_t::add8se_7J7(const uint64_t B,const uint64_t A)
{
   uint64_t dout_16, dout_19, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_32, dout_36, dout_38, dout_39, dout_40, dout_44, dout_46, dout_48, dout_50, dout_52, dout_55, dout_56, dout_57, dout_58, dout_59, dout_62, dout_63, dout_64, dout_65, dout_66;
   uint64_t O;

   dout_16=((B >> 2)&1)^0xFFFFFFFFFFFFFFFFU;
   dout_19=(((B >> 1)&1)&dout_16)^0xFFFFFFFFFFFFFFFFU;
   dout_22=((A >> 3)&1)&((B >> 3)&1);
   dout_23=((A >> 3)&1)^((B >> 3)&1);
   dout_24=((A >> 4)&1)&((B >> 4)&1);
   dout_25=((A >> 4)&1)^((B >> 4)&1);
   dout_26=((A >> 5)&1)&((B >> 5)&1);
   dout_27=((A >> 5)&1)^((B >> 5)&1);
   dout_28=((A >> 6)&1)&((B >> 6)&1);
   dout_29=((A >> 6)&1)^((B >> 6)&1);
   dout_30=((A >> 7)&1)&((B >> 7)&1);
   dout_32=((A >> 7)&1)^((B >> 7)&1);
   dout_36=dout_25&dout_22;
   dout_38=dout_24|dout_36;
   dout_39=dout_29&dout_26;
   dout_40=dout_29&dout_27;
   dout_44=dout_40&dout_38;
   dout_46=dout_28|dout_44;
   dout_48=dout_46|dout_39;
   dout_50=dout_38|dout_24;
   dout_52=((B >> 2)&1)|((A >> 2)&1);
   dout_55=dout_27&dout_50;
   dout_56=dout_26|dout_55;
   dout_57=dout_32&dout_48;
   dout_58=dout_30|dout_57;
   dout_59=dout_19^dout_16;
   dout_62=dout_25^dout_22;
   dout_63=dout_27^dout_50;
   dout_64=dout_29^dout_56;
   dout_65=dout_32^dout_48;
   dout_66=dout_32^dout_58;

   O = 0;
   O |= (dout_52&1) << 0;
   O |= (dout_59&1) << 1;
   O |= (dout_52&1) << 2;
   O |= (dout_23&1) << 3;
   O |= (dout_62&1) << 4;
   O |= (dout_63&1) << 5;
   O |= (dout_64&1) << 6;
   O |= (dout_65&1) << 7;
   O |= (dout_66&1) << 8;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 5.09 %
// MAE = 3334 
// WCE% = 49.23 %
// WCE = 32261 
// WCRE% = 100.00 %
// EP% = 97.47 %
// MRE% = 21.95 %
// MSE = 34405.106e3 
// PDK45_PWR = 0.029 mW
// PDK45_AREA = 112.2 um2
// PDK45_DELAY = 0.18 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_QKX(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_21, dout_22, dout_29, dout_31, dout_42, dout_52, dout_84, dout_94, dout_95, dout_96, dout_122, dout_123, dout_126, dout_133, dout_134, dout_137, dout_138, dout_139, dout_166, dout_168, dout_170, dout_180, dout_181, dout_182, dout_208, dout_211, dout_213, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_236, dout_241, dout_246, dout_251, dout_255, dout_256, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_277, dout_282, dout_284, dout_289, dout_294, dout_299;   int avg=0;

   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_42=dout_22|dout_29;
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_84=dout_31|dout_52;
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_122=dout_84|dout_94;
   dout_123=((A >> 2)&1)&((B >> 7)&1);
   dout_126=dout_123|dout_95;
   dout_133=((B >> 0)&1)&((A >> 4)&1);
   dout_134=((B >> 2)&1)&((A >> 0)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_166=((B >> 0)&1)&((A >> 3)&1);
   dout_168=dout_137|dout_126;
   dout_170=dout_96|dout_138;
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_208=dout_170|dout_180;
   dout_211=((B >> 0)&1)&((A >> 6)&1);
   dout_213=dout_139|dout_181;
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_226=dout_42|dout_211;
   dout_236=dout_122|dout_220;
   dout_241=dout_168|dout_221;
   dout_246=dout_208|dout_222;
   dout_251=dout_213|dout_223;
   dout_255=((B >> 7)&1)&((A >> 0)&1);
   dout_256=dout_182|dout_224;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_255|dout_261;
   dout_277=dout_236|dout_262;
   dout_282=dout_241|dout_263;
   dout_284=dout_246|dout_264;
   dout_289=dout_251|dout_265;
   dout_294=dout_256|dout_266;
   dout_299=dout_225|dout_267;

   O = 0;
   O |= (0&1) << 0;
   O |= (0&1) << 1;
   O |= (dout_134&1) << 2;
   O |= (dout_166&1) << 3;
   O |= (dout_133&1) << 4;
   O |= (dout_21&1) << 5;
   O |= (dout_226&1) << 6;
   O |= (dout_269&1) << 7;
   O |= (dout_277&1) << 8;
   O |= (dout_282&1) << 9;
   O |= (dout_284&1) << 10;
   O |= (dout_289&1) << 11;
   O |= (dout_294&1) << 12;
   O |= (dout_299&1) << 13;
   O |= (dout_268&1) << 14;
   O |= (0&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.078 %
// MAE = 0.2 
// WCE% = 0.78 %
// WCE = 2.0 
// WCRE% = 100.00 %
// EP% = 12.50 %
// MRE% = 1.00 %
// MSE = 0.5 
// PDK45_PWR = 0.034 mW
// PDK45_AREA = 78.4 um2
// PDK45_DELAY = 0.60 ns


uint64_t evoapproxlib::evoapprox_t::add8se_7C9(const uint64_t B,const uint64_t A)
{
   uint64_t dout_16, dout_17, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_65, dout_66;
   uint64_t O;

   dout_16=((A >> 0)&1)&((B >> 0)&1);
   dout_17=((A >> 0)&1)^((B >> 0)&1);
   dout_18=((A >> 1)&1)&((B >> 1)&1);
   dout_19=((A >> 1)&1)^((B >> 1)&1);
   dout_20=((A >> 2)&1)&((B >> 2)&1);
   dout_21=((A >> 2)&1)^((B >> 2)&1);
   dout_22=((A >> 3)&1)&((B >> 3)&1);
   dout_23=((A >> 3)&1)^((B >> 3)&1);
   dout_24=((A >> 4)&1)&((B >> 4)&1);
   dout_25=((A >> 4)&1)^((B >> 4)&1);
   dout_26=((A >> 5)&1)&((B >> 5)&1);
   dout_27=((A >> 5)&1)^((B >> 5)&1);
   dout_28=((A >> 6)&1)&((B >> 6)&1);
   dout_29=((A >> 6)&1)^((B >> 6)&1);
   dout_30=((A >> 7)&1)&((B >> 7)&1);
   dout_31=((A >> 7)&1)^((B >> 7)&1);
   dout_32=((A >> 7)&1)^((B >> 7)&1);
   dout_33=dout_21&dout_18;
   dout_34=dout_21&dout_19;
   dout_35=dout_20|dout_33;
   dout_36=dout_25&dout_22;
   dout_37=dout_25&dout_23;
   dout_38=dout_24|dout_36;
   dout_39=dout_29&dout_26;
   dout_40=dout_29&dout_27;
   dout_41=dout_28|dout_39;
   dout_42=dout_34&dout_16;
   dout_43=dout_35|dout_42;
   dout_44=dout_40&dout_38;
   dout_45=dout_40&dout_37;
   dout_46=dout_41|dout_44;
   dout_47=dout_45&dout_43;
   dout_48=dout_46|dout_47;
   dout_49=dout_37&dout_43;
   dout_50=dout_38|dout_49;
   dout_51=dout_19&dout_16;
   dout_52=dout_18|dout_51;
   dout_53=dout_23&dout_43;
   dout_54=dout_22|dout_53;
   dout_55=dout_27&dout_50;
   dout_56=dout_26|dout_55;
   dout_57=dout_31&dout_48;
   dout_58=dout_30|dout_57;
   dout_59=dout_19^dout_51;
   dout_60=dout_21^dout_52;
   dout_61=dout_23^dout_43;
   dout_62=dout_25^dout_54;
   dout_63=dout_27^dout_50;
   dout_64=dout_29^dout_56;
   dout_65=dout_31^dout_48;
   dout_66=dout_32^dout_58;

   O = 0;
   O |= (dout_17&1) << 0;
   O |= (dout_59&1) << 1;
   O |= (dout_60&1) << 2;
   O |= (dout_61&1) << 3;
   O |= (dout_62&1) << 4;
   O |= (dout_63&1) << 5;
   O |= (dout_64&1) << 6;
   O |= (dout_65&1) << 7;
   O |= (dout_66&1) << 8;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.13 %
// MAE = 87 
// WCE% = 2.38 %
// WCE = 1558 
// WCRE% = 64.00 %
// EP% = 39.93 %
// MRE% = 1.04 %
// MSE = 52863 
// PDK45_PWR = 0.329 mW
// PDK45_AREA = 606.8 um2
// PDK45_DELAY = 1.36 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_7C1(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_16, dout_17, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_34, dout_36, dout_38, dout_40, dout_42, dout_44, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_59, dout_64, dout_69, dout_74, dout_79, dout_80, dout_84, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_98, dout_100, dout_102, dout_103, dout_107, dout_108, dout_112, dout_113, dout_117, dout_118, dout_122, dout_123, dout_125, dout_127, dout_128, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143, dout_144, dout_145, dout_146, dout_147, dout_148, dout_149, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_168, dout_169, dout_170, dout_171, dout_173, dout_175, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_183, dout_184, dout_185, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_335, dout_336, dout_339, dout_340, dout_341, dout_344, dout_345, dout_347, dout_348, dout_349, dout_350, dout_351, dout_352, dout_353, dout_354, dout_355, dout_356, dout_357, dout_358, dout_361, dout_362;   int avg=0;

   dout_16=((B >> 0)&1)&((A >> 0)&1);
   dout_17=((B >> 1)&1)&((A >> 0)&1);
   dout_18=((B >> 2)&1)&((A >> 0)&1);
   dout_19=((B >> 3)&1)&((A >> 0)&1);
   dout_20=((B >> 4)&1)&((A >> 0)&1);
   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_24=((B >> 0)&1)&((A >> 1)&1);
   dout_25=((B >> 1)&1)&((A >> 1)&1);
   dout_26=((B >> 2)&1)&((A >> 1)&1);
   dout_27=((B >> 3)&1)&((A >> 1)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_32=dout_17|dout_24;
   dout_34=dout_18|dout_25;
   dout_36=dout_19|dout_26;
   dout_38=dout_20|dout_27;
   dout_40=dout_21|dout_28;
   dout_42=dout_22|dout_29;
   dout_44=dout_23|dout_30;
   dout_46=((B >> 0)&1)&((A >> 2)&1);
   dout_47=((B >> 1)&1)&((A >> 2)&1);
   dout_48=((B >> 2)&1)&((A >> 2)&1);
   dout_49=((B >> 3)&1)&((A >> 2)&1);
   dout_50=((B >> 4)&1)&((A >> 2)&1);
   dout_51=((B >> 5)&1)&((A >> 2)&1);
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_54=dout_34^dout_46;
   dout_55=dout_34&dout_46;
   dout_59=dout_36|dout_47;
   dout_64=dout_38|dout_48;
   dout_69=dout_40|dout_49;
   dout_74=dout_42|dout_50;
   dout_79=dout_44^dout_51;
   dout_80=dout_44&dout_52;
   dout_84=dout_31|dout_52;
   dout_89=((B >> 0)&1)&((A >> 3)&1);
   dout_90=((B >> 1)&1)&((A >> 3)&1);
   dout_91=((B >> 2)&1)&((A >> 3)&1);
   dout_92=((B >> 3)&1)&((A >> 3)&1);
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_97=dout_59^dout_89;
   dout_98=dout_59&dout_89;
   dout_100=dout_97|dout_55;
   dout_102=dout_64^dout_90;
   dout_103=dout_64&dout_90;
   dout_107=dout_69^dout_91;
   dout_108=dout_69&dout_91;
   dout_112=dout_74^dout_92;
   dout_113=dout_74&dout_92;
   dout_117=dout_79^dout_93;
   dout_118=dout_79&dout_93;
   dout_122=dout_84^dout_94;
   dout_123=dout_84&dout_94;
   dout_125=dout_122|dout_80;
   dout_127=dout_53^dout_95;
   dout_128=((A >> 2)&1)&dout_96;
   dout_132=((B >> 0)&1)&((A >> 4)&1);
   dout_133=((B >> 1)&1)&((A >> 4)&1);
   dout_134=((B >> 2)&1)&((A >> 4)&1);
   dout_135=((B >> 3)&1)&((A >> 4)&1);
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_140=dout_102^dout_132;
   dout_141=dout_102&dout_132;
   dout_142=dout_140&dout_98;
   dout_143=dout_140^dout_98;
   dout_144=dout_141|dout_142;
   dout_145=dout_107^dout_133;
   dout_146=dout_107&dout_133;
   dout_147=dout_145&dout_103;
   dout_148=dout_145^dout_103;
   dout_149=dout_146|dout_147;
   dout_150=dout_112^dout_134;
   dout_151=dout_112&dout_134;
   dout_152=dout_150&dout_108;
   dout_153=dout_150^dout_108;
   dout_154=dout_151|dout_152;
   dout_155=dout_117^dout_135;
   dout_156=dout_117&dout_135;
   dout_157=dout_155&dout_113;
   dout_158=dout_155^dout_113;
   dout_159=dout_156|dout_157;
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_118;
   dout_163=dout_160^dout_118;
   dout_164=dout_161|dout_162;
   dout_165=dout_127^dout_137;
   dout_166=dout_127&dout_137;
   dout_168=dout_165^dout_123;
   dout_169=dout_166|dout_123;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_173=dout_170|dout_128;
   dout_175=((B >> 0)&1)&((A >> 5)&1);
   dout_176=((B >> 1)&1)&((A >> 5)&1);
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_183=dout_148^dout_175;
   dout_184=dout_148&dout_175;
   dout_185=dout_183&dout_144;
   dout_186=dout_183^dout_144;
   dout_187=dout_184|dout_185;
   dout_188=dout_153^dout_176;
   dout_189=dout_153&dout_176;
   dout_190=dout_188&dout_149;
   dout_191=dout_188^dout_149;
   dout_192=dout_189|dout_190;
   dout_193=dout_158^dout_177;
   dout_194=dout_158&dout_177;
   dout_195=dout_193&dout_154;
   dout_196=dout_193^dout_154;
   dout_197=dout_194|dout_195;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_159;
   dout_201=dout_198^dout_159;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_216=dout_213^dout_171;
   dout_217=dout_214|dout_171;
   dout_218=((B >> 0)&1)&((A >> 6)&1);
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_226=dout_191^dout_218;
   dout_227=dout_191&dout_218;
   dout_228=dout_226&dout_187;
   dout_229=dout_226^dout_187;
   dout_230=dout_227|dout_228;
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_233=dout_231&dout_192;
   dout_234=dout_231^dout_192;
   dout_235=dout_232|dout_233;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_197;
   dout_239=dout_236^dout_197;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_234^dout_261;
   dout_270=dout_234&dout_261;
   dout_271=dout_269&dout_230;
   dout_272=dout_269^dout_230;
   dout_273=dout_270|dout_271;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_235;
   dout_277=dout_274^dout_235;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_304=dout_277^dout_273;
   dout_305=dout_277&dout_273;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_322=dout_297&dout_293;
   dout_323=dout_302^dout_298;
   dout_324=dout_302&dout_298;
   dout_325=dout_323&dout_322;
   dout_326=dout_323^dout_322;
   dout_327=dout_324|dout_325;
   dout_328=dout_268^dout_303;
   dout_329=((A >> 7)&1)&dout_303;
   dout_330=dout_328&dout_327;
   dout_331=dout_328^dout_327;
   dout_332=dout_329|dout_330;
   dout_333=dout_297^dout_293;
   dout_335=dout_333^0xFFFFFFFFFFFFFFFFU;
   dout_336=dout_322|dout_333;
   dout_339=dout_323&dout_336;
   dout_340=dout_323^dout_336;
   dout_341=dout_324|dout_339;
   dout_344=dout_328&dout_341;
   dout_345=dout_328^dout_341;
   dout_347=dout_320^0xFFFFFFFFFFFFFFFFU;
   dout_348=dout_333&dout_347;
   dout_349=dout_335&dout_320;
   dout_350=dout_348|dout_349;
   dout_351=dout_320^0xFFFFFFFFFFFFFFFFU;
   dout_352=dout_326&dout_351;
   dout_353=dout_340&dout_320;
   dout_354=dout_352|dout_353;
   dout_355=dout_320^0xFFFFFFFFFFFFFFFFU;
   dout_356=dout_331&dout_355;
   dout_357=dout_345&dout_320;
   dout_358=dout_356|dout_357;
   dout_361=dout_344&dout_320;
   dout_362=dout_332|dout_361;

   O = 0;
   O |= (dout_16&1) << 0;
   O |= (dout_32&1) << 1;
   O |= (dout_54&1) << 2;
   O |= (dout_100&1) << 3;
   O |= (dout_143&1) << 4;
   O |= (dout_186&1) << 5;
   O |= (dout_229&1) << 6;
   O |= (dout_272&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_350&1) << 12;
   O |= (dout_354&1) << 13;
   O |= (dout_358&1) << 14;
   O |= (dout_362&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.0018 %
// MAE = 1.2 
// WCE% = 0.0076 %
// WCE = 5.0 
// WCRE% = 500.00 %
// EP% = 50.00 %
// MRE% = 0.28 %
// MSE = 3.8 
// PDK45_PWR = 0.422 mW
// PDK45_AREA = 711.0 um2
// PDK45_DELAY = 1.48 ns


int16_t evoapproxlib::evoapprox_t::mul8s_1KVA(int8_t A, int8_t B)
{
  int16_t P, P_;
  uint8_t tmp, C_1_1,C_1_2,C_1_3,C_1_4,C_1_5,C_1_6,C_1_7,C_2_0,C_2_1,C_2_2,C_2_3,C_2_4,C_2_5,C_2_6,C_2_7,C_3_0,C_3_1,C_3_2,C_3_3,C_3_4,C_3_5,C_3_6,C_3_7,C_4_0,C_4_1,C_4_2,C_4_3,C_4_4,C_4_5,C_4_6,C_4_7,C_5_0,C_5_1,C_5_2,C_5_3,C_5_4,C_5_5,C_5_6,C_5_7,C_6_0,C_6_1,C_6_2,C_6_3,C_6_4,C_6_5,C_6_6,C_6_7,C_7_0,C_7_1,C_7_2,C_7_3,C_7_4,C_7_5,C_7_6,C_7_7,C_8_0,C_8_1,C_8_2,C_8_3,C_8_4,C_8_5,C_8_6,C_8_7,S_0_2,S_0_3,S_0_4,S_0_5,S_0_6,S_0_7,S_1_1,S_1_2,S_1_3,S_1_4,S_1_5,S_1_6,S_1_7,S_2_0,S_2_1,S_2_2,S_2_3,S_2_4,S_2_5,S_2_6,S_2_7,S_3_0,S_3_1,S_3_2,S_3_3,S_3_4,S_3_5,S_3_6,S_3_7,S_4_0,S_4_1,S_4_2,S_4_3,S_4_4,S_4_5,S_4_6,S_4_7,S_5_0,S_5_1,S_5_2,S_5_3,S_5_4,S_5_5,S_5_6,S_5_7,S_6_0,S_6_1,S_6_2,S_6_3,S_6_4,S_6_5,S_6_6,S_6_7,S_7_0,S_7_1,S_7_2,S_7_3,S_7_4,S_7_5,S_7_6,S_7_7,S_8_0,S_8_1,S_8_2,S_8_3,S_8_4,S_8_5,S_8_6,S_8_7;
  S_0_2 = (((A>>0)&1) & ((B>>2)&1));
  S_0_3 = (((A>>0)&1) & ((B>>3)&1));
  S_0_4 = (((A>>0)&1) & ((B>>4)&1));
  S_0_5 = (((A>>0)&1) & ((B>>5)&1));
  S_0_6 = (((A>>0)&1) & ((B>>6)&1));
  S_0_7 = (((((A>>0)&1) & ((B>>7)&1)))^1);
  S_1_1 = S_0_2^(((A>>1)&1) & ((B>>1)&1));
  C_1_1 = S_0_2&(((A>>1)&1) & ((B>>1)&1));
  S_1_2 = S_0_3^(((A>>1)&1) & ((B>>2)&1));
  C_1_2 = S_0_3&(((A>>1)&1) & ((B>>2)&1));
  S_1_3 = S_0_4^(((A>>1)&1) & ((B>>3)&1));
  C_1_3 = S_0_4&(((A>>1)&1) & ((B>>3)&1));
  S_1_4 = S_0_5^(((A>>1)&1) & ((B>>4)&1));
  C_1_4 = S_0_5&(((A>>1)&1) & ((B>>4)&1));
  S_1_5 = S_0_6^(((A>>1)&1) & ((B>>5)&1));
  C_1_5 = S_0_6&(((A>>1)&1) & ((B>>5)&1));
  S_1_6 = S_0_7^(((A>>1)&1) & ((B>>6)&1));
  C_1_6 = S_0_7&(((A>>1)&1) & ((B>>6)&1));
  S_1_7 = 1^(((((A>>1)&1) & ((B>>7)&1)))^1);
  C_1_7 = 1&(((((A>>1)&1) & ((B>>7)&1)))^1);
  S_2_0 = S_1_1^(((A>>2)&1) & ((B>>0)&1));
  C_2_0 = S_1_1&(((A>>2)&1) & ((B>>0)&1));
  tmp = S_1_2^C_1_1;
  S_2_1 = tmp^(((A>>2)&1) & ((B>>1)&1));
  C_2_1 = (tmp&(((A>>2)&1) & ((B>>1)&1)))|(S_1_2&C_1_1);
  tmp = S_1_3^C_1_2;
  S_2_2 = tmp^(((A>>2)&1) & ((B>>2)&1));
  C_2_2 = (tmp&(((A>>2)&1) & ((B>>2)&1)))|(S_1_3&C_1_2);
  tmp = S_1_4^C_1_3;
  S_2_3 = tmp^(((A>>2)&1) & ((B>>3)&1));
  C_2_3 = (tmp&(((A>>2)&1) & ((B>>3)&1)))|(S_1_4&C_1_3);
  tmp = S_1_5^C_1_4;
  S_2_4 = tmp^(((A>>2)&1) & ((B>>4)&1));
  C_2_4 = (tmp&(((A>>2)&1) & ((B>>4)&1)))|(S_1_5&C_1_4);
  tmp = S_1_6^C_1_5;
  S_2_5 = tmp^(((A>>2)&1) & ((B>>5)&1));
  C_2_5 = (tmp&(((A>>2)&1) & ((B>>5)&1)))|(S_1_6&C_1_5);
  tmp = S_1_7^C_1_6;
  S_2_6 = tmp^(((A>>2)&1) & ((B>>6)&1));
  C_2_6 = (tmp&(((A>>2)&1) & ((B>>6)&1)))|(S_1_7&C_1_6);
  S_2_7 = C_1_7^(((((A>>2)&1) & ((B>>7)&1)))^1);
  C_2_7 = C_1_7&(((((A>>2)&1) & ((B>>7)&1)))^1);
  tmp = S_2_1^C_2_0;
  S_3_0 = tmp^(((A>>3)&1) & ((B>>0)&1));
  C_3_0 = (tmp&(((A>>3)&1) & ((B>>0)&1)))|(S_2_1&C_2_0);
  tmp = S_2_2^C_2_1;
  S_3_1 = tmp^(((A>>3)&1) & ((B>>1)&1));
  C_3_1 = (tmp&(((A>>3)&1) & ((B>>1)&1)))|(S_2_2&C_2_1);
  tmp = S_2_3^C_2_2;
  S_3_2 = tmp^(((A>>3)&1) & ((B>>2)&1));
  C_3_2 = (tmp&(((A>>3)&1) & ((B>>2)&1)))|(S_2_3&C_2_2);
  tmp = S_2_4^C_2_3;
  S_3_3 = tmp^(((A>>3)&1) & ((B>>3)&1));
  C_3_3 = (tmp&(((A>>3)&1) & ((B>>3)&1)))|(S_2_4&C_2_3);
  tmp = S_2_5^C_2_4;
  S_3_4 = tmp^(((A>>3)&1) & ((B>>4)&1));
  C_3_4 = (tmp&(((A>>3)&1) & ((B>>4)&1)))|(S_2_5&C_2_4);
  tmp = S_2_6^C_2_5;
  S_3_5 = tmp^(((A>>3)&1) & ((B>>5)&1));
  C_3_5 = (tmp&(((A>>3)&1) & ((B>>5)&1)))|(S_2_6&C_2_5);
  tmp = S_2_7^C_2_6;
  S_3_6 = tmp^(((A>>3)&1) & ((B>>6)&1));
  C_3_6 = (tmp&(((A>>3)&1) & ((B>>6)&1)))|(S_2_7&C_2_6);
  S_3_7 = C_2_7^(((((A>>3)&1) & ((B>>7)&1)))^1);
  C_3_7 = C_2_7&(((((A>>3)&1) & ((B>>7)&1)))^1);
  tmp = S_3_1^C_3_0;
  S_4_0 = tmp^(((A>>4)&1) & ((B>>0)&1));
  C_4_0 = (tmp&(((A>>4)&1) & ((B>>0)&1)))|(S_3_1&C_3_0);
  tmp = S_3_2^C_3_1;
  S_4_1 = tmp^(((A>>4)&1) & ((B>>1)&1));
  C_4_1 = (tmp&(((A>>4)&1) & ((B>>1)&1)))|(S_3_2&C_3_1);
  tmp = S_3_3^C_3_2;
  S_4_2 = tmp^(((A>>4)&1) & ((B>>2)&1));
  C_4_2 = (tmp&(((A>>4)&1) & ((B>>2)&1)))|(S_3_3&C_3_2);
  tmp = S_3_4^C_3_3;
  S_4_3 = tmp^(((A>>4)&1) & ((B>>3)&1));
  C_4_3 = (tmp&(((A>>4)&1) & ((B>>3)&1)))|(S_3_4&C_3_3);
  tmp = S_3_5^C_3_4;
  S_4_4 = tmp^(((A>>4)&1) & ((B>>4)&1));
  C_4_4 = (tmp&(((A>>4)&1) & ((B>>4)&1)))|(S_3_5&C_3_4);
  tmp = S_3_6^C_3_5;
  S_4_5 = tmp^(((A>>4)&1) & ((B>>5)&1));
  C_4_5 = (tmp&(((A>>4)&1) & ((B>>5)&1)))|(S_3_6&C_3_5);
  tmp = S_3_7^C_3_6;
  S_4_6 = tmp^(((A>>4)&1) & ((B>>6)&1));
  C_4_6 = (tmp&(((A>>4)&1) & ((B>>6)&1)))|(S_3_7&C_3_6);
  S_4_7 = C_3_7^(((((A>>4)&1) & ((B>>7)&1)))^1);
  C_4_7 = C_3_7&(((((A>>4)&1) & ((B>>7)&1)))^1);
  tmp = S_4_1^C_4_0;
  S_5_0 = tmp^(((A>>5)&1) & ((B>>0)&1));
  C_5_0 = (tmp&(((A>>5)&1) & ((B>>0)&1)))|(S_4_1&C_4_0);
  tmp = S_4_2^C_4_1;
  S_5_1 = tmp^(((A>>5)&1) & ((B>>1)&1));
  C_5_1 = (tmp&(((A>>5)&1) & ((B>>1)&1)))|(S_4_2&C_4_1);
  tmp = S_4_3^C_4_2;
  S_5_2 = tmp^(((A>>5)&1) & ((B>>2)&1));
  C_5_2 = (tmp&(((A>>5)&1) & ((B>>2)&1)))|(S_4_3&C_4_2);
  tmp = S_4_4^C_4_3;
  S_5_3 = tmp^(((A>>5)&1) & ((B>>3)&1));
  C_5_3 = (tmp&(((A>>5)&1) & ((B>>3)&1)))|(S_4_4&C_4_3);
  tmp = S_4_5^C_4_4;
  S_5_4 = tmp^(((A>>5)&1) & ((B>>4)&1));
  C_5_4 = (tmp&(((A>>5)&1) & ((B>>4)&1)))|(S_4_5&C_4_4);
  tmp = S_4_6^C_4_5;
  S_5_5 = tmp^(((A>>5)&1) & ((B>>5)&1));
  C_5_5 = (tmp&(((A>>5)&1) & ((B>>5)&1)))|(S_4_6&C_4_5);
  tmp = S_4_7^C_4_6;
  S_5_6 = tmp^(((A>>5)&1) & ((B>>6)&1));
  C_5_6 = (tmp&(((A>>5)&1) & ((B>>6)&1)))|(S_4_7&C_4_6);
  S_5_7 = C_4_7^(((((A>>5)&1) & ((B>>7)&1)))^1);
  C_5_7 = C_4_7&(((((A>>5)&1) & ((B>>7)&1)))^1);
  tmp = S_5_1^C_5_0;
  S_6_0 = tmp^(((A>>6)&1) & ((B>>0)&1));
  C_6_0 = (tmp&(((A>>6)&1) & ((B>>0)&1)))|(S_5_1&C_5_0);
  tmp = S_5_2^C_5_1;
  S_6_1 = tmp^(((A>>6)&1) & ((B>>1)&1));
  C_6_1 = (tmp&(((A>>6)&1) & ((B>>1)&1)))|(S_5_2&C_5_1);
  tmp = S_5_3^C_5_2;
  S_6_2 = tmp^(((A>>6)&1) & ((B>>2)&1));
  C_6_2 = (tmp&(((A>>6)&1) & ((B>>2)&1)))|(S_5_3&C_5_2);
  tmp = S_5_4^C_5_3;
  S_6_3 = tmp^(((A>>6)&1) & ((B>>3)&1));
  C_6_3 = (tmp&(((A>>6)&1) & ((B>>3)&1)))|(S_5_4&C_5_3);
  tmp = S_5_5^C_5_4;
  S_6_4 = tmp^(((A>>6)&1) & ((B>>4)&1));
  C_6_4 = (tmp&(((A>>6)&1) & ((B>>4)&1)))|(S_5_5&C_5_4);
  tmp = S_5_6^C_5_5;
  S_6_5 = tmp^(((A>>6)&1) & ((B>>5)&1));
  C_6_5 = (tmp&(((A>>6)&1) & ((B>>5)&1)))|(S_5_6&C_5_5);
  tmp = S_5_7^C_5_6;
  S_6_6 = tmp^(((A>>6)&1) & ((B>>6)&1));
  C_6_6 = (tmp&(((A>>6)&1) & ((B>>6)&1)))|(S_5_7&C_5_6);
  S_6_7 = C_5_7^(((((A>>6)&1) & ((B>>7)&1)))^1);
  C_6_7 = C_5_7&(((((A>>6)&1) & ((B>>7)&1)))^1);
  tmp = S_6_1^C_6_0;
  S_7_0 = tmp^(((((A>>7)&1) & ((B>>0)&1)))^1);
  C_7_0 = (tmp&(((((A>>7)&1) & ((B>>0)&1)))^1))|(S_6_1&C_6_0);
  tmp = S_6_2^C_6_1;
  S_7_1 = tmp^(((((A>>7)&1) & ((B>>1)&1)))^1);
  C_7_1 = (tmp&(((((A>>7)&1) & ((B>>1)&1)))^1))|(S_6_2&C_6_1);
  tmp = S_6_3^C_6_2;
  S_7_2 = tmp^(((((A>>7)&1) & ((B>>2)&1)))^1);
  C_7_2 = (tmp&(((((A>>7)&1) & ((B>>2)&1)))^1))|(S_6_3&C_6_2);
  tmp = S_6_4^C_6_3;
  S_7_3 = tmp^(((((A>>7)&1) & ((B>>3)&1)))^1);
  C_7_3 = (tmp&(((((A>>7)&1) & ((B>>3)&1)))^1))|(S_6_4&C_6_3);
  tmp = S_6_5^C_6_4;
  S_7_4 = tmp^(((((A>>7)&1) & ((B>>4)&1)))^1);
  C_7_4 = (tmp&(((((A>>7)&1) & ((B>>4)&1)))^1))|(S_6_5&C_6_4);
  tmp = S_6_6^C_6_5;
  S_7_5 = tmp^(((((A>>7)&1) & ((B>>5)&1)))^1);
  C_7_5 = (tmp&(((((A>>7)&1) & ((B>>5)&1)))^1))|(S_6_6&C_6_5);
  tmp = S_6_7^C_6_6;
  S_7_6 = tmp^(((((A>>7)&1) & ((B>>6)&1)))^1);
  C_7_6 = (tmp&(((((A>>7)&1) & ((B>>6)&1)))^1))|(S_6_7&C_6_6);
  S_7_7 = C_6_7^(((A>>7)&1) & ((B>>7)&1));
  C_7_7 = C_6_7&(((A>>7)&1) & ((B>>7)&1));
  S_8_0 = S_7_1^C_7_0;
  C_8_0 = S_7_1&C_7_0;
  tmp = S_7_2^C_8_0;
  S_8_1 = tmp^C_7_1;
  C_8_1 = (tmp&C_7_1)|(S_7_2&C_8_0);
  tmp = S_7_3^C_8_1;
  S_8_2 = tmp^C_7_2;
  C_8_2 = (tmp&C_7_2)|(S_7_3&C_8_1);
  tmp = S_7_4^C_8_2;
  S_8_3 = tmp^C_7_3;
  C_8_3 = (tmp&C_7_3)|(S_7_4&C_8_2);
  tmp = S_7_5^C_8_3;
  S_8_4 = tmp^C_7_4;
  C_8_4 = (tmp&C_7_4)|(S_7_5&C_8_3);
  tmp = S_7_6^C_8_4;
  S_8_5 = tmp^C_7_5;
  C_8_5 = (tmp&C_7_5)|(S_7_6&C_8_4);
  tmp = S_7_7^C_8_5;
  S_8_6 = tmp^C_7_6;
  C_8_6 = (tmp&C_7_6)|(S_7_7&C_8_5);
  tmp = 1^C_8_6;
  S_8_7 = tmp^C_7_7;
  C_8_7 = (tmp&C_7_7)|(1&C_8_6);
  P = 0;
  P |= (S_2_0 & 1) << 2;
  P |= (S_3_0 & 1) << 3;
  P |= (S_4_0 & 1) << 4;
  P |= (S_5_0 & 1) << 5;
  P |= (S_6_0 & 1) << 6;
  P |= (S_7_0 & 1) << 7;
  P |= (S_8_0 & 1) << 8;
  P |= (S_8_1 & 1) << 9;
  P |= (S_8_2 & 1) << 10;
  P |= (S_8_3 & 1) << 11;
  P |= (S_8_4 & 1) << 12;
  P |= (S_8_5 & 1) << 13;
  P |= (S_8_6 & 1) << 14;
  P |= (S_8_7 & 1) << 15;
  return P;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.16 %
// MAE = 0.2 
// WCE% = 1.56 %
// WCE = 2.0 
// WCRE% = 100.00 %
// EP% = 12.50 %
// MRE% = 1.29 %
// MSE = 0.5 
// PDK45_PWR = 0.033 mW
// PDK45_AREA = 74.1 um2
// PDK45_DELAY = 0.62 ns


uint64_t evoapproxlib::evoapprox_t::add8s_83N(const uint64_t B,const uint64_t A)
{
   uint64_t dout_16, dout_17, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61;
   uint64_t O;

   dout_16=((A >> 0)&1)&((B >> 0)&1);
   dout_17=((A >> 0)&1)^((B >> 0)&1);
   dout_18=((A >> 1)&1)&((B >> 1)&1);
   dout_19=((A >> 1)&1)^((B >> 1)&1);
   dout_20=((A >> 2)&1)&((B >> 2)&1);
   dout_21=((A >> 2)&1)^((B >> 2)&1);
   dout_22=((A >> 3)&1)&((B >> 3)&1);
   dout_23=((A >> 3)&1)^((B >> 3)&1);
   dout_24=((A >> 4)&1)&((B >> 4)&1);
   dout_25=((A >> 4)&1)^((B >> 4)&1);
   dout_26=((A >> 5)&1)&((B >> 5)&1);
   dout_27=((A >> 5)&1)^((B >> 5)&1);
   dout_28=((A >> 6)&1)&((B >> 6)&1);
   dout_29=((A >> 6)&1)^((B >> 6)&1);
   dout_30=((A >> 7)&1)^((B >> 7)&1);
   dout_31=dout_21&dout_18;
   dout_32=dout_21&dout_19;
   dout_33=dout_20|dout_31;
   dout_34=dout_25&dout_22;
   dout_35=dout_25&dout_23;
   dout_36=dout_24|dout_34;
   dout_37=dout_29&dout_26;
   dout_38=dout_29&dout_27;
   dout_39=dout_28|dout_37;
   dout_40=dout_32&dout_16;
   dout_41=dout_33|dout_40;
   dout_42=dout_38&dout_36;
   dout_43=dout_38&dout_35;
   dout_44=dout_39|dout_42;
   dout_45=dout_43&dout_41;
   dout_46=dout_44|dout_45;
   dout_47=dout_35&dout_41;
   dout_48=dout_36|dout_47;
   dout_49=dout_19&dout_16;
   dout_50=dout_18|dout_49;
   dout_51=dout_23&dout_41;
   dout_52=dout_22|dout_51;
   dout_53=dout_27&dout_48;
   dout_54=dout_26|dout_53;
   dout_55=dout_19^dout_49;
   dout_56=dout_21^dout_50;
   dout_57=dout_23^dout_41;
   dout_58=dout_25^dout_52;
   dout_59=dout_27^dout_48;
   dout_60=dout_29^dout_54;
   dout_61=dout_30^dout_46;

   O = 0;
   O |= (dout_17&1) << 0;
   O |= (dout_55&1) << 1;
   O |= (dout_56&1) << 2;
   O |= (dout_57&1) << 3;
   O |= (dout_58&1) << 4;
   O |= (dout_59&1) << 5;
   O |= (dout_60&1) << 6;
   O |= (dout_61&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.47 %
// MAE = 1.2 
// WCE% = 1.17 %
// WCE = 3.0 
// WCRE% = 200.00 %
// EP% = 62.50 %
// MRE% = 4.89 %
// MSE = 2.8 
// PDK45_PWR = 0.026 mW
// PDK45_AREA = 59.1 um2
// PDK45_DELAY = 0.47 ns


uint64_t evoapproxlib::evoapprox_t::add8se_7LN(const uint64_t B,const uint64_t A)
{
   uint64_t dout_16, dout_23, dout_24, dout_28, dout_29, dout_30, dout_31, dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54;
   uint64_t O;

   dout_16=((A >> 0)&1)|((B >> 0)&1);
   dout_23=((A >> 2)&1)^((B >> 2)&1);
   dout_24=((A >> 2)&1)&((B >> 2)&1);
   dout_28=((A >> 3)&1)^((B >> 3)&1);
   dout_29=((A >> 3)&1)&((B >> 3)&1);
   dout_30=dout_28&dout_24;
   dout_31=dout_28^dout_24;
   dout_32=dout_29|dout_30;
   dout_33=((A >> 4)&1)^((B >> 4)&1);
   dout_34=((A >> 4)&1)&((B >> 4)&1);
   dout_35=dout_33&dout_32;
   dout_36=dout_33^dout_32;
   dout_37=dout_34|dout_35;
   dout_38=((A >> 5)&1)^((B >> 5)&1);
   dout_39=((A >> 5)&1)&((B >> 5)&1);
   dout_40=dout_38&dout_37;
   dout_41=dout_38^dout_37;
   dout_42=dout_39|dout_40;
   dout_43=((A >> 6)&1)^((B >> 6)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=dout_43&dout_42;
   dout_46=dout_43^dout_42;
   dout_47=dout_44|dout_45;
   dout_48=((A >> 7)&1)^((B >> 7)&1);
   dout_49=((A >> 7)&1)&((B >> 7)&1);
   dout_50=dout_48&dout_47;
   dout_51=dout_48^dout_47;
   dout_52=dout_49|dout_50;
   dout_53=((A >> 7)&1)^((B >> 7)&1);
   dout_54=dout_53^dout_52;

   O = 0;
   O |= (dout_16&1) << 0;
   O |= (((A >> 1)&1)&1) << 1;
   O |= (dout_23&1) << 2;
   O |= (dout_31&1) << 3;
   O |= (dout_36&1) << 4;
   O |= (dout_41&1) << 5;
   O |= (dout_46&1) << 6;
   O |= (dout_51&1) << 7;
   O |= (dout_54&1) << 8;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 0.00019 %
// MAE = 0.12 
// WCE% = 0.0031 %
// WCE = 2.0 
// WCRE% = 22.22 %
// EP% = 6.25 %
// MRE% = 0.0053 %
// MSE = 0.25 
// PDK45_PWR = 0.390 mW
// PDK45_AREA = 682.8 um2
// PDK45_DELAY = 1.41 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_Y48(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_16, dout_17, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_65, dout_66, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_87, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_98, dout_99, dout_100, dout_101, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110, dout_111, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143, dout_144, dout_145, dout_146, dout_147, dout_148, dout_149, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_171, dout_172, dout_173, dout_174, dout_175, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_183, dout_184, dout_185, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_16=((B >> 0)&1)&((A >> 0)&1);
   dout_17=((B >> 1)&1)&((A >> 0)&1);
   dout_18=((B >> 2)&1)&((A >> 0)&1);
   dout_19=((B >> 3)&1)&((A >> 0)&1);
   dout_20=((B >> 4)&1)&((A >> 0)&1);
   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_24=((B >> 0)&1)&((A >> 1)&1);
   dout_25=((B >> 1)&1)&((A >> 1)&1);
   dout_26=((B >> 2)&1)&((A >> 1)&1);
   dout_27=((B >> 3)&1)&((A >> 1)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_32=dout_17|dout_24;
   dout_34=dout_18^dout_25;
   dout_35=dout_18&dout_25;
   dout_36=dout_19^dout_26;
   dout_37=dout_19&dout_26;
   dout_38=dout_20^dout_27;
   dout_39=dout_20&dout_27;
   dout_40=dout_21^dout_28;
   dout_41=dout_21&dout_28;
   dout_42=dout_22^dout_29;
   dout_43=dout_22&dout_29;
   dout_44=dout_23^dout_30;
   dout_45=dout_31&dout_22;
   dout_46=((B >> 0)&1)&((A >> 2)&1);
   dout_47=((B >> 1)&1)&((A >> 2)&1);
   dout_48=((B >> 2)&1)&((A >> 2)&1);
   dout_49=((B >> 3)&1)&((A >> 2)&1);
   dout_50=((B >> 4)&1)&((A >> 2)&1);
   dout_51=((B >> 5)&1)&((A >> 2)&1);
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_54=dout_34^dout_46;
   dout_55=dout_34&dout_46;
   dout_59=dout_36^dout_47;
   dout_60=dout_36&dout_47;
   dout_61=dout_59&dout_35;
   dout_62=dout_59^dout_35;
   dout_63=dout_60|dout_61;
   dout_64=dout_38^dout_48;
   dout_65=dout_38&dout_48;
   dout_66=dout_64&dout_37;
   dout_67=dout_64^dout_37;
   dout_68=dout_65|dout_66;
   dout_69=dout_40^dout_49;
   dout_70=dout_40&dout_49;
   dout_71=dout_69&dout_39;
   dout_72=dout_69^dout_39;
   dout_73=dout_70|dout_71;
   dout_74=dout_42^dout_50;
   dout_75=dout_42&dout_50;
   dout_76=dout_74&dout_41;
   dout_77=dout_74^dout_41;
   dout_78=dout_75|dout_76;
   dout_79=dout_44^dout_51;
   dout_80=dout_44&dout_51;
   dout_81=dout_79&dout_43;
   dout_82=dout_79^dout_43;
   dout_83=dout_80|dout_81;
   dout_84=dout_31^dout_52;
   dout_85=dout_31&dout_52;
   dout_87=dout_84^dout_45;
   dout_88=dout_85|dout_45;
   dout_89=((B >> 0)&1)&((A >> 3)&1);
   dout_90=((B >> 1)&1)&((A >> 3)&1);
   dout_91=((B >> 2)&1)&((A >> 3)&1);
   dout_92=((B >> 3)&1)&((A >> 3)&1);
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_97=dout_62^dout_89;
   dout_98=dout_62&dout_89;
   dout_99=dout_97&dout_55;
   dout_100=dout_97^dout_55;
   dout_101=dout_98|dout_99;
   dout_102=dout_67^dout_90;
   dout_103=dout_67&dout_90;
   dout_104=dout_102&dout_63;
   dout_105=dout_102^dout_63;
   dout_106=dout_103|dout_104;
   dout_107=dout_72^dout_91;
   dout_108=dout_72&dout_91;
   dout_109=dout_107&dout_68;
   dout_110=dout_107^dout_68;
   dout_111=dout_108|dout_109;
   dout_112=dout_77^dout_92;
   dout_113=dout_77&dout_92;
   dout_114=dout_112&dout_73;
   dout_115=dout_112^dout_73;
   dout_116=dout_113|dout_114;
   dout_117=dout_82^dout_93;
   dout_118=dout_82&dout_93;
   dout_119=dout_117&dout_78;
   dout_120=dout_117^dout_78;
   dout_121=dout_118|dout_119;
   dout_122=dout_87^dout_94;
   dout_123=dout_87&dout_94;
   dout_124=dout_122&dout_83;
   dout_125=dout_122^dout_83;
   dout_126=dout_123|dout_124;
   dout_127=dout_53^dout_95;
   dout_128=dout_53&dout_95;
   dout_129=dout_127&dout_88;
   dout_130=dout_127^dout_88;
   dout_131=dout_128|dout_129;
   dout_132=((B >> 0)&1)&((A >> 4)&1);
   dout_133=((B >> 1)&1)&((A >> 4)&1);
   dout_134=((B >> 2)&1)&((A >> 4)&1);
   dout_135=((B >> 3)&1)&((A >> 4)&1);
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_140=dout_105^dout_132;
   dout_141=dout_105&dout_132;
   dout_142=dout_140&dout_101;
   dout_143=dout_140^dout_101;
   dout_144=dout_141|dout_142;
   dout_145=dout_110^dout_133;
   dout_146=dout_110&dout_133;
   dout_147=dout_145&dout_106;
   dout_148=dout_145^dout_106;
   dout_149=dout_146|dout_147;
   dout_150=dout_115^dout_134;
   dout_151=dout_115&dout_134;
   dout_152=dout_150&dout_111;
   dout_153=dout_150^dout_111;
   dout_154=dout_151|dout_152;
   dout_155=dout_120^dout_135;
   dout_156=dout_120&dout_135;
   dout_157=dout_155&dout_116;
   dout_158=dout_155^dout_116;
   dout_159=dout_156|dout_157;
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_121;
   dout_163=dout_160^dout_121;
   dout_164=dout_161|dout_162;
   dout_165=dout_130^dout_137;
   dout_166=dout_130&dout_137;
   dout_167=dout_165&dout_126;
   dout_168=dout_165^dout_126;
   dout_169=dout_166|dout_167;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_172=dout_170&dout_131;
   dout_173=dout_170^dout_131;
   dout_174=dout_171|dout_172;
   dout_175=((B >> 0)&1)&((A >> 5)&1);
   dout_176=((B >> 1)&1)&((A >> 5)&1);
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_183=dout_148^dout_175;
   dout_184=dout_148&dout_175;
   dout_185=dout_183&dout_144;
   dout_186=dout_183^dout_144;
   dout_187=dout_184|dout_185;
   dout_188=dout_153^dout_176;
   dout_189=dout_153&dout_176;
   dout_190=dout_188&dout_149;
   dout_191=dout_188^dout_149;
   dout_192=dout_189|dout_190;
   dout_193=dout_158^dout_177;
   dout_194=dout_158&dout_177;
   dout_195=dout_193&dout_154;
   dout_196=dout_193^dout_154;
   dout_197=dout_194|dout_195;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_159;
   dout_201=dout_198^dout_159;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_218=((B >> 0)&1)&((A >> 6)&1);
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_226=dout_191^dout_218;
   dout_227=dout_191&dout_218;
   dout_228=dout_226&dout_187;
   dout_229=dout_226^dout_187;
   dout_230=dout_227|dout_228;
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_233=dout_231&dout_192;
   dout_234=dout_231^dout_192;
   dout_235=dout_232|dout_233;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_197;
   dout_239=dout_236^dout_197;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_234^dout_261;
   dout_270=dout_234&dout_261;
   dout_271=dout_269&dout_230;
   dout_272=dout_269^dout_230;
   dout_273=dout_270|dout_271;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_235;
   dout_277=dout_274^dout_235;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_304=dout_277^dout_273;
   dout_305=dout_277&dout_273;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_302^dout_298;
   dout_327=dout_302&dout_298;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_268^dout_303;
   dout_332=((A >> 7)&1)&dout_303;
   dout_333=dout_331&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_16&1) << 0;
   O |= (dout_32&1) << 1;
   O |= (dout_54&1) << 2;
   O |= (dout_100&1) << 3;
   O |= (dout_143&1) << 4;
   O |= (dout_186&1) << 5;
   O |= (dout_229&1) << 6;
   O |= (dout_272&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.45 %
// MAE = 2.3 
// WCE% = 1.37 %
// WCE = 7.0 
// WCRE% = 300.00 %
// EP% = 87.50 %
// MRE% = 1.23 %
// MSE = 8.0 
// PDK45_PWR = 0.019 mW
// PDK45_AREA = 43.6 um2
// PDK45_DELAY = 0.39 ns


uint64_t evoapproxlib::evoapprox_t::add8u_5EZ(uint64_t a, uint64_t b)
{
  uint16_t c = 0;
  uint8_t n2 = (a >> 1) & 0x1;
  uint8_t n4 = (a >> 2) & 0x1;
  uint8_t n6 = (a >> 3) & 0x1;
  uint8_t n8 = (a >> 4) & 0x1;
  uint8_t n10 = (a >> 5) & 0x1;
  uint8_t n12 = (a >> 6) & 0x1;
  uint8_t n14 = (a >> 7) & 0x1;
  uint8_t n20 = (b >> 2) & 0x1;
  uint8_t n22 = (b >> 3) & 0x1;
  uint8_t n24 = (b >> 4) & 0x1;
  uint8_t n26 = (b >> 5) & 0x1;
  uint8_t n28 = (b >> 6) & 0x1;
  uint8_t n30 = (b >> 7) & 0x1;
  uint8_t n32;
  uint8_t n36;
  uint8_t n43;
  uint8_t n62;
  uint8_t n63;
  uint8_t n72;
  uint8_t n73;
  uint8_t n82;
  uint8_t n83;
  uint8_t n92;
  uint8_t n93;
  uint8_t n94;
  uint8_t n102;
  uint8_t n103;
  uint8_t n143;
  uint8_t n162;
  uint8_t n163;
  uint8_t n168;
  uint8_t n169;
  uint8_t n173;
  uint8_t n182;
  uint8_t n193;
  uint8_t n223;
  uint8_t n230;
  uint8_t n242;
  uint8_t n263;
  uint8_t n322;
  uint8_t n332;
  uint8_t n342;
  uint8_t n382;
  uint8_t n392;
  uint8_t n402;
  uint8_t n412;
  uint8_t n413;
  uint8_t n422;

  n32 = n28 ^ n12;
  n36 = n24 | n8;
  n43 = ~(n2 ^ n2);
  n62 = n6 ^ n22;
  n63 = n6 & n22;
  n72 = n8 ^ n24;
  n73 = n8 & n24;
  n82 = n10 ^ n26;
  n83 = n10 & n26;
  n92 = n12 ^ n28;
  n93 = n12 & n28;
  n94 = n83;
  n102 = n14 ^ n30;
  n103 = n14 & n30;
  n143 = n36 & n63;
  n162 = n73 | n143;
  n163 = n73 | n143;
  n168 = n82;
  n169 = n82;
  n173 = n32 & n94;
  n182 = n32 & n169;
  n193 = n93 | n173;
  n223 = n182 & n163;
  n230 = n162;
  n242 = n193 | n223;
  n263 = n230;
  n322 = n63;
  n332 = n168 & n263;
  n342 = n94 | n332;
  n382 = n72 ^ n322;
  n392 = n168 ^ n263;
  n402 = n92 ^ n342;
  n412 = n102 ^ n242;
  n413 = n102 & n242;
  n422 = n103 | n413;

  c |= (n20 & 0x1) << 0;
  c |= (n4 & 0x1) << 1;
  c |= (n43 & 0x1) << 2;
  c |= (n62 & 0x1) << 3;
  c |= (n382 & 0x1) << 4;
  c |= (n392 & 0x1) << 5;
  c |= (n402 & 0x1) << 6;
  c |= (n412 & 0x1) << 7;
  c |= (n422 & 0x1) << 8;

  return c;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.39 %
// MAE = 2.0 
// WCE% = 1.56 %
// WCE = 8.0 
// WCRE% = 66.67 %
// EP% = 46.88 %
// MRE% = 1.04 %
// MSE = 10 
// PDK45_PWR = 0.023 mW
// PDK45_AREA = 65.7 um2
// PDK45_DELAY = 0.39 ns


uint64_t evoapproxlib::evoapprox_t::add8u_8MK(uint64_t a, uint64_t b) {
  int wa[8];
  int wb[8];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  int sig_17 = wa[0] & wb[0];
  int sig_18 = wa[1] ^ wb[1];
  int sig_19 = wa[1] & wb[1];
  int sig_21 = sig_18 | sig_17;
  int sig_22 = sig_19 | wb[2];
  int sig_25 = wa[3] ^ wb[3];
  int sig_26 = wa[2] | sig_22;
  int sig_29 = wa[3] & wb[3];
  int sig_30 = wa[0] ^ wb[0];
  int sig_32 = sig_29;
  int sig_33 = wa[4] ^ wb[4];
  int sig_34 = wa[4] & wb[4];
  int sig_35 = sig_33 & sig_32;
  int sig_36 = sig_33 ^ sig_32;
  int sig_37 = sig_34 | sig_35;
  int sig_38 = wa[5] ^ wb[5];
  int sig_39 = wa[5] & wb[5];
  int sig_40 = sig_38 & sig_37;
  int sig_41 = sig_38 ^ sig_37;
  int sig_42 = sig_39 | sig_40;
  int sig_43 = wa[6] ^ wb[6];
  int sig_44 = wa[6] & wb[6];
  int sig_45 = sig_43 & sig_42;
  int sig_46 = sig_43 ^ sig_42;
  int sig_47 = sig_44 | sig_45;
  int sig_48 = wa[7] ^ wb[7];
  int sig_49 = wa[7] & wb[7];
  int sig_50 = sig_48 & sig_47;
  int sig_51 = sig_48 ^ sig_47;
  int sig_52 = sig_49 | sig_50;
  y |=  (sig_30 & 0x01) << 0; // default output
  y |=  (sig_21 & 0x01) << 1; // default output
  y |=  (sig_26 & 0x01) << 2; // default output
  y |=  (sig_25 & 0x01) << 3; // default output
  y |=  (sig_36 & 0x01) << 4; // default output
  y |=  (sig_41 & 0x01) << 5; // default output
  y |=  (sig_46 & 0x01) << 6; // default output
  y |=  (sig_51 & 0x01) << 7; // default output
  y |=  (sig_52 & 0x01) << 8; // default output
   return y;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 30.39 %
// MAE = 39 
// WCE% = 100.00 %
// WCE = 128 
// WCRE% = 6400.00 %
// EP% = 54.43 %
// MRE% = 150.85 %
// MSE = 3013 
// PDK45_PWR = 0.030 mW
// PDK45_AREA = 71.8 um2
// PDK45_DELAY = 0.44 ns


uint64_t evoapproxlib::evoapprox_t::add8s_7YK(const uint64_t B,const uint64_t A)
{
   uint64_t dout_16, dout_17, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_41, dout_42, dout_43, dout_45, dout_47, dout_48, dout_49;
   uint64_t O;

   dout_16=((A >> 0)&1)^((B >> 0)&1);
   dout_17=((A >> 0)&1)&((B >> 0)&1);
   dout_18=((A >> 1)&1)^((B >> 1)&1);
   dout_19=((A >> 1)&1)&((B >> 1)&1);
   dout_20=dout_18&dout_17;
   dout_21=dout_18^dout_17;
   dout_22=dout_19|dout_20;
   dout_23=((A >> 2)&1)^((B >> 2)&1);
   dout_24=((A >> 2)&1)&((B >> 2)&1);
   dout_25=dout_23&dout_22;
   dout_26=dout_23^dout_22;
   dout_27=dout_24|dout_25;
   dout_28=((A >> 3)&1)^((B >> 3)&1);
   dout_29=((A >> 3)&1)&((B >> 3)&1);
   dout_30=dout_28&dout_27;
   dout_31=dout_28^dout_27;
   dout_32=dout_29|dout_30;
   dout_33=((A >> 4)&1)^((B >> 4)&1);
   dout_34=((A >> 4)&1)&((B >> 4)&1);
   dout_35=dout_33&dout_32;
   dout_36=dout_33^dout_32;
   dout_37=dout_34|dout_35;
   dout_38=((A >> 5)&1)^((B >> 5)&1);
   dout_39=((A >> 5)&1)&((B >> 5)&1);
   dout_41=dout_38^dout_37;
   dout_42=dout_39|dout_38;
   dout_43=((A >> 6)&1)|((B >> 6)&1);
   dout_45=dout_43&dout_42;
   dout_47=((A >> 6)&1)|dout_45;
   dout_48=((A >> 7)&1)^((B >> 7)&1);
   dout_49=dout_48^dout_47;

   O = 0;
   O |= (dout_16&1) << 0;
   O |= (dout_21&1) << 1;
   O |= (dout_26&1) << 2;
   O |= (dout_31&1) << 3;
   O |= (dout_36&1) << 4;
   O |= (dout_41&1) << 5;
   O |= (dout_49&1) << 6;
   O |= (dout_49&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mse parameters
***/
// MAE% = 2.23 %
// MAE = 5.7 
// WCE% = 6.64 %
// WCE = 17 
// WCRE% = 1600.00 %
// EP% = 94.73 %
// MRE% = 22.56 %
// MSE = 48 
// PDK45_PWR = 0.014 mW
// PDK45_AREA = 32.4 um2
// PDK45_DELAY = 0.27 ns


uint64_t evoapproxlib::evoapprox_t::add8se_8ZX(const uint64_t B,const uint64_t A)
{
   uint64_t dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_38, dout_44, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_63, dout_65, dout_66, dout_68, dout_81, dout_82, dout_83, dout_84;
   uint64_t O;

   dout_26=((A >> 5)&1)&((B >> 5)&1);
   dout_27=((A >> 5)&1)^((B >> 5)&1);
   dout_28=((A >> 6)&1)&((B >> 6)&1);
   dout_29=((A >> 6)&1)^((B >> 6)&1);
   dout_30=((A >> 7)&1)&((B >> 7)&1);
   dout_31=((A >> 7)&1)^((B >> 7)&1);
   dout_32=((A >> 7)&1)^((B >> 7)&1);
   dout_38=((B >> 4)&1)^0xFFFFFFFFFFFFFFFFU;
   dout_44=dout_27&((B >> 4)&1);
   dout_46=dout_26|dout_44;
   dout_47=dout_29&dout_26;
   dout_48=dout_29&dout_27;
   dout_49=dout_28|dout_47;
   dout_50=dout_31&dout_28;
   dout_51=dout_31&dout_29;
   dout_52=dout_30|dout_50;
   dout_63=dout_48&((B >> 4)&1);
   dout_65=dout_49|dout_63;
   dout_66=dout_51&dout_46;
   dout_68=dout_52|dout_66;
   dout_81=dout_27^((B >> 4)&1);
   dout_82=dout_29^dout_46;
   dout_83=dout_31^dout_65;
   dout_84=dout_32^dout_68;

   O = 0;
   O |= (dout_46&1) << 0;
   O |= (((A >> 1)&1)&1) << 1;
   O |= (((B >> 3)&1)&1) << 2;
   O |= (dout_38&1) << 3;
   O |= (((A >> 4)&1)&1) << 4;
   O |= (dout_81&1) << 5;
   O |= (dout_82&1) << 6;
   O |= (dout_83&1) << 7;
   O |= (dout_84&1) << 8;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 8.01 %
// MAE = 5249 
// WCE% = 27.24 %
// WCE = 17853 
// WCRE% = 300.00 %
// EP% = 99.22 %
// MRE% = 59.69 %
// MSE = 42811.074e3 
// PDK45_PWR = 0.0017 mW
// PDK45_AREA = 13.1 um2
// PDK45_DELAY = 0.10 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_17QU(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_71, dout_79, dout_293, dout_338, dout_340, dout_345;   int avg=0;

   dout_71=((B >> 6)&1)&((A >> 7)&1);
   dout_79=((B >> 7)&1)&((A >> 7)&1);
   dout_293=((A >> 6)&1)|((A >> 7)&1);
   dout_338=dout_293&((B >> 7)&1);
   dout_340=((A >> 6)&1)&((B >> 5)&1);
   dout_345=dout_79^dout_338;

   O = 0;
   O |= (0&1) << 0;
   O |= (0&1) << 1;
   O |= (dout_71&1) << 2;
   O |= (0&1) << 3;
   O |= (0&1) << 4;
   O |= (0&1) << 5;
   O |= (0&1) << 6;
   O |= (dout_79&1) << 7;
   O |= (dout_71&1) << 8;
   O |= (0&1) << 9;
   O |= (0&1) << 10;
   O |= (dout_71&1) << 11;
   O |= (dout_71&1) << 12;
   O |= (dout_340&1) << 13;
   O |= (dout_345&1) << 14;
   O |= (dout_79&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 16.64 %
// MAE = 43 
// WCE% = 50.00 %
// WCE = 128 
// WCRE% = 6350.00 %
// EP% = 99.22 %
// MRE% = 75.00 %
// MSE = 2723 
// PDK45_PWR = 0.002 mW
// PDK45_AREA = 10.8 um2
// PDK45_DELAY = 0.09 ns


uint64_t evoapproxlib::evoapprox_t::add8se_7N1(const uint64_t B,const uint64_t A)
{
   uint64_t dout_29, dout_32, dout_53, dout_68, dout_72, dout_82, dout_84;
   uint64_t O;

   dout_29=((A >> 6)&1)|((B >> 6)&1);
   dout_32=((A >> 7)&1)^((B >> 7)&1);
   dout_53=((B >> 7)&1)|((A >> 7)&1);
   dout_68=((A >> 7)&1)|((B >> 7)&1);
   dout_72=dout_29|dout_53;
   dout_82=dout_32^dout_72;
   dout_84=dout_32^dout_68;

   O = 0;
   O |= (dout_82&1) << 0;
   O |= (dout_82&1) << 1;
   O |= (dout_82&1) << 2;
   O |= (dout_82&1) << 3;
   O |= (dout_82&1) << 4;
   O |= (dout_82&1) << 5;
   O |= (dout_82&1) << 6;
   O |= (0&1) << 7;
   O |= (dout_84&1) << 8;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 2.50 %
// MAE = 3.2 
// WCE% = 5.47 %
// WCE = 7.0 
// WCRE% = 700.00 %
// EP% = 87.50 %
// MRE% = 18.19 %
// MSE = 16 
// PDK45_PWR = 0.025 mW
// PDK45_AREA = 57.3 um2
// PDK45_DELAY = 0.50 ns


uint64_t evoapproxlib::evoapprox_t::add8s_6ZP(const uint64_t A /* 8-bit signed operand */, const uint64_t B /* 8-bit signed operand */)
{
   uint64_t dout_18, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_51, dout_52, dout_53, dout_54, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61;
   uint64_t O;

   dout_18=((A >> 7)&1)&((B >> 7)&1);
   dout_20=((A >> 2)&1)&((B >> 2)&1);
   dout_21=((A >> 2)&1)|((B >> 2)&1);
   dout_22=((A >> 3)&1)&((B >> 3)&1);
   dout_23=((A >> 3)&1)^((B >> 3)&1);
   dout_24=((A >> 4)&1)&((B >> 4)&1);
   dout_25=((A >> 4)&1)^((B >> 4)&1);
   dout_26=((A >> 5)&1)&((B >> 5)&1);
   dout_27=((A >> 5)&1)^((B >> 5)&1);
   dout_28=((A >> 6)&1)&((B >> 6)&1);
   dout_29=((A >> 6)&1)^((B >> 6)&1);
   dout_30=((A >> 7)&1)^((B >> 7)&1);
   dout_31=dout_21&dout_18;
   dout_33=dout_20|dout_31;
   dout_34=dout_25&dout_22;
   dout_35=dout_25&dout_23;
   dout_36=dout_24|dout_34;
   dout_37=dout_29&dout_26;
   dout_38=dout_29&dout_27;
   dout_39=dout_28|dout_37;
   dout_41=dout_20|dout_31;
   dout_42=dout_38&dout_36;
   dout_43=dout_38&dout_35;
   dout_44=dout_39|dout_42;
   dout_45=dout_43&dout_41;
   dout_46=dout_44|dout_45;
   dout_47=dout_35&dout_33;
   dout_48=dout_36|dout_47;
   dout_51=dout_23&dout_41;
   dout_52=dout_22|dout_51;
   dout_53=dout_27&dout_48;
   dout_54=dout_26|dout_53;
   dout_56=dout_48|dout_45;
   dout_57=dout_23^dout_41;
   dout_58=dout_25^dout_52;
   dout_59=dout_27^dout_56;
   dout_60=dout_29^dout_54;
   dout_61=dout_30^dout_46;

   O = 0;
   O |= (((B >> 0)&1)&1) << 0;
   O |= (((B >> 1)&1)&1) << 1;
   O |= (0&1) << 2;
   O |= (dout_57&1) << 3;
   O |= (dout_58&1) << 4;
   O |= (dout_59&1) << 5;
   O |= (dout_60&1) << 6;
   O |= (dout_61&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 1.56 %
// MAE = 8.0 
// WCE% = 6.25 %
// WCE = 32 
// WCRE% = 400.00 %
// EP% = 78.91 %
// MRE% = 3.97 %
// MSE = 124 
// PDK45_PWR = 0.014 mW
// PDK45_AREA = 45.5 um2
// PDK45_DELAY = 0.24 ns


uint64_t evoapproxlib::evoapprox_t::add8u_8KJ(uint64_t a, uint64_t b) {
  int wa[8];
  int wb[8];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  int sig_16 = wa[0] ^ wb[0];
  int sig_17 = wa[0] & wb[0];
  int sig_18 = wa[1] ^ wb[1];
  int sig_20 = wb[4] | wa[4];
  int sig_21 = sig_18 | sig_17;
  int sig_31 = wb[5] ^ wa[5];
  int sig_37 = ~((int)0);
  int sig_39 = wa[5] & wb[5];
  int sig_41 = wa[3] | wb[3];
  int sig_42 = sig_39;
  int sig_43 = wa[6] ^ wb[6];
  int sig_44 = wa[6] & wb[6];
  int sig_45 = sig_43 & sig_42;
  int sig_46 = sig_43 ^ sig_42;
  int sig_47 = sig_44 | sig_45;
  int sig_48 = wa[7] ^ wb[7];
  int sig_49 = wa[7] & wb[7];
  int sig_50 = sig_48 & sig_47;
  int sig_51 = sig_48 ^ sig_47;
  int sig_52 = sig_49 | sig_50;
  y |=  (sig_16 & 0x01) << 0; // default output
  y |=  (sig_21 & 0x01) << 1; // default output
  y |=  (sig_37 & 0x01) << 2; // default output
  y |=  (sig_41 & 0x01) << 3; // default output
  y |=  (sig_20 & 0x01) << 4; // default output
  y |=  (sig_31 & 0x01) << 5; // default output
  y |=  (sig_46 & 0x01) << 6; // default output
  y |=  (sig_51 & 0x01) << 7; // default output
  y |=  (sig_52 & 0x01) << 8; // default output
   return y;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.34 %
// MAE = 224 
// WCE% = 1.37 %
// WCE = 896 
// WCRE% = 700.00 %
// EP% = 87.16 %
// MRE% = 15.72 %
// MSE = 95576 
// PDK45_PWR = 0.237 mW
// PDK45_AREA = 482.4 um2
// PDK45_DELAY = 1.19 ns


int16_t evoapproxlib::evoapprox_t::mul8s_1KTY(int8_t A, int8_t B)
{
  int16_t P, P_;
  uint8_t tmp, C_3_4,C_3_7,C_4_0,C_4_1,C_4_2,C_4_3,C_4_4,C_4_5,C_4_6,C_4_7,C_5_0,C_5_1,C_5_2,C_5_3,C_5_4,C_5_5,C_5_6,C_5_7,C_6_0,C_6_1,C_6_2,C_6_3,C_6_4,C_6_5,C_6_6,C_6_7,C_7_0,C_7_1,C_7_2,C_7_3,C_7_4,C_7_5,C_7_6,C_7_7,C_8_0,C_8_1,C_8_2,C_8_3,C_8_4,C_8_5,C_8_6,C_8_7,S_0_7,S_1_6,S_2_5,S_3_0,S_3_1,S_3_2,S_3_3,S_3_4,S_3_5,S_3_6,S_3_7,S_4_0,S_4_1,S_4_2,S_4_3,S_4_4,S_4_5,S_4_6,S_4_7,S_5_0,S_5_1,S_5_2,S_5_3,S_5_4,S_5_5,S_5_6,S_5_7,S_6_0,S_6_1,S_6_2,S_6_3,S_6_4,S_6_5,S_6_6,S_6_7,S_7_0,S_7_1,S_7_2,S_7_3,S_7_4,S_7_5,S_7_6,S_7_7,S_8_0,S_8_1,S_8_2,S_8_3,S_8_4,S_8_5,S_8_6,S_8_7;
  S_0_7 = 1;
  S_1_6 = 1;
  S_2_5 = 1;
  S_3_0 = (((A>>3)&1) & ((B>>0)&1));
  S_3_1 = (((A>>3)&1) & ((B>>1)&1));
  S_3_2 = (((A>>3)&1) & ((B>>2)&1));
  S_3_3 = (((A>>3)&1) & ((B>>3)&1));
  S_3_4 = S_2_5^(((A>>3)&1) & ((B>>4)&1));
  C_3_4 = S_2_5&(((A>>3)&1) & ((B>>4)&1));
  S_3_5 = (((A>>3)&1) & ((B>>5)&1));
  S_3_6 = (((A>>3)&1) & ((B>>6)&1));
  S_3_7 = 1^(((((A>>3)&1) & ((B>>7)&1)))^1);
  C_3_7 = 1&(((((A>>3)&1) & ((B>>7)&1)))^1);
  S_4_0 = S_3_1^(((A>>4)&1) & ((B>>0)&1));
  C_4_0 = S_3_1&(((A>>4)&1) & ((B>>0)&1));
  S_4_1 = S_3_2^(((A>>4)&1) & ((B>>1)&1));
  C_4_1 = S_3_2&(((A>>4)&1) & ((B>>1)&1));
  S_4_2 = S_3_3^(((A>>4)&1) & ((B>>2)&1));
  C_4_2 = S_3_3&(((A>>4)&1) & ((B>>2)&1));
  S_4_3 = S_3_4^(((A>>4)&1) & ((B>>3)&1));
  C_4_3 = S_3_4&(((A>>4)&1) & ((B>>3)&1));
  tmp = S_3_5^C_3_4;
  S_4_4 = tmp^(((A>>4)&1) & ((B>>4)&1));
  C_4_4 = (tmp&(((A>>4)&1) & ((B>>4)&1)))|(S_3_5&C_3_4);
  S_4_5 = S_3_6^(((A>>4)&1) & ((B>>5)&1));
  C_4_5 = S_3_6&(((A>>4)&1) & ((B>>5)&1));
  S_4_6 = S_3_7^(((A>>4)&1) & ((B>>6)&1));
  C_4_6 = S_3_7&(((A>>4)&1) & ((B>>6)&1));
  S_4_7 = C_3_7^(((((A>>4)&1) & ((B>>7)&1)))^1);
  C_4_7 = C_3_7&(((((A>>4)&1) & ((B>>7)&1)))^1);
  tmp = S_4_1^C_4_0;
  S_5_0 = tmp^(((A>>5)&1) & ((B>>0)&1));
  C_5_0 = (tmp&(((A>>5)&1) & ((B>>0)&1)))|(S_4_1&C_4_0);
  tmp = S_4_2^C_4_1;
  S_5_1 = tmp^(((A>>5)&1) & ((B>>1)&1));
  C_5_1 = (tmp&(((A>>5)&1) & ((B>>1)&1)))|(S_4_2&C_4_1);
  tmp = S_4_3^C_4_2;
  S_5_2 = tmp^(((A>>5)&1) & ((B>>2)&1));
  C_5_2 = (tmp&(((A>>5)&1) & ((B>>2)&1)))|(S_4_3&C_4_2);
  tmp = S_4_4^C_4_3;
  S_5_3 = tmp^(((A>>5)&1) & ((B>>3)&1));
  C_5_3 = (tmp&(((A>>5)&1) & ((B>>3)&1)))|(S_4_4&C_4_3);
  tmp = S_4_5^C_4_4;
  S_5_4 = tmp^(((A>>5)&1) & ((B>>4)&1));
  C_5_4 = (tmp&(((A>>5)&1) & ((B>>4)&1)))|(S_4_5&C_4_4);
  tmp = S_4_6^C_4_5;
  S_5_5 = tmp^(((A>>5)&1) & ((B>>5)&1));
  C_5_5 = (tmp&(((A>>5)&1) & ((B>>5)&1)))|(S_4_6&C_4_5);
  tmp = S_4_7^C_4_6;
  S_5_6 = tmp^(((A>>5)&1) & ((B>>6)&1));
  C_5_6 = (tmp&(((A>>5)&1) & ((B>>6)&1)))|(S_4_7&C_4_6);
  S_5_7 = C_4_7^(((((A>>5)&1) & ((B>>7)&1)))^1);
  C_5_7 = C_4_7&(((((A>>5)&1) & ((B>>7)&1)))^1);
  tmp = S_5_1^C_5_0;
  S_6_0 = tmp^(((A>>6)&1) & ((B>>0)&1));
  C_6_0 = (tmp&(((A>>6)&1) & ((B>>0)&1)))|(S_5_1&C_5_0);
  tmp = S_5_2^C_5_1;
  S_6_1 = tmp^(((A>>6)&1) & ((B>>1)&1));
  C_6_1 = (tmp&(((A>>6)&1) & ((B>>1)&1)))|(S_5_2&C_5_1);
  tmp = S_5_3^C_5_2;
  S_6_2 = tmp^(((A>>6)&1) & ((B>>2)&1));
  C_6_2 = (tmp&(((A>>6)&1) & ((B>>2)&1)))|(S_5_3&C_5_2);
  tmp = S_5_4^C_5_3;
  S_6_3 = tmp^(((A>>6)&1) & ((B>>3)&1));
  C_6_3 = (tmp&(((A>>6)&1) & ((B>>3)&1)))|(S_5_4&C_5_3);
  tmp = S_5_5^C_5_4;
  S_6_4 = tmp^(((A>>6)&1) & ((B>>4)&1));
  C_6_4 = (tmp&(((A>>6)&1) & ((B>>4)&1)))|(S_5_5&C_5_4);
  tmp = S_5_6^C_5_5;
  S_6_5 = tmp^(((A>>6)&1) & ((B>>5)&1));
  C_6_5 = (tmp&(((A>>6)&1) & ((B>>5)&1)))|(S_5_6&C_5_5);
  tmp = S_5_7^C_5_6;
  S_6_6 = tmp^(((A>>6)&1) & ((B>>6)&1));
  C_6_6 = (tmp&(((A>>6)&1) & ((B>>6)&1)))|(S_5_7&C_5_6);
  S_6_7 = C_5_7^(((((A>>6)&1) & ((B>>7)&1)))^1);
  C_6_7 = C_5_7&(((((A>>6)&1) & ((B>>7)&1)))^1);
  tmp = S_6_1^C_6_0;
  S_7_0 = tmp^(((((A>>7)&1) & ((B>>0)&1)))^1);
  C_7_0 = (tmp&(((((A>>7)&1) & ((B>>0)&1)))^1))|(S_6_1&C_6_0);
  tmp = S_6_2^C_6_1;
  S_7_1 = tmp^(((((A>>7)&1) & ((B>>1)&1)))^1);
  C_7_1 = (tmp&(((((A>>7)&1) & ((B>>1)&1)))^1))|(S_6_2&C_6_1);
  tmp = S_6_3^C_6_2;
  S_7_2 = tmp^(((((A>>7)&1) & ((B>>2)&1)))^1);
  C_7_2 = (tmp&(((((A>>7)&1) & ((B>>2)&1)))^1))|(S_6_3&C_6_2);
  tmp = S_6_4^C_6_3;
  S_7_3 = tmp^(((((A>>7)&1) & ((B>>3)&1)))^1);
  C_7_3 = (tmp&(((((A>>7)&1) & ((B>>3)&1)))^1))|(S_6_4&C_6_3);
  tmp = S_6_5^C_6_4;
  S_7_4 = tmp^(((((A>>7)&1) & ((B>>4)&1)))^1);
  C_7_4 = (tmp&(((((A>>7)&1) & ((B>>4)&1)))^1))|(S_6_5&C_6_4);
  tmp = S_6_6^C_6_5;
  S_7_5 = tmp^(((((A>>7)&1) & ((B>>5)&1)))^1);
  C_7_5 = (tmp&(((((A>>7)&1) & ((B>>5)&1)))^1))|(S_6_6&C_6_5);
  tmp = S_6_7^C_6_6;
  S_7_6 = tmp^(((((A>>7)&1) & ((B>>6)&1)))^1);
  C_7_6 = (tmp&(((((A>>7)&1) & ((B>>6)&1)))^1))|(S_6_7&C_6_6);
  S_7_7 = C_6_7^(((A>>7)&1) & ((B>>7)&1));
  C_7_7 = C_6_7&(((A>>7)&1) & ((B>>7)&1));
  S_8_0 = S_7_1^C_7_0;
  C_8_0 = S_7_1&C_7_0;
  tmp = S_7_2^C_8_0;
  S_8_1 = tmp^C_7_1;
  C_8_1 = (tmp&C_7_1)|(S_7_2&C_8_0);
  tmp = S_7_3^C_8_1;
  S_8_2 = tmp^C_7_2;
  C_8_2 = (tmp&C_7_2)|(S_7_3&C_8_1);
  tmp = S_7_4^C_8_2;
  S_8_3 = tmp^C_7_3;
  C_8_3 = (tmp&C_7_3)|(S_7_4&C_8_2);
  tmp = S_7_5^C_8_3;
  S_8_4 = tmp^C_7_4;
  C_8_4 = (tmp&C_7_4)|(S_7_5&C_8_3);
  tmp = S_7_6^C_8_4;
  S_8_5 = tmp^C_7_5;
  C_8_5 = (tmp&C_7_5)|(S_7_6&C_8_4);
  tmp = S_7_7^C_8_5;
  S_8_6 = tmp^C_7_6;
  C_8_6 = (tmp&C_7_6)|(S_7_7&C_8_5);
  tmp = 1^C_8_6;
  S_8_7 = tmp^C_7_7;
  C_8_7 = (tmp&C_7_7)|(1&C_8_6);
  P = 0;
  P |= (S_3_0 & 1) << 3;
  P |= (S_4_0 & 1) << 4;
  P |= (S_5_0 & 1) << 5;
  P |= (S_6_0 & 1) << 6;
  P |= (S_7_0 & 1) << 7;
  P |= (S_8_0 & 1) << 8;
  P |= (S_8_1 & 1) << 9;
  P |= (S_8_2 & 1) << 10;
  P |= (S_8_3 & 1) << 11;
  P |= (S_8_4 & 1) << 12;
  P |= (S_8_5 & 1) << 13;
  P |= (S_8_6 & 1) << 14;
  P |= (S_8_7 & 1) << 15;
  return P;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.00 %
// MAE = 0 
// WCE% = 0.00 %
// WCE = 0 
// WCRE% = 0.00 %
// EP% = 0.00 %
// MRE% = 0.00 %
// MSE = 0 
// PDK45_PWR = 0.425 mW
// PDK45_AREA = 729.8 um2
// PDK45_DELAY = 1.48 ns


int16_t evoapproxlib::evoapprox_t::mul8s_1KV8(int8_t A, int8_t B)
{
  int16_t P, P_;
  uint8_t tmp, C_1_0,C_1_1,C_1_2,C_1_3,C_1_4,C_1_5,C_1_6,C_1_7,C_2_0,C_2_1,C_2_2,C_2_3,C_2_4,C_2_5,C_2_6,C_2_7,C_3_0,C_3_1,C_3_2,C_3_3,C_3_4,C_3_5,C_3_6,C_3_7,C_4_0,C_4_1,C_4_2,C_4_3,C_4_4,C_4_5,C_4_6,C_4_7,C_5_0,C_5_1,C_5_2,C_5_3,C_5_4,C_5_5,C_5_6,C_5_7,C_6_0,C_6_1,C_6_2,C_6_3,C_6_4,C_6_5,C_6_6,C_6_7,C_7_0,C_7_1,C_7_2,C_7_3,C_7_4,C_7_5,C_7_6,C_7_7,C_8_0,C_8_1,C_8_2,C_8_3,C_8_4,C_8_5,C_8_6,C_8_7,S_0_0,S_0_1,S_0_2,S_0_3,S_0_4,S_0_5,S_0_6,S_0_7,S_1_0,S_1_1,S_1_2,S_1_3,S_1_4,S_1_5,S_1_6,S_1_7,S_2_0,S_2_1,S_2_2,S_2_3,S_2_4,S_2_5,S_2_6,S_2_7,S_3_0,S_3_1,S_3_2,S_3_3,S_3_4,S_3_5,S_3_6,S_3_7,S_4_0,S_4_1,S_4_2,S_4_3,S_4_4,S_4_5,S_4_6,S_4_7,S_5_0,S_5_1,S_5_2,S_5_3,S_5_4,S_5_5,S_5_6,S_5_7,S_6_0,S_6_1,S_6_2,S_6_3,S_6_4,S_6_5,S_6_6,S_6_7,S_7_0,S_7_1,S_7_2,S_7_3,S_7_4,S_7_5,S_7_6,S_7_7,S_8_0,S_8_1,S_8_2,S_8_3,S_8_4,S_8_5,S_8_6,S_8_7;
  S_0_0 = (((A>>0)&1) & ((B>>0)&1));
  S_0_1 = (((A>>0)&1) & ((B>>1)&1));
  S_0_2 = (((A>>0)&1) & ((B>>2)&1));
  S_0_3 = (((A>>0)&1) & ((B>>3)&1));
  S_0_4 = (((A>>0)&1) & ((B>>4)&1));
  S_0_5 = (((A>>0)&1) & ((B>>5)&1));
  S_0_6 = (((A>>0)&1) & ((B>>6)&1));
  S_0_7 = (((((A>>0)&1) & ((B>>7)&1)))^1);
  S_1_0 = S_0_1^(((A>>1)&1) & ((B>>0)&1));
  C_1_0 = S_0_1&(((A>>1)&1) & ((B>>0)&1));
  S_1_1 = S_0_2^(((A>>1)&1) & ((B>>1)&1));
  C_1_1 = S_0_2&(((A>>1)&1) & ((B>>1)&1));
  S_1_2 = S_0_3^(((A>>1)&1) & ((B>>2)&1));
  C_1_2 = S_0_3&(((A>>1)&1) & ((B>>2)&1));
  S_1_3 = S_0_4^(((A>>1)&1) & ((B>>3)&1));
  C_1_3 = S_0_4&(((A>>1)&1) & ((B>>3)&1));
  S_1_4 = S_0_5^(((A>>1)&1) & ((B>>4)&1));
  C_1_4 = S_0_5&(((A>>1)&1) & ((B>>4)&1));
  S_1_5 = S_0_6^(((A>>1)&1) & ((B>>5)&1));
  C_1_5 = S_0_6&(((A>>1)&1) & ((B>>5)&1));
  S_1_6 = S_0_7^(((A>>1)&1) & ((B>>6)&1));
  C_1_6 = S_0_7&(((A>>1)&1) & ((B>>6)&1));
  S_1_7 = 1^(((((A>>1)&1) & ((B>>7)&1)))^1);
  C_1_7 = 1&(((((A>>1)&1) & ((B>>7)&1)))^1);
  tmp = S_1_1^C_1_0;
  S_2_0 = tmp^(((A>>2)&1) & ((B>>0)&1));
  C_2_0 = (tmp&(((A>>2)&1) & ((B>>0)&1)))|(S_1_1&C_1_0);
  tmp = S_1_2^C_1_1;
  S_2_1 = tmp^(((A>>2)&1) & ((B>>1)&1));
  C_2_1 = (tmp&(((A>>2)&1) & ((B>>1)&1)))|(S_1_2&C_1_1);
  tmp = S_1_3^C_1_2;
  S_2_2 = tmp^(((A>>2)&1) & ((B>>2)&1));
  C_2_2 = (tmp&(((A>>2)&1) & ((B>>2)&1)))|(S_1_3&C_1_2);
  tmp = S_1_4^C_1_3;
  S_2_3 = tmp^(((A>>2)&1) & ((B>>3)&1));
  C_2_3 = (tmp&(((A>>2)&1) & ((B>>3)&1)))|(S_1_4&C_1_3);
  tmp = S_1_5^C_1_4;
  S_2_4 = tmp^(((A>>2)&1) & ((B>>4)&1));
  C_2_4 = (tmp&(((A>>2)&1) & ((B>>4)&1)))|(S_1_5&C_1_4);
  tmp = S_1_6^C_1_5;
  S_2_5 = tmp^(((A>>2)&1) & ((B>>5)&1));
  C_2_5 = (tmp&(((A>>2)&1) & ((B>>5)&1)))|(S_1_6&C_1_5);
  tmp = S_1_7^C_1_6;
  S_2_6 = tmp^(((A>>2)&1) & ((B>>6)&1));
  C_2_6 = (tmp&(((A>>2)&1) & ((B>>6)&1)))|(S_1_7&C_1_6);
  S_2_7 = C_1_7^(((((A>>2)&1) & ((B>>7)&1)))^1);
  C_2_7 = C_1_7&(((((A>>2)&1) & ((B>>7)&1)))^1);
  tmp = S_2_1^C_2_0;
  S_3_0 = tmp^(((A>>3)&1) & ((B>>0)&1));
  C_3_0 = (tmp&(((A>>3)&1) & ((B>>0)&1)))|(S_2_1&C_2_0);
  tmp = S_2_2^C_2_1;
  S_3_1 = tmp^(((A>>3)&1) & ((B>>1)&1));
  C_3_1 = (tmp&(((A>>3)&1) & ((B>>1)&1)))|(S_2_2&C_2_1);
  tmp = S_2_3^C_2_2;
  S_3_2 = tmp^(((A>>3)&1) & ((B>>2)&1));
  C_3_2 = (tmp&(((A>>3)&1) & ((B>>2)&1)))|(S_2_3&C_2_2);
  tmp = S_2_4^C_2_3;
  S_3_3 = tmp^(((A>>3)&1) & ((B>>3)&1));
  C_3_3 = (tmp&(((A>>3)&1) & ((B>>3)&1)))|(S_2_4&C_2_3);
  tmp = S_2_5^C_2_4;
  S_3_4 = tmp^(((A>>3)&1) & ((B>>4)&1));
  C_3_4 = (tmp&(((A>>3)&1) & ((B>>4)&1)))|(S_2_5&C_2_4);
  tmp = S_2_6^C_2_5;
  S_3_5 = tmp^(((A>>3)&1) & ((B>>5)&1));
  C_3_5 = (tmp&(((A>>3)&1) & ((B>>5)&1)))|(S_2_6&C_2_5);
  tmp = S_2_7^C_2_6;
  S_3_6 = tmp^(((A>>3)&1) & ((B>>6)&1));
  C_3_6 = (tmp&(((A>>3)&1) & ((B>>6)&1)))|(S_2_7&C_2_6);
  S_3_7 = C_2_7^(((((A>>3)&1) & ((B>>7)&1)))^1);
  C_3_7 = C_2_7&(((((A>>3)&1) & ((B>>7)&1)))^1);
  tmp = S_3_1^C_3_0;
  S_4_0 = tmp^(((A>>4)&1) & ((B>>0)&1));
  C_4_0 = (tmp&(((A>>4)&1) & ((B>>0)&1)))|(S_3_1&C_3_0);
  tmp = S_3_2^C_3_1;
  S_4_1 = tmp^(((A>>4)&1) & ((B>>1)&1));
  C_4_1 = (tmp&(((A>>4)&1) & ((B>>1)&1)))|(S_3_2&C_3_1);
  tmp = S_3_3^C_3_2;
  S_4_2 = tmp^(((A>>4)&1) & ((B>>2)&1));
  C_4_2 = (tmp&(((A>>4)&1) & ((B>>2)&1)))|(S_3_3&C_3_2);
  tmp = S_3_4^C_3_3;
  S_4_3 = tmp^(((A>>4)&1) & ((B>>3)&1));
  C_4_3 = (tmp&(((A>>4)&1) & ((B>>3)&1)))|(S_3_4&C_3_3);
  tmp = S_3_5^C_3_4;
  S_4_4 = tmp^(((A>>4)&1) & ((B>>4)&1));
  C_4_4 = (tmp&(((A>>4)&1) & ((B>>4)&1)))|(S_3_5&C_3_4);
  tmp = S_3_6^C_3_5;
  S_4_5 = tmp^(((A>>4)&1) & ((B>>5)&1));
  C_4_5 = (tmp&(((A>>4)&1) & ((B>>5)&1)))|(S_3_6&C_3_5);
  tmp = S_3_7^C_3_6;
  S_4_6 = tmp^(((A>>4)&1) & ((B>>6)&1));
  C_4_6 = (tmp&(((A>>4)&1) & ((B>>6)&1)))|(S_3_7&C_3_6);
  S_4_7 = C_3_7^(((((A>>4)&1) & ((B>>7)&1)))^1);
  C_4_7 = C_3_7&(((((A>>4)&1) & ((B>>7)&1)))^1);
  tmp = S_4_1^C_4_0;
  S_5_0 = tmp^(((A>>5)&1) & ((B>>0)&1));
  C_5_0 = (tmp&(((A>>5)&1) & ((B>>0)&1)))|(S_4_1&C_4_0);
  tmp = S_4_2^C_4_1;
  S_5_1 = tmp^(((A>>5)&1) & ((B>>1)&1));
  C_5_1 = (tmp&(((A>>5)&1) & ((B>>1)&1)))|(S_4_2&C_4_1);
  tmp = S_4_3^C_4_2;
  S_5_2 = tmp^(((A>>5)&1) & ((B>>2)&1));
  C_5_2 = (tmp&(((A>>5)&1) & ((B>>2)&1)))|(S_4_3&C_4_2);
  tmp = S_4_4^C_4_3;
  S_5_3 = tmp^(((A>>5)&1) & ((B>>3)&1));
  C_5_3 = (tmp&(((A>>5)&1) & ((B>>3)&1)))|(S_4_4&C_4_3);
  tmp = S_4_5^C_4_4;
  S_5_4 = tmp^(((A>>5)&1) & ((B>>4)&1));
  C_5_4 = (tmp&(((A>>5)&1) & ((B>>4)&1)))|(S_4_5&C_4_4);
  tmp = S_4_6^C_4_5;
  S_5_5 = tmp^(((A>>5)&1) & ((B>>5)&1));
  C_5_5 = (tmp&(((A>>5)&1) & ((B>>5)&1)))|(S_4_6&C_4_5);
  tmp = S_4_7^C_4_6;
  S_5_6 = tmp^(((A>>5)&1) & ((B>>6)&1));
  C_5_6 = (tmp&(((A>>5)&1) & ((B>>6)&1)))|(S_4_7&C_4_6);
  S_5_7 = C_4_7^(((((A>>5)&1) & ((B>>7)&1)))^1);
  C_5_7 = C_4_7&(((((A>>5)&1) & ((B>>7)&1)))^1);
  tmp = S_5_1^C_5_0;
  S_6_0 = tmp^(((A>>6)&1) & ((B>>0)&1));
  C_6_0 = (tmp&(((A>>6)&1) & ((B>>0)&1)))|(S_5_1&C_5_0);
  tmp = S_5_2^C_5_1;
  S_6_1 = tmp^(((A>>6)&1) & ((B>>1)&1));
  C_6_1 = (tmp&(((A>>6)&1) & ((B>>1)&1)))|(S_5_2&C_5_1);
  tmp = S_5_3^C_5_2;
  S_6_2 = tmp^(((A>>6)&1) & ((B>>2)&1));
  C_6_2 = (tmp&(((A>>6)&1) & ((B>>2)&1)))|(S_5_3&C_5_2);
  tmp = S_5_4^C_5_3;
  S_6_3 = tmp^(((A>>6)&1) & ((B>>3)&1));
  C_6_3 = (tmp&(((A>>6)&1) & ((B>>3)&1)))|(S_5_4&C_5_3);
  tmp = S_5_5^C_5_4;
  S_6_4 = tmp^(((A>>6)&1) & ((B>>4)&1));
  C_6_4 = (tmp&(((A>>6)&1) & ((B>>4)&1)))|(S_5_5&C_5_4);
  tmp = S_5_6^C_5_5;
  S_6_5 = tmp^(((A>>6)&1) & ((B>>5)&1));
  C_6_5 = (tmp&(((A>>6)&1) & ((B>>5)&1)))|(S_5_6&C_5_5);
  tmp = S_5_7^C_5_6;
  S_6_6 = tmp^(((A>>6)&1) & ((B>>6)&1));
  C_6_6 = (tmp&(((A>>6)&1) & ((B>>6)&1)))|(S_5_7&C_5_6);
  S_6_7 = C_5_7^(((((A>>6)&1) & ((B>>7)&1)))^1);
  C_6_7 = C_5_7&(((((A>>6)&1) & ((B>>7)&1)))^1);
  tmp = S_6_1^C_6_0;
  S_7_0 = tmp^(((((A>>7)&1) & ((B>>0)&1)))^1);
  C_7_0 = (tmp&(((((A>>7)&1) & ((B>>0)&1)))^1))|(S_6_1&C_6_0);
  tmp = S_6_2^C_6_1;
  S_7_1 = tmp^(((((A>>7)&1) & ((B>>1)&1)))^1);
  C_7_1 = (tmp&(((((A>>7)&1) & ((B>>1)&1)))^1))|(S_6_2&C_6_1);
  tmp = S_6_3^C_6_2;
  S_7_2 = tmp^(((((A>>7)&1) & ((B>>2)&1)))^1);
  C_7_2 = (tmp&(((((A>>7)&1) & ((B>>2)&1)))^1))|(S_6_3&C_6_2);
  tmp = S_6_4^C_6_3;
  S_7_3 = tmp^(((((A>>7)&1) & ((B>>3)&1)))^1);
  C_7_3 = (tmp&(((((A>>7)&1) & ((B>>3)&1)))^1))|(S_6_4&C_6_3);
  tmp = S_6_5^C_6_4;
  S_7_4 = tmp^(((((A>>7)&1) & ((B>>4)&1)))^1);
  C_7_4 = (tmp&(((((A>>7)&1) & ((B>>4)&1)))^1))|(S_6_5&C_6_4);
  tmp = S_6_6^C_6_5;
  S_7_5 = tmp^(((((A>>7)&1) & ((B>>5)&1)))^1);
  C_7_5 = (tmp&(((((A>>7)&1) & ((B>>5)&1)))^1))|(S_6_6&C_6_5);
  tmp = S_6_7^C_6_6;
  S_7_6 = tmp^(((((A>>7)&1) & ((B>>6)&1)))^1);
  C_7_6 = (tmp&(((((A>>7)&1) & ((B>>6)&1)))^1))|(S_6_7&C_6_6);
  S_7_7 = C_6_7^(((A>>7)&1) & ((B>>7)&1));
  C_7_7 = C_6_7&(((A>>7)&1) & ((B>>7)&1));
  S_8_0 = S_7_1^C_7_0;
  C_8_0 = S_7_1&C_7_0;
  tmp = S_7_2^C_8_0;
  S_8_1 = tmp^C_7_1;
  C_8_1 = (tmp&C_7_1)|(S_7_2&C_8_0);
  tmp = S_7_3^C_8_1;
  S_8_2 = tmp^C_7_2;
  C_8_2 = (tmp&C_7_2)|(S_7_3&C_8_1);
  tmp = S_7_4^C_8_2;
  S_8_3 = tmp^C_7_3;
  C_8_3 = (tmp&C_7_3)|(S_7_4&C_8_2);
  tmp = S_7_5^C_8_3;
  S_8_4 = tmp^C_7_4;
  C_8_4 = (tmp&C_7_4)|(S_7_5&C_8_3);
  tmp = S_7_6^C_8_4;
  S_8_5 = tmp^C_7_5;
  C_8_5 = (tmp&C_7_5)|(S_7_6&C_8_4);
  tmp = S_7_7^C_8_5;
  S_8_6 = tmp^C_7_6;
  C_8_6 = (tmp&C_7_6)|(S_7_7&C_8_5);
  tmp = 1^C_8_6;
  S_8_7 = tmp^C_7_7;
  C_8_7 = (tmp&C_7_7)|(1&C_8_6);
  P = 0;
  P |= (S_0_0 & 1) << 0;
  P |= (S_1_0 & 1) << 1;
  P |= (S_2_0 & 1) << 2;
  P |= (S_3_0 & 1) << 3;
  P |= (S_4_0 & 1) << 4;
  P |= (S_5_0 & 1) << 5;
  P |= (S_6_0 & 1) << 6;
  P |= (S_7_0 & 1) << 7;
  P |= (S_8_0 & 1) << 8;
  P |= (S_8_1 & 1) << 9;
  P |= (S_8_2 & 1) << 10;
  P |= (S_8_3 & 1) << 11;
  P |= (S_8_4 & 1) << 12;
  P |= (S_8_5 & 1) << 13;
  P |= (S_8_6 & 1) << 14;
  P |= (S_8_7 & 1) << 15;
  return P;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 0.078 %
// MAE = 0.2 
// WCE% = 0.39 %
// WCE = 1.0 
// WCRE% = 50.00 %
// EP% = 25.00 %
// MRE% = 0.87 %
// MSE = 0.2 
// PDK45_PWR = 0.034 mW
// PDK45_AREA = 70.4 um2
// PDK45_DELAY = 0.62 ns


uint64_t evoapproxlib::evoapprox_t::add8se_8YC(const uint64_t B,const uint64_t A)
{
   uint64_t dout_16, dout_17, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_65, dout_66, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84;
   uint64_t O;

   dout_16=((A >> 0)&1)&((B >> 0)&1);
   dout_17=(((A >> 0)&1)&((B >> 0)&1))^0xFFFFFFFFFFFFFFFFU;
   dout_18=((A >> 1)&1)&((B >> 1)&1);
   dout_19=((A >> 1)&1)^((B >> 1)&1);
   dout_20=((A >> 2)&1)&((B >> 2)&1);
   dout_21=((A >> 2)&1)^((B >> 2)&1);
   dout_22=((A >> 3)&1)&((B >> 3)&1);
   dout_23=((A >> 3)&1)^((B >> 3)&1);
   dout_24=((A >> 4)&1)&((B >> 4)&1);
   dout_25=((A >> 4)&1)^((B >> 4)&1);
   dout_26=((A >> 5)&1)&((B >> 5)&1);
   dout_27=((A >> 5)&1)^((B >> 5)&1);
   dout_28=((A >> 6)&1)&((B >> 6)&1);
   dout_29=((A >> 6)&1)^((B >> 6)&1);
   dout_30=((A >> 7)&1)&((B >> 7)&1);
   dout_31=((A >> 7)&1)^((B >> 7)&1);
   dout_32=((A >> 7)&1)^((B >> 7)&1);
   dout_33=dout_19&dout_16;
   dout_34=dout_18|dout_33;
   dout_35=dout_21&dout_18;
   dout_36=dout_21&dout_19;
   dout_37=dout_20|dout_35;
   dout_38=dout_23&dout_20;
   dout_39=dout_23&dout_21;
   dout_40=dout_22|dout_38;
   dout_41=dout_25&dout_22;
   dout_42=dout_25&dout_23;
   dout_43=dout_24|dout_41;
   dout_44=dout_27&dout_24;
   dout_45=dout_27&dout_25;
   dout_46=dout_26|dout_44;
   dout_47=dout_29&dout_26;
   dout_48=dout_29&dout_27;
   dout_49=dout_28|dout_47;
   dout_50=dout_31&dout_28;
   dout_51=dout_31&dout_29;
   dout_52=dout_30|dout_50;
   dout_53=dout_36&dout_16;
   dout_54=dout_37|dout_53;
   dout_55=dout_39&dout_34;
   dout_56=dout_40|dout_55;
   dout_57=dout_42&dout_37;
   dout_58=dout_42&dout_36;
   dout_59=dout_43|dout_57;
   dout_60=dout_45&dout_40;
   dout_61=dout_45&dout_39;
   dout_62=dout_46|dout_60;
   dout_63=dout_48&dout_43;
   dout_64=dout_48&dout_42;
   dout_65=dout_49|dout_63;
   dout_66=dout_51&dout_46;
   dout_67=dout_51&dout_45;
   dout_68=dout_52|dout_66;
   dout_69=dout_58&dout_16;
   dout_70=dout_59|dout_69;
   dout_71=dout_61&dout_34;
   dout_72=dout_62|dout_71;
   dout_73=dout_64&dout_54;
   dout_74=dout_65|dout_73;
   dout_75=dout_67&dout_56;
   dout_76=dout_68|dout_75;
   dout_77=dout_19^dout_16;
   dout_78=dout_21^dout_34;
   dout_79=dout_23^dout_54;
   dout_80=dout_25^dout_56;
   dout_81=dout_27^dout_70;
   dout_82=dout_29^dout_72;
   dout_83=dout_31^dout_74;
   dout_84=dout_32^dout_76;

   O = 0;
   O |= (dout_17&1) << 0;
   O |= (dout_77&1) << 1;
   O |= (dout_78&1) << 2;
   O |= (dout_79&1) << 3;
   O |= (dout_80&1) << 4;
   O |= (dout_81&1) << 5;
   O |= (dout_82&1) << 6;
   O |= (dout_83&1) << 7;
   O |= (dout_84&1) << 8;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 1.09 %
// MAE = 2.8 
// WCE% = 3.12 %
// WCE = 8.0 
// WCRE% = 700.00 %
// EP% = 89.06 %
// MRE% = 10.79 %
// MSE = 12 
// PDK45_PWR = 0.019 mW
// PDK45_AREA = 41.3 um2
// PDK45_DELAY = 0.35 ns


uint64_t evoapproxlib::evoapprox_t::add8se_8VV(const uint64_t B,const uint64_t A)
{
   uint64_t dout_31, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54;
   uint64_t O;

   dout_31=((B >> 3)&1)^0xFFFFFFFFFFFFFFFFU;
   dout_33=((A >> 4)&1)^((B >> 4)&1);
   dout_34=((A >> 4)&1)&((B >> 4)&1);
   dout_35=dout_33&((B >> 3)&1);
   dout_36=dout_33^((B >> 3)&1);
   dout_37=dout_34|dout_35;
   dout_38=((A >> 5)&1)^((B >> 5)&1);
   dout_39=((A >> 5)&1)&((B >> 5)&1);
   dout_40=dout_38&dout_37;
   dout_41=dout_38^dout_37;
   dout_42=dout_39|dout_40;
   dout_43=((A >> 6)&1)^((B >> 6)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=dout_43&dout_42;
   dout_46=dout_43^dout_42;
   dout_47=dout_44|dout_45;
   dout_48=((A >> 7)&1)^((B >> 7)&1);
   dout_49=((A >> 7)&1)&((B >> 7)&1);
   dout_50=dout_48&dout_47;
   dout_51=dout_48^dout_47;
   dout_52=dout_49|dout_50;
   dout_53=((A >> 7)&1)^((B >> 7)&1);
   dout_54=dout_53^dout_52;

   O = 0;
   O |= (0&1) << 0;
   O |= (((A >> 3)&1)&1) << 1;
   O |= (((A >> 3)&1)&1) << 2;
   O |= (dout_31&1) << 3;
   O |= (dout_36&1) << 4;
   O |= (dout_41&1) << 5;
   O |= (dout_46&1) << 6;
   O |= (dout_51&1) << 7;
   O |= (dout_54&1) << 8;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 1.56 %
// MAE = 2.0 
// WCE% = 4.69 %
// WCE = 6.0 
// WCRE% = 300.00 %
// EP% = 71.48 %
// MRE% = 9.74 %
// MSE = 6.5 
// PDK45_PWR = 0.028 mW
// PDK45_AREA = 63.4 um2
// PDK45_DELAY = 0.53 ns


uint64_t evoapproxlib::evoapprox_t::add8s_6S5(const uint64_t B,const uint64_t A)
{
   uint64_t dout_16, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49;
   uint64_t O;

   dout_16=((A >> 0)&1)^((B >> 0)&1);
   dout_23=((A >> 2)&1)^((B >> 2)&1);
   dout_24=((A >> 2)&1)&((B >> 2)&1);
   dout_25=dout_23&((A >> 7)&1);
   dout_26=dout_23^dout_25;
   dout_27=dout_24|dout_25;
   dout_28=((A >> 3)&1)^((B >> 3)&1);
   dout_29=((A >> 3)&1)&((B >> 3)&1);
   dout_30=dout_28&dout_27;
   dout_31=dout_28^dout_27;
   dout_32=dout_29|dout_30;
   dout_33=((A >> 4)&1)^((B >> 4)&1);
   dout_34=((A >> 4)&1)&((B >> 4)&1);
   dout_35=dout_33&dout_32;
   dout_36=dout_33^dout_32;
   dout_37=dout_34|dout_35;
   dout_38=((A >> 5)&1)^((B >> 5)&1);
   dout_39=((A >> 5)&1)&((B >> 5)&1);
   dout_40=dout_38&dout_37;
   dout_41=dout_38^dout_37;
   dout_42=dout_39|dout_40;
   dout_43=((A >> 6)&1)^((B >> 6)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=dout_43&dout_42;
   dout_46=dout_43^dout_42;
   dout_47=dout_44|dout_45;
   dout_48=((A >> 7)&1)^((B >> 7)&1);
   dout_49=dout_48^dout_47;

   O = 0;
   O |= (dout_16&1) << 0;
   O |= (dout_26&1) << 1;
   O |= (dout_26&1) << 2;
   O |= (dout_31&1) << 3;
   O |= (dout_36&1) << 4;
   O |= (dout_41&1) << 5;
   O |= (dout_46&1) << 6;
   O |= (dout_49&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 15.35 %
// MAE = 39 
// WCE% = 50.00 %
// WCE = 128 
// WCRE% = 9500.00 %
// EP% = 99.22 %
// MRE% = 100.10 %
// MSE = 2301 
// PDK45_PWR = 0.000065 mW
// PDK45_AREA = 1.4 um2
// PDK45_DELAY = 0.01 ns


uint64_t evoapproxlib::evoapprox_t::add8se_90X(const uint64_t B,const uint64_t A)
{
   uint64_t dout_30;
   uint64_t O;

   dout_30=((A >> 7)&1)^0xFFFFFFFFFFFFFFFFU;

   O = 0;
   O |= (((B >> 5)&1)&1) << 0;
   O |= (((B >> 5)&1)&1) << 1;
   O |= (((A >> 6)&1)&1) << 2;
   O |= (((B >> 5)&1)&1) << 3;
   O |= (((A >> 6)&1)&1) << 4;
   O |= (dout_30&1) << 5;
   O |= (dout_30&1) << 6;
   O |= (((B >> 7)&1)&1) << 7;
   O |= (((B >> 7)&1)&1) << 8;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek and R. Hrbacek, "Role of circuit representation in evolutionary design of energy-efficient approximate circuits" in IET Computers & Digital Techniques, vol. 12, no. 4, pp. 139-149, 7 2018. doi: 10.1049/iet-cdt.2017.0188 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 3.40 %
// MAE = 17 
// WCE% = 9.96 %
// WCE = 51 
// WCRE% = 1500.00 %
// EP% = 98.44 %
// MRE% = 9.24 %
// MSE = 432 
// PDK45_PWR = 0.0075 mW
// PDK45_AREA = 17.8 um2
// PDK45_DELAY = 0.19 ns


uint64_t evoapproxlib::evoapprox_t::add8u_0H4(uint64_t a, uint64_t b) {
  uint64_t o = 0;
  int n_198=0, n_44=0, n_42=0, n_149=0, n_147=0, n_12=0, n_182=0, n_180=0, n_8=0, n_9=0;
  int n_184=0, n_4=0, n_5=0, n_6=0, n_7=0, n_0=0, n_1=0, n_2=0, n_3=0, n_37=0;
  int n_38=0, n_14=0, n_15=0, n_16=0, n_13=0, n_10=0, n_11=0, n_213=0, n_211=0;
  n_0 = (a >> 0) & 0x1;
  n_1 = (a >> 1) & 0x1;
  n_2 = (a >> 2) & 0x1;
  n_3 = (a >> 3) & 0x1;
  n_4 = (a >> 4) & 0x1;
  n_5 = (a >> 5) & 0x1;
  n_6 = (a >> 6) & 0x1;
  n_7 = (a >> 7) & 0x1;
  n_8 = (b >> 0) & 0x1;
  n_9 = (b >> 1) & 0x1;
  n_10 = (b >> 2) & 0x1;
  n_11 = (b >> 3) & 0x1;
  n_12 = (b >> 4) & 0x1;
  n_13 = (b >> 5) & 0x1;
  n_14 = (b >> 6) & 0x1;
  n_15 = (b >> 7) & 0x1;
  n_16 = n_15 | n_7;
  n_37 = n_7 & n_15;
  n_38 = n_15 ^ n_7;
  n_42 = n_6 ^ n_14;
  n_44 = n_6 & n_14;
  n_147 = n_42 & n_5;
  n_149 = ~(n_44 | n_147);
  n_180 = n_16 & n_147;
  n_182 = n_16 & n_44;
  n_184 = n_37 | n_182;
  n_198 = n_184 | n_180;
  n_211 = n_42 ^ n_5;
  n_213 = ~(n_38 ^ n_149);
  o |= (n_4 & 0x01) << 0;
  o |= (n_7 & 0x01) << 1;
  o |= (n_9 & 0x01) << 2;
  o |= (n_4 & 0x01) << 3;
  o |= (n_8 & 0x01) << 4;
  o |= (n_13 & 0x01) << 5;
  o |= (n_211 & 0x01) << 6;
  o |= (n_213 & 0x01) << 7;
  o |= (n_198 & 0x01) << 8;
  return o;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 25.47 %
// MAE = 33 
// WCE% = 72.66 %
// WCE = 93 
// WCRE% = 5600.00 %
// EP% = 99.11 %
// MRE% = 161.98 %
// MSE = 1507 
// PDK45_PWR = 0.0054 mW
// PDK45_AREA = 21.6 um2
// PDK45_DELAY = 0.17 ns


uint64_t evoapproxlib::evoapprox_t::add8s_701(const uint64_t A /* 8-bit signed operand */, const uint64_t B /* 8-bit signed operand */)
{
   uint64_t dout_20, dout_28, dout_30, dout_33, dout_40, dout_57, dout_60;
   uint64_t O;

   dout_20=(((B >> 6)&1)^((A >> 6)&1))^0xFFFFFFFFFFFFFFFFU;
   dout_28=((A >> 6)&1)&((B >> 6)&1);
   dout_30=((A >> 7)&1)^((B >> 7)&1);
   dout_33=((B >> 7)&1)&((A >> 7)&1);
   dout_40=(dout_33|dout_20)^0xFFFFFFFFFFFFFFFFU;
   dout_57=dout_28|dout_33;
   dout_60=dout_57^dout_30;

   O = 0;
   O |= (dout_40&1) << 0;
   O |= (((A >> 0)&1)&1) << 1;
   O |= (0&1) << 2;
   O |= (dout_40&1) << 3;
   O |= (((A >> 0)&1)&1) << 4;
   O |= (((A >> 5)&1)&1) << 5;
   O |= (dout_40&1) << 6;
   O |= (dout_60&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.018 %
// MAE = 12 
// WCE% = 0.29 %
// WCE = 192 
// WCRE% = 28.57 %
// EP% = 9.38 %
// MRE% = 0.13 %
// MSE = 1792 
// PDK45_PWR = 0.388 mW
// PDK45_AREA = 683.3 um2
// PDK45_DELAY = 1.35 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_1446(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_16, dout_17, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_65, dout_66, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_86, dout_87, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_98, dout_99, dout_100, dout_101, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110, dout_111, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143, dout_144, dout_145, dout_146, dout_147, dout_148, dout_149, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_171, dout_172, dout_173, dout_174, dout_175, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_183, dout_184, dout_185, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_16=((B >> 0)&1)&((A >> 0)&1);
   dout_17=((B >> 1)&1)&((A >> 0)&1);
   dout_18=((B >> 2)&1)&((A >> 0)&1);
   dout_19=((B >> 3)&1)&((A >> 0)&1);
   dout_20=((B >> 4)&1)&((A >> 0)&1);
   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_24=((B >> 0)&1)&((A >> 1)&1);
   dout_25=((B >> 1)&1)&((A >> 1)&1);
   dout_26=((B >> 2)&1)&((A >> 1)&1);
   dout_27=((B >> 3)&1)&((A >> 1)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_32=dout_17^dout_24;
   dout_33=dout_17&dout_24;
   dout_34=dout_18^dout_25;
   dout_35=dout_18&dout_25;
   dout_36=dout_19^dout_26;
   dout_37=dout_19&dout_26;
   dout_38=dout_20^dout_27;
   dout_39=dout_20&dout_27;
   dout_40=dout_21^dout_28;
   dout_41=dout_21&dout_28;
   dout_42=dout_22|dout_29;
   dout_43=dout_22&dout_29;
   dout_44=dout_23|dout_30;
   dout_45=dout_23&dout_30;
   dout_46=((B >> 0)&1)&((A >> 2)&1);
   dout_47=((B >> 1)&1)&((A >> 2)&1);
   dout_48=((B >> 2)&1)&((A >> 2)&1);
   dout_49=((B >> 3)&1)&((A >> 2)&1);
   dout_50=((B >> 4)&1)&((A >> 2)&1);
   dout_51=((B >> 5)&1)&((A >> 2)&1);
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_54=dout_34^dout_46;
   dout_55=dout_34&dout_46;
   dout_56=dout_54&dout_33;
   dout_57=dout_54^dout_33;
   dout_58=dout_55|dout_56;
   dout_59=dout_36^dout_47;
   dout_60=dout_36&dout_47;
   dout_61=dout_59&dout_35;
   dout_62=dout_59^dout_35;
   dout_63=dout_60|dout_61;
   dout_64=dout_38^dout_48;
   dout_65=dout_38&dout_48;
   dout_66=dout_64&dout_37;
   dout_67=dout_64^dout_37;
   dout_68=dout_65|dout_66;
   dout_69=dout_40^dout_49;
   dout_70=dout_40&dout_49;
   dout_71=dout_69&dout_39;
   dout_72=dout_69^dout_39;
   dout_73=dout_70|dout_71;
   dout_74=dout_42^dout_50;
   dout_75=dout_42&dout_50;
   dout_76=dout_74&dout_41;
   dout_77=dout_74^dout_41;
   dout_78=dout_75|dout_76;
   dout_79=dout_44^dout_51;
   dout_80=dout_44&dout_51;
   dout_81=dout_79&dout_43;
   dout_82=dout_79^dout_43;
   dout_83=dout_80|dout_81;
   dout_84=dout_31^dout_52;
   dout_85=dout_31&dout_52;
   dout_86=dout_84&dout_45;
   dout_87=dout_84^dout_45;
   dout_88=dout_85|dout_86;
   dout_89=((B >> 0)&1)&((A >> 3)&1);
   dout_90=((B >> 1)&1)&((A >> 3)&1);
   dout_91=((B >> 2)&1)&((A >> 3)&1);
   dout_92=((B >> 3)&1)&((A >> 3)&1);
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_97=dout_62^dout_89;
   dout_98=dout_62&dout_89;
   dout_99=dout_97&dout_58;
   dout_100=dout_97^dout_58;
   dout_101=dout_98|dout_99;
   dout_102=dout_67^dout_90;
   dout_103=dout_67&dout_90;
   dout_104=dout_102&dout_63;
   dout_105=dout_102^dout_63;
   dout_106=dout_103|dout_104;
   dout_107=dout_72^dout_91;
   dout_108=dout_72&dout_91;
   dout_109=dout_107&dout_68;
   dout_110=dout_107^dout_68;
   dout_111=dout_108|dout_109;
   dout_112=dout_77^dout_92;
   dout_113=dout_77&dout_92;
   dout_114=dout_112&dout_73;
   dout_115=dout_112^dout_73;
   dout_116=dout_113|dout_114;
   dout_117=dout_82^dout_93;
   dout_118=dout_82&dout_93;
   dout_119=dout_117&dout_78;
   dout_120=dout_117^dout_78;
   dout_121=dout_118|dout_119;
   dout_122=dout_87^dout_94;
   dout_123=dout_87&dout_94;
   dout_124=dout_122&dout_83;
   dout_125=dout_122^dout_83;
   dout_126=dout_123|dout_124;
   dout_127=dout_53^dout_95;
   dout_128=dout_53&dout_95;
   dout_129=dout_127&dout_88;
   dout_130=dout_127^dout_88;
   dout_131=dout_128|dout_129;
   dout_132=((B >> 0)&1)&((A >> 4)&1);
   dout_133=((B >> 1)&1)&((A >> 4)&1);
   dout_134=((B >> 2)&1)&((A >> 4)&1);
   dout_135=((B >> 3)&1)&((A >> 4)&1);
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_140=dout_105^dout_132;
   dout_141=dout_105&dout_132;
   dout_142=dout_140&dout_101;
   dout_143=dout_140^dout_101;
   dout_144=dout_141|dout_142;
   dout_145=dout_110^dout_133;
   dout_146=dout_110&dout_133;
   dout_147=dout_145&dout_106;
   dout_148=dout_145^dout_106;
   dout_149=dout_146|dout_147;
   dout_150=dout_115^dout_134;
   dout_151=dout_115&dout_134;
   dout_152=dout_150&dout_111;
   dout_153=dout_150^dout_111;
   dout_154=dout_151|dout_152;
   dout_155=dout_120^dout_135;
   dout_156=dout_120&dout_135;
   dout_157=dout_155&dout_116;
   dout_158=dout_155^dout_116;
   dout_159=dout_156|dout_157;
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_121;
   dout_163=dout_160^dout_121;
   dout_164=dout_161|dout_162;
   dout_165=dout_130^dout_137;
   dout_166=dout_130&dout_137;
   dout_167=dout_165&dout_126;
   dout_168=dout_165^dout_126;
   dout_169=dout_166|dout_167;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_172=dout_170&dout_131;
   dout_173=dout_170^dout_131;
   dout_174=dout_171|dout_172;
   dout_175=((B >> 0)&1)&((A >> 5)&1);
   dout_176=((B >> 1)&1)&((A >> 5)&1);
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_183=dout_148^dout_175;
   dout_184=dout_148&dout_175;
   dout_185=dout_183&dout_144;
   dout_186=dout_183^dout_144;
   dout_187=dout_184|dout_185;
   dout_188=dout_153^dout_176;
   dout_189=dout_153&dout_176;
   dout_190=dout_188&dout_149;
   dout_191=dout_188^dout_149;
   dout_192=dout_189|dout_190;
   dout_193=dout_158^dout_177;
   dout_194=dout_158&dout_177;
   dout_195=dout_193&dout_154;
   dout_196=dout_193^dout_154;
   dout_197=dout_194|dout_195;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_159;
   dout_201=dout_198^dout_159;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_218=((B >> 0)&1)&((A >> 6)&1);
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_226=dout_191^dout_218;
   dout_227=dout_191&dout_218;
   dout_228=dout_226&dout_187;
   dout_229=dout_226^dout_187;
   dout_230=dout_227|dout_228;
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_233=dout_231&dout_192;
   dout_234=dout_231^dout_192;
   dout_235=dout_232|dout_233;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_197;
   dout_239=dout_236^dout_197;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_234^dout_261;
   dout_270=dout_234&dout_261;
   dout_271=dout_269&dout_230;
   dout_272=dout_269^dout_230;
   dout_273=dout_270|dout_271;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_235;
   dout_277=dout_274^dout_235;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_304=dout_277^dout_273;
   dout_305=dout_277&dout_273;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_302^dout_298;
   dout_327=dout_302&dout_298;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_268^dout_303;
   dout_332=dout_268&dout_303;
   dout_333=dout_331&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_16&1) << 0;
   O |= (dout_32&1) << 1;
   O |= (dout_57&1) << 2;
   O |= (dout_100&1) << 3;
   O |= (dout_143&1) << 4;
   O |= (dout_186&1) << 5;
   O |= (dout_229&1) << 6;
   O |= (dout_272&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mse parameters
***/
// MAE% = 3.67 %
// MAE = 4.7 
// WCE% = 10.16 %
// WCE = 13 
// WCRE% = 400.00 %
// EP% = 94.56 %
// MRE% = 19.71 %
// MSE = 31 
// PDK45_PWR = 0.022 mW
// PDK45_AREA = 56.8 um2
// PDK45_DELAY = 0.48 ns


uint64_t evoapproxlib::evoapprox_t::add8s_6TN(const uint64_t B,const uint64_t A)
{
   uint64_t dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_33, dout_35, dout_37, dout_38, dout_39, dout_41, dout_44, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64;
   uint64_t O;

   dout_21=(((A >> 2)&1)&((B >> 2)&1))^0xFFFFFFFFFFFFFFFFU;
   dout_22=((A >> 3)&1)&((B >> 3)&1);
   dout_23=((A >> 3)&1)|((B >> 3)&1);
   dout_24=((A >> 4)&1)&((B >> 4)&1);
   dout_25=((A >> 4)&1)^((B >> 4)&1);
   dout_26=((A >> 5)&1)&((B >> 5)&1);
   dout_27=((A >> 5)&1)^((B >> 5)&1);
   dout_28=((A >> 6)&1)&((B >> 6)&1);
   dout_29=((A >> 6)&1)^((B >> 6)&1);
   dout_30=((A >> 7)&1)^((B >> 7)&1);
   dout_33=dout_22|((B >> 7)&1);
   dout_35=dout_25&dout_23;
   dout_37=dout_29&dout_26;
   dout_38=dout_29&dout_27;
   dout_39=dout_28|dout_37;
   dout_41=((A >> 0)&1)|dout_21;
   dout_44=dout_27&dout_24;
   dout_46=dout_26|dout_44;
   dout_47=dout_38&dout_24;
   dout_48=dout_38&dout_35;
   dout_49=dout_39|dout_47;
   dout_50=dout_23&dout_33;
   dout_51=dout_50|dout_22;
   dout_52=dout_35&dout_33;
   dout_53=dout_24|dout_52;
   dout_54=dout_27&dout_52;
   dout_55=dout_46|dout_54;
   dout_56=dout_48&dout_33;
   dout_57=dout_49|dout_56;
   dout_59=dout_21^dout_41;
   dout_60=dout_23^dout_51;
   dout_61=dout_25^dout_51;
   dout_62=dout_27^dout_53;
   dout_63=dout_29^dout_55;
   dout_64=dout_30^dout_57;

   O = 0;
   O |= (dout_60&1) << 0;
   O |= (dout_59&1) << 1;
   O |= (dout_64&1) << 2;
   O |= (dout_60&1) << 3;
   O |= (dout_61&1) << 4;
   O |= (dout_62&1) << 5;
   O |= (dout_63&1) << 6;
   O |= (dout_64&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 1.12 %
// MAE = 731 
// WCE% = 15.53 %
// WCE = 10176 
// WCRE% = 44.44 %
// EP% = 19.82 %
// MRE% = 2.64 %
// MSE = 55767.68e2 
// PDK45_PWR = 0.371 mW
// PDK45_AREA = 661.2 um2
// PDK45_DELAY = 1.36 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_JQQ(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_16, dout_17, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_65, dout_66, dout_67, dout_68, dout_69, dout_70, dout_72, dout_73, dout_74, dout_75, dout_77, dout_79, dout_80, dout_82, dout_83, dout_84, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_98, dout_99, dout_100, dout_101, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110, dout_111, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143, dout_144, dout_145, dout_146, dout_147, dout_148, dout_149, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_175, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_183, dout_184, dout_185, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_259, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_302, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_333, dout_334, dout_335;   int avg=0;

   dout_16=((B >> 0)&1)&((A >> 0)&1);
   dout_17=((B >> 1)&1)&((A >> 0)&1);
   dout_18=((B >> 2)&1)&((A >> 0)&1);
   dout_19=((B >> 3)&1)&((A >> 0)&1);
   dout_20=((B >> 4)&1)&((A >> 0)&1);
   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_24=((B >> 0)&1)&((A >> 1)&1);
   dout_25=((B >> 1)&1)&((A >> 1)&1);
   dout_26=((B >> 2)&1)&((A >> 1)&1);
   dout_27=((B >> 3)&1)&((A >> 1)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_32=dout_17^dout_24;
   dout_33=dout_17&dout_24;
   dout_34=dout_18^dout_25;
   dout_35=dout_18&dout_25;
   dout_36=dout_19^dout_26;
   dout_37=dout_19&dout_26;
   dout_38=dout_20^dout_27;
   dout_39=dout_20&dout_27;
   dout_40=dout_21^dout_28;
   dout_41=dout_21&dout_28;
   dout_42=dout_22^dout_29;
   dout_43=dout_22&dout_29;
   dout_44=dout_23|dout_30;
   dout_46=((B >> 0)&1)&((A >> 2)&1);
   dout_47=((B >> 1)&1)&((A >> 2)&1);
   dout_48=((B >> 2)&1)&((A >> 2)&1);
   dout_49=((B >> 3)&1)&((A >> 2)&1);
   dout_50=((B >> 4)&1)&((A >> 2)&1);
   dout_51=((B >> 5)&1)&((A >> 2)&1);
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_54=dout_34^dout_46;
   dout_55=dout_34&dout_46;
   dout_56=dout_54&dout_33;
   dout_57=dout_54^dout_33;
   dout_58=dout_55|dout_56;
   dout_59=dout_36^dout_47;
   dout_60=dout_36&dout_47;
   dout_61=dout_59&dout_35;
   dout_62=dout_59^dout_35;
   dout_63=dout_60|dout_61;
   dout_64=dout_38^dout_48;
   dout_65=dout_38&dout_48;
   dout_66=dout_64&dout_37;
   dout_67=dout_64^dout_37;
   dout_68=dout_65|dout_66;
   dout_69=dout_40^dout_49;
   dout_70=dout_40&dout_49;
   dout_72=dout_69^dout_39;
   dout_73=dout_70|dout_39;
   dout_74=dout_42^dout_50;
   dout_75=dout_42&dout_50;
   dout_77=dout_74|dout_41;
   dout_79=dout_44^dout_51;
   dout_80=dout_44&dout_51;
   dout_82=dout_79^dout_43;
   dout_83=dout_80|dout_43;
   dout_84=dout_31|dout_52;
   dout_89=((B >> 0)&1)&((A >> 3)&1);
   dout_90=((B >> 1)&1)&((A >> 3)&1);
   dout_91=((B >> 2)&1)&((A >> 3)&1);
   dout_92=((B >> 3)&1)&((A >> 3)&1);
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_97=dout_62^dout_89;
   dout_98=dout_62&dout_89;
   dout_99=dout_97&dout_58;
   dout_100=dout_97^dout_58;
   dout_101=dout_98|dout_99;
   dout_102=dout_67^dout_90;
   dout_103=dout_67&dout_90;
   dout_104=dout_102&dout_63;
   dout_105=dout_102^dout_63;
   dout_106=dout_103|dout_104;
   dout_107=dout_72^dout_91;
   dout_108=dout_72&dout_91;
   dout_109=dout_107&dout_68;
   dout_110=dout_107^dout_68;
   dout_111=dout_108|dout_109;
   dout_112=dout_77^dout_92;
   dout_113=dout_77&dout_92;
   dout_114=dout_112&dout_73;
   dout_115=dout_112^dout_73;
   dout_116=dout_113|dout_114;
   dout_117=dout_82^dout_93;
   dout_118=dout_82&dout_93;
   dout_119=dout_117&dout_75;
   dout_120=dout_117^dout_75;
   dout_121=dout_118|dout_119;
   dout_122=dout_84^dout_94;
   dout_123=dout_84&dout_94;
   dout_124=dout_122&dout_83;
   dout_125=dout_122^dout_83;
   dout_126=dout_123|dout_124;
   dout_127=dout_53|dout_95;
   dout_132=((B >> 0)&1)&((A >> 4)&1);
   dout_133=((B >> 1)&1)&((A >> 4)&1);
   dout_134=((B >> 2)&1)&((A >> 4)&1);
   dout_135=((B >> 3)&1)&((A >> 4)&1);
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_140=dout_105^dout_132;
   dout_141=dout_105&dout_132;
   dout_142=dout_140&dout_101;
   dout_143=dout_140^dout_101;
   dout_144=dout_141|dout_142;
   dout_145=dout_110^dout_133;
   dout_146=dout_110&dout_133;
   dout_147=dout_145&dout_106;
   dout_148=dout_145^dout_106;
   dout_149=dout_146|dout_147;
   dout_150=dout_115^dout_134;
   dout_151=dout_115&dout_134;
   dout_152=dout_150&dout_111;
   dout_153=dout_150^dout_111;
   dout_154=dout_151|dout_152;
   dout_155=dout_120^dout_135;
   dout_156=dout_120&dout_135;
   dout_157=dout_155&dout_116;
   dout_158=dout_155^dout_116;
   dout_159=dout_156|dout_157;
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_121;
   dout_163=dout_160^dout_121;
   dout_164=dout_161|dout_162;
   dout_165=dout_127^dout_137;
   dout_166=dout_127&dout_137;
   dout_167=dout_165&dout_126;
   dout_168=dout_165^dout_126;
   dout_169=dout_166|dout_167;
   dout_170=dout_96|dout_138;
   dout_175=((B >> 0)&1)&((A >> 5)&1);
   dout_176=((B >> 1)&1)&((A >> 5)&1);
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_183=dout_148^dout_175;
   dout_184=dout_148&dout_175;
   dout_185=dout_183&dout_144;
   dout_186=dout_183^dout_144;
   dout_187=dout_184|dout_185;
   dout_188=dout_153^dout_176;
   dout_189=dout_153&dout_176;
   dout_190=dout_188&dout_149;
   dout_191=dout_188^dout_149;
   dout_192=dout_189|dout_190;
   dout_193=dout_158^dout_177;
   dout_194=dout_158&dout_177;
   dout_195=dout_193&dout_154;
   dout_196=dout_193^dout_154;
   dout_197=dout_194|dout_195;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_159;
   dout_201=dout_198^dout_159;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_170^dout_180;
   dout_209=dout_170&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_218=((B >> 0)&1)&((A >> 6)&1);
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_226=dout_191^dout_218;
   dout_227=dout_191&dout_218;
   dout_228=dout_226&dout_187;
   dout_229=dout_226^dout_187;
   dout_230=dout_227|dout_228;
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_233=dout_231&dout_192;
   dout_234=dout_231^dout_192;
   dout_235=dout_232|dout_233;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_197;
   dout_239=dout_236^dout_197;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_213^dout_223;
   dout_252=dout_213&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_259=dout_256^dout_214;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_234^dout_261;
   dout_270=dout_234&dout_261;
   dout_271=dout_269&dout_230;
   dout_272=dout_269^dout_230;
   dout_273=dout_270|dout_271;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_235;
   dout_277=dout_274^dout_235;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225|dout_267;
   dout_300=dout_225&dout_267;
   dout_302=dout_299|dout_214;
   dout_304=dout_277^dout_273;
   dout_305=dout_277&dout_273;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_302^dout_298;
   dout_327=dout_299&dout_298;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_268^dout_300;
   dout_333=dout_331&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_300|dout_333;

   O = 0;
   O |= (dout_16&1) << 0;
   O |= (dout_32&1) << 1;
   O |= (dout_57&1) << 2;
   O |= (dout_100&1) << 3;
   O |= (dout_143&1) << 4;
   O |= (dout_186&1) << 5;
   O |= (dout_229&1) << 6;
   O |= (dout_272&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.74 %
// MAE = 3.8 
// WCE% = 3.71 %
// WCE = 19 
// WCRE% = 50.00 %
// EP% = 57.81 %
// MRE% = 1.89 %
// MSE = 46 
// PDK45_PWR = 0.019 mW
// PDK45_AREA = 56.8 um2
// PDK45_DELAY = 0.31 ns


uint64_t evoapproxlib::evoapprox_t::add8u_8FF(uint64_t a, uint64_t b) {
  int wa[8];
  int wb[8];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  int sig_18 = wb[2] ^ wa[2];
  int sig_20 = wb[0] | wa[0];
  int sig_24 = wa[2] & wb[2];
  int sig_25 = wb[1] | wa[1];
  int sig_27 = sig_24;
  int sig_28 = wa[3] ^ wb[3];
  int sig_29 = wa[3] & wb[3];
  int sig_31 = sig_28 | sig_27;
  int sig_32 = sig_29;
  int sig_33 = wa[4] ^ wb[4];
  int sig_34 = wa[4] & wb[4];
  int sig_36 = sig_33 | sig_32;
  int sig_37 = sig_34;
  int sig_38 = wa[5] ^ wb[5];
  int sig_39 = wa[5] & wb[5];
  int sig_40 = sig_38 & sig_37;
  int sig_41 = sig_38 ^ sig_37;
  int sig_42 = sig_39 | sig_40;
  int sig_43 = wa[6] ^ wb[6];
  int sig_44 = wa[6] & wb[6];
  int sig_45 = sig_43 & sig_42;
  int sig_46 = sig_43 ^ sig_42;
  int sig_47 = sig_44 | sig_45;
  int sig_48 = wa[7] ^ wb[7];
  int sig_49 = wa[7] & wb[7];
  int sig_50 = sig_48 & sig_47;
  int sig_51 = sig_48 ^ sig_47;
  int sig_52 = sig_49 | sig_50;
  y |=  (sig_20 & 0x01) << 0; // default output
  y |=  (sig_25 & 0x01) << 1; // default output
  y |=  (sig_18 & 0x01) << 2; // default output
  y |=  (sig_31 & 0x01) << 3; // default output
  y |=  (sig_36 & 0x01) << 4; // default output
  y |=  (sig_41 & 0x01) << 5; // default output
  y |=  (sig_46 & 0x01) << 6; // default output
  y |=  (sig_51 & 0x01) << 7; // default output
  y |=  (sig_52 & 0x01) << 8; // default output
   return y;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 0.16 %
// MAE = 0.8 
// WCE% = 0.59 %
// WCE = 3.0 
// WCRE% = 50.00 %
// EP% = 43.75 %
// MRE% = 0.40 %
// MSE = 1.5 
// PDK45_PWR = 0.024 mW
// PDK45_AREA = 57.3 um2
// PDK45_DELAY = 0.47 ns


uint64_t evoapproxlib::evoapprox_t::add8u_5QL(uint64_t a, uint64_t b)
{
  uint16_t c = 0;
  uint8_t n0 = (a >> 0) & 0x1;
  uint8_t n2 = (a >> 1) & 0x1;
  uint8_t n4 = (a >> 2) & 0x1;
  uint8_t n6 = (a >> 3) & 0x1;
  uint8_t n8 = (a >> 4) & 0x1;
  uint8_t n10 = (a >> 5) & 0x1;
  uint8_t n12 = (a >> 6) & 0x1;
  uint8_t n14 = (a >> 7) & 0x1;
  uint8_t n16 = (b >> 0) & 0x1;
  uint8_t n18 = (b >> 1) & 0x1;
  uint8_t n20 = (b >> 2) & 0x1;
  uint8_t n22 = (b >> 3) & 0x1;
  uint8_t n24 = (b >> 4) & 0x1;
  uint8_t n26 = (b >> 5) & 0x1;
  uint8_t n28 = (b >> 6) & 0x1;
  uint8_t n30 = (b >> 7) & 0x1;
  uint8_t n33;
  uint8_t n35;
  uint8_t n37;
  uint8_t n38;
  uint8_t n43;
  uint8_t n46;
  uint8_t n50;
  uint8_t n56;
  uint8_t n58;
  uint8_t n59;
  uint8_t n68;
  uint8_t n69;
  uint8_t n77;
  uint8_t n78;
  uint8_t n79;
  uint8_t n84;
  uint8_t n86;
  uint8_t n87;
  uint8_t n92;
  uint8_t n96;
  uint8_t n97;
  uint8_t n110;
  uint8_t n122;
  uint8_t n127;
  uint8_t n134;
  uint8_t n152;
  uint8_t n162;
  uint8_t n171;
  uint8_t n180;
  uint8_t n198;
  uint8_t n199;
  uint8_t n226;
  uint8_t n240;
  uint8_t n244;
  uint8_t n254;
  uint8_t n272;
  uint8_t n391;
  uint8_t n394;
  uint8_t n404;
  uint8_t n412;
  uint8_t n413;
  uint8_t n423;

  n33 = n12 | n28;
  n35 = n0 | n16;
  n37 = ~(n4 & n20);
  n38 = ~n37;
  n43 = n38;
  n46 = ~(n18 | n2);
  n50 = n4 ^ n20;
  n56 = n43;
  n58 = (n6 ^ n22) ^ n56;
  n59 = (n6 & n22) | (n22 & n56) | (n6 & n56);
  n68 = n8 ^ n24;
  n69 = n8 & n24;
  n77 = n68;
  n78 = n10 ^ n26;
  n79 = n10 & n26;
  n84 = n59;
  n86 = n12 ^ n28;
  n87 = n12 & n28;
  n92 = n78;
  n96 = n14 ^ n30;
  n97 = n14 & n30;
  n110 = ~n46;
  n122 = n77;
  n127 = n69;
  n134 = n77 & n84;
  n152 = n127 | n134;
  n162 = n33 & n79;
  n171 = n86 & n78;
  n180 = n87 | n162;
  n198 = n152;
  n199 = n152;
  n226 = n92 & n199;
  n240 = ~n84;
  n244 = n79 | n226;
  n254 = n171 & n198;
  n272 = n180 | n254;
  n391 = ~(n240 ^ n122);
  n394 = n78 ^ n198;
  n404 = n86 ^ n244;
  n412 = n96 ^ n272;
  n413 = n96 & n272;
  n423 = n97 | n413;

  c |= (n35 & 0x1) << 0;
  c |= (n110 & 0x1) << 1;
  c |= (n50 & 0x1) << 2;
  c |= (n58 & 0x1) << 3;
  c |= (n391 & 0x1) << 4;
  c |= (n394 & 0x1) << 5;
  c |= (n404 & 0x1) << 6;
  c |= (n412 & 0x1) << 7;
  c |= (n423 & 0x1) << 8;

  return c;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 1.54 %
// MAE = 1011 
// WCE% = 13.92 %
// WCE = 9124 
// WCRE% = 152.38 %
// EP% = 74.91 %
// MRE% = 7.46 %
// MSE = 36892.825e2 
// PDK45_PWR = 0.189 mW
// PDK45_AREA = 437.4 um2
// PDK45_DELAY = 1.48 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_L40(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_16, dout_17, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_37, dout_39, dout_44, dout_49, dout_54, dout_59, dout_66, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_76, dout_81, dout_86, dout_91, dout_96, dout_101, dout_111, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_121, dout_126, dout_131, dout_136, dout_141, dout_146, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_166, dout_171, dout_176, dout_181, dout_186, dout_194, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_233, dout_234, dout_236, dout_239, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_288, dout_289, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_304, dout_306, dout_307, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_16=((B >> 0)&1)&((A >> 0)&1);
   dout_17=((B >> 1)&1)&((A >> 0)&1);
   dout_18=((B >> 2)&1)&((A >> 0)&1);
   dout_19=((B >> 3)&1)&((A >> 0)&1);
   dout_20=((B >> 4)&1)&((A >> 0)&1);
   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_24=((B >> 0)&1)&((A >> 1)&1);
   dout_25=((B >> 1)&1)&((A >> 1)&1);
   dout_26=((B >> 2)&1)&((A >> 1)&1);
   dout_27=((B >> 3)&1)&((A >> 1)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_32=dout_17|dout_24;
   dout_37=dout_18|dout_25;
   dout_39=dout_19|dout_26;
   dout_44=dout_20|dout_27;
   dout_49=dout_21|dout_28;
   dout_54=dout_22|dout_29;
   dout_59=dout_23|dout_30;
   dout_66=((B >> 0)&1)&((A >> 2)&1);
   dout_67=((B >> 1)&1)&((A >> 2)&1);
   dout_68=((B >> 2)&1)&((A >> 2)&1);
   dout_69=((B >> 3)&1)&((A >> 2)&1);
   dout_70=((B >> 4)&1)&((A >> 2)&1);
   dout_71=((B >> 5)&1)&((A >> 2)&1);
   dout_72=((B >> 6)&1)&((A >> 2)&1);
   dout_73=((B >> 7)&1)&((A >> 2)&1);
   dout_74=dout_37|dout_66;
   dout_76=dout_39|dout_67;
   dout_81=dout_44|dout_68;
   dout_86=dout_49|dout_69;
   dout_91=dout_54|dout_70;
   dout_96=dout_59|dout_71;
   dout_101=dout_31|dout_72;
   dout_111=((B >> 0)&1)&((A >> 3)&1);
   dout_112=((B >> 1)&1)&((A >> 3)&1);
   dout_113=((B >> 2)&1)&((A >> 3)&1);
   dout_114=((B >> 3)&1)&((A >> 3)&1);
   dout_115=((B >> 4)&1)&((A >> 3)&1);
   dout_116=((B >> 5)&1)&((A >> 3)&1);
   dout_117=((B >> 6)&1)&((A >> 3)&1);
   dout_118=((B >> 7)&1)&((A >> 3)&1);
   dout_119=dout_76|dout_111;
   dout_121=dout_81|dout_112;
   dout_126=dout_86|dout_113;
   dout_131=dout_91|dout_114;
   dout_136=dout_96|dout_115;
   dout_141=dout_101|dout_116;
   dout_146=dout_73|dout_117;
   dout_156=((B >> 0)&1)&((A >> 4)&1);
   dout_157=((B >> 1)&1)&((A >> 4)&1);
   dout_158=((B >> 2)&1)&((A >> 4)&1);
   dout_159=((B >> 3)&1)&((A >> 4)&1);
   dout_160=((B >> 4)&1)&((A >> 4)&1);
   dout_161=((B >> 5)&1)&((A >> 4)&1);
   dout_162=((B >> 6)&1)&((A >> 4)&1);
   dout_163=((B >> 7)&1)&((A >> 4)&1);
   dout_164=dout_121|dout_156;
   dout_166=dout_126|dout_157;
   dout_171=dout_131|dout_158;
   dout_176=dout_136|dout_159;
   dout_181=dout_141|dout_160;
   dout_186=dout_146|dout_161;
   dout_194=dout_118|dout_162;
   dout_201=((B >> 0)&1)&((A >> 5)&1);
   dout_202=((B >> 1)&1)&((A >> 5)&1);
   dout_203=((B >> 2)&1)&((A >> 5)&1);
   dout_204=((B >> 3)&1)&((A >> 5)&1);
   dout_205=((B >> 4)&1)&((A >> 5)&1);
   dout_206=((B >> 5)&1)&((A >> 5)&1);
   dout_207=((B >> 6)&1)&((A >> 5)&1);
   dout_208=((B >> 7)&1)&((A >> 5)&1);
   dout_209=dout_166^dout_201;
   dout_210=dout_166&dout_201;
   dout_211=dout_171^dout_202;
   dout_212=dout_171&dout_202;
   dout_214=dout_211^dout_210;
   dout_215=dout_212|dout_210;
   dout_216=dout_176^dout_203;
   dout_217=dout_176&dout_203;
   dout_218=dout_216&dout_215;
   dout_219=dout_216^dout_215;
   dout_220=dout_217|dout_218;
   dout_221=dout_181^dout_204;
   dout_222=dout_181&dout_204;
   dout_223=dout_221&dout_220;
   dout_224=dout_221^dout_220;
   dout_225=dout_222|dout_223;
   dout_226=dout_186^dout_205;
   dout_227=dout_186&dout_205;
   dout_228=dout_226&dout_225;
   dout_229=dout_226^dout_225;
   dout_230=dout_227|dout_228;
   dout_231=dout_194|dout_206;
   dout_233=dout_231&dout_230;
   dout_234=dout_231^dout_230;
   dout_236=dout_163|dout_207;
   dout_239=dout_236|dout_233;
   dout_246=((B >> 0)&1)&((A >> 6)&1);
   dout_247=((B >> 1)&1)&((A >> 6)&1);
   dout_248=((B >> 2)&1)&((A >> 6)&1);
   dout_249=((B >> 3)&1)&((A >> 6)&1);
   dout_250=((B >> 4)&1)&((A >> 6)&1);
   dout_251=((B >> 5)&1)&((A >> 6)&1);
   dout_252=((B >> 6)&1)&((A >> 6)&1);
   dout_253=((B >> 7)&1)&((A >> 6)&1);
   dout_254=dout_214^dout_246;
   dout_255=dout_214&dout_246;
   dout_256=dout_219^dout_247;
   dout_257=dout_219&dout_247;
   dout_259=dout_256^dout_255;
   dout_260=dout_257|dout_255;
   dout_261=dout_224^dout_248;
   dout_262=dout_224&dout_248;
   dout_263=dout_261&dout_260;
   dout_264=dout_261^dout_260;
   dout_265=dout_262|dout_263;
   dout_266=dout_229^dout_249;
   dout_267=dout_229&dout_249;
   dout_268=dout_266&dout_265;
   dout_269=dout_266^dout_265;
   dout_270=dout_267|dout_268;
   dout_271=dout_234^dout_250;
   dout_272=dout_234&dout_250;
   dout_273=dout_271&dout_270;
   dout_274=dout_271^dout_270;
   dout_275=dout_272|dout_273;
   dout_276=dout_239^dout_251;
   dout_277=dout_239&dout_251;
   dout_278=dout_276&dout_275;
   dout_279=dout_276^dout_275;
   dout_280=dout_277|dout_278;
   dout_281=dout_208^dout_252;
   dout_282=dout_208&dout_252;
   dout_283=dout_281&dout_280;
   dout_284=dout_281^dout_280;
   dout_285=dout_282|dout_283;
   dout_288=dout_253&dout_285;
   dout_289=dout_253^dout_285;
   dout_291=((B >> 0)&1)&((A >> 7)&1);
   dout_292=((B >> 1)&1)&((A >> 7)&1);
   dout_293=((B >> 2)&1)&((A >> 7)&1);
   dout_294=((B >> 3)&1)&((A >> 7)&1);
   dout_295=((B >> 4)&1)&((A >> 7)&1);
   dout_296=((B >> 5)&1)&((A >> 7)&1);
   dout_297=((B >> 6)&1)&((A >> 7)&1);
   dout_298=((B >> 7)&1)&((A >> 7)&1);
   dout_299=dout_259^dout_291;
   dout_300=dout_259&dout_291;
   dout_301=dout_264^dout_292;
   dout_302=dout_264&dout_292;
   dout_304=dout_301|dout_300;
   dout_306=dout_269^dout_293;
   dout_307=dout_269&dout_293;
   dout_309=dout_306^dout_302;
   dout_310=dout_307|dout_302;
   dout_311=dout_274^dout_294;
   dout_312=dout_274&dout_294;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_279^dout_295;
   dout_317=dout_279&dout_295;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_284^dout_296;
   dout_322=dout_284&dout_296;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_289^dout_297;
   dout_327=dout_289&dout_297;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_288^dout_298;
   dout_332=dout_288&((A >> 7)&1);
   dout_333=((B >> 7)&1)&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_16&1) << 0;
   O |= (dout_32&1) << 1;
   O |= (dout_74&1) << 2;
   O |= (dout_119&1) << 3;
   O |= (dout_164&1) << 4;
   O |= (dout_209&1) << 5;
   O |= (dout_254&1) << 6;
   O |= (dout_299&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.017 %
// MAE = 11 
// WCE% = 0.061 %
// WCE = 40 
// WCRE% = 300.00 %
// EP% = 87.54 %
// MRE% = 0.59 %
// MSE = 212 
// PDK45_PWR = 0.345 mW
// PDK45_AREA = 604.5 um2
// PDK45_DELAY = 1.41 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_CK5(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_20, dout_21, dout_22, dout_23, dout_26, dout_28, dout_29, dout_30, dout_31, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_49, dout_50, dout_51, dout_52, dout_53, dout_68, dout_69, dout_70, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_87, dout_88, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_107, dout_108, dout_109, dout_110, dout_111, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_145, dout_146, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_171, dout_172, dout_173, dout_174, dout_175, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_183, dout_184, dout_185, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_20=((B >> 3)&1)&((A >> 0)&1);
   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_26=((B >> 2)&1)&((A >> 2)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_39=dout_20&dout_26;
   dout_40=dout_21|dout_28;
   dout_41=dout_21&dout_28;
   dout_42=dout_22^dout_29;
   dout_43=dout_22&dout_29;
   dout_44=dout_23^dout_30;
   dout_45=dout_23&dout_30;
   dout_49=((B >> 3)&1)&((A >> 2)&1);
   dout_50=((B >> 4)&1)&((A >> 2)&1);
   dout_51=((B >> 5)&1)&((A >> 2)&1);
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_68=dout_20|dout_26;
   dout_69=dout_40^dout_49;
   dout_70=dout_40&dout_49;
   dout_72=dout_69^dout_39;
   dout_73=dout_70|dout_39;
   dout_74=dout_42^dout_50;
   dout_75=dout_42&dout_50;
   dout_76=dout_74&dout_41;
   dout_77=dout_74^dout_41;
   dout_78=dout_75|dout_76;
   dout_79=dout_44^dout_51;
   dout_80=dout_44&dout_51;
   dout_81=dout_79&dout_43;
   dout_82=dout_79^dout_43;
   dout_83=dout_80|dout_81;
   dout_84=dout_31^dout_52;
   dout_85=dout_31&dout_52;
   dout_87=dout_84^dout_45;
   dout_88=dout_85|dout_45;
   dout_90=((B >> 1)&1)&((A >> 3)&1);
   dout_91=((B >> 2)&1)&((A >> 3)&1);
   dout_92=((B >> 3)&1)&((A >> 3)&1);
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_107=dout_72^dout_91;
   dout_108=dout_72&dout_91;
   dout_109=dout_107&dout_68;
   dout_110=dout_107^dout_68;
   dout_111=dout_108|dout_109;
   dout_112=dout_77^dout_92;
   dout_113=dout_77&dout_92;
   dout_114=dout_112&dout_73;
   dout_115=dout_112^dout_73;
   dout_116=dout_113|dout_114;
   dout_117=dout_82^dout_93;
   dout_118=dout_82&dout_93;
   dout_119=dout_117&dout_78;
   dout_120=dout_117^dout_78;
   dout_121=dout_118|dout_119;
   dout_122=dout_87^dout_94;
   dout_123=dout_87&dout_94;
   dout_124=dout_122&dout_83;
   dout_125=dout_122^dout_83;
   dout_126=dout_123|dout_124;
   dout_127=dout_53^dout_95;
   dout_128=dout_53&dout_95;
   dout_129=dout_127&dout_88;
   dout_130=dout_127^dout_88;
   dout_131=dout_128|dout_129;
   dout_132=((B >> 0)&1)&((A >> 4)&1);
   dout_133=((B >> 1)&1)&((A >> 4)&1);
   dout_134=((B >> 2)&1)&((A >> 4)&1);
   dout_135=((B >> 3)&1)&((A >> 4)&1);
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_140=dout_90|dout_132;
   dout_141=dout_90&dout_132;
   dout_145=dout_110^dout_133;
   dout_146=dout_110&dout_133;
   dout_150=dout_115^dout_134;
   dout_151=dout_115&dout_134;
   dout_152=dout_150&dout_111;
   dout_153=dout_150^dout_111;
   dout_154=dout_151|dout_152;
   dout_155=dout_120^dout_135;
   dout_156=dout_120&dout_135;
   dout_157=dout_155&dout_116;
   dout_158=dout_155^dout_116;
   dout_159=dout_156|dout_157;
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_121;
   dout_163=dout_160^dout_121;
   dout_164=dout_161|dout_162;
   dout_165=dout_130^dout_137;
   dout_166=dout_130&dout_137;
   dout_167=dout_165&dout_126;
   dout_168=dout_165^dout_126;
   dout_169=dout_166|dout_167;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_172=dout_170&dout_131;
   dout_173=dout_170^dout_131;
   dout_174=dout_171|dout_172;
   dout_175=((B >> 0)&1)&((A >> 5)&1);
   dout_176=((B >> 1)&1)&((A >> 5)&1);
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_183=dout_145^dout_175;
   dout_184=dout_145&dout_175;
   dout_185=dout_183&dout_141;
   dout_186=dout_183^dout_141;
   dout_187=dout_184|dout_185;
   dout_188=dout_153^dout_176;
   dout_189=dout_153&dout_176;
   dout_190=dout_188&dout_146;
   dout_191=dout_188^dout_146;
   dout_192=dout_189|dout_190;
   dout_193=dout_158^dout_177;
   dout_194=dout_158&dout_177;
   dout_195=dout_193&dout_154;
   dout_196=dout_193^dout_154;
   dout_197=dout_194|dout_195;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_159;
   dout_201=dout_198^dout_159;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_218=((B >> 0)&1)&((A >> 6)&1);
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_226=dout_191^dout_218;
   dout_227=dout_191&dout_218;
   dout_228=dout_226&dout_187;
   dout_229=dout_226^dout_187;
   dout_230=dout_227|dout_228;
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_233=dout_231&dout_192;
   dout_234=dout_231^dout_192;
   dout_235=dout_232|dout_233;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_197;
   dout_239=dout_236^dout_197;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_234^dout_261;
   dout_270=dout_234&dout_261;
   dout_271=dout_269&dout_230;
   dout_272=dout_269^dout_230;
   dout_273=dout_270|dout_271;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_235;
   dout_277=dout_274^dout_235;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_304=dout_277^dout_273;
   dout_305=dout_277&dout_273;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_302^dout_298;
   dout_327=dout_302&dout_298;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_268^dout_303;
   dout_332=((A >> 7)&1)&dout_303;
   dout_333=dout_331&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_295&1) << 0;
   O |= (dout_123&1) << 1;
   O |= (0&1) << 2;
   O |= (dout_90&1) << 3;
   O |= (dout_140&1) << 4;
   O |= (dout_186&1) << 5;
   O |= (dout_229&1) << 6;
   O |= (dout_272&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 1.88 %
// MAE = 2.4 
// WCE% = 5.47 %
// WCE = 7.0 
// WCRE% = 400.00 %
// EP% = 87.50 %
// MRE% = 11.76 %
// MSE = 8.4 
// PDK45_PWR = 0.025 mW
// PDK45_AREA = 57.3 um2
// PDK45_DELAY = 0.53 ns


uint64_t evoapproxlib::evoapprox_t::add8s_6UN(const uint64_t B,const uint64_t A)
{
   uint64_t dout_16, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_32, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_43, dout_44, dout_46, dout_47, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_60, dout_61, dout_62, dout_63, dout_64;
   uint64_t O;

   dout_16=((A >> 7)&1)&((B >> 7)&1);
   dout_20=((A >> 2)&1)&((B >> 2)&1);
   dout_21=((A >> 2)&1)|((B >> 2)&1);
   dout_22=((A >> 3)&1)&((B >> 3)&1);
   dout_23=((A >> 3)&1)^((B >> 3)&1);
   dout_24=((A >> 4)&1)&((B >> 4)&1);
   dout_25=((A >> 4)&1)^((B >> 4)&1);
   dout_26=((A >> 5)&1)&((B >> 5)&1);
   dout_27=((A >> 5)&1)^((B >> 5)&1);
   dout_28=((A >> 6)&1)&((B >> 6)&1);
   dout_29=((A >> 6)&1)^((B >> 6)&1);
   dout_30=((A >> 7)&1)^((B >> 7)&1);
   dout_32=dout_21&dout_16;
   dout_34=dout_25&dout_22;
   dout_35=dout_25&dout_23;
   dout_36=dout_24|dout_34;
   dout_37=dout_29&dout_26;
   dout_38=dout_29&dout_27;
   dout_39=dout_28|dout_37;
   dout_43=dout_20|dout_32;
   dout_44=dout_27&dout_36;
   dout_46=dout_26|dout_44;
   dout_47=dout_38&dout_36;
   dout_49=dout_39|dout_47;
   dout_50=dout_23&dout_43;
   dout_51=dout_22|dout_50;
   dout_52=dout_35&dout_43;
   dout_53=dout_36|dout_52;
   dout_54=dout_27&dout_52;
   dout_55=dout_46|dout_54;
   dout_56=dout_38&dout_52;
   dout_57=dout_49|dout_56;
   dout_60=dout_23^dout_43;
   dout_61=dout_25^dout_51;
   dout_62=dout_27^dout_53;
   dout_63=dout_29^dout_55;
   dout_64=dout_30^dout_57;

   O = 0;
   O |= (dout_63&1) << 0;
   O |= (((A >> 1)&1)&1) << 1;
   O |= (((B >> 1)&1)&1) << 2;
   O |= (dout_60&1) << 3;
   O |= (dout_61&1) << 4;
   O |= (dout_62&1) << 5;
   O |= (dout_63&1) << 6;
   O |= (dout_64&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 0.43 %
// MAE = 284 
// WCE% = 2.15 %
// WCE = 1408 
// WCRE% = 80.00 %
// EP% = 87.31 %
// MRE% = 4.20 %
// MSE = 139814 
// PDK45_PWR = 0.142 mW
// PDK45_AREA = 390.5 um2
// PDK45_DELAY = 1.09 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_12N4(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_16, dout_17, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_34, dout_39, dout_42, dout_49, dout_54, dout_57, dout_59, dout_66, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_74, dout_76, dout_81, dout_86, dout_91, dout_99, dout_103, dout_105, dout_106, dout_111, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_121, dout_126, dout_131, dout_136, dout_141, dout_147, dout_149, dout_154, dout_155, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_166, dout_171, dout_176, dout_181, dout_186, dout_187, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_211, dout_216, dout_221, dout_226, dout_227, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_256, dout_261, dout_266, dout_267, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_301, dout_306, dout_307, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_16=((B >> 0)&1)&((A >> 0)&1);
   dout_17=((B >> 1)&1)&((A >> 0)&1);
   dout_18=((B >> 2)&1)&((A >> 0)&1);
   dout_19=((B >> 3)&1)&((A >> 0)&1);
   dout_20=((B >> 4)&1)&((A >> 0)&1);
   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_24=((B >> 0)&1)&((A >> 1)&1);
   dout_25=((B >> 1)&1)&((A >> 1)&1);
   dout_26=((B >> 2)&1)&((A >> 1)&1);
   dout_27=((B >> 3)&1)&((A >> 1)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_32=dout_17|dout_24;
   dout_34=dout_18|dout_25;
   dout_39=dout_19|dout_26;
   dout_42=dout_39|dout_27;
   dout_49=dout_21|dout_28;
   dout_54=dout_22|dout_29;
   dout_57=dout_54|dout_31;
   dout_59=dout_23|dout_30;
   dout_66=((B >> 0)&1)&((A >> 2)&1);
   dout_67=((B >> 1)&1)&((A >> 2)&1);
   dout_68=((B >> 2)&1)&((A >> 2)&1);
   dout_69=((B >> 3)&1)&((A >> 2)&1);
   dout_70=((B >> 4)&1)&((A >> 2)&1);
   dout_71=((B >> 5)&1)&((A >> 2)&1);
   dout_72=((B >> 6)&1)&((A >> 2)&1);
   dout_74=dout_34|dout_66;
   dout_76=dout_42|dout_67;
   dout_81=dout_20|dout_68;
   dout_86=dout_49|dout_69;
   dout_91=dout_57|dout_70;
   dout_99=dout_59|dout_71;
   dout_103=((B >> 6)&1)^0xFFFFFFFFFFFFFFFFU;
   dout_105=(((B >> 6)&1)|dout_103)^0xFFFFFFFFFFFFFFFFU;
   dout_106=((B >> 7)&1)&((A >> 2)&1);
   dout_111=((B >> 0)&1)&((A >> 3)&1);
   dout_112=((B >> 1)&1)&((A >> 3)&1);
   dout_113=((B >> 2)&1)&((A >> 3)&1);
   dout_114=((B >> 3)&1)&((A >> 3)&1);
   dout_115=((B >> 4)&1)&((A >> 3)&1);
   dout_116=((B >> 5)&1)&((A >> 3)&1);
   dout_117=((B >> 6)&1)&((A >> 3)&1);
   dout_118=((B >> 7)&1)&((A >> 3)&1);
   dout_119=dout_76|dout_111;
   dout_121=dout_81|dout_112;
   dout_126=dout_86|dout_113;
   dout_131=dout_91|dout_114;
   dout_136=dout_99|dout_115;
   dout_141=dout_72|dout_116;
   dout_147=dout_106&dout_117;
   dout_149=dout_106|dout_117;
   dout_154=dout_118^dout_147;
   dout_155=dout_147|dout_105;
   dout_156=((B >> 0)&1)&((A >> 4)&1);
   dout_157=((B >> 1)&1)&((A >> 4)&1);
   dout_158=((B >> 2)&1)&((A >> 4)&1);
   dout_159=((B >> 3)&1)&((A >> 4)&1);
   dout_160=((B >> 4)&1)&((A >> 4)&1);
   dout_161=((B >> 5)&1)&((A >> 4)&1);
   dout_162=((B >> 6)&1)&((A >> 4)&1);
   dout_163=((B >> 7)&1)&((A >> 4)&1);
   dout_164=dout_121|dout_156;
   dout_166=dout_126|dout_157;
   dout_171=dout_131|dout_158;
   dout_176=dout_136|dout_159;
   dout_181=dout_141|dout_160;
   dout_186=dout_149|dout_161;
   dout_187=dout_149&dout_161;
   dout_191=dout_154^dout_162;
   dout_192=dout_154&dout_162;
   dout_193=dout_191&dout_187;
   dout_194=dout_191^dout_187;
   dout_195=dout_192|dout_193;
   dout_196=dout_155^dout_163;
   dout_197=dout_155&((A >> 4)&1);
   dout_198=((B >> 7)&1)&dout_195;
   dout_199=dout_196^dout_195;
   dout_200=dout_197|dout_198;
   dout_201=((B >> 0)&1)&((A >> 5)&1);
   dout_202=((B >> 1)&1)&((A >> 5)&1);
   dout_203=((B >> 2)&1)&((A >> 5)&1);
   dout_204=((B >> 3)&1)&((A >> 5)&1);
   dout_205=((B >> 4)&1)&((A >> 5)&1);
   dout_206=((B >> 5)&1)&((A >> 5)&1);
   dout_207=((B >> 6)&1)&((A >> 5)&1);
   dout_208=((B >> 7)&1)&((A >> 5)&1);
   dout_209=dout_166|dout_201;
   dout_211=dout_171|dout_202;
   dout_216=dout_176|dout_203;
   dout_221=dout_181|dout_204;
   dout_226=dout_186|dout_205;
   dout_227=dout_186&dout_205;
   dout_231=dout_194^dout_206;
   dout_232=dout_194&dout_206;
   dout_233=dout_231&dout_227;
   dout_234=dout_231^dout_227;
   dout_235=dout_232|dout_233;
   dout_236=dout_199^dout_207;
   dout_237=dout_199&dout_207;
   dout_238=dout_236&dout_235;
   dout_239=dout_236^dout_235;
   dout_240=dout_237|dout_238;
   dout_241=dout_200^dout_208;
   dout_242=dout_200&dout_208;
   dout_243=dout_208&dout_240;
   dout_244=dout_241^dout_240;
   dout_245=dout_242|dout_243;
   dout_246=((B >> 0)&1)&((A >> 6)&1);
   dout_247=((B >> 1)&1)&((A >> 6)&1);
   dout_248=((B >> 2)&1)&((A >> 6)&1);
   dout_249=((B >> 3)&1)&((A >> 6)&1);
   dout_250=((B >> 4)&1)&((A >> 6)&1);
   dout_251=((B >> 5)&1)&((A >> 6)&1);
   dout_252=((B >> 6)&1)&((A >> 6)&1);
   dout_253=((B >> 7)&1)&((A >> 6)&1);
   dout_254=dout_211|dout_246;
   dout_256=dout_216|dout_247;
   dout_261=dout_221|dout_248;
   dout_266=dout_226|dout_249;
   dout_267=dout_226&dout_249;
   dout_271=dout_234^dout_250;
   dout_272=dout_234&dout_250;
   dout_273=dout_271&dout_267;
   dout_274=dout_271^dout_267;
   dout_275=dout_272|dout_273;
   dout_276=dout_239^dout_251;
   dout_277=dout_239&dout_251;
   dout_278=dout_276&dout_275;
   dout_279=dout_276^dout_275;
   dout_280=dout_277|dout_278;
   dout_281=dout_244^dout_252;
   dout_282=dout_244&dout_252;
   dout_283=dout_281&dout_280;
   dout_284=dout_281^dout_280;
   dout_285=dout_282|dout_283;
   dout_286=dout_245^dout_253;
   dout_287=dout_245&dout_253;
   dout_288=((B >> 7)&1)&dout_285;
   dout_289=dout_286^dout_285;
   dout_290=dout_287|dout_288;
   dout_291=((B >> 0)&1)&((A >> 7)&1);
   dout_292=((B >> 1)&1)&((A >> 7)&1);
   dout_293=((B >> 2)&1)&((A >> 7)&1);
   dout_294=((B >> 3)&1)&((A >> 7)&1);
   dout_295=((B >> 4)&1)&((A >> 7)&1);
   dout_296=((B >> 5)&1)&((A >> 7)&1);
   dout_297=((B >> 6)&1)&((A >> 7)&1);
   dout_298=((B >> 7)&1)&((A >> 7)&1);
   dout_299=dout_256|dout_291;
   dout_301=dout_261|dout_292;
   dout_306=dout_266|dout_293;
   dout_307=dout_266&dout_293;
   dout_311=dout_274^dout_294;
   dout_312=dout_274&dout_294;
   dout_313=dout_311&dout_307;
   dout_314=dout_311^dout_307;
   dout_315=dout_312|dout_313;
   dout_316=dout_279^dout_295;
   dout_317=dout_279&dout_295;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_284^dout_296;
   dout_322=dout_284&dout_296;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_289^dout_297;
   dout_327=dout_289&dout_297;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_290^dout_298;
   dout_332=dout_290&dout_298;
   dout_333=((B >> 7)&1)&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_16&1) << 0;
   O |= (dout_32&1) << 1;
   O |= (dout_74&1) << 2;
   O |= (dout_119&1) << 3;
   O |= (dout_164&1) << 4;
   O |= (dout_209&1) << 5;
   O |= (dout_254&1) << 6;
   O |= (dout_299&1) << 7;
   O |= (dout_301&1) << 8;
   O |= (dout_306&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.20 %
// MAE = 0.5 
// WCE% = 0.39 %
// WCE = 1.0 
// WCRE% = 100.00 %
// EP% = 50.00 %
// MRE% = 2.28 %
// MSE = 0.5 
// PDK45_PWR = 0.033 mW
// PDK45_AREA = 66.6 um2
// PDK45_DELAY = 0.60 ns


uint64_t evoapproxlib::evoapprox_t::add8se_8V4(const uint64_t B,const uint64_t A)
{
   uint64_t dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_65, dout_66;
   uint64_t O;

   dout_18=((A >> 1)&1)&((B >> 1)&1);
   dout_19=((A >> 1)&1)^((B >> 1)&1);
   dout_20=((A >> 2)&1)&((B >> 2)&1);
   dout_21=((A >> 2)&1)^((B >> 2)&1);
   dout_22=((A >> 3)&1)&((B >> 3)&1);
   dout_23=((A >> 3)&1)^((B >> 3)&1);
   dout_24=((A >> 4)&1)&((B >> 4)&1);
   dout_25=((A >> 4)&1)^((B >> 4)&1);
   dout_26=((A >> 5)&1)&((B >> 5)&1);
   dout_27=((A >> 5)&1)^((B >> 5)&1);
   dout_28=((A >> 6)&1)&((B >> 6)&1);
   dout_29=((A >> 6)&1)^((B >> 6)&1);
   dout_30=((A >> 7)&1)&((B >> 7)&1);
   dout_31=((A >> 7)&1)^((B >> 7)&1);
   dout_32=((A >> 7)&1)^((B >> 7)&1);
   dout_33=dout_21&dout_18;
   dout_34=dout_21&dout_19;
   dout_35=dout_20|dout_33;
   dout_36=dout_25&dout_22;
   dout_37=dout_25&dout_23;
   dout_38=dout_24|dout_36;
   dout_39=dout_29&dout_26;
   dout_40=dout_29&dout_27;
   dout_41=dout_28|dout_39;
   dout_42=dout_34&((A >> 0)&1);
   dout_43=dout_35|dout_42;
   dout_44=dout_40&dout_38;
   dout_45=dout_40&dout_37;
   dout_46=dout_41|dout_44;
   dout_47=dout_45&dout_43;
   dout_48=dout_46|dout_47;
   dout_49=dout_37&dout_43;
   dout_50=dout_38|dout_49;
   dout_51=dout_19&((A >> 0)&1);
   dout_52=dout_18|dout_51;
   dout_53=dout_23&dout_43;
   dout_54=dout_22|dout_53;
   dout_55=dout_27&dout_50;
   dout_56=dout_26|dout_55;
   dout_57=dout_31&dout_48;
   dout_58=dout_30|dout_57;
   dout_59=dout_19^((A >> 0)&1);
   dout_60=dout_21^dout_52;
   dout_61=dout_23^dout_43;
   dout_62=dout_25^dout_54;
   dout_63=dout_27^dout_50;
   dout_64=dout_29^dout_56;
   dout_65=dout_31^dout_48;
   dout_66=dout_32^dout_58;

   O = 0;
   O |= (0&1) << 0;
   O |= (dout_59&1) << 1;
   O |= (dout_60&1) << 2;
   O |= (dout_61&1) << 3;
   O |= (dout_62&1) << 4;
   O |= (dout_63&1) << 5;
   O |= (dout_64&1) << 6;
   O |= (dout_65&1) << 7;
   O |= (dout_66&1) << 8;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.21 %
// MAE = 1.1 
// WCE% = 0.59 %
// WCE = 3.0 
// WCRE% = 100.00 %
// EP% = 75.00 %
// MRE% = 0.61 %
// MSE = 2.0 
// PDK45_PWR = 0.023 mW
// PDK45_AREA = 52.6 um2
// PDK45_DELAY = 0.47 ns


uint64_t evoapproxlib::evoapprox_t::add8u_01R(uint64_t a, uint64_t b) {
  int wa[8];
  int wb[8];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  int sig_18 = ~((int)0);
  int sig_22 = wb[2] ^ wa[2];
  int sig_24 = wa[2] & wb[2];
  int sig_27 = sig_24;
  int sig_28 = wa[3] ^ wb[3];
  int sig_29 = wa[3] & wb[3];
  int sig_30 = sig_28 & sig_27;
  int sig_31 = sig_28 ^ sig_27;
  int sig_32 = sig_29 | sig_30;
  int sig_33 = wa[4] ^ wb[4];
  int sig_34 = wa[4] & wb[4];
  int sig_35 = sig_33 & sig_32;
  int sig_36 = sig_33 ^ sig_32;
  int sig_37 = sig_34 | sig_35;
  int sig_38 = wa[5] ^ wb[5];
  int sig_39 = wa[5] & wb[5];
  int sig_40 = sig_38 & sig_37;
  int sig_41 = sig_38 ^ sig_37;
  int sig_42 = sig_39 | sig_40;
  int sig_43 = wa[6] ^ wb[6];
  int sig_44 = wa[6] & wb[6];
  int sig_45 = sig_43 & sig_42;
  int sig_46 = sig_43 ^ sig_42;
  int sig_47 = sig_44 | sig_45;
  int sig_48 = wa[7] ^ wb[7];
  int sig_49 = wa[7] & wb[7];
  int sig_50 = sig_48 & sig_47;
  int sig_51 = sig_48 ^ sig_47;
  int sig_52 = sig_49 | sig_50;
  y |=  (wb[1] & 0x01) << 0; // default output
  y |=  (sig_18 & 0x01) << 1; // default output
  y |=  (sig_22 & 0x01) << 2; // default output
  y |=  (sig_31 & 0x01) << 3; // default output
  y |=  (sig_36 & 0x01) << 4; // default output
  y |=  (sig_41 & 0x01) << 5; // default output
  y |=  (sig_46 & 0x01) << 6; // default output
  y |=  (sig_51 & 0x01) << 7; // default output
  y |=  (sig_52 & 0x01) << 8; // default output
   return y;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 4.84 %
// MAE = 3169 
// WCE% = 49.22 %
// WCE = 32258 
// WCRE% = 66.67 %
// EP% = 88.71 %
// MRE% = 15.66 %
// MSE = 33602.746e3 
// PDK45_PWR = 0.061 mW
// PDK45_AREA = 220.6 um2
// PDK45_DELAY = 0.26 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_YX7(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_16, dout_17, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_62, dout_64, dout_65, dout_66, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_82, dout_85, dout_87, dout_90, dout_92, dout_95, dout_97, dout_98, dout_100, dout_102, dout_105, dout_107, dout_110, dout_113, dout_114, dout_116, dout_119, dout_121, dout_124, dout_126, dout_129, dout_131, dout_134, dout_136, dout_139, dout_141, dout_146, dout_147, dout_153, dout_158, dout_163, dout_168, dout_183, dout_185, dout_187, dout_192, dout_195, dout_197, dout_200, dout_202, dout_205, dout_210, dout_212, dout_215, dout_218, dout_231, dout_236, dout_241, dout_246, dout_251, dout_254;   int avg=0;

   dout_16=((B >> 0)&1)&((A >> 0)&1);
   dout_17=((B >> 1)&1)&((A >> 0)&1);
   dout_18=((B >> 2)&1)&((A >> 0)&1);
   dout_19=((B >> 3)&1)&((A >> 0)&1);
   dout_20=((B >> 4)&1)&((A >> 0)&1);
   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_24=((B >> 0)&1)&((A >> 1)&1);
   dout_25=((B >> 1)&1)&((A >> 1)&1);
   dout_26=((B >> 2)&1)&((A >> 1)&1);
   dout_27=((B >> 3)&1)&((A >> 1)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_32=((B >> 0)&1)&((A >> 2)&1);
   dout_33=((B >> 1)&1)&((A >> 2)&1);
   dout_34=((B >> 2)&1)&((A >> 2)&1);
   dout_35=((B >> 3)&1)&((A >> 2)&1);
   dout_36=((B >> 4)&1)&((A >> 2)&1);
   dout_37=((B >> 5)&1)&((A >> 2)&1);
   dout_38=((B >> 6)&1)&((A >> 2)&1);
   dout_39=((B >> 7)&1)&((A >> 2)&1);
   dout_40=((B >> 0)&1)&((A >> 3)&1);
   dout_41=((B >> 1)&1)&((A >> 3)&1);
   dout_42=((B >> 2)&1)&((A >> 3)&1);
   dout_43=((B >> 3)&1)&((A >> 3)&1);
   dout_44=((B >> 4)&1)&((A >> 3)&1);
   dout_45=((B >> 5)&1)&((A >> 3)&1);
   dout_46=((B >> 6)&1)&((A >> 3)&1);
   dout_47=((B >> 7)&1)&((A >> 3)&1);
   dout_48=((B >> 0)&1)&((A >> 4)&1);
   dout_49=((B >> 1)&1)&((A >> 4)&1);
   dout_50=((B >> 2)&1)&((A >> 4)&1);
   dout_51=((B >> 3)&1)&((A >> 4)&1);
   dout_52=((B >> 4)&1)&((A >> 4)&1);
   dout_53=((B >> 5)&1)&((A >> 4)&1);
   dout_54=((B >> 6)&1)&((A >> 4)&1);
   dout_55=((B >> 7)&1)&((A >> 4)&1);
   dout_56=((B >> 0)&1)&((A >> 5)&1);
   dout_57=((B >> 1)&1)&((A >> 5)&1);
   dout_58=((B >> 2)&1)&((A >> 5)&1);
   dout_59=((B >> 3)&1)&((A >> 5)&1);
   dout_60=((B >> 4)&1)&((A >> 5)&1);
   dout_62=((B >> 6)&1)&((A >> 5)&1);
   dout_64=((B >> 0)&1)&((A >> 6)&1);
   dout_65=((B >> 1)&1)&((A >> 6)&1);
   dout_66=((B >> 2)&1)&((A >> 6)&1);
   dout_67=((B >> 3)&1)&((A >> 6)&1);
   dout_68=((B >> 4)&1)&((A >> 6)&1);
   dout_69=((B >> 5)&1)&((A >> 6)&1);
   dout_70=((B >> 6)&1)&((A >> 6)&1);
   dout_71=((B >> 7)&1)&((A >> 6)&1);
   dout_72=((B >> 0)&1)&((A >> 7)&1);
   dout_73=((B >> 1)&1)&((A >> 7)&1);
   dout_74=((B >> 2)&1)&((A >> 7)&1);
   dout_75=((B >> 3)&1)&((A >> 7)&1);
   dout_76=((B >> 4)&1)&((A >> 7)&1);
   dout_77=((B >> 5)&1)&((A >> 7)&1);
   dout_78=((B >> 6)&1)&((A >> 7)&1);
   dout_79=((B >> 7)&1)&((A >> 7)&1);
   dout_80=dout_17|dout_24;
   dout_82=dout_18|dout_25;
   dout_85=dout_82|dout_32;
   dout_87=dout_19|dout_26;
   dout_90=dout_87|dout_33;
   dout_92=dout_20|dout_27;
   dout_95=dout_92|dout_34;
   dout_97=dout_21|dout_28;
   dout_98=((A >> 5)&1)&((B >> 5)&1);
   dout_100=dout_97|dout_35;
   dout_102=dout_22|dout_29;
   dout_105=dout_102|dout_36;
   dout_107=dout_23|dout_30;
   dout_110=dout_107|dout_37;
   dout_113=dout_31|dout_38;
   dout_114=dout_41|dout_48;
   dout_116=dout_42|dout_49;
   dout_119=dout_116|dout_56;
   dout_121=dout_43|dout_50;
   dout_124=dout_72|dout_57;
   dout_126=dout_44|dout_51;
   dout_129=dout_126|dout_58;
   dout_131=dout_45|dout_52;
   dout_134=dout_131|dout_59;
   dout_136=dout_46|dout_53;
   dout_139=dout_136|dout_60;
   dout_141=dout_47|dout_54;
   dout_146=((B >> 7)&1)&((A >> 5)&1);
   dout_147=dout_55|dout_62;
   dout_153=dout_90|dout_40;
   dout_158=dout_95|dout_114;
   dout_163=dout_100|dout_119;
   dout_168=dout_121|dout_124;
   dout_183=dout_39|dout_139;
   dout_185=dout_105|dout_64;
   dout_187=dout_110|dout_65;
   dout_192=dout_113|dout_66;
   dout_195=dout_192|dout_73;
   dout_197=dout_39|dout_67;
   dout_200=dout_197|dout_74;
   dout_202=dout_98|dout_68;
   dout_205=dout_202|dout_75;
   dout_210=dout_69|dout_76;
   dout_212=dout_146|dout_70;
   dout_215=dout_212|dout_77;
   dout_218=dout_71|dout_78;
   dout_231=dout_168|dout_185;
   dout_236=dout_129|dout_187;
   dout_241=dout_134|dout_195;
   dout_246=dout_183|dout_200;
   dout_251=dout_141|dout_205;
   dout_254=dout_147|dout_210;

   O = 0;
   O |= (dout_16&1) << 0;
   O |= (dout_80&1) << 1;
   O |= (dout_85&1) << 2;
   O |= (dout_153&1) << 3;
   O |= (dout_158&1) << 4;
   O |= (dout_163&1) << 5;
   O |= (dout_231&1) << 6;
   O |= (dout_236&1) << 7;
   O |= (dout_241&1) << 8;
   O |= (dout_246&1) << 9;
   O |= (dout_251&1) << 10;
   O |= (dout_254&1) << 11;
   O |= (dout_215&1) << 12;
   O |= (dout_218&1) << 13;
   O |= (dout_79&1) << 14;
   O |= (0&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.057 %
// MAE = 37 
// WCE% = 1.14 %
// WCE = 748 
// WCRE% = 64.00 %
// EP% = 29.93 %
// MRE% = 0.51 %
// MSE = 12684 
// PDK45_PWR = 0.356 mW
// PDK45_AREA = 632.6 um2
// PDK45_DELAY = 1.38 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_GS2(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_16, dout_17, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_34, dout_36, dout_38, dout_40, dout_42, dout_44, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_59, dout_60, dout_64, dout_69, dout_70, dout_74, dout_75, dout_79, dout_80, dout_84, dout_85, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_98, dout_100, dout_101, dout_102, dout_103, dout_105, dout_107, dout_108, dout_112, dout_113, dout_115, dout_116, dout_117, dout_118, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_130, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143, dout_144, dout_145, dout_146, dout_147, dout_148, dout_149, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_171, dout_173, dout_174, dout_175, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_183, dout_184, dout_185, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_16=((B >> 0)&1)&((A >> 0)&1);
   dout_17=((B >> 1)&1)&((A >> 0)&1);
   dout_18=((B >> 2)&1)&((A >> 0)&1);
   dout_19=((B >> 3)&1)&((A >> 0)&1);
   dout_20=((B >> 4)&1)&((A >> 0)&1);
   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_24=((B >> 0)&1)&((A >> 1)&1);
   dout_25=((B >> 1)&1)&((A >> 1)&1);
   dout_26=((B >> 2)&1)&((A >> 1)&1);
   dout_27=((B >> 3)&1)&((A >> 1)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_32=dout_17|dout_24;
   dout_34=dout_18|dout_25;
   dout_36=dout_19|dout_26;
   dout_38=dout_20|dout_27;
   dout_40=dout_21|dout_28;
   dout_42=dout_22|dout_29;
   dout_44=dout_23|dout_30;
   dout_46=((B >> 0)&1)&((A >> 2)&1);
   dout_47=((B >> 1)&1)&((A >> 2)&1);
   dout_48=((B >> 2)&1)&((A >> 2)&1);
   dout_49=((B >> 3)&1)&((A >> 2)&1);
   dout_50=((B >> 4)&1)&((A >> 2)&1);
   dout_51=((B >> 5)&1)&((A >> 2)&1);
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_54=dout_34^dout_46;
   dout_55=dout_34&dout_46;
   dout_59=dout_36^dout_47;
   dout_60=dout_36&dout_47;
   dout_64=dout_38|dout_48;
   dout_69=dout_40^dout_49;
   dout_70=dout_40&dout_49;
   dout_74=dout_42^dout_50;
   dout_75=dout_42&dout_50;
   dout_79=dout_44^dout_51;
   dout_80=dout_44&dout_51;
   dout_84=dout_31^dout_52;
   dout_85=dout_31&((A >> 2)&1);
   dout_89=((B >> 0)&1)&((A >> 3)&1);
   dout_90=((B >> 1)&1)&((A >> 3)&1);
   dout_91=((B >> 2)&1)&((A >> 3)&1);
   dout_92=((B >> 3)&1)&((A >> 3)&1);
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_97=dout_59^dout_89;
   dout_98=dout_59&dout_89;
   dout_100=dout_97^dout_55;
   dout_101=dout_98|dout_55;
   dout_102=dout_64^dout_90;
   dout_103=dout_64&dout_90;
   dout_105=dout_102|dout_60;
   dout_107=dout_69^dout_91;
   dout_108=dout_69&dout_91;
   dout_112=dout_74^dout_92;
   dout_113=dout_74&dout_92;
   dout_115=dout_112^dout_70;
   dout_116=dout_113|dout_70;
   dout_117=dout_79^dout_93;
   dout_118=dout_79&dout_93;
   dout_120=dout_117^dout_75;
   dout_121=dout_118|dout_75;
   dout_122=dout_84^dout_94;
   dout_123=dout_84&dout_94;
   dout_124=dout_122&dout_80;
   dout_125=dout_122^dout_80;
   dout_126=dout_123|dout_124;
   dout_127=dout_53^dout_95;
   dout_128=dout_53&dout_95;
   dout_130=dout_127|dout_85;
   dout_132=((B >> 0)&1)&((A >> 4)&1);
   dout_133=((B >> 1)&1)&((A >> 4)&1);
   dout_134=((B >> 2)&1)&((A >> 4)&1);
   dout_135=((B >> 3)&1)&((A >> 4)&1);
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_140=dout_105^dout_132;
   dout_141=dout_105&dout_132;
   dout_142=dout_140&dout_101;
   dout_143=dout_140^dout_101;
   dout_144=dout_141|dout_142;
   dout_145=dout_107^dout_133;
   dout_146=dout_107&dout_133;
   dout_147=dout_145&dout_103;
   dout_148=dout_145^dout_103;
   dout_149=dout_146|dout_147;
   dout_150=dout_115^dout_134;
   dout_151=dout_115&dout_134;
   dout_152=dout_150&dout_108;
   dout_153=dout_150^dout_108;
   dout_154=dout_151|dout_152;
   dout_155=dout_120^dout_135;
   dout_156=dout_120&dout_135;
   dout_157=dout_155&dout_116;
   dout_158=dout_155^dout_116;
   dout_159=dout_156|dout_157;
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_121;
   dout_163=dout_160^dout_121;
   dout_164=dout_161|dout_162;
   dout_165=dout_130^dout_137;
   dout_166=dout_137&dout_130;
   dout_167=dout_165&dout_126;
   dout_168=dout_165^dout_126;
   dout_169=dout_166|dout_167;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_173=dout_170^dout_128;
   dout_174=dout_171|dout_128;
   dout_175=((B >> 0)&1)&((A >> 5)&1);
   dout_176=((B >> 1)&1)&((A >> 5)&1);
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_183=dout_148^dout_175;
   dout_184=dout_148&dout_175;
   dout_185=dout_183&dout_144;
   dout_186=dout_183^dout_144;
   dout_187=dout_184|dout_185;
   dout_188=dout_153^dout_176;
   dout_189=dout_153&dout_176;
   dout_190=dout_188&dout_149;
   dout_191=dout_188^dout_149;
   dout_192=dout_189|dout_190;
   dout_193=dout_158^dout_177;
   dout_194=dout_158&dout_177;
   dout_195=dout_193&dout_154;
   dout_196=dout_193^dout_154;
   dout_197=dout_194|dout_195;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_159;
   dout_201=dout_198^dout_159;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_218=((B >> 0)&1)&((A >> 6)&1);
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_226=dout_191^dout_218;
   dout_227=dout_191&dout_218;
   dout_228=dout_226&dout_187;
   dout_229=dout_226^dout_187;
   dout_230=dout_227|dout_228;
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_233=dout_231&dout_192;
   dout_234=dout_231^dout_192;
   dout_235=dout_232|dout_233;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_197;
   dout_239=dout_236^dout_197;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_234^dout_261;
   dout_270=dout_234&dout_261;
   dout_271=dout_269&dout_230;
   dout_272=dout_269^dout_230;
   dout_273=dout_270|dout_271;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_235;
   dout_277=dout_274^dout_235;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_304=dout_277^dout_273;
   dout_305=dout_277&dout_273;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_302^dout_298;
   dout_327=dout_302&dout_298;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_268^dout_303;
   dout_332=dout_268&dout_303;
   dout_333=dout_331&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_16&1) << 0;
   O |= (dout_32&1) << 1;
   O |= (dout_54&1) << 2;
   O |= (dout_100&1) << 3;
   O |= (dout_143&1) << 4;
   O |= (dout_186&1) << 5;
   O |= (dout_229&1) << 6;
   O |= (dout_272&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mse parameters
***/
// MAE% = 6.45 %
// MAE = 33 
// WCE% = 16.60 %
// WCE = 85 
// WCRE% = 125.00 %
// EP% = 99.22 %
// MRE% = 16.82 %
// MSE = 1488 
// PDK45_PWR = 0.0032 mW
// PDK45_AREA = 8.9 um2
// PDK45_DELAY = 0.12 ns


uint64_t evoapproxlib::evoapprox_t::add8u_0CA(uint64_t a, uint64_t b) {
  int wa[8];
  int wb[8];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  int sig_35 = ~((int)0);
  int sig_38 = wa[5];
  int sig_48 = wa[7] ^ wb[7];
  int sig_49 = wa[7] & wb[7];
  int sig_50 = sig_48 & wb[6];
  int sig_51 = sig_48 ^ wb[6];
  int sig_52 = sig_49 | sig_50;
  y |=  (sig_35 & 0x01) << 0; // default output
  y |=  (wa[4] & 0x01) << 1; // default output
  y |=  (wa[3] & 0x01) << 2; // default output
  y |=  (wa[2] & 0x01) << 3; // default output
  y |=  (sig_38 & 0x01) << 4; // default output
  y |=  (wa[5] & 0x01) << 5; // default output
  y |=  (wa[6] & 0x01) << 6; // default output
  y |=  (sig_51 & 0x01) << 7; // default output
  y |=  (sig_52 & 0x01) << 8; // default output
   return y;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.55 %
// MAE = 1.4 
// WCE% = 1.56 %
// WCE = 4.0 
// WCRE% = 300.00 %
// EP% = 78.12 %
// MRE% = 5.69 %
// MSE = 3.2 
// PDK45_PWR = 0.024 mW
// PDK45_AREA = 54.9 um2
// PDK45_DELAY = 0.47 ns


uint64_t evoapproxlib::evoapprox_t::add8se_90J(const uint64_t B,const uint64_t A)
{
   uint64_t dout_22, dout_23, dout_24, dout_26, dout_28, dout_29, dout_30, dout_31, dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54;
   uint64_t O;

   dout_22=((B >> 2)&1)&((A >> 2)&1);
   dout_23=((A >> 2)&1)|((B >> 2)&1);
   dout_24=((A >> 2)&1)&((B >> 2)&1);
   dout_26=(dout_23&dout_22)^0xFFFFFFFFFFFFFFFFU;
   dout_28=((A >> 3)&1)^((B >> 3)&1);
   dout_29=((A >> 3)&1)&((B >> 3)&1);
   dout_30=dout_28&dout_24;
   dout_31=dout_28^dout_24;
   dout_32=dout_29|dout_30;
   dout_33=((A >> 4)&1)^((B >> 4)&1);
   dout_34=((A >> 4)&1)&((B >> 4)&1);
   dout_35=dout_33&dout_32;
   dout_36=dout_33^dout_32;
   dout_37=dout_34|dout_35;
   dout_38=((A >> 5)&1)^((B >> 5)&1);
   dout_39=((A >> 5)&1)&((B >> 5)&1);
   dout_40=dout_38&dout_37;
   dout_41=dout_38^dout_37;
   dout_42=dout_39|dout_40;
   dout_43=((A >> 6)&1)^((B >> 6)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=dout_43&dout_42;
   dout_46=dout_43^dout_42;
   dout_47=dout_44|dout_45;
   dout_48=((A >> 7)&1)^((B >> 7)&1);
   dout_49=((A >> 7)&1)&((B >> 7)&1);
   dout_50=dout_48&dout_47;
   dout_51=dout_48^dout_47;
   dout_52=dout_49|dout_50;
   dout_53=((A >> 7)&1)^((B >> 7)&1);
   dout_54=dout_53^dout_52;

   O = 0;
   O |= (dout_23&1) << 0;
   O |= (((B >> 1)&1)&1) << 1;
   O |= (dout_26&1) << 2;
   O |= (dout_31&1) << 3;
   O |= (dout_36&1) << 4;
   O |= (dout_41&1) << 5;
   O |= (dout_46&1) << 6;
   O |= (dout_51&1) << 7;
   O |= (dout_54&1) << 8;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mse parameters
***/
// MAE% = 7.42 %
// MAE = 19 
// WCE% = 25.00 %
// WCE = 64 
// WCRE% = 6300.00 %
// EP% = 98.45 %
// MRE% = 67.81 %
// MSE = 545 
// PDK45_PWR = 0.0042 mW
// PDK45_AREA = 11.7 um2
// PDK45_DELAY = 0.13 ns


uint64_t evoapproxlib::evoapprox_t::add8se_91V(const uint64_t B,const uint64_t A)
{
   uint64_t dout_26, dout_30, dout_31, dout_32, dout_57, dout_58, dout_65, dout_66;
   uint64_t O;

   dout_26=((B >> 6)&1)^0xFFFFFFFFFFFFFFFFU;
   dout_30=((A >> 7)&1)&((B >> 7)&1);
   dout_31=((A >> 7)&1)^((B >> 7)&1);
   dout_32=((A >> 7)&1)^((B >> 7)&1);
   dout_57=dout_31&((B >> 6)&1);
   dout_58=dout_30|dout_57;
   dout_65=dout_31^((B >> 6)&1);
   dout_66=dout_32^dout_58;

   O = 0;
   O |= (((A >> 6)&1)&1) << 0;
   O |= (((A >> 6)&1)&1) << 1;
   O |= (((B >> 5)&1)&1) << 2;
   O |= (((B >> 5)&1)&1) << 3;
   O |= (((A >> 5)&1)&1) << 4;
   O |= (((A >> 6)&1)&1) << 5;
   O |= (dout_26&1) << 6;
   O |= (dout_65&1) << 7;
   O |= (dout_66&1) << 8;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.39 %
// MAE = 1.0 
// WCE% = 0.78 %
// WCE = 2.0 
// WCRE% = 200.00 %
// EP% = 50.00 %
// MRE% = 4.15 %
// MSE = 2.0 
// PDK45_PWR = 0.030 mW
// PDK45_AREA = 65.2 um2
// PDK45_DELAY = 0.51 ns


uint64_t evoapproxlib::evoapprox_t::add8se_78P(const uint64_t B,const uint64_t A)
{
   uint64_t dout_16, dout_17, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_54;
   uint64_t O;

   dout_16=((A >> 0)&1)^((B >> 0)&1);
   dout_17=((A >> 0)&1)&((B >> 1)&1);
   dout_21=((A >> 0)&1)^dout_17;
   dout_22=((B >> 2)&1)|((A >> 2)&1);
   dout_23=((A >> 2)&1)^((B >> 2)&1);
   dout_24=((A >> 2)&1)&((B >> 2)&1);
   dout_25=dout_22&((B >> 1)&1);
   dout_26=dout_23^((B >> 1)&1);
   dout_27=dout_24|dout_25;
   dout_28=((A >> 3)&1)^((B >> 3)&1);
   dout_29=((A >> 3)&1)&((B >> 3)&1);
   dout_30=dout_28&dout_27;
   dout_31=dout_28^dout_27;
   dout_32=dout_29|dout_30;
   dout_33=((A >> 4)&1)^((B >> 4)&1);
   dout_34=((A >> 4)&1)&((B >> 4)&1);
   dout_35=dout_33&dout_32;
   dout_36=dout_33^dout_32;
   dout_37=dout_34|dout_35;
   dout_38=((A >> 5)&1)^((B >> 5)&1);
   dout_39=((A >> 5)&1)&((B >> 5)&1);
   dout_40=dout_38&dout_37;
   dout_41=dout_38^dout_37;
   dout_42=dout_39|dout_40;
   dout_43=((A >> 6)&1)^((B >> 6)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=dout_43&dout_42;
   dout_46=dout_43^dout_42;
   dout_47=dout_44|dout_45;
   dout_48=((A >> 7)&1)^((B >> 7)&1);
   dout_49=((A >> 7)&1)&((B >> 7)&1);
   dout_50=dout_48&dout_47;
   dout_51=dout_48^dout_47;
   dout_52=dout_49|dout_50;
   dout_54=dout_48^dout_52;

   O = 0;
   O |= (dout_16&1) << 0;
   O |= (dout_21&1) << 1;
   O |= (dout_26&1) << 2;
   O |= (dout_31&1) << 3;
   O |= (dout_36&1) << 4;
   O |= (dout_41&1) << 5;
   O |= (dout_46&1) << 6;
   O |= (dout_51&1) << 7;
   O |= (dout_54&1) << 8;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 0.15 %
// MAE = 101 
// WCE% = 0.69 %
// WCE = 449 
// WCRE% = 6500.00 %
// EP% = 91.89 %
// MRE% = 8.93 %
// MSE = 19690 
// PDK45_PWR = 0.289 mW
// PDK45_AREA = 543.0 um2
// PDK45_DELAY = 1.33 ns


int16_t evoapproxlib::evoapprox_t::mul8s_1KVL(int8_t A, int8_t B)
{
  int16_t P, P_;
  uint8_t tmp, C_2_5,C_2_7,C_3_2,C_3_3,C_3_4,C_3_5,C_3_6,C_3_7,C_4_1,C_4_2,C_4_3,C_4_4,C_4_5,C_4_6,C_4_7,C_5_0,C_5_1,C_5_2,C_5_3,C_5_4,C_5_5,C_5_6,C_5_7,C_6_0,C_6_1,C_6_2,C_6_3,C_6_4,C_6_5,C_6_6,C_6_7,C_7_0,C_7_1,C_7_2,C_7_3,C_7_4,C_7_5,C_7_6,C_7_7,C_8_0,C_8_1,C_8_2,C_8_3,C_8_4,C_8_5,C_8_6,C_8_7,S_0_7,S_1_6,S_2_3,S_2_4,S_2_5,S_2_6,S_2_7,S_3_2,S_3_3,S_3_4,S_3_5,S_3_6,S_3_7,S_4_1,S_4_2,S_4_3,S_4_4,S_4_5,S_4_6,S_4_7,S_5_0,S_5_1,S_5_2,S_5_3,S_5_4,S_5_5,S_5_6,S_5_7,S_6_0,S_6_1,S_6_2,S_6_3,S_6_4,S_6_5,S_6_6,S_6_7,S_7_0,S_7_1,S_7_2,S_7_3,S_7_4,S_7_5,S_7_6,S_7_7,S_8_0,S_8_1,S_8_2,S_8_3,S_8_4,S_8_5,S_8_6,S_8_7;
  S_0_7 = 1;
  S_1_6 = 1;
  S_2_3 = (((A>>2)&1) & ((B>>3)&1));
  S_2_4 = (((A>>2)&1) & ((B>>4)&1));
  S_2_5 = S_1_6^(((A>>2)&1) & ((B>>5)&1));
  C_2_5 = S_1_6&(((A>>2)&1) & ((B>>5)&1));
  S_2_6 = (((A>>2)&1) & ((B>>6)&1));
  S_2_7 = 1^(((((A>>2)&1) & ((B>>7)&1)))^1);
  C_2_7 = 1&(((((A>>2)&1) & ((B>>7)&1)))^1);
  S_3_2 = S_2_3^(((A>>3)&1) & ((B>>2)&1));
  C_3_2 = S_2_3&(((A>>3)&1) & ((B>>2)&1));
  S_3_3 = S_2_4^(((A>>3)&1) & ((B>>3)&1));
  C_3_3 = S_2_4&(((A>>3)&1) & ((B>>3)&1));
  S_3_4 = S_2_5^(((A>>3)&1) & ((B>>4)&1));
  C_3_4 = S_2_5&(((A>>3)&1) & ((B>>4)&1));
  tmp = S_2_6^C_2_5;
  S_3_5 = tmp^(((A>>3)&1) & ((B>>5)&1));
  C_3_5 = (tmp&(((A>>3)&1) & ((B>>5)&1)))|(S_2_6&C_2_5);
  S_3_6 = S_2_7^(((A>>3)&1) & ((B>>6)&1));
  C_3_6 = S_2_7&(((A>>3)&1) & ((B>>6)&1));
  S_3_7 = C_2_7^(((((A>>3)&1) & ((B>>7)&1)))^1);
  C_3_7 = C_2_7&(((((A>>3)&1) & ((B>>7)&1)))^1);
  S_4_1 = S_3_2^(((A>>4)&1) & ((B>>1)&1));
  C_4_1 = S_3_2&(((A>>4)&1) & ((B>>1)&1));
  tmp = S_3_3^C_3_2;
  S_4_2 = tmp^(((A>>4)&1) & ((B>>2)&1));
  C_4_2 = (tmp&(((A>>4)&1) & ((B>>2)&1)))|(S_3_3&C_3_2);
  tmp = S_3_4^C_3_3;
  S_4_3 = tmp^(((A>>4)&1) & ((B>>3)&1));
  C_4_3 = (tmp&(((A>>4)&1) & ((B>>3)&1)))|(S_3_4&C_3_3);
  tmp = S_3_5^C_3_4;
  S_4_4 = tmp^(((A>>4)&1) & ((B>>4)&1));
  C_4_4 = (tmp&(((A>>4)&1) & ((B>>4)&1)))|(S_3_5&C_3_4);
  tmp = S_3_6^C_3_5;
  S_4_5 = tmp^(((A>>4)&1) & ((B>>5)&1));
  C_4_5 = (tmp&(((A>>4)&1) & ((B>>5)&1)))|(S_3_6&C_3_5);
  tmp = S_3_7^C_3_6;
  S_4_6 = tmp^(((A>>4)&1) & ((B>>6)&1));
  C_4_6 = (tmp&(((A>>4)&1) & ((B>>6)&1)))|(S_3_7&C_3_6);
  S_4_7 = C_3_7^(((((A>>4)&1) & ((B>>7)&1)))^1);
  C_4_7 = C_3_7&(((((A>>4)&1) & ((B>>7)&1)))^1);
  S_5_0 = S_4_1^(((A>>5)&1) & ((B>>0)&1));
  C_5_0 = S_4_1&(((A>>5)&1) & ((B>>0)&1));
  tmp = S_4_2^C_4_1;
  S_5_1 = tmp^(((A>>5)&1) & ((B>>1)&1));
  C_5_1 = (tmp&(((A>>5)&1) & ((B>>1)&1)))|(S_4_2&C_4_1);
  tmp = S_4_3^C_4_2;
  S_5_2 = tmp^(((A>>5)&1) & ((B>>2)&1));
  C_5_2 = (tmp&(((A>>5)&1) & ((B>>2)&1)))|(S_4_3&C_4_2);
  tmp = S_4_4^C_4_3;
  S_5_3 = tmp^(((A>>5)&1) & ((B>>3)&1));
  C_5_3 = (tmp&(((A>>5)&1) & ((B>>3)&1)))|(S_4_4&C_4_3);
  tmp = S_4_5^C_4_4;
  S_5_4 = tmp^(((A>>5)&1) & ((B>>4)&1));
  C_5_4 = (tmp&(((A>>5)&1) & ((B>>4)&1)))|(S_4_5&C_4_4);
  tmp = S_4_6^C_4_5;
  S_5_5 = tmp^(((A>>5)&1) & ((B>>5)&1));
  C_5_5 = (tmp&(((A>>5)&1) & ((B>>5)&1)))|(S_4_6&C_4_5);
  tmp = S_4_7^C_4_6;
  S_5_6 = tmp^(((A>>5)&1) & ((B>>6)&1));
  C_5_6 = (tmp&(((A>>5)&1) & ((B>>6)&1)))|(S_4_7&C_4_6);
  S_5_7 = C_4_7^(((((A>>5)&1) & ((B>>7)&1)))^1);
  C_5_7 = C_4_7&(((((A>>5)&1) & ((B>>7)&1)))^1);
  tmp = S_5_1^C_5_0;
  S_6_0 = tmp^(((A>>6)&1) & ((B>>0)&1));
  C_6_0 = (tmp&(((A>>6)&1) & ((B>>0)&1)))|(S_5_1&C_5_0);
  tmp = S_5_2^C_5_1;
  S_6_1 = tmp^(((A>>6)&1) & ((B>>1)&1));
  C_6_1 = (tmp&(((A>>6)&1) & ((B>>1)&1)))|(S_5_2&C_5_1);
  tmp = S_5_3^C_5_2;
  S_6_2 = tmp^(((A>>6)&1) & ((B>>2)&1));
  C_6_2 = (tmp&(((A>>6)&1) & ((B>>2)&1)))|(S_5_3&C_5_2);
  tmp = S_5_4^C_5_3;
  S_6_3 = tmp^(((A>>6)&1) & ((B>>3)&1));
  C_6_3 = (tmp&(((A>>6)&1) & ((B>>3)&1)))|(S_5_4&C_5_3);
  tmp = S_5_5^C_5_4;
  S_6_4 = tmp^(((A>>6)&1) & ((B>>4)&1));
  C_6_4 = (tmp&(((A>>6)&1) & ((B>>4)&1)))|(S_5_5&C_5_4);
  tmp = S_5_6^C_5_5;
  S_6_5 = tmp^(((A>>6)&1) & ((B>>5)&1));
  C_6_5 = (tmp&(((A>>6)&1) & ((B>>5)&1)))|(S_5_6&C_5_5);
  tmp = S_5_7^C_5_6;
  S_6_6 = tmp^(((A>>6)&1) & ((B>>6)&1));
  C_6_6 = (tmp&(((A>>6)&1) & ((B>>6)&1)))|(S_5_7&C_5_6);
  S_6_7 = C_5_7^(((((A>>6)&1) & ((B>>7)&1)))^1);
  C_6_7 = C_5_7&(((((A>>6)&1) & ((B>>7)&1)))^1);
  tmp = S_6_1^C_6_0;
  S_7_0 = tmp^(((((A>>7)&1) & ((B>>0)&1)))^1);
  C_7_0 = (tmp&(((((A>>7)&1) & ((B>>0)&1)))^1))|(S_6_1&C_6_0);
  tmp = S_6_2^C_6_1;
  S_7_1 = tmp^(((((A>>7)&1) & ((B>>1)&1)))^1);
  C_7_1 = (tmp&(((((A>>7)&1) & ((B>>1)&1)))^1))|(S_6_2&C_6_1);
  tmp = S_6_3^C_6_2;
  S_7_2 = tmp^(((((A>>7)&1) & ((B>>2)&1)))^1);
  C_7_2 = (tmp&(((((A>>7)&1) & ((B>>2)&1)))^1))|(S_6_3&C_6_2);
  tmp = S_6_4^C_6_3;
  S_7_3 = tmp^(((((A>>7)&1) & ((B>>3)&1)))^1);
  C_7_3 = (tmp&(((((A>>7)&1) & ((B>>3)&1)))^1))|(S_6_4&C_6_3);
  tmp = S_6_5^C_6_4;
  S_7_4 = tmp^(((((A>>7)&1) & ((B>>4)&1)))^1);
  C_7_4 = (tmp&(((((A>>7)&1) & ((B>>4)&1)))^1))|(S_6_5&C_6_4);
  tmp = S_6_6^C_6_5;
  S_7_5 = tmp^(((((A>>7)&1) & ((B>>5)&1)))^1);
  C_7_5 = (tmp&(((((A>>7)&1) & ((B>>5)&1)))^1))|(S_6_6&C_6_5);
  tmp = S_6_7^C_6_6;
  S_7_6 = tmp^(((((A>>7)&1) & ((B>>6)&1)))^1);
  C_7_6 = (tmp&(((((A>>7)&1) & ((B>>6)&1)))^1))|(S_6_7&C_6_6);
  S_7_7 = C_6_7^(((A>>7)&1) & ((B>>7)&1));
  C_7_7 = C_6_7&(((A>>7)&1) & ((B>>7)&1));
  S_8_0 = S_7_1^C_7_0;
  C_8_0 = S_7_1&C_7_0;
  tmp = S_7_2^C_8_0;
  S_8_1 = tmp^C_7_1;
  C_8_1 = (tmp&C_7_1)|(S_7_2&C_8_0);
  tmp = S_7_3^C_8_1;
  S_8_2 = tmp^C_7_2;
  C_8_2 = (tmp&C_7_2)|(S_7_3&C_8_1);
  tmp = S_7_4^C_8_2;
  S_8_3 = tmp^C_7_3;
  C_8_3 = (tmp&C_7_3)|(S_7_4&C_8_2);
  tmp = S_7_5^C_8_3;
  S_8_4 = tmp^C_7_4;
  C_8_4 = (tmp&C_7_4)|(S_7_5&C_8_3);
  tmp = S_7_6^C_8_4;
  S_8_5 = tmp^C_7_5;
  C_8_5 = (tmp&C_7_5)|(S_7_6&C_8_4);
  tmp = S_7_7^C_8_5;
  S_8_6 = tmp^C_7_6;
  C_8_6 = (tmp&C_7_6)|(S_7_7&C_8_5);
  tmp = 1^C_8_6;
  S_8_7 = tmp^C_7_7;
  C_8_7 = (tmp&C_7_7)|(1&C_8_6);
  P = 0;
  P |= (S_5_0 & 1) << 5;
  P |= (S_6_0 & 1) << 6;
  P |= (S_7_0 & 1) << 7;
  P |= (S_8_0 & 1) << 8;
  P |= (S_8_1 & 1) << 9;
  P |= (S_8_2 & 1) << 10;
  P |= (S_8_3 & 1) << 11;
  P |= (S_8_4 & 1) << 12;
  P |= (S_8_5 & 1) << 13;
  P |= (S_8_6 & 1) << 14;
  P |= (S_8_7 & 1) << 15;
  return P;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 1.56 %
// MAE = 4.0 
// WCE% = 3.52 %
// WCE = 9.0 
// WCRE% = 700.00 %
// EP% = 96.78 %
// MRE% = 15.45 %
// MSE = 20 
// PDK45_PWR = 0.019 mW
// PDK45_AREA = 39.9 um2
// PDK45_DELAY = 0.35 ns


uint64_t evoapproxlib::evoapprox_t::add8se_91D(const uint64_t B,const uint64_t A)
{
   uint64_t dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54;
   uint64_t O;

   dout_33=((A >> 4)&1)^((B >> 4)&1);
   dout_34=((A >> 4)&1)&((B >> 4)&1);
   dout_35=dout_33&((A >> 3)&1);
   dout_36=dout_33^((A >> 3)&1);
   dout_37=dout_34|dout_35;
   dout_38=((A >> 5)&1)^((B >> 5)&1);
   dout_39=((A >> 5)&1)&((B >> 5)&1);
   dout_40=dout_38&dout_37;
   dout_41=dout_38^dout_37;
   dout_42=dout_39|dout_40;
   dout_43=((A >> 6)&1)^((B >> 6)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=dout_43&dout_42;
   dout_46=dout_43^dout_42;
   dout_47=dout_44|dout_45;
   dout_48=((A >> 7)&1)^((B >> 7)&1);
   dout_49=((A >> 7)&1)&((B >> 7)&1);
   dout_50=dout_48&dout_47;
   dout_51=dout_48^dout_47;
   dout_52=dout_49|dout_50;
   dout_53=((A >> 7)&1)^((B >> 7)&1);
   dout_54=dout_53^dout_52;

   O = 0;
   O |= (dout_54&1) << 0;
   O |= (((B >> 2)&1)&1) << 1;
   O |= (((A >> 2)&1)&1) << 2;
   O |= (((B >> 3)&1)&1) << 3;
   O |= (dout_36&1) << 4;
   O |= (dout_41&1) << 5;
   O |= (dout_46&1) << 6;
   O |= (dout_51&1) << 7;
   O |= (dout_54&1) << 8;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 0.89 %
// MAE = 581 
// WCE% = 4.29 %
// WCE = 2809 
// WCRE% = 125.00 %
// EP% = 98.74 %
// MRE% = 13.96 %
// MSE = 543210 
// PDK45_PWR = 0.084 mW
// PDK45_AREA = 214.5 um2
// PDK45_DELAY = 0.95 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_FTA(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_115, dout_118, dout_127, dout_152, dout_154, dout_162, dout_163, dout_192, dout_195, dout_196, dout_198, dout_199, dout_206, dout_207, dout_208, dout_232, dout_234, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_249, dout_250, dout_251, dout_252, dout_253, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_311, dout_312, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_115=((A >> 3)&1)&((B >> 7)&1);
   dout_118=((B >> 4)&1)&((A >> 5)&1);
   dout_127=((B >> 7)&1)&((A >> 2)&1);
   dout_152=((B >> 6)&1)&dout_115;
   dout_154=dout_118|dout_127;
   dout_162=((B >> 6)&1)&((A >> 4)&1);
   dout_163=((B >> 7)&1)&((A >> 4)&1);
   dout_192=dout_163&((A >> 3)&1);
   dout_195=dout_192|dout_162;
   dout_196=dout_152^dout_163;
   dout_198=((B >> 7)&1)&dout_195;
   dout_199=dout_196^dout_195;
   dout_206=((B >> 5)&1)&((A >> 5)&1);
   dout_207=((B >> 6)&1)&((A >> 5)&1);
   dout_208=((B >> 7)&1)&((A >> 5)&1);
   dout_232=dout_154&dout_206;
   dout_234=dout_154^dout_206;
   dout_236=dout_199^dout_207;
   dout_237=dout_199&dout_207;
   dout_238=dout_236&dout_232;
   dout_239=dout_236^dout_232;
   dout_240=dout_237|dout_238;
   dout_241=dout_198^dout_208;
   dout_242=dout_198&((A >> 5)&1);
   dout_243=dout_208&dout_240;
   dout_244=dout_241^dout_240;
   dout_245=dout_242|dout_243;
   dout_246=((B >> 0)&1)&((A >> 6)&1);
   dout_249=((B >> 3)&1)&((A >> 6)&1);
   dout_250=((B >> 4)&1)&((A >> 6)&1);
   dout_251=((B >> 5)&1)&((A >> 6)&1);
   dout_252=((B >> 6)&1)&((A >> 6)&1);
   dout_253=((B >> 7)&1)&((A >> 6)&1);
   dout_271=dout_234^dout_250;
   dout_272=dout_234&dout_250;
   dout_273=dout_271&dout_249;
   dout_274=dout_271^dout_249;
   dout_275=dout_272|dout_273;
   dout_276=dout_239^dout_251;
   dout_277=dout_239&dout_251;
   dout_278=dout_276&dout_275;
   dout_279=dout_276^dout_275;
   dout_280=dout_277|dout_278;
   dout_281=dout_244^dout_252;
   dout_282=dout_244&dout_252;
   dout_283=dout_281&dout_280;
   dout_284=dout_281^dout_280;
   dout_285=dout_282|dout_283;
   dout_286=dout_245^dout_253;
   dout_287=dout_245&dout_253;
   dout_288=dout_253&dout_285;
   dout_289=dout_286^dout_285;
   dout_290=dout_287|dout_288;
   dout_291=((B >> 0)&1)&((A >> 7)&1);
   dout_293=((B >> 2)&1)&((A >> 7)&1);
   dout_294=((B >> 3)&1)&((A >> 7)&1);
   dout_295=((B >> 4)&1)&((A >> 7)&1);
   dout_296=((B >> 5)&1)&((A >> 7)&1);
   dout_297=((B >> 6)&1)&((A >> 7)&1);
   dout_298=((B >> 7)&1)&((A >> 7)&1);
   dout_299=dout_274|dout_291;
   dout_311=dout_274^dout_294;
   dout_312=dout_274&dout_294;
   dout_316=dout_279^dout_295;
   dout_317=dout_279&dout_295;
   dout_318=dout_316&dout_312;
   dout_319=dout_316^dout_312;
   dout_320=dout_317|dout_318;
   dout_321=dout_284^dout_296;
   dout_322=dout_284&dout_296;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_289^dout_297;
   dout_327=dout_289&dout_297;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_290^dout_298;
   dout_332=dout_290&dout_298;
   dout_333=((B >> 7)&1)&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (0&1) << 0;
   O |= (0&1) << 1;
   O |= (0&1) << 2;
   O |= (dout_152&1) << 3;
   O |= (dout_272&1) << 4;
   O |= (dout_115&1) << 5;
   O |= (dout_246&1) << 6;
   O |= (dout_299&1) << 7;
   O |= (dout_206&1) << 8;
   O |= (dout_293&1) << 9;
   O |= (dout_311&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 0.0076 %
// MAE = 5.0 
// WCE% = 0.064 %
// WCE = 42 
// WCRE% = 40.00 %
// EP% = 39.26 %
// MRE% = 0.14 %
// MSE = 87 
// PDK45_PWR = 0.364 mW
// PDK45_AREA = 654.2 um2
// PDK45_DELAY = 1.38 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_14VP(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_16, dout_17, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_34, dout_36, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_59, dout_64, dout_65, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_87, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_102, dout_103, dout_107, dout_108, dout_109, dout_110, dout_111, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_145, dout_146, dout_147, dout_148, dout_149, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_171, dout_172, dout_173, dout_174, dout_175, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_183, dout_184, dout_185, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_16=((B >> 0)&1)&((A >> 0)&1);
   dout_17=((B >> 1)&1)&((A >> 0)&1);
   dout_18=((B >> 2)&1)&((A >> 0)&1);
   dout_19=((B >> 3)&1)&((A >> 0)&1);
   dout_20=((B >> 4)&1)&((A >> 0)&1);
   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_24=((B >> 0)&1)&((A >> 1)&1);
   dout_25=((B >> 1)&1)&((A >> 1)&1);
   dout_26=((B >> 2)&1)&((A >> 1)&1);
   dout_27=((B >> 3)&1)&((A >> 1)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_32=dout_17|dout_24;
   dout_34=dout_18|dout_25;
   dout_36=dout_19|dout_26;
   dout_38=dout_20^dout_27;
   dout_39=dout_20&dout_27;
   dout_40=dout_21^dout_28;
   dout_41=dout_21&dout_28;
   dout_42=dout_22^dout_29;
   dout_43=dout_22&dout_29;
   dout_44=dout_23^dout_30;
   dout_45=dout_23&dout_30;
   dout_46=((B >> 0)&1)&((A >> 2)&1);
   dout_47=((B >> 1)&1)&((A >> 2)&1);
   dout_48=((B >> 2)&1)&((A >> 2)&1);
   dout_49=((B >> 3)&1)&((A >> 2)&1);
   dout_50=((B >> 4)&1)&((A >> 2)&1);
   dout_51=((B >> 5)&1)&((A >> 2)&1);
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_54=dout_34|dout_46;
   dout_59=dout_36|dout_47;
   dout_64=dout_38|dout_48;
   dout_65=dout_31&dout_48;
   dout_69=dout_40^dout_49;
   dout_70=dout_40&dout_49;
   dout_71=dout_69&dout_39;
   dout_72=dout_69^dout_39;
   dout_73=dout_70|dout_71;
   dout_74=dout_42^dout_50;
   dout_75=dout_42&dout_50;
   dout_76=dout_74&dout_41;
   dout_77=dout_74^dout_41;
   dout_78=dout_75|dout_76;
   dout_79=dout_44^dout_51;
   dout_80=dout_44&dout_51;
   dout_81=dout_79&dout_43;
   dout_82=dout_79^dout_43;
   dout_83=dout_80|dout_81;
   dout_84=dout_31^dout_52;
   dout_85=dout_31&dout_52;
   dout_87=dout_84^dout_45;
   dout_88=dout_85|dout_45;
   dout_89=((B >> 0)&1)&((A >> 3)&1);
   dout_90=((B >> 1)&1)&((A >> 3)&1);
   dout_91=((B >> 2)&1)&((A >> 3)&1);
   dout_92=((B >> 3)&1)&((A >> 3)&1);
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_97=dout_59|dout_89;
   dout_102=dout_64|dout_90;
   dout_103=dout_64&dout_90;
   dout_107=dout_72^dout_91;
   dout_108=dout_72&dout_91;
   dout_109=dout_107&dout_65;
   dout_110=dout_107^dout_65;
   dout_111=dout_108|dout_109;
   dout_112=dout_77^dout_92;
   dout_113=dout_77&dout_92;
   dout_114=dout_112&dout_73;
   dout_115=dout_112^dout_73;
   dout_116=dout_113|dout_114;
   dout_117=dout_82^dout_93;
   dout_118=dout_82&dout_93;
   dout_119=dout_117&dout_78;
   dout_120=dout_117^dout_78;
   dout_121=dout_118|dout_119;
   dout_122=dout_87^dout_94;
   dout_123=dout_87&dout_94;
   dout_124=dout_122&dout_83;
   dout_125=dout_122^dout_83;
   dout_126=dout_123|dout_124;
   dout_127=dout_53^dout_95;
   dout_128=dout_53&dout_95;
   dout_129=dout_127&dout_88;
   dout_130=dout_127^dout_88;
   dout_131=dout_128|dout_129;
   dout_132=((B >> 0)&1)&((A >> 4)&1);
   dout_133=((B >> 1)&1)&((A >> 4)&1);
   dout_134=((B >> 2)&1)&((A >> 4)&1);
   dout_135=((B >> 3)&1)&((A >> 4)&1);
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_140=dout_102^dout_132;
   dout_141=dout_102&dout_132;
   dout_145=dout_110^dout_133;
   dout_146=dout_110&dout_133;
   dout_147=dout_145&dout_103;
   dout_148=dout_145^dout_103;
   dout_149=dout_146|dout_147;
   dout_150=dout_115^dout_134;
   dout_151=dout_115&dout_134;
   dout_152=dout_150&dout_111;
   dout_153=dout_150^dout_111;
   dout_154=dout_151|dout_152;
   dout_155=dout_120^dout_135;
   dout_156=dout_120&dout_135;
   dout_157=dout_155&dout_116;
   dout_158=dout_155^dout_116;
   dout_159=dout_156|dout_157;
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_121;
   dout_163=dout_160^dout_121;
   dout_164=dout_161|dout_162;
   dout_165=dout_130^dout_137;
   dout_166=dout_130&dout_137;
   dout_167=dout_165&dout_126;
   dout_168=dout_165^dout_126;
   dout_169=dout_166|dout_167;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_172=dout_170&dout_131;
   dout_173=dout_170^dout_131;
   dout_174=dout_171|dout_172;
   dout_175=((B >> 0)&1)&((A >> 5)&1);
   dout_176=((B >> 1)&1)&((A >> 5)&1);
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_183=dout_148^dout_175;
   dout_184=dout_148&dout_175;
   dout_185=dout_183&dout_141;
   dout_186=dout_183^dout_141;
   dout_187=dout_184|dout_185;
   dout_188=dout_153^dout_176;
   dout_189=dout_153&dout_176;
   dout_190=dout_188&dout_149;
   dout_191=dout_188^dout_149;
   dout_192=dout_189|dout_190;
   dout_193=dout_158^dout_177;
   dout_194=dout_158&dout_177;
   dout_195=dout_193&dout_154;
   dout_196=dout_193^dout_154;
   dout_197=dout_194|dout_195;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_159;
   dout_201=dout_198^dout_159;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_218=((B >> 0)&1)&((A >> 6)&1);
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_226=dout_191^dout_218;
   dout_227=dout_191&dout_218;
   dout_228=dout_226&dout_187;
   dout_229=dout_226^dout_187;
   dout_230=dout_227|dout_228;
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_233=dout_231&dout_192;
   dout_234=dout_231^dout_192;
   dout_235=dout_232|dout_233;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_197;
   dout_239=dout_236^dout_197;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_234^dout_261;
   dout_270=dout_234&dout_261;
   dout_271=dout_269&dout_230;
   dout_272=dout_269^dout_230;
   dout_273=dout_270|dout_271;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_235;
   dout_277=dout_274^dout_235;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_304=dout_277^dout_273;
   dout_305=dout_277&dout_273;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_302^dout_298;
   dout_327=dout_302&dout_298;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_268^dout_303;
   dout_332=dout_268&dout_303;
   dout_333=dout_331&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_16&1) << 0;
   O |= (dout_32&1) << 1;
   O |= (dout_54&1) << 2;
   O |= (dout_97&1) << 3;
   O |= (dout_140&1) << 4;
   O |= (dout_186&1) << 5;
   O |= (dout_229&1) << 6;
   O |= (dout_272&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.39 %
// MAE = 1.0 
// WCE% = 0.78 %
// WCE = 2.0 
// WCRE% = 100.00 %
// EP% = 75.00 %
// MRE% = 4.02 %
// MSE = 1.5 
// PDK45_PWR = 0.028 mW
// PDK45_AREA = 57.7 um2
// PDK45_DELAY = 0.51 ns


uint64_t evoapproxlib::evoapprox_t::add8se_91Y(const uint64_t B,const uint64_t A)
{
   uint64_t dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_33, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_60, dout_61, dout_62, dout_63, dout_64, dout_65, dout_66;
   uint64_t O;

   dout_20=((A >> 2)&1)&((B >> 2)&1);
   dout_21=((A >> 2)&1)^((B >> 2)&1);
   dout_22=((A >> 3)&1)&((B >> 3)&1);
   dout_23=((A >> 3)&1)^((B >> 3)&1);
   dout_24=((A >> 4)&1)&((B >> 4)&1);
   dout_25=((A >> 4)&1)^((B >> 4)&1);
   dout_26=((A >> 5)&1)&((B >> 5)&1);
   dout_27=((A >> 5)&1)^((B >> 5)&1);
   dout_28=((A >> 6)&1)&((B >> 6)&1);
   dout_29=((A >> 6)&1)^((B >> 6)&1);
   dout_30=((A >> 7)&1)&((B >> 7)&1);
   dout_31=((A >> 7)&1)^((B >> 7)&1);
   dout_32=((A >> 7)&1)^((B >> 7)&1);
   dout_33=dout_21&((A >> 1)&1);
   dout_35=dout_20|dout_33;
   dout_36=dout_25&dout_22;
   dout_37=dout_25&dout_23;
   dout_38=dout_24|dout_36;
   dout_39=dout_29&dout_26;
   dout_40=dout_29&dout_27;
   dout_41=dout_28|dout_39;
   dout_44=dout_40&dout_38;
   dout_45=dout_40&dout_37;
   dout_46=dout_41|dout_44;
   dout_47=dout_45&dout_35;
   dout_48=dout_46|dout_47;
   dout_49=dout_37&dout_35;
   dout_50=dout_38|dout_49;
   dout_53=dout_23&dout_35;
   dout_54=dout_22|dout_53;
   dout_55=dout_27&dout_50;
   dout_56=dout_26|dout_55;
   dout_57=dout_31&dout_48;
   dout_58=dout_30|dout_57;
   dout_60=dout_21^((A >> 1)&1);
   dout_61=dout_23^dout_35;
   dout_62=dout_25^dout_54;
   dout_63=dout_27^dout_50;
   dout_64=dout_29^dout_56;
   dout_65=dout_31^dout_48;
   dout_66=dout_32^dout_58;

   O = 0;
   O |= (0&1) << 0;
   O |= (((B >> 1)&1)&1) << 1;
   O |= (dout_60&1) << 2;
   O |= (dout_61&1) << 3;
   O |= (dout_62&1) << 4;
   O |= (dout_63&1) << 5;
   O |= (dout_64&1) << 6;
   O |= (dout_65&1) << 7;
   O |= (dout_66&1) << 8;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.019 %
// MAE = 12 
// WCE% = 0.075 %
// WCE = 49 
// WCRE% = 4900.00 %
// EP% = 81.25 %
// MRE% = 2.53 %
// MSE = 248 
// PDK45_PWR = 0.391 mW
// PDK45_AREA = 641.1 um2
// PDK45_DELAY = 1.51 ns


int16_t evoapproxlib::evoapprox_t::mul8s_1KX2(int8_t A, int8_t B)
{
  int16_t P, P_;
  uint8_t tmp, C_1_3,C_1_4,C_1_5,C_1_6,C_1_7,C_2_2,C_2_3,C_2_4,C_2_5,C_2_6,C_2_7,C_3_1,C_3_2,C_3_3,C_3_4,C_3_5,C_3_6,C_3_7,C_4_0,C_4_1,C_4_2,C_4_3,C_4_4,C_4_5,C_4_6,C_4_7,C_5_0,C_5_1,C_5_2,C_5_3,C_5_4,C_5_5,C_5_6,C_5_7,C_6_0,C_6_1,C_6_2,C_6_3,C_6_4,C_6_5,C_6_6,C_6_7,C_7_0,C_7_1,C_7_2,C_7_3,C_7_4,C_7_5,C_7_6,C_7_7,C_8_0,C_8_1,C_8_2,C_8_3,C_8_4,C_8_5,C_8_6,C_8_7,S_0_4,S_0_5,S_0_6,S_0_7,S_1_3,S_1_4,S_1_5,S_1_6,S_1_7,S_2_2,S_2_3,S_2_4,S_2_5,S_2_6,S_2_7,S_3_1,S_3_2,S_3_3,S_3_4,S_3_5,S_3_6,S_3_7,S_4_0,S_4_1,S_4_2,S_4_3,S_4_4,S_4_5,S_4_6,S_4_7,S_5_0,S_5_1,S_5_2,S_5_3,S_5_4,S_5_5,S_5_6,S_5_7,S_6_0,S_6_1,S_6_2,S_6_3,S_6_4,S_6_5,S_6_6,S_6_7,S_7_0,S_7_1,S_7_2,S_7_3,S_7_4,S_7_5,S_7_6,S_7_7,S_8_0,S_8_1,S_8_2,S_8_3,S_8_4,S_8_5,S_8_6,S_8_7;
  S_0_4 = (((A>>0)&1) & ((B>>4)&1));
  S_0_5 = (((A>>0)&1) & ((B>>5)&1));
  S_0_6 = (((A>>0)&1) & ((B>>6)&1));
  S_0_7 = (((((A>>0)&1) & ((B>>7)&1)))^1);
  S_1_3 = S_0_4^(((A>>1)&1) & ((B>>3)&1));
  C_1_3 = S_0_4&(((A>>1)&1) & ((B>>3)&1));
  S_1_4 = S_0_5^(((A>>1)&1) & ((B>>4)&1));
  C_1_4 = S_0_5&(((A>>1)&1) & ((B>>4)&1));
  S_1_5 = S_0_6^(((A>>1)&1) & ((B>>5)&1));
  C_1_5 = S_0_6&(((A>>1)&1) & ((B>>5)&1));
  S_1_6 = S_0_7^(((A>>1)&1) & ((B>>6)&1));
  C_1_6 = S_0_7&(((A>>1)&1) & ((B>>6)&1));
  S_1_7 = 1^(((((A>>1)&1) & ((B>>7)&1)))^1);
  C_1_7 = 1&(((((A>>1)&1) & ((B>>7)&1)))^1);
  S_2_2 = S_1_3^(((A>>2)&1) & ((B>>2)&1));
  C_2_2 = S_1_3&(((A>>2)&1) & ((B>>2)&1));
  tmp = S_1_4^C_1_3;
  S_2_3 = tmp^(((A>>2)&1) & ((B>>3)&1));
  C_2_3 = (tmp&(((A>>2)&1) & ((B>>3)&1)))|(S_1_4&C_1_3);
  tmp = S_1_5^C_1_4;
  S_2_4 = tmp^(((A>>2)&1) & ((B>>4)&1));
  C_2_4 = (tmp&(((A>>2)&1) & ((B>>4)&1)))|(S_1_5&C_1_4);
  tmp = S_1_6^C_1_5;
  S_2_5 = tmp^(((A>>2)&1) & ((B>>5)&1));
  C_2_5 = (tmp&(((A>>2)&1) & ((B>>5)&1)))|(S_1_6&C_1_5);
  tmp = S_1_7^C_1_6;
  S_2_6 = tmp^(((A>>2)&1) & ((B>>6)&1));
  C_2_6 = (tmp&(((A>>2)&1) & ((B>>6)&1)))|(S_1_7&C_1_6);
  S_2_7 = C_1_7^(((((A>>2)&1) & ((B>>7)&1)))^1);
  C_2_7 = C_1_7&(((((A>>2)&1) & ((B>>7)&1)))^1);
  S_3_1 = S_2_2^(((A>>3)&1) & ((B>>1)&1));
  C_3_1 = S_2_2&(((A>>3)&1) & ((B>>1)&1));
  tmp = S_2_3^C_2_2;
  S_3_2 = tmp^(((A>>3)&1) & ((B>>2)&1));
  C_3_2 = (tmp&(((A>>3)&1) & ((B>>2)&1)))|(S_2_3&C_2_2);
  tmp = S_2_4^C_2_3;
  S_3_3 = tmp^(((A>>3)&1) & ((B>>3)&1));
  C_3_3 = (tmp&(((A>>3)&1) & ((B>>3)&1)))|(S_2_4&C_2_3);
  tmp = S_2_5^C_2_4;
  S_3_4 = tmp^(((A>>3)&1) & ((B>>4)&1));
  C_3_4 = (tmp&(((A>>3)&1) & ((B>>4)&1)))|(S_2_5&C_2_4);
  tmp = S_2_6^C_2_5;
  S_3_5 = tmp^(((A>>3)&1) & ((B>>5)&1));
  C_3_5 = (tmp&(((A>>3)&1) & ((B>>5)&1)))|(S_2_6&C_2_5);
  tmp = S_2_7^C_2_6;
  S_3_6 = tmp^(((A>>3)&1) & ((B>>6)&1));
  C_3_6 = (tmp&(((A>>3)&1) & ((B>>6)&1)))|(S_2_7&C_2_6);
  S_3_7 = C_2_7^(((((A>>3)&1) & ((B>>7)&1)))^1);
  C_3_7 = C_2_7&(((((A>>3)&1) & ((B>>7)&1)))^1);
  S_4_0 = S_3_1^(((A>>4)&1) & ((B>>0)&1));
  C_4_0 = S_3_1&(((A>>4)&1) & ((B>>0)&1));
  tmp = S_3_2^C_3_1;
  S_4_1 = tmp^(((A>>4)&1) & ((B>>1)&1));
  C_4_1 = (tmp&(((A>>4)&1) & ((B>>1)&1)))|(S_3_2&C_3_1);
  tmp = S_3_3^C_3_2;
  S_4_2 = tmp^(((A>>4)&1) & ((B>>2)&1));
  C_4_2 = (tmp&(((A>>4)&1) & ((B>>2)&1)))|(S_3_3&C_3_2);
  tmp = S_3_4^C_3_3;
  S_4_3 = tmp^(((A>>4)&1) & ((B>>3)&1));
  C_4_3 = (tmp&(((A>>4)&1) & ((B>>3)&1)))|(S_3_4&C_3_3);
  tmp = S_3_5^C_3_4;
  S_4_4 = tmp^(((A>>4)&1) & ((B>>4)&1));
  C_4_4 = (tmp&(((A>>4)&1) & ((B>>4)&1)))|(S_3_5&C_3_4);
  tmp = S_3_6^C_3_5;
  S_4_5 = tmp^(((A>>4)&1) & ((B>>5)&1));
  C_4_5 = (tmp&(((A>>4)&1) & ((B>>5)&1)))|(S_3_6&C_3_5);
  tmp = S_3_7^C_3_6;
  S_4_6 = tmp^(((A>>4)&1) & ((B>>6)&1));
  C_4_6 = (tmp&(((A>>4)&1) & ((B>>6)&1)))|(S_3_7&C_3_6);
  S_4_7 = C_3_7^(((((A>>4)&1) & ((B>>7)&1)))^1);
  C_4_7 = C_3_7&(((((A>>4)&1) & ((B>>7)&1)))^1);
  tmp = S_4_1^C_4_0;
  S_5_0 = tmp^(((A>>5)&1) & ((B>>0)&1));
  C_5_0 = (tmp&(((A>>5)&1) & ((B>>0)&1)))|(S_4_1&C_4_0);
  tmp = S_4_2^C_4_1;
  S_5_1 = tmp^(((A>>5)&1) & ((B>>1)&1));
  C_5_1 = (tmp&(((A>>5)&1) & ((B>>1)&1)))|(S_4_2&C_4_1);
  tmp = S_4_3^C_4_2;
  S_5_2 = tmp^(((A>>5)&1) & ((B>>2)&1));
  C_5_2 = (tmp&(((A>>5)&1) & ((B>>2)&1)))|(S_4_3&C_4_2);
  tmp = S_4_4^C_4_3;
  S_5_3 = tmp^(((A>>5)&1) & ((B>>3)&1));
  C_5_3 = (tmp&(((A>>5)&1) & ((B>>3)&1)))|(S_4_4&C_4_3);
  tmp = S_4_5^C_4_4;
  S_5_4 = tmp^(((A>>5)&1) & ((B>>4)&1));
  C_5_4 = (tmp&(((A>>5)&1) & ((B>>4)&1)))|(S_4_5&C_4_4);
  tmp = S_4_6^C_4_5;
  S_5_5 = tmp^(((A>>5)&1) & ((B>>5)&1));
  C_5_5 = (tmp&(((A>>5)&1) & ((B>>5)&1)))|(S_4_6&C_4_5);
  tmp = S_4_7^C_4_6;
  S_5_6 = tmp^(((A>>5)&1) & ((B>>6)&1));
  C_5_6 = (tmp&(((A>>5)&1) & ((B>>6)&1)))|(S_4_7&C_4_6);
  S_5_7 = C_4_7^(((((A>>5)&1) & ((B>>7)&1)))^1);
  C_5_7 = C_4_7&(((((A>>5)&1) & ((B>>7)&1)))^1);
  tmp = S_5_1^C_5_0;
  S_6_0 = tmp^(((A>>6)&1) & ((B>>0)&1));
  C_6_0 = (tmp&(((A>>6)&1) & ((B>>0)&1)))|(S_5_1&C_5_0);
  tmp = S_5_2^C_5_1;
  S_6_1 = tmp^(((A>>6)&1) & ((B>>1)&1));
  C_6_1 = (tmp&(((A>>6)&1) & ((B>>1)&1)))|(S_5_2&C_5_1);
  tmp = S_5_3^C_5_2;
  S_6_2 = tmp^(((A>>6)&1) & ((B>>2)&1));
  C_6_2 = (tmp&(((A>>6)&1) & ((B>>2)&1)))|(S_5_3&C_5_2);
  tmp = S_5_4^C_5_3;
  S_6_3 = tmp^(((A>>6)&1) & ((B>>3)&1));
  C_6_3 = (tmp&(((A>>6)&1) & ((B>>3)&1)))|(S_5_4&C_5_3);
  tmp = S_5_5^C_5_4;
  S_6_4 = tmp^(((A>>6)&1) & ((B>>4)&1));
  C_6_4 = (tmp&(((A>>6)&1) & ((B>>4)&1)))|(S_5_5&C_5_4);
  tmp = S_5_6^C_5_5;
  S_6_5 = tmp^(((A>>6)&1) & ((B>>5)&1));
  C_6_5 = (tmp&(((A>>6)&1) & ((B>>5)&1)))|(S_5_6&C_5_5);
  tmp = S_5_7^C_5_6;
  S_6_6 = tmp^(((A>>6)&1) & ((B>>6)&1));
  C_6_6 = (tmp&(((A>>6)&1) & ((B>>6)&1)))|(S_5_7&C_5_6);
  S_6_7 = C_5_7^(((((A>>6)&1) & ((B>>7)&1)))^1);
  C_6_7 = C_5_7&(((((A>>6)&1) & ((B>>7)&1)))^1);
  tmp = S_6_1^C_6_0;
  S_7_0 = tmp^(((((A>>7)&1) & ((B>>0)&1)))^1);
  C_7_0 = (tmp&(((((A>>7)&1) & ((B>>0)&1)))^1))|(S_6_1&C_6_0);
  tmp = S_6_2^C_6_1;
  S_7_1 = tmp^(((((A>>7)&1) & ((B>>1)&1)))^1);
  C_7_1 = (tmp&(((((A>>7)&1) & ((B>>1)&1)))^1))|(S_6_2&C_6_1);
  tmp = S_6_3^C_6_2;
  S_7_2 = tmp^(((((A>>7)&1) & ((B>>2)&1)))^1);
  C_7_2 = (tmp&(((((A>>7)&1) & ((B>>2)&1)))^1))|(S_6_3&C_6_2);
  tmp = S_6_4^C_6_3;
  S_7_3 = tmp^(((((A>>7)&1) & ((B>>3)&1)))^1);
  C_7_3 = (tmp&(((((A>>7)&1) & ((B>>3)&1)))^1))|(S_6_4&C_6_3);
  tmp = S_6_5^C_6_4;
  S_7_4 = tmp^(((((A>>7)&1) & ((B>>4)&1)))^1);
  C_7_4 = (tmp&(((((A>>7)&1) & ((B>>4)&1)))^1))|(S_6_5&C_6_4);
  tmp = S_6_6^C_6_5;
  S_7_5 = tmp^(((((A>>7)&1) & ((B>>5)&1)))^1);
  C_7_5 = (tmp&(((((A>>7)&1) & ((B>>5)&1)))^1))|(S_6_6&C_6_5);
  tmp = S_6_7^C_6_6;
  S_7_6 = tmp^(((((A>>7)&1) & ((B>>6)&1)))^1);
  C_7_6 = (tmp&(((((A>>7)&1) & ((B>>6)&1)))^1))|(S_6_7&C_6_6);
  S_7_7 = C_6_7^(((A>>7)&1) & ((B>>7)&1));
  C_7_7 = C_6_7&(((A>>7)&1) & ((B>>7)&1));
  S_8_0 = S_7_1^C_7_0;
  C_8_0 = S_7_1&C_7_0;
  tmp = S_7_2^C_8_0;
  S_8_1 = tmp^C_7_1;
  C_8_1 = (tmp&C_7_1)|(S_7_2&C_8_0);
  tmp = S_7_3^C_8_1;
  S_8_2 = tmp^C_7_2;
  C_8_2 = (tmp&C_7_2)|(S_7_3&C_8_1);
  tmp = S_7_4^C_8_2;
  S_8_3 = tmp^C_7_3;
  C_8_3 = (tmp&C_7_3)|(S_7_4&C_8_2);
  tmp = S_7_5^C_8_3;
  S_8_4 = tmp^C_7_4;
  C_8_4 = (tmp&C_7_4)|(S_7_5&C_8_3);
  tmp = S_7_6^C_8_4;
  S_8_5 = tmp^C_7_5;
  C_8_5 = (tmp&C_7_5)|(S_7_6&C_8_4);
  tmp = S_7_7^C_8_5;
  S_8_6 = tmp^C_7_6;
  C_8_6 = (tmp&C_7_6)|(S_7_7&C_8_5);
  tmp = 1^C_8_6;
  S_8_7 = tmp^C_7_7;
  C_8_7 = (tmp&C_7_7)|(1&C_8_6);
  P = 0;
  P |= (S_4_0 & 1) << 4;
  P |= (S_5_0 & 1) << 5;
  P |= (S_6_0 & 1) << 6;
  P |= (S_7_0 & 1) << 7;
  P |= (S_8_0 & 1) << 8;
  P |= (S_8_1 & 1) << 9;
  P |= (S_8_2 & 1) << 10;
  P |= (S_8_3 & 1) << 11;
  P |= (S_8_4 & 1) << 12;
  P |= (S_8_5 & 1) << 13;
  P |= (S_8_6 & 1) << 14;
  P |= (S_8_7 & 1) << 15;
  return P;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.00 %
// MAE = 0 
// WCE% = 0.00 %
// WCE = 0 
// WCRE% = 0.00 %
// EP% = 0.00 %
// MRE% = 0.00 %
// MSE = 0 
// PDK45_PWR = 0.035 mW
// PDK45_AREA = 74.6 um2
// PDK45_DELAY = 0.63 ns


uint64_t evoapproxlib::evoapprox_t::add8se_7A2(const uint64_t B,const uint64_t A)
{
   uint64_t dout_16, dout_17, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_54;
   uint64_t O;

   dout_16=((A >> 0)&1)^((B >> 0)&1);
   dout_17=((A >> 0)&1)&((B >> 0)&1);
   dout_18=((A >> 1)&1)^((B >> 1)&1);
   dout_19=((A >> 1)&1)&((B >> 1)&1);
   dout_20=dout_18&dout_17;
   dout_21=dout_18^dout_17;
   dout_22=dout_19|dout_20;
   dout_23=((A >> 2)&1)^((B >> 2)&1);
   dout_24=((A >> 2)&1)&((B >> 2)&1);
   dout_25=dout_23&dout_22;
   dout_26=dout_23^dout_22;
   dout_27=dout_24|dout_25;
   dout_28=((A >> 3)&1)^((B >> 3)&1);
   dout_29=((A >> 3)&1)&((B >> 3)&1);
   dout_30=dout_28&dout_27;
   dout_31=dout_28^dout_27;
   dout_32=dout_29|dout_30;
   dout_33=((A >> 4)&1)^((B >> 4)&1);
   dout_34=((A >> 4)&1)&((B >> 4)&1);
   dout_35=dout_33&dout_32;
   dout_36=dout_33^dout_32;
   dout_37=dout_34|dout_35;
   dout_38=((A >> 5)&1)^((B >> 5)&1);
   dout_39=((A >> 5)&1)&((B >> 5)&1);
   dout_40=dout_38&dout_37;
   dout_41=dout_38^dout_37;
   dout_42=dout_39|dout_40;
   dout_43=((A >> 6)&1)^((B >> 6)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=dout_43&dout_42;
   dout_46=dout_43^dout_42;
   dout_47=dout_44|dout_45;
   dout_48=((A >> 7)&1)^((B >> 7)&1);
   dout_49=((A >> 7)&1)&((B >> 7)&1);
   dout_50=dout_48&dout_47;
   dout_51=dout_48^dout_47;
   dout_52=dout_49|dout_50;
   dout_54=dout_48^dout_52;

   O = 0;
   O |= (dout_16&1) << 0;
   O |= (dout_21&1) << 1;
   O |= (dout_26&1) << 2;
   O |= (dout_31&1) << 3;
   O |= (dout_36&1) << 4;
   O |= (dout_41&1) << 5;
   O |= (dout_46&1) << 6;
   O |= (dout_51&1) << 7;
   O |= (dout_54&1) << 8;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 3.75 %
// MAE = 4.8 
// WCE% = 9.38 %
// WCE = 12 
// WCRE% = 1100.00 %
// EP% = 93.75 %
// MRE% = 26.40 %
// MSE = 35 
// PDK45_PWR = 0.021 mW
// PDK45_AREA = 48.3 um2
// PDK45_DELAY = 0.45 ns


uint64_t evoapproxlib::evoapprox_t::add8s_6PM(const uint64_t A /* 8-bit signed operand */, const uint64_t B /* 8-bit signed operand */)
{
   uint64_t dout_20, dout_25, dout_28, dout_29, dout_30, dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_49;
   uint64_t O;

   dout_20=((B >> 7)&1)^((A >> 7)&1);
   dout_25=((A >> 7)&1)&((B >> 7)&1);
   dout_28=((A >> 3)&1)|((B >> 3)&1);
   dout_29=((A >> 3)&1)&((B >> 3)&1);
   dout_30=dout_28&dout_25;
   dout_32=dout_29|dout_30;
   dout_33=((A >> 4)&1)^((B >> 4)&1);
   dout_34=((A >> 4)&1)&((B >> 4)&1);
   dout_35=dout_33&dout_32;
   dout_36=dout_33^dout_32;
   dout_37=dout_34|dout_35;
   dout_38=((A >> 5)&1)^((B >> 5)&1);
   dout_39=((A >> 5)&1)&((B >> 5)&1);
   dout_40=dout_38&dout_37;
   dout_41=dout_38^dout_37;
   dout_42=dout_39|dout_40;
   dout_43=((A >> 6)&1)^((B >> 6)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=dout_43&dout_42;
   dout_46=dout_43^dout_42;
   dout_47=dout_44|dout_45;
   dout_49=dout_20^dout_47;

   O = 0;
   O |= (((A >> 0)&1)&1) << 0;
   O |= (((B >> 1)&1)&1) << 1;
   O |= (((A >> 2)&1)&1) << 2;
   O |= (((B >> 2)&1)&1) << 3;
   O |= (dout_36&1) << 4;
   O |= (dout_41&1) << 5;
   O |= (dout_46&1) << 6;
   O |= (dout_49&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 7.66 %
// MAE = 9.8 
// WCE% = 23.44 %
// WCE = 30 
// WCRE% = 850.00 %
// EP% = 96.91 %
// MRE% = 33.04 %
// MSE = 142 
// PDK45_PWR = 0.017 mW
// PDK45_AREA = 40.8 um2
// PDK45_DELAY = 0.38 ns


uint64_t evoapproxlib::evoapprox_t::add8s_6PA(const uint64_t B,const uint64_t A)
{
   uint64_t dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49;
   uint64_t O;

   dout_33=((A >> 4)&1)^((B >> 4)&1);
   dout_34=((A >> 4)&1)&((B >> 4)&1);
   dout_35=dout_33&((B >> 7)&1);
   dout_36=dout_33^dout_35;
   dout_37=dout_34|dout_35;
   dout_38=((A >> 5)&1)^((B >> 5)&1);
   dout_39=((A >> 5)&1)&((B >> 5)&1);
   dout_40=dout_38&dout_37;
   dout_41=dout_38^dout_37;
   dout_42=dout_39|dout_40;
   dout_43=((A >> 6)&1)^((B >> 6)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=dout_43&dout_42;
   dout_46=dout_43^dout_42;
   dout_47=dout_44|dout_45;
   dout_48=((A >> 7)&1)^((B >> 7)&1);
   dout_49=dout_48^dout_47;

   O = 0;
   O |= (dout_46&1) << 0;
   O |= (dout_36&1) << 1;
   O |= (dout_49&1) << 2;
   O |= (dout_49&1) << 3;
   O |= (dout_36&1) << 4;
   O |= (dout_41&1) << 5;
   O |= (dout_46&1) << 6;
   O |= (dout_49&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.0064 %
// MAE = 4.2 
// WCE% = 0.026 %
// WCE = 17 
// WCRE% = 1700.00 %
// EP% = 68.75 %
// MRE% = 0.90 %
// MSE = 34 
// PDK45_PWR = 0.410 mW
// PDK45_AREA = 685.2 um2
// PDK45_DELAY = 1.47 ns


int16_t evoapproxlib::evoapprox_t::mul8s_1KVB(int8_t A, int8_t B)
{
  int16_t P, P_;
  uint8_t tmp, C_1_2,C_1_3,C_1_4,C_1_5,C_1_6,C_1_7,C_2_1,C_2_2,C_2_3,C_2_4,C_2_5,C_2_6,C_2_7,C_3_0,C_3_1,C_3_2,C_3_3,C_3_4,C_3_5,C_3_6,C_3_7,C_4_0,C_4_1,C_4_2,C_4_3,C_4_4,C_4_5,C_4_6,C_4_7,C_5_0,C_5_1,C_5_2,C_5_3,C_5_4,C_5_5,C_5_6,C_5_7,C_6_0,C_6_1,C_6_2,C_6_3,C_6_4,C_6_5,C_6_6,C_6_7,C_7_0,C_7_1,C_7_2,C_7_3,C_7_4,C_7_5,C_7_6,C_7_7,C_8_0,C_8_1,C_8_2,C_8_3,C_8_4,C_8_5,C_8_6,C_8_7,S_0_3,S_0_4,S_0_5,S_0_6,S_0_7,S_1_2,S_1_3,S_1_4,S_1_5,S_1_6,S_1_7,S_2_1,S_2_2,S_2_3,S_2_4,S_2_5,S_2_6,S_2_7,S_3_0,S_3_1,S_3_2,S_3_3,S_3_4,S_3_5,S_3_6,S_3_7,S_4_0,S_4_1,S_4_2,S_4_3,S_4_4,S_4_5,S_4_6,S_4_7,S_5_0,S_5_1,S_5_2,S_5_3,S_5_4,S_5_5,S_5_6,S_5_7,S_6_0,S_6_1,S_6_2,S_6_3,S_6_4,S_6_5,S_6_6,S_6_7,S_7_0,S_7_1,S_7_2,S_7_3,S_7_4,S_7_5,S_7_6,S_7_7,S_8_0,S_8_1,S_8_2,S_8_3,S_8_4,S_8_5,S_8_6,S_8_7;
  S_0_3 = (((A>>0)&1) & ((B>>3)&1));
  S_0_4 = (((A>>0)&1) & ((B>>4)&1));
  S_0_5 = (((A>>0)&1) & ((B>>5)&1));
  S_0_6 = (((A>>0)&1) & ((B>>6)&1));
  S_0_7 = (((((A>>0)&1) & ((B>>7)&1)))^1);
  S_1_2 = S_0_3^(((A>>1)&1) & ((B>>2)&1));
  C_1_2 = S_0_3&(((A>>1)&1) & ((B>>2)&1));
  S_1_3 = S_0_4^(((A>>1)&1) & ((B>>3)&1));
  C_1_3 = S_0_4&(((A>>1)&1) & ((B>>3)&1));
  S_1_4 = S_0_5^(((A>>1)&1) & ((B>>4)&1));
  C_1_4 = S_0_5&(((A>>1)&1) & ((B>>4)&1));
  S_1_5 = S_0_6^(((A>>1)&1) & ((B>>5)&1));
  C_1_5 = S_0_6&(((A>>1)&1) & ((B>>5)&1));
  S_1_6 = S_0_7^(((A>>1)&1) & ((B>>6)&1));
  C_1_6 = S_0_7&(((A>>1)&1) & ((B>>6)&1));
  S_1_7 = 1^(((((A>>1)&1) & ((B>>7)&1)))^1);
  C_1_7 = 1&(((((A>>1)&1) & ((B>>7)&1)))^1);
  S_2_1 = S_1_2^(((A>>2)&1) & ((B>>1)&1));
  C_2_1 = S_1_2&(((A>>2)&1) & ((B>>1)&1));
  tmp = S_1_3^C_1_2;
  S_2_2 = tmp^(((A>>2)&1) & ((B>>2)&1));
  C_2_2 = (tmp&(((A>>2)&1) & ((B>>2)&1)))|(S_1_3&C_1_2);
  tmp = S_1_4^C_1_3;
  S_2_3 = tmp^(((A>>2)&1) & ((B>>3)&1));
  C_2_3 = (tmp&(((A>>2)&1) & ((B>>3)&1)))|(S_1_4&C_1_3);
  tmp = S_1_5^C_1_4;
  S_2_4 = tmp^(((A>>2)&1) & ((B>>4)&1));
  C_2_4 = (tmp&(((A>>2)&1) & ((B>>4)&1)))|(S_1_5&C_1_4);
  tmp = S_1_6^C_1_5;
  S_2_5 = tmp^(((A>>2)&1) & ((B>>5)&1));
  C_2_5 = (tmp&(((A>>2)&1) & ((B>>5)&1)))|(S_1_6&C_1_5);
  tmp = S_1_7^C_1_6;
  S_2_6 = tmp^(((A>>2)&1) & ((B>>6)&1));
  C_2_6 = (tmp&(((A>>2)&1) & ((B>>6)&1)))|(S_1_7&C_1_6);
  S_2_7 = C_1_7^(((((A>>2)&1) & ((B>>7)&1)))^1);
  C_2_7 = C_1_7&(((((A>>2)&1) & ((B>>7)&1)))^1);
  S_3_0 = S_2_1^(((A>>3)&1) & ((B>>0)&1));
  C_3_0 = S_2_1&(((A>>3)&1) & ((B>>0)&1));
  tmp = S_2_2^C_2_1;
  S_3_1 = tmp^(((A>>3)&1) & ((B>>1)&1));
  C_3_1 = (tmp&(((A>>3)&1) & ((B>>1)&1)))|(S_2_2&C_2_1);
  tmp = S_2_3^C_2_2;
  S_3_2 = tmp^(((A>>3)&1) & ((B>>2)&1));
  C_3_2 = (tmp&(((A>>3)&1) & ((B>>2)&1)))|(S_2_3&C_2_2);
  tmp = S_2_4^C_2_3;
  S_3_3 = tmp^(((A>>3)&1) & ((B>>3)&1));
  C_3_3 = (tmp&(((A>>3)&1) & ((B>>3)&1)))|(S_2_4&C_2_3);
  tmp = S_2_5^C_2_4;
  S_3_4 = tmp^(((A>>3)&1) & ((B>>4)&1));
  C_3_4 = (tmp&(((A>>3)&1) & ((B>>4)&1)))|(S_2_5&C_2_4);
  tmp = S_2_6^C_2_5;
  S_3_5 = tmp^(((A>>3)&1) & ((B>>5)&1));
  C_3_5 = (tmp&(((A>>3)&1) & ((B>>5)&1)))|(S_2_6&C_2_5);
  tmp = S_2_7^C_2_6;
  S_3_6 = tmp^(((A>>3)&1) & ((B>>6)&1));
  C_3_6 = (tmp&(((A>>3)&1) & ((B>>6)&1)))|(S_2_7&C_2_6);
  S_3_7 = C_2_7^(((((A>>3)&1) & ((B>>7)&1)))^1);
  C_3_7 = C_2_7&(((((A>>3)&1) & ((B>>7)&1)))^1);
  tmp = S_3_1^C_3_0;
  S_4_0 = tmp^(((A>>4)&1) & ((B>>0)&1));
  C_4_0 = (tmp&(((A>>4)&1) & ((B>>0)&1)))|(S_3_1&C_3_0);
  tmp = S_3_2^C_3_1;
  S_4_1 = tmp^(((A>>4)&1) & ((B>>1)&1));
  C_4_1 = (tmp&(((A>>4)&1) & ((B>>1)&1)))|(S_3_2&C_3_1);
  tmp = S_3_3^C_3_2;
  S_4_2 = tmp^(((A>>4)&1) & ((B>>2)&1));
  C_4_2 = (tmp&(((A>>4)&1) & ((B>>2)&1)))|(S_3_3&C_3_2);
  tmp = S_3_4^C_3_3;
  S_4_3 = tmp^(((A>>4)&1) & ((B>>3)&1));
  C_4_3 = (tmp&(((A>>4)&1) & ((B>>3)&1)))|(S_3_4&C_3_3);
  tmp = S_3_5^C_3_4;
  S_4_4 = tmp^(((A>>4)&1) & ((B>>4)&1));
  C_4_4 = (tmp&(((A>>4)&1) & ((B>>4)&1)))|(S_3_5&C_3_4);
  tmp = S_3_6^C_3_5;
  S_4_5 = tmp^(((A>>4)&1) & ((B>>5)&1));
  C_4_5 = (tmp&(((A>>4)&1) & ((B>>5)&1)))|(S_3_6&C_3_5);
  tmp = S_3_7^C_3_6;
  S_4_6 = tmp^(((A>>4)&1) & ((B>>6)&1));
  C_4_6 = (tmp&(((A>>4)&1) & ((B>>6)&1)))|(S_3_7&C_3_6);
  S_4_7 = C_3_7^(((((A>>4)&1) & ((B>>7)&1)))^1);
  C_4_7 = C_3_7&(((((A>>4)&1) & ((B>>7)&1)))^1);
  tmp = S_4_1^C_4_0;
  S_5_0 = tmp^(((A>>5)&1) & ((B>>0)&1));
  C_5_0 = (tmp&(((A>>5)&1) & ((B>>0)&1)))|(S_4_1&C_4_0);
  tmp = S_4_2^C_4_1;
  S_5_1 = tmp^(((A>>5)&1) & ((B>>1)&1));
  C_5_1 = (tmp&(((A>>5)&1) & ((B>>1)&1)))|(S_4_2&C_4_1);
  tmp = S_4_3^C_4_2;
  S_5_2 = tmp^(((A>>5)&1) & ((B>>2)&1));
  C_5_2 = (tmp&(((A>>5)&1) & ((B>>2)&1)))|(S_4_3&C_4_2);
  tmp = S_4_4^C_4_3;
  S_5_3 = tmp^(((A>>5)&1) & ((B>>3)&1));
  C_5_3 = (tmp&(((A>>5)&1) & ((B>>3)&1)))|(S_4_4&C_4_3);
  tmp = S_4_5^C_4_4;
  S_5_4 = tmp^(((A>>5)&1) & ((B>>4)&1));
  C_5_4 = (tmp&(((A>>5)&1) & ((B>>4)&1)))|(S_4_5&C_4_4);
  tmp = S_4_6^C_4_5;
  S_5_5 = tmp^(((A>>5)&1) & ((B>>5)&1));
  C_5_5 = (tmp&(((A>>5)&1) & ((B>>5)&1)))|(S_4_6&C_4_5);
  tmp = S_4_7^C_4_6;
  S_5_6 = tmp^(((A>>5)&1) & ((B>>6)&1));
  C_5_6 = (tmp&(((A>>5)&1) & ((B>>6)&1)))|(S_4_7&C_4_6);
  S_5_7 = C_4_7^(((((A>>5)&1) & ((B>>7)&1)))^1);
  C_5_7 = C_4_7&(((((A>>5)&1) & ((B>>7)&1)))^1);
  tmp = S_5_1^C_5_0;
  S_6_0 = tmp^(((A>>6)&1) & ((B>>0)&1));
  C_6_0 = (tmp&(((A>>6)&1) & ((B>>0)&1)))|(S_5_1&C_5_0);
  tmp = S_5_2^C_5_1;
  S_6_1 = tmp^(((A>>6)&1) & ((B>>1)&1));
  C_6_1 = (tmp&(((A>>6)&1) & ((B>>1)&1)))|(S_5_2&C_5_1);
  tmp = S_5_3^C_5_2;
  S_6_2 = tmp^(((A>>6)&1) & ((B>>2)&1));
  C_6_2 = (tmp&(((A>>6)&1) & ((B>>2)&1)))|(S_5_3&C_5_2);
  tmp = S_5_4^C_5_3;
  S_6_3 = tmp^(((A>>6)&1) & ((B>>3)&1));
  C_6_3 = (tmp&(((A>>6)&1) & ((B>>3)&1)))|(S_5_4&C_5_3);
  tmp = S_5_5^C_5_4;
  S_6_4 = tmp^(((A>>6)&1) & ((B>>4)&1));
  C_6_4 = (tmp&(((A>>6)&1) & ((B>>4)&1)))|(S_5_5&C_5_4);
  tmp = S_5_6^C_5_5;
  S_6_5 = tmp^(((A>>6)&1) & ((B>>5)&1));
  C_6_5 = (tmp&(((A>>6)&1) & ((B>>5)&1)))|(S_5_6&C_5_5);
  tmp = S_5_7^C_5_6;
  S_6_6 = tmp^(((A>>6)&1) & ((B>>6)&1));
  C_6_6 = (tmp&(((A>>6)&1) & ((B>>6)&1)))|(S_5_7&C_5_6);
  S_6_7 = C_5_7^(((((A>>6)&1) & ((B>>7)&1)))^1);
  C_6_7 = C_5_7&(((((A>>6)&1) & ((B>>7)&1)))^1);
  tmp = S_6_1^C_6_0;
  S_7_0 = tmp^(((((A>>7)&1) & ((B>>0)&1)))^1);
  C_7_0 = (tmp&(((((A>>7)&1) & ((B>>0)&1)))^1))|(S_6_1&C_6_0);
  tmp = S_6_2^C_6_1;
  S_7_1 = tmp^(((((A>>7)&1) & ((B>>1)&1)))^1);
  C_7_1 = (tmp&(((((A>>7)&1) & ((B>>1)&1)))^1))|(S_6_2&C_6_1);
  tmp = S_6_3^C_6_2;
  S_7_2 = tmp^(((((A>>7)&1) & ((B>>2)&1)))^1);
  C_7_2 = (tmp&(((((A>>7)&1) & ((B>>2)&1)))^1))|(S_6_3&C_6_2);
  tmp = S_6_4^C_6_3;
  S_7_3 = tmp^(((((A>>7)&1) & ((B>>3)&1)))^1);
  C_7_3 = (tmp&(((((A>>7)&1) & ((B>>3)&1)))^1))|(S_6_4&C_6_3);
  tmp = S_6_5^C_6_4;
  S_7_4 = tmp^(((((A>>7)&1) & ((B>>4)&1)))^1);
  C_7_4 = (tmp&(((((A>>7)&1) & ((B>>4)&1)))^1))|(S_6_5&C_6_4);
  tmp = S_6_6^C_6_5;
  S_7_5 = tmp^(((((A>>7)&1) & ((B>>5)&1)))^1);
  C_7_5 = (tmp&(((((A>>7)&1) & ((B>>5)&1)))^1))|(S_6_6&C_6_5);
  tmp = S_6_7^C_6_6;
  S_7_6 = tmp^(((((A>>7)&1) & ((B>>6)&1)))^1);
  C_7_6 = (tmp&(((((A>>7)&1) & ((B>>6)&1)))^1))|(S_6_7&C_6_6);
  S_7_7 = C_6_7^(((A>>7)&1) & ((B>>7)&1));
  C_7_7 = C_6_7&(((A>>7)&1) & ((B>>7)&1));
  S_8_0 = S_7_1^C_7_0;
  C_8_0 = S_7_1&C_7_0;
  tmp = S_7_2^C_8_0;
  S_8_1 = tmp^C_7_1;
  C_8_1 = (tmp&C_7_1)|(S_7_2&C_8_0);
  tmp = S_7_3^C_8_1;
  S_8_2 = tmp^C_7_2;
  C_8_2 = (tmp&C_7_2)|(S_7_3&C_8_1);
  tmp = S_7_4^C_8_2;
  S_8_3 = tmp^C_7_3;
  C_8_3 = (tmp&C_7_3)|(S_7_4&C_8_2);
  tmp = S_7_5^C_8_3;
  S_8_4 = tmp^C_7_4;
  C_8_4 = (tmp&C_7_4)|(S_7_5&C_8_3);
  tmp = S_7_6^C_8_4;
  S_8_5 = tmp^C_7_5;
  C_8_5 = (tmp&C_7_5)|(S_7_6&C_8_4);
  tmp = S_7_7^C_8_5;
  S_8_6 = tmp^C_7_6;
  C_8_6 = (tmp&C_7_6)|(S_7_7&C_8_5);
  tmp = 1^C_8_6;
  S_8_7 = tmp^C_7_7;
  C_8_7 = (tmp&C_7_7)|(1&C_8_6);
  P = 0;
  P |= (S_3_0 & 1) << 3;
  P |= (S_4_0 & 1) << 4;
  P |= (S_5_0 & 1) << 5;
  P |= (S_6_0 & 1) << 6;
  P |= (S_7_0 & 1) << 7;
  P |= (S_8_0 & 1) << 8;
  P |= (S_8_1 & 1) << 9;
  P |= (S_8_2 & 1) << 10;
  P |= (S_8_3 & 1) << 11;
  P |= (S_8_4 & 1) << 12;
  P |= (S_8_5 & 1) << 13;
  P |= (S_8_6 & 1) << 14;
  P |= (S_8_7 & 1) << 15;
  return P;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 24.81 %
// MAE = 16256 
// WCE% = 99.22 %
// WCE = 65025 
// WCRE% = 100.00 %
// EP% = 99.22 %
// MRE% = 100.00 %
// MSE = 47164.981e4 
// PDK45_PWR = 0.000 mW
// PDK45_AREA = 0.0 um2
// PDK45_DELAY = 0.00 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_E9R(const uint64_t B,const uint64_t A)
{
   uint64_t O;   int avg=0;


   O = 0;
   O |= (0&1) << 0;
   O |= (0&1) << 1;
   O |= (0&1) << 2;
   O |= (0&1) << 3;
   O |= (0&1) << 4;
   O |= (0&1) << 5;
   O |= (0&1) << 6;
   O |= (0&1) << 7;
   O |= (0&1) << 8;
   O |= (0&1) << 9;
   O |= (0&1) << 10;
   O |= (0&1) << 11;
   O |= (0&1) << 12;
   O |= (0&1) << 13;
   O |= (0&1) << 14;
   O |= (0&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek and R. Hrbacek, "Role of circuit representation in evolutionary design of energy-efficient approximate circuits" in IET Computers & Digital Techniques, vol. 12, no. 4, pp. 139-149, 7 2018. doi: 10.1049/iet-cdt.2017.0188 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.098 %
// MAE = 0.5 
// WCE% = 0.20 %
// WCE = 1.0 
// WCRE% = 100.00 %
// EP% = 50.00 %
// MRE% = 0.27 %
// MSE = 0.5 
// PDK45_PWR = 0.028 mW
// PDK45_AREA = 61.5 um2
// PDK45_DELAY = 0.55 ns


uint64_t evoapproxlib::evoapprox_t::add8u_4T8(uint64_t a, uint64_t b) {
  uint64_t o = 0;
  int n_196=0, n_192=0, n_23=0, n_46=0, n_27=0, n_42=0, n_85=0, n_69=0, n_166=0, n_89=0;
  int n_66=0, n_62=0, n_200=0, n_108=0, n_204=0, n_208=0, n_127=0, n_100=0, n_189=0, n_104=0;
  int n_8=0, n_9=0, n_185=0, n_4=0, n_5=0, n_6=0, n_7=0, n_0=0, n_1=0, n_2=0;
  int n_3=0, n_31=0, n_35=0, n_16=0, n_39=0, n_14=0, n_15=0, n_12=0, n_13=0, n_10=0;
  int n_11=0, n_96=0, n_173=0, n_58=0, n_92=0, n_177=0, n_50=0, n_77=0, n_154=0, n_119=0;
  int n_54=0, n_73=0, n_169=0, n_212=0, n_139=0, n_135=0, n_131=0;
  n_0 = (a >> 0) & 0x1;
  n_1 = (a >> 1) & 0x1;
  n_2 = (a >> 2) & 0x1;
  n_3 = (a >> 3) & 0x1;
  n_4 = (a >> 4) & 0x1;
  n_5 = (a >> 5) & 0x1;
  n_6 = (a >> 6) & 0x1;
  n_7 = (a >> 7) & 0x1;
  n_8 = (b >> 0) & 0x1;
  n_9 = (b >> 1) & 0x1;
  n_10 = (b >> 2) & 0x1;
  n_11 = (b >> 3) & 0x1;
  n_12 = (b >> 4) & 0x1;
  n_13 = (b >> 5) & 0x1;
  n_14 = (b >> 6) & 0x1;
  n_15 = (b >> 7) & 0x1;
  n_16 = n_3 | n_11;
  n_23 = n_1 ^ n_9;
  n_27 = n_1 & n_9;
  n_31 = n_10 ^ n_2;
  n_35 = n_2 & n_10;
  n_39 = n_3 ^ n_11;
  n_42 = n_3 & n_11;
  n_46 = n_4 ^ n_12;
  n_50 = n_4 & n_12;
  n_54 = n_5 ^ n_13;
  n_58 = n_13 & n_5;
  n_62 = n_6 ^ n_14;
  n_66 = n_6 & n_14;
  n_69 = n_7 ^ n_15;
  n_73 = n_7 & n_15;
  n_77 = n_31 & n_27;
  n_85 = n_35 | n_77;
  n_89 = n_46 & n_42;
  n_92 = n_46 & n_39;
  n_96 = n_50 | n_89;
  n_100 = n_62 & n_58;
  n_104 = n_62 & n_54;
  n_108 = n_66 | n_100;
  n_119 = n_92 & n_85;
  n_127 = n_96 | n_119;
  n_131 = n_104 & n_96;
  n_135 = n_104 & n_119;
  n_139 = n_108 | n_131;
  n_154 = n_139 | n_135;
  n_166 = n_16 & n_85;
  n_169 = n_42 | n_166;
  n_173 = n_54 & n_127;
  n_177 = n_58 | n_173;
  n_185 = n_31 ^ n_27;
  n_189 = n_39 ^ n_85;
  n_192 = n_46 ^ n_169;
  n_196 = n_54 ^ n_127;
  n_200 = n_62 ^ n_177;
  n_204 = n_69 ^ n_154;
  n_208 = n_69 & n_154;
  n_212 = n_73 | n_208;
  o |= (n_0 & 0x01) << 0;
  o |= (n_23 & 0x01) << 1;
  o |= (n_185 & 0x01) << 2;
  o |= (n_189 & 0x01) << 3;
  o |= (n_192 & 0x01) << 4;
  o |= (n_196 & 0x01) << 5;
  o |= (n_200 & 0x01) << 6;
  o |= (n_204 & 0x01) << 7;
  o |= (n_212 & 0x01) << 8;
  return o;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.0015 %
// MAE = 1.0 
// WCE% = 0.0046 %
// WCE = 3.0 
// WCRE% = 100.00 %
// EP% = 64.06 %
// MRE% = 0.052 %
// MSE = 1.9 
// PDK45_PWR = 0.386 mW
// PDK45_AREA = 676.3 um2
// PDK45_DELAY = 1.42 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_2P7(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_65, dout_66, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_87, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_98, dout_99, dout_100, dout_101, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110, dout_111, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143, dout_144, dout_145, dout_146, dout_147, dout_148, dout_149, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_171, dout_172, dout_173, dout_174, dout_175, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_183, dout_184, dout_185, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_18=((B >> 2)&1)&((A >> 0)&1);
   dout_19=((B >> 3)&1)&((A >> 0)&1);
   dout_20=((B >> 4)&1)&((A >> 0)&1);
   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_25=((B >> 1)&1)&((A >> 1)&1);
   dout_26=((B >> 2)&1)&((A >> 1)&1);
   dout_27=((B >> 3)&1)&((A >> 1)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_33=((B >> 6)&1)&dout_31;
   dout_34=dout_18|dout_25;
   dout_35=dout_18&dout_25;
   dout_36=dout_19^dout_26;
   dout_37=dout_19&dout_26;
   dout_38=dout_20^dout_27;
   dout_39=dout_20&dout_27;
   dout_40=dout_21^dout_28;
   dout_41=dout_21&dout_28;
   dout_42=dout_22^dout_29;
   dout_43=dout_22&dout_29;
   dout_44=dout_23^dout_30;
   dout_45=((A >> 0)&1)&dout_33;
   dout_46=((B >> 0)&1)&((A >> 2)&1);
   dout_47=((B >> 1)&1)&((A >> 2)&1);
   dout_48=((B >> 2)&1)&((A >> 2)&1);
   dout_49=((B >> 3)&1)&((A >> 2)&1);
   dout_50=((B >> 4)&1)&((A >> 2)&1);
   dout_51=((B >> 5)&1)&((A >> 2)&1);
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_54=dout_34^dout_46;
   dout_55=dout_34&dout_46;
   dout_59=dout_36^dout_47;
   dout_60=dout_36&dout_47;
   dout_61=dout_59&dout_35;
   dout_62=dout_59^dout_35;
   dout_63=dout_60|dout_61;
   dout_64=dout_38^dout_48;
   dout_65=dout_38&dout_48;
   dout_66=dout_64&dout_37;
   dout_67=dout_64^dout_37;
   dout_68=dout_65|dout_66;
   dout_69=dout_40^dout_49;
   dout_70=dout_40&dout_49;
   dout_71=dout_69&dout_39;
   dout_72=dout_69^dout_39;
   dout_73=dout_70|dout_71;
   dout_74=dout_42^dout_50;
   dout_75=dout_42&dout_50;
   dout_76=dout_74&dout_41;
   dout_77=dout_74^dout_41;
   dout_78=dout_75|dout_76;
   dout_79=dout_44^dout_51;
   dout_80=dout_44&dout_51;
   dout_81=dout_79&dout_43;
   dout_82=dout_79^dout_43;
   dout_83=dout_80|dout_81;
   dout_84=dout_31^dout_52;
   dout_85=dout_31&dout_52;
   dout_87=dout_84^dout_45;
   dout_88=dout_85|dout_45;
   dout_89=((B >> 0)&1)&((A >> 3)&1);
   dout_90=((B >> 1)&1)&((A >> 3)&1);
   dout_91=((B >> 2)&1)&((A >> 3)&1);
   dout_92=((B >> 3)&1)&((A >> 3)&1);
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_97=dout_62^dout_89;
   dout_98=dout_62&dout_89;
   dout_99=dout_97&dout_55;
   dout_100=dout_97^dout_55;
   dout_101=dout_98|dout_99;
   dout_102=dout_67^dout_90;
   dout_103=dout_67&dout_90;
   dout_104=dout_102&dout_63;
   dout_105=dout_102^dout_63;
   dout_106=dout_103|dout_104;
   dout_107=dout_72^dout_91;
   dout_108=dout_72&dout_91;
   dout_109=dout_107&dout_68;
   dout_110=dout_107^dout_68;
   dout_111=dout_108|dout_109;
   dout_112=dout_77^dout_92;
   dout_113=dout_77&dout_92;
   dout_114=dout_112&dout_73;
   dout_115=dout_112^dout_73;
   dout_116=dout_113|dout_114;
   dout_117=dout_82^dout_93;
   dout_118=dout_82&dout_93;
   dout_119=dout_117&dout_78;
   dout_120=dout_117^dout_78;
   dout_121=dout_118|dout_119;
   dout_122=dout_87^dout_94;
   dout_123=dout_87&dout_94;
   dout_124=dout_122&dout_83;
   dout_125=dout_122^dout_83;
   dout_126=dout_123|dout_124;
   dout_127=dout_53^dout_95;
   dout_128=dout_53&dout_95;
   dout_129=dout_127&dout_88;
   dout_130=dout_127^dout_88;
   dout_131=dout_128|dout_129;
   dout_132=((B >> 0)&1)&((A >> 4)&1);
   dout_133=((B >> 1)&1)&((A >> 4)&1);
   dout_134=((B >> 2)&1)&((A >> 4)&1);
   dout_135=((B >> 3)&1)&((A >> 4)&1);
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_140=dout_105^dout_132;
   dout_141=dout_105&dout_132;
   dout_142=dout_140&dout_101;
   dout_143=dout_140^dout_101;
   dout_144=dout_141|dout_142;
   dout_145=dout_110^dout_133;
   dout_146=dout_110&dout_133;
   dout_147=dout_145&dout_106;
   dout_148=dout_145^dout_106;
   dout_149=dout_146|dout_147;
   dout_150=dout_115^dout_134;
   dout_151=dout_115&dout_134;
   dout_152=dout_150&dout_111;
   dout_153=dout_150^dout_111;
   dout_154=dout_151|dout_152;
   dout_155=dout_120^dout_135;
   dout_156=dout_120&dout_135;
   dout_157=dout_155&dout_116;
   dout_158=dout_155^dout_116;
   dout_159=dout_156|dout_157;
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_121;
   dout_163=dout_160^dout_121;
   dout_164=dout_161|dout_162;
   dout_165=dout_130^dout_137;
   dout_166=dout_130&dout_137;
   dout_167=dout_165&dout_126;
   dout_168=dout_165^dout_126;
   dout_169=dout_166|dout_167;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_172=dout_170&dout_131;
   dout_173=dout_170^dout_131;
   dout_174=dout_171|dout_172;
   dout_175=((B >> 0)&1)&((A >> 5)&1);
   dout_176=((B >> 1)&1)&((A >> 5)&1);
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_183=dout_148^dout_175;
   dout_184=dout_148&dout_175;
   dout_185=dout_183&dout_144;
   dout_186=dout_183^dout_144;
   dout_187=dout_184|dout_185;
   dout_188=dout_153^dout_176;
   dout_189=dout_153&dout_176;
   dout_190=dout_188&dout_149;
   dout_191=dout_188^dout_149;
   dout_192=dout_189|dout_190;
   dout_193=dout_158^dout_177;
   dout_194=dout_158&dout_177;
   dout_195=dout_193&dout_154;
   dout_196=dout_193^dout_154;
   dout_197=dout_194|dout_195;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_159;
   dout_201=dout_198^dout_159;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_218=((B >> 0)&1)&((A >> 6)&1);
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_226=dout_191^dout_218;
   dout_227=dout_191&dout_218;
   dout_228=dout_226&dout_187;
   dout_229=dout_226^dout_187;
   dout_230=dout_227|dout_228;
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_233=dout_231&dout_192;
   dout_234=dout_231^dout_192;
   dout_235=dout_232|dout_233;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_197;
   dout_239=dout_236^dout_197;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_234^dout_261;
   dout_270=dout_234&dout_261;
   dout_271=dout_269&dout_230;
   dout_272=dout_269^dout_230;
   dout_273=dout_270|dout_271;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_235;
   dout_277=dout_274^dout_235;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_304=dout_277^dout_273;
   dout_305=dout_277&dout_273;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_302^dout_298;
   dout_327=dout_302&dout_298;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_268^dout_303;
   dout_332=((A >> 7)&1)&dout_303;
   dout_333=dout_331&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_130&1) << 0;
   O |= (((B >> 0)&1)&1) << 1;
   O |= (dout_54&1) << 2;
   O |= (dout_100&1) << 3;
   O |= (dout_143&1) << 4;
   O |= (dout_186&1) << 5;
   O |= (dout_229&1) << 6;
   O |= (dout_272&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mse parameters
***/
// MAE% = 1.17 %
// MAE = 1.5 
// WCE% = 3.91 %
// WCE = 5.0 
// WCRE% = 300.00 %
// EP% = 79.44 %
// MRE% = 7.44 %
// MSE = 3.7 
// PDK45_PWR = 0.029 mW
// PDK45_AREA = 60.5 um2
// PDK45_DELAY = 0.62 ns


uint64_t evoapproxlib::evoapprox_t::add8s_6QJ(const uint64_t B,const uint64_t A)
{
   uint64_t dout_19, dout_20, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49;
   uint64_t O;

   dout_19=((A >> 1)&1)&((B >> 1)&1);
   dout_20=((A >> 0)&1)&((A >> 7)&1);
   dout_22=dout_19|dout_20;
   dout_23=((A >> 2)&1)^((B >> 2)&1);
   dout_24=((A >> 2)&1)&((B >> 2)&1);
   dout_25=dout_23&dout_22;
   dout_26=dout_23^dout_22;
   dout_27=dout_24|dout_25;
   dout_28=((A >> 3)&1)^((B >> 3)&1);
   dout_29=((A >> 3)&1)&((B >> 3)&1);
   dout_30=dout_28&dout_27;
   dout_31=dout_28^dout_27;
   dout_32=dout_29|dout_30;
   dout_33=((A >> 4)&1)^((B >> 4)&1);
   dout_34=((A >> 4)&1)&((B >> 4)&1);
   dout_35=dout_33&dout_32;
   dout_36=dout_33^dout_32;
   dout_37=dout_34|dout_35;
   dout_38=((A >> 5)&1)^((B >> 5)&1);
   dout_39=((A >> 5)&1)&((B >> 5)&1);
   dout_40=dout_38&dout_37;
   dout_41=dout_38^dout_37;
   dout_42=dout_39|dout_40;
   dout_43=((A >> 6)&1)^((B >> 6)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=dout_43&dout_42;
   dout_46=dout_43^dout_42;
   dout_47=dout_44|dout_45;
   dout_48=((A >> 7)&1)^((B >> 7)&1);
   dout_49=dout_48^dout_47;

   O = 0;
   O |= (0&1) << 0;
   O |= (dout_36&1) << 1;
   O |= (dout_26&1) << 2;
   O |= (dout_31&1) << 3;
   O |= (dout_36&1) << 4;
   O |= (dout_41&1) << 5;
   O |= (dout_46&1) << 6;
   O |= (dout_49&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.56 %
// MAE = 370 
// WCE% = 2.41 %
// WCE = 1577 
// WCRE% = 103.12 %
// EP% = 98.99 %
// MRE% = 10.85 %
// MSE = 209723 
// PDK45_PWR = 0.104 mW
// PDK45_AREA = 239.3 um2
// PDK45_DELAY = 1.00 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_17KS(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_52, dout_53, dout_85, dout_95, dout_96, dout_127, dout_128, dout_130, dout_137, dout_138, dout_139, dout_165, dout_166, dout_170, dout_171, dout_173, dout_174, dout_180, dout_181, dout_182, dout_199, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_222, dout_223, dout_224, dout_225, dout_239, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_309, dout_313, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_52=((B >> 7)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_85=((A >> 3)&1)&dout_52;
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_127=dout_53^dout_95;
   dout_128=dout_53&((A >> 3)&1);
   dout_130=dout_127^dout_85;
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_165=dout_130|dout_137;
   dout_166=dout_130&dout_137;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_173=dout_170^dout_85;
   dout_174=dout_171|dout_128;
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_199=((B >> 3)&1)&((A >> 6)&1);
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_166;
   dout_211=dout_208^dout_166;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_239=((A >> 5)&1)&((B >> 4)&1);
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_165;
   dout_249=dout_246^dout_165;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_199;
   dout_287=dout_284^dout_199;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_309=dout_239^dout_263;
   dout_313=dout_239&dout_263;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_313;
   dout_319=dout_316^dout_313;
   dout_320=dout_317|dout_318;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_302^dout_298;
   dout_327=dout_302&dout_298;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_268^dout_303;
   dout_332=((A >> 7)&1)&dout_303;
   dout_333=dout_268&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_217&1) << 0;
   O |= (dout_291&1) << 1;
   O |= (dout_309&1) << 2;
   O |= (0&1) << 3;
   O |= (dout_127&1) << 4;
   O |= (dout_225&1) << 5;
   O |= (dout_254&1) << 6;
   O |= (dout_214&1) << 7;
   O |= (dout_309&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_287&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 2.15 %
// MAE = 1409 
// WCE% = 8.21 %
// WCE = 5380 
// WCRE% = 7100.00 %
// EP% = 99.16 %
// MRE% = 39.78 %
// MSE = 30865.11e2 
// PDK45_PWR = 0.034 mW
// PDK45_AREA = 110.8 um2
// PDK45_DELAY = 0.58 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_JV3(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_138, dout_139, dout_171, dout_181, dout_182, dout_209, dout_213, dout_216, dout_224, dout_225, dout_247, dout_256, dout_257, dout_259, dout_265, dout_266, dout_267, dout_268, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332;   int avg=0;

   dout_138=((B >> 6)&1)&((A >> 5)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_171=((B >> 7)&1)&dout_138;
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_209=((A >> 6)&1)&((B >> 5)&1);
   dout_213=dout_139^dout_181;
   dout_216=dout_213^dout_171;
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_247=((B >> 3)&1)&((A >> 3)&1);
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_181;
   dout_259=dout_256^dout_171;
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_293=dout_265|dout_247;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_209;
   dout_297=dout_294^dout_209;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_257;
   dout_302=dout_299^dout_257;
   dout_303=dout_300|dout_301;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_302^dout_298;
   dout_324=dout_302&dout_298;
   dout_325=dout_323&dout_322;
   dout_326=dout_323^dout_322;
   dout_327=dout_324|dout_325;
   dout_328=dout_268^dout_303;
   dout_329=((A >> 7)&1)&dout_303;
   dout_330=dout_268&dout_327;
   dout_331=dout_328^dout_327;
   dout_332=dout_329|dout_330;

   O = 0;
   O |= (0&1) << 0;
   O |= (0&1) << 1;
   O |= (dout_326&1) << 2;
   O |= (0&1) << 3;
   O |= (0&1) << 4;
   O |= (dout_303&1) << 5;
   O |= (dout_181&1) << 6;
   O |= (dout_139&1) << 7;
   O |= (dout_216&1) << 8;
   O |= (dout_321&1) << 9;
   O |= (dout_216&1) << 10;
   O |= (dout_216&1) << 11;
   O |= (dout_321&1) << 12;
   O |= (dout_326&1) << 13;
   O |= (dout_331&1) << 14;
   O |= (dout_332&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 2.23 %
// MAE = 5.7 
// WCE% = 7.42 %
// WCE = 19 
// WCRE% = 750.00 %
// EP% = 93.75 %
// MRE% = 18.02 %
// MSE = 50 
// PDK45_PWR = 0.016 mW
// PDK45_AREA = 41.3 um2
// PDK45_DELAY = 0.31 ns


uint64_t evoapproxlib::evoapprox_t::add8se_76P(const uint64_t B,const uint64_t A)
{
   uint64_t dout_31, dout_33, dout_34, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54;
   uint64_t O;

   dout_31=((A >> 3)&1)|((B >> 3)&1);
   dout_33=((A >> 4)&1)^((B >> 4)&1);
   dout_34=((A >> 4)&1)&((B >> 4)&1);
   dout_38=((A >> 5)&1)^((B >> 5)&1);
   dout_39=((A >> 5)&1)&((B >> 5)&1);
   dout_40=dout_38&dout_34;
   dout_41=dout_38^dout_34;
   dout_42=dout_39|dout_40;
   dout_43=((A >> 6)&1)^((B >> 6)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=dout_43&dout_42;
   dout_46=dout_43^dout_42;
   dout_47=dout_44|dout_45;
   dout_48=((A >> 7)&1)^((B >> 7)&1);
   dout_49=((A >> 7)&1)&((B >> 7)&1);
   dout_50=dout_48&dout_47;
   dout_51=dout_48^dout_47;
   dout_52=dout_49|dout_50;
   dout_53=((A >> 7)&1)^((B >> 7)&1);
   dout_54=dout_53^dout_52;

   O = 0;
   O |= (((A >> 0)&1)&1) << 0;
   O |= (dout_31&1) << 1;
   O |= (dout_46&1) << 2;
   O |= (dout_31&1) << 3;
   O |= (dout_33&1) << 4;
   O |= (dout_41&1) << 5;
   O |= (dout_46&1) << 6;
   O |= (dout_51&1) << 7;
   O |= (dout_54&1) << 8;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek and R. Hrbacek, "Role of circuit representation in evolutionary design of energy-efficient approximate circuits" in IET Computers & Digital Techniques, vol. 12, no. 4, pp. 139-149, 7 2018. doi: 10.1049/iet-cdt.2017.0188 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.88 %
// MAE = 4.5 
// WCE% = 2.34 %
// WCE = 12 
// WCRE% = 1100.00 %
// EP% = 93.75 %
// MRE% = 2.54 %
// MSE = 30 
// PDK45_PWR = 0.016 mW
// PDK45_AREA = 53.0 um2
// PDK45_DELAY = 0.42 ns


uint64_t evoapproxlib::evoapprox_t::add8u_1DK(uint64_t a, uint64_t b) {
  uint64_t o = 0;
  int n_304=0, n_411=0, n_410=0, n_23=0, n_22=0, n_21=0, n_20=0, n_27=0, n_26=0, n_25=0;
  int n_24=0, n_262=0, n_29=0, n_28=0, n_263=0, n_240=0, n_82=0, n_346=0, n_389=0, n_388=0;
  int n_284=0, n_285=0, n_326=0, n_38=0, n_127=0, n_126=0, n_220=0, n_241=0, n_347=0, n_221=0;
  int n_8=0, n_9=0, n_368=0, n_159=0, n_4=0, n_5=0, n_6=0, n_7=0, n_0=0, n_1=0;
  int n_2=0, n_3=0, n_30=0, n_31=0, n_117=0, n_18=0, n_19=0, n_16=0, n_17=0, n_14=0;
  int n_15=0, n_12=0, n_13=0, n_10=0, n_11=0, n_158=0, n_45=0, n_94=0, n_95=0, n_44=0;
  int n_178=0, n_179=0, n_136=0, n_137=0, n_305=0, n_116=0;
  n_0 = (a >> 0) & 0x1;
  n_1 = (a >> 0) & 0x1;
  n_2 = (a >> 1) & 0x1;
  n_3 = (a >> 1) & 0x1;
  n_4 = (a >> 2) & 0x1;
  n_5 = (a >> 2) & 0x1;
  n_6 = (a >> 3) & 0x1;
  n_7 = (a >> 3) & 0x1;
  n_8 = (a >> 4) & 0x1;
  n_9 = (a >> 4) & 0x1;
  n_10 = (a >> 5) & 0x1;
  n_11 = (a >> 5) & 0x1;
  n_12 = (a >> 6) & 0x1;
  n_13 = (a >> 6) & 0x1;
  n_14 = (a >> 7) & 0x1;
  n_15 = (a >> 7) & 0x1;
  n_16 = (b >> 0) & 0x1;
  n_17 = (b >> 0) & 0x1;
  n_18 = (b >> 1) & 0x1;
  n_19 = (b >> 1) & 0x1;
  n_20 = (b >> 2) & 0x1;
  n_21 = (b >> 2) & 0x1;
  n_22 = (b >> 3) & 0x1;
  n_23 = (b >> 3) & 0x1;
  n_24 = (b >> 4) & 0x1;
  n_25 = (b >> 4) & 0x1;
  n_26 = (b >> 5) & 0x1;
  n_27 = (b >> 5) & 0x1;
  n_28 = (b >> 6) & 0x1;
  n_29 = (b >> 6) & 0x1;
  n_30 = (b >> 7) & 0x1;
  n_31 = (b >> 7) & 0x1;
  n_38 = n_6 & n_4;
  n_44 = n_22 ^ n_22;
  n_45 = n_22 & n_22;
  n_82 = n_38 & n_22;
  n_94 = n_20 & n_82;
  n_95 = n_94;
  n_116 = n_8 ^ n_24;
  n_117 = n_8 & n_24;
  n_126 = ~n_44;
  n_127 = n_126;
  n_136 = n_10 ^ n_26 ^n_117;
  n_137 = (n_10 & n_26) | (n_26 & n_117) | (n_10 & n_117);
  n_158 = n_12 ^ n_28 ^n_137;
  n_159 = (n_12 & n_28) | (n_28 & n_137) | (n_12 & n_137);
  n_178 = n_14 ^ n_30 ^n_159;
  n_179 = (n_14 & n_30) | (n_30 & n_159) | (n_14 & n_159);
  n_220 = ~(n_116 & n_95);
  n_221 = n_220;
  n_240 = ~n_221;
  n_241 = n_240;
  n_262 = n_10 ^ n_26 ^n_127;
  n_263 = (n_10 & n_26) | (n_26 & n_127) | (n_10 & n_127);
  n_284 = n_12 ^ n_28 ^n_263;
  n_285 = (n_12 & n_28) | (n_28 & n_263) | (n_12 & n_263);
  n_304 = n_14 ^ n_30 ^n_285;
  n_305 = (n_14 & n_30) | (n_30 & n_285) | (n_14 & n_285);
  n_326 = (n_116 & ~n_95) | (n_220 & n_95);
  n_346 = (n_136 & ~n_240) | (n_262 & n_240);
  n_347 = n_346;
  n_368 = (n_158 & ~n_240) | (n_284 & n_240);
  n_388 = (n_178 & ~n_241) | (n_304 & n_241);
  n_389 = n_388;
  n_410 = (n_179 & ~n_241) | (n_305 & n_241);
  n_411 = n_410;
  o |= (n_6 & 0x01) << 0;
  o |= (n_18 & 0x01) << 1;
  o |= (n_126 & 0x01) << 2;
  o |= (n_127 & 0x01) << 3;
  o |= (n_326 & 0x01) << 4;
  o |= (n_347 & 0x01) << 5;
  o |= (n_368 & 0x01) << 6;
  o |= (n_389 & 0x01) << 7;
  o |= (n_411 & 0x01) << 8;
  return o;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 4.83 %
// MAE = 3168 
// WCE% = 19.46 %
// WCE = 12754 
// WCRE% = 100.00 %
// EP% = 99.20 %
// MRE% = 44.00 %
// MSE = 15608.397e3 
// PDK45_PWR = 0.0085 mW
// PDK45_AREA = 41.3 um2
// PDK45_DELAY = 0.20 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_13QR(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_180, dout_256, dout_257, dout_259, dout_266, dout_268, dout_283, dout_307, dout_311, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_180=((B >> 7)&1)&((A >> 5)&1);
   dout_256=((A >> 6)&1)&((B >> 6)&1);
   dout_257=((B >> 7)&1)&((A >> 6)&1);
   dout_259=dout_256|dout_180;
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_283=((A >> 7)&1)&((B >> 5)&1);
   dout_307=((A >> 7)&1)&((B >> 6)&1);
   dout_311=dout_266&((B >> 6)&1);
   dout_329=dout_307^dout_283;
   dout_330=dout_307&((B >> 5)&1);
   dout_331=dout_268^dout_257;
   dout_332=((A >> 7)&1)&dout_257;
   dout_333=((B >> 7)&1)&dout_311;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (0&1) << 0;
   O |= (dout_268&1) << 1;
   O |= (0&1) << 2;
   O |= (0&1) << 3;
   O |= (dout_180&1) << 4;
   O |= (0&1) << 5;
   O |= (dout_332&1) << 6;
   O |= (dout_259&1) << 7;
   O |= (dout_259&1) << 8;
   O |= (0&1) << 9;
   O |= (dout_180&1) << 10;
   O |= (dout_259&1) << 11;
   O |= (dout_259&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 5.78 %
// MAE = 7.4 
// WCE% = 12.50 %
// WCE = 16 
// WCRE% = 1600.00 %
// EP% = 46.35 %
// MRE% = 39.10 %
// MSE = 119 
// PDK45_PWR = 0.031 mW
// PDK45_AREA = 75.6 um2
// PDK45_DELAY = 0.38 ns


uint64_t evoapproxlib::evoapprox_t::add8s_6YG(const uint64_t B,const uint64_t A)
{
   uint64_t dout_16, dout_17, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_31, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49;
   uint64_t O;

   dout_16=((A >> 0)&1)^((B >> 0)&1);
   dout_17=((A >> 0)&1)&((B >> 0)&1);
   dout_18=((A >> 1)&1)^((B >> 1)&1);
   dout_19=((A >> 1)&1)&((B >> 1)&1);
   dout_20=dout_18&dout_17;
   dout_21=dout_18^dout_17;
   dout_22=dout_19|dout_20;
   dout_23=((A >> 2)&1)^((B >> 2)&1);
   dout_24=((A >> 2)&1)&((B >> 2)&1);
   dout_25=dout_23&dout_22;
   dout_26=dout_23^dout_22;
   dout_27=dout_24|dout_25;
   dout_28=((A >> 3)&1)^((B >> 3)&1);
   dout_31=dout_28^dout_27;
   dout_33=((A >> 4)&1)^((B >> 4)&1);
   dout_34=((A >> 4)&1)&((B >> 4)&1);
   dout_35=dout_33&((A >> 7)&1);
   dout_36=dout_33^dout_35;
   dout_37=dout_34|dout_35;
   dout_38=((A >> 5)&1)^((B >> 5)&1);
   dout_39=((A >> 5)&1)&((B >> 5)&1);
   dout_40=dout_38&dout_37;
   dout_41=dout_38^dout_37;
   dout_42=dout_39|dout_40;
   dout_43=((A >> 6)&1)^((B >> 6)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=dout_43&dout_42;
   dout_46=dout_43^dout_42;
   dout_47=dout_44|dout_45;
   dout_48=((A >> 7)&1)^((B >> 7)&1);
   dout_49=dout_48^dout_47;

   O = 0;
   O |= (dout_16&1) << 0;
   O |= (dout_21&1) << 1;
   O |= (dout_26&1) << 2;
   O |= (dout_31&1) << 3;
   O |= (dout_36&1) << 4;
   O |= (dout_41&1) << 5;
   O |= (dout_46&1) << 6;
   O |= (dout_49&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mse parameters
***/
// MAE% = 2.28 %
// MAE = 1491 
// WCE% = 9.08 %
// WCE = 5953 
// WCRE% = 100.00 %
// EP% = 99.16 %
// MRE% = 28.42 %
// MSE = 33959.043e2 
// PDK45_PWR = 0.031 mW
// PDK45_AREA = 96.7 um2
// PDK45_DELAY = 0.53 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_18DU(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_118, dout_163, dout_196, dout_197, dout_207, dout_208, dout_240, dout_241, dout_244, dout_251, dout_252, dout_253, dout_281, dout_282, dout_286, dout_287, dout_288, dout_289, dout_290, dout_295, dout_296, dout_297, dout_298, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_118=((B >> 7)&1)&((A >> 5)&1);
   dout_163=((B >> 7)&1)&((A >> 4)&1);
   dout_196=dout_118^dout_163;
   dout_197=dout_118&((A >> 4)&1);
   dout_207=((B >> 6)&1)&((A >> 5)&1);
   dout_208=((B >> 7)&1)&((A >> 5)&1);
   dout_240=dout_196|dout_207;
   dout_241=dout_197^dout_208;
   dout_244=dout_241^dout_240;
   dout_251=((B >> 5)&1)&((A >> 6)&1);
   dout_252=((B >> 6)&1)&((A >> 6)&1);
   dout_253=((B >> 7)&1)&((A >> 6)&1);
   dout_281=dout_244^dout_252;
   dout_282=dout_244&dout_252;
   dout_286=dout_208^dout_253;
   dout_287=((A >> 5)&1)&dout_253;
   dout_288=((B >> 7)&1)&dout_282;
   dout_289=dout_286^dout_282;
   dout_290=dout_287|dout_288;
   dout_295=((B >> 4)&1)&((A >> 7)&1);
   dout_296=((B >> 5)&1)&((A >> 7)&1);
   dout_297=((B >> 6)&1)&((A >> 7)&1);
   dout_298=((B >> 7)&1)&((A >> 7)&1);
   dout_321=dout_281^dout_296;
   dout_322=dout_281&dout_296;
   dout_323=dout_321&dout_295;
   dout_324=dout_321^dout_295;
   dout_325=dout_322|dout_323;
   dout_326=dout_289^dout_297;
   dout_327=dout_289&dout_297;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_290^dout_298;
   dout_332=dout_290&((A >> 7)&1);
   dout_333=dout_298&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (0&1) << 0;
   O |= (0&1) << 1;
   O |= (0&1) << 2;
   O |= (0&1) << 3;
   O |= (0&1) << 4;
   O |= (dout_331&1) << 5;
   O |= (0&1) << 6;
   O |= (dout_290&1) << 7;
   O |= (dout_251&1) << 8;
   O |= (dout_251&1) << 9;
   O |= (0&1) << 10;
   O |= (dout_251&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 0.35 %
// MAE = 1.8 
// WCE% = 1.37 %
// WCE = 7.0 
// WCRE% = 50.00 %
// EP% = 71.88 %
// MRE% = 0.94 %
// MSE = 6.5 
// PDK45_PWR = 0.019 mW
// PDK45_AREA = 48.3 um2
// PDK45_DELAY = 0.39 ns


uint64_t evoapproxlib::evoapprox_t::add8u_5ME(uint64_t a, uint64_t b)
{
  uint16_t c = 0;
  uint8_t n2 = (a >> 1) & 0x1;
  uint8_t n4 = (a >> 2) & 0x1;
  uint8_t n6 = (a >> 3) & 0x1;
  uint8_t n8 = (a >> 4) & 0x1;
  uint8_t n10 = (a >> 5) & 0x1;
  uint8_t n12 = (a >> 6) & 0x1;
  uint8_t n14 = (a >> 7) & 0x1;
  uint8_t n18 = (b >> 1) & 0x1;
  uint8_t n20 = (b >> 2) & 0x1;
  uint8_t n22 = (b >> 3) & 0x1;
  uint8_t n24 = (b >> 4) & 0x1;
  uint8_t n26 = (b >> 5) & 0x1;
  uint8_t n28 = (b >> 6) & 0x1;
  uint8_t n30 = (b >> 7) & 0x1;
  uint8_t n48;
  uint8_t n82;
  uint8_t n132;
  uint8_t n182;
  uint8_t n183;
  uint8_t n232;
  uint8_t n233;
  uint8_t n282;
  uint8_t n283;
  uint8_t n332;
  uint8_t n333;
  uint8_t n382;
  uint8_t n383;

  n48 = ~(n4 ^ n4);
  n82 = n2 | n18;
  n132 = n4 | n20;
  n182 = n6 ^ n22;
  n183 = n6 & n22;
  n232 = (n8 ^ n24) ^ n183;
  n233 = (n8 & n24) | (n24 & n183) | (n8 & n183);
  n282 = (n10 ^ n26) ^ n233;
  n283 = (n10 & n26) | (n26 & n233) | (n10 & n233);
  n332 = (n12 ^ n28) ^ n283;
  n333 = (n12 & n28) | (n28 & n283) | (n12 & n283);
  n382 = (n14 ^ n30) ^ n333;
  n383 = (n14 & n30) | (n30 & n333) | (n14 & n333);

  c |= (n48 & 0x1) << 0;
  c |= (n82 & 0x1) << 1;
  c |= (n132 & 0x1) << 2;
  c |= (n182 & 0x1) << 3;
  c |= (n232 & 0x1) << 4;
  c |= (n282 & 0x1) << 5;
  c |= (n332 & 0x1) << 6;
  c |= (n382 & 0x1) << 7;
  c |= (n383 & 0x1) << 8;

  return c;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 7.97 %
// MAE = 10 
// WCE% = 19.53 %
// WCE = 25 
// WCRE% = 2500.00 %
// EP% = 96.88 %
// MRE% = 61.40 %
// MSE = 158 
// PDK45_PWR = 0.016 mW
// PDK45_AREA = 39.4 um2
// PDK45_DELAY = 0.37 ns


uint64_t evoapproxlib::evoapprox_t::add8s_6X9(const uint64_t A /* 8-bit signed operand */, const uint64_t B /* 8-bit signed operand */)
{
   uint64_t dout_30, dout_31, dout_33, dout_34, dout_35, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_45, dout_46, dout_47, dout_48, dout_49;
   uint64_t O;

   dout_30=((A >> 7)&1)&((B >> 7)&1);
   dout_31=((A >> 6)&1)&((B >> 6)&1);
   dout_33=((A >> 4)&1)|((B >> 4)&1);
   dout_34=((A >> 4)&1)&((B >> 4)&1);
   dout_35=dout_33&dout_30;
   dout_37=dout_34|dout_35;
   dout_38=((A >> 5)&1)^((B >> 5)&1);
   dout_39=((A >> 5)&1)&((B >> 5)&1);
   dout_40=dout_38&dout_37;
   dout_41=dout_38^dout_37;
   dout_42=dout_39|dout_40;
   dout_43=((A >> 6)&1)^((B >> 6)&1);
   dout_45=dout_43&dout_42;
   dout_46=dout_43^dout_42;
   dout_47=dout_31|dout_45;
   dout_48=((A >> 7)&1)^((B >> 7)&1);
   dout_49=dout_48^dout_47;

   O = 0;
   O |= (((A >> 0)&1)&1) << 0;
   O |= (0&1) << 1;
   O |= (((A >> 2)&1)&1) << 2;
   O |= (((B >> 3)&1)&1) << 3;
   O |= (((A >> 3)&1)&1) << 4;
   O |= (dout_41&1) << 5;
   O |= (dout_46&1) << 6;
   O |= (dout_49&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.00 %
// MAE = 0 
// WCE% = 0.00 %
// WCE = 0 
// WCRE% = 0.00 %
// EP% = 0.00 %
// MRE% = 0.00 %
// MSE = 0 
// PDK45_PWR = 0.034 mW
// PDK45_AREA = 70.4 um2
// PDK45_DELAY = 0.65 ns


uint64_t evoapproxlib::evoapprox_t::add8s_83C(const uint64_t B,const uint64_t A)
{
   uint64_t dout_16, dout_17, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64;
   uint64_t O;

   dout_16=((A >> 0)&1)&((B >> 0)&1);
   dout_17=((B >> 0)&1)^((A >> 0)&1);
   dout_18=((A >> 1)&1)&((B >> 1)&1);
   dout_19=((A >> 1)&1)^((B >> 1)&1);
   dout_20=((A >> 2)&1)&((B >> 2)&1);
   dout_21=((A >> 2)&1)^((B >> 2)&1);
   dout_22=((A >> 3)&1)&((B >> 3)&1);
   dout_23=((A >> 3)&1)^((B >> 3)&1);
   dout_24=((A >> 4)&1)&((B >> 4)&1);
   dout_25=((A >> 4)&1)^((B >> 4)&1);
   dout_26=((A >> 5)&1)&((B >> 5)&1);
   dout_27=((A >> 5)&1)^((B >> 5)&1);
   dout_28=((A >> 6)&1)&((B >> 6)&1);
   dout_29=((A >> 6)&1)^((B >> 6)&1);
   dout_30=((A >> 7)&1)^((B >> 7)&1);
   dout_31=dout_21&dout_18;
   dout_32=dout_21&dout_19;
   dout_33=dout_20|dout_31;
   dout_34=dout_25&dout_22;
   dout_35=dout_25&dout_23;
   dout_36=dout_24|dout_34;
   dout_37=dout_29&dout_26;
   dout_39=dout_28|dout_37;
   dout_40=dout_19&dout_16;
   dout_41=dout_18|dout_40;
   dout_42=dout_32&dout_16;
   dout_43=dout_33|dout_42;
   dout_44=dout_27&dout_36;
   dout_45=dout_27&dout_35;
   dout_46=dout_26|dout_44;
   dout_47=dout_29&dout_44;
   dout_48=dout_29&dout_45;
   dout_49=dout_39|dout_47;
   dout_50=dout_23&dout_43;
   dout_51=dout_22|dout_50;
   dout_52=dout_35&dout_43;
   dout_53=dout_36|dout_52;
   dout_54=dout_45&dout_43;
   dout_55=dout_46|dout_54;
   dout_56=dout_48&dout_43;
   dout_57=dout_49|dout_56;
   dout_58=dout_19^dout_16;
   dout_59=dout_21^dout_41;
   dout_60=dout_23^dout_43;
   dout_61=dout_25^dout_51;
   dout_62=dout_27^dout_53;
   dout_63=dout_29^dout_55;
   dout_64=dout_30^dout_57;

   O = 0;
   O |= (dout_17&1) << 0;
   O |= (dout_58&1) << 1;
   O |= (dout_59&1) << 2;
   O |= (dout_60&1) << 3;
   O |= (dout_61&1) << 4;
   O |= (dout_62&1) << 5;
   O |= (dout_63&1) << 6;
   O |= (dout_64&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 1.64 %
// MAE = 8.4 
// WCE% = 6.05 %
// WCE = 31 
// WCRE% = 800.00 %
// EP% = 89.45 %
// MRE% = 4.28 %
// MSE = 123 
// PDK45_PWR = 0.011 mW
// PDK45_AREA = 32.9 um2
// PDK45_DELAY = 0.24 ns


uint64_t evoapproxlib::evoapprox_t::add8u_8KZ(uint64_t a, uint64_t b) {
  int wa[8];
  int wb[8];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  int sig_16 = wa[0] | wb[0];
  int sig_17 = wb[4] | wa[4];
  int sig_32 = wb[2] | wa[2];
  int sig_33 = ~((int)0);
  int sig_39 = wa[5] & wb[5];
  int sig_41 = wb[5] ^ wa[5];
  int sig_42 = sig_39;
  int sig_43 = wa[6] ^ wb[6];
  int sig_44 = wa[6] & wb[6];
  int sig_45 = sig_43 & sig_42;
  int sig_46 = sig_43 ^ sig_42;
  int sig_47 = sig_44 | sig_45;
  int sig_48 = wa[7] ^ wb[7];
  int sig_49 = wa[7] & wb[7];
  int sig_50 = sig_48 & sig_47;
  int sig_51 = sig_48 ^ sig_47;
  int sig_52 = sig_49 | sig_50;
  y |=  (sig_16 & 0x01) << 0; // default output
  y |=  (wb[1] & 0x01) << 1; // default output
  y |=  (sig_32 & 0x01) << 2; // default output
  y |=  (sig_33 & 0x01) << 3; // default output
  y |=  (sig_17 & 0x01) << 4; // default output
  y |=  (sig_41 & 0x01) << 5; // default output
  y |=  (sig_46 & 0x01) << 6; // default output
  y |=  (sig_51 & 0x01) << 7; // default output
  y |=  (sig_52 & 0x01) << 8; // default output
   return y;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.23 %
// MAE = 150 
// WCE% = 1.16 %
// WCE = 759 
// WCRE% = 1500.00 %
// EP% = 93.16 %
// MRE% = 12.26 %
// MSE = 38236 
// PDK45_PWR = 0.200 mW
// PDK45_AREA = 411.6 um2
// PDK45_DELAY = 1.14 ns


int16_t evoapproxlib::evoapprox_t::mul8s_1L2D(int8_t A, int8_t B)
{
 uint16_t O;
 uint8_t n38,n39,n88,O10,n95,O5,n36,n37,n209,O2,n132,n133,n130,n131,n136,n137,n134,n100,n222,n208,n138,n139,n226,n227,n224,n235,n234,n236,O12,n231,O4,n230,n85,n84,n237,n86,n81,n80,n83,n82,n118,n232,n239,n119,n129,n128,n125,n124,n127,n126,n121,n120,n123,n122,n89,n92,n238,n240,n98,n99,n245,n246,n247,n248,n249,n90,n91,n96,n97,n94,O0,n158,n159,n210,n150,n152,n153,n154,n155,n203,n157,n67,n66,n65,n64,n63,n62,n60,n189,n69,n68,n156,n173,n252,n250,n93,O15,O3,n233,n161,n149,n148,n143,n142,n141,n140,n147,n146,n145,n144,n74,n75,n76,n77,n70,n71,n72,n73,O9,n78,n79,n176,n177,n174,n175,n172,O6,n170,n171,n228,n178,n179,n229,n49,n48,n40,n43,n42,n45,n44,n47,O14,O8,n220,O1,n160,n163,n162,n165,n164,n167,n166,n169,n168,n194,n225,O11,n58,n59,n56,n57,n54,n55,n52,n53,n50,n51,n223,n198,n199,n195,n196,n197,n190,n191,n192,n193,n114,n115,n117,n110,n111,n112,n113,n204,n205,n206,n207,n200,n201,n202,n102,O13,n135,n242,n221,n243,n244,O7,n188,n186,n185,n184,n183,n182,n181,n180,n107,n106,n105,n104,n103,n211,n101,n218,n217,n216,n215,n214,n213,n212,n109,n108;
 O0=0;
 O1=0;
 O2=0;
 O3=0;
 O4=((B >> 2)&1)&((A >> 2)&1);
 n111=((B >> 5)&1)&((A >> 4)&1);
 n113=((B >> 7)&1)&((A >> 2)&1);
 n114=((B >> 4)&1)&((A >> 5)&1);
 n115=((B >> 3)&1)&((A >> 6)&1);
 n129=((B >> 3)&1)&((A >> 7)&1);
 n147=((B >> 6)&1)&((A >> 4)&1);
 n148=((B >> 7)&1)&((A >> 3)&1);
 n149=((B >> 5)&1)&((A >> 5)&1);
 n150=((B >> 4)&1)&((A >> 6)&1);
 n166=((B >> 4)&1)&((A >> 7)&1);
 n174=((B >> 5)&1)&((A >> 6)&1);
 n182=((B >> 6)&1)&((A >> 5)&1);
 n185=~(((A >> 4)&1)|((A >> 3)&1));
 n206=((B >> 5)&1)&((A >> 7)&1);
 n216=((B >> 7)&1)&((A >> 5)&1);
 n218=((B >> 6)&1)&((A >> 6)&1);
 n239=((B >> 7)&1)&((A >> 6)&1);
 n240=((B >> 6)&1)&((A >> 7)&1);
 n250=((B >> 7)&1)&((A >> 7)&1);
 n37=((B >> 3)&1)&((A >> 3)&1);
 n39=((B >> 2)&1)&((A >> 3)&1);
 n40=((B >> 3)&1)&((A >> 2)&1);
 n43=((B >> 2)&1)&((A >> 4)&1);
 n45=((B >> 4)&1)&((A >> 2)&1);
 n56=((B >> 3)&1)&((A >> 4)&1);
 n58=((B >> 5)&1)&((A >> 2)&1);
 n59=((B >> 4)&1)&((A >> 3)&1);
 n60=((B >> 2)&1)&((A >> 5)&1);
 n78=((B >> 6)&1)&((A >> 3)&1);
 n80=((B >> 5)&1)&((A >> 3)&1);
 n81=((B >> 6)&1)&((A >> 2)&1);
 n84=((B >> 4)&1)&((A >> 4)&1);
 n85=((B >> 3)&1)&((A >> 5)&1);
 n86=((B >> 2)&1)&((A >> 6)&1);
 n94=((B >> 2)&1)&((A >> 7)&1);
 n112=~(n113^n78);
 n146=~n113&n78;
 n180=n147&n148;
 n184=((B >> 7)&1)&~n185;
 n186=((A >> 4)&1)&n148;
 n36=n37&O4;
 n38=~(n40|n39);
 n44=n45^n37;
 n55=n45&n37;
 n57=n59^n58;
 n77=n78&n58;
 n79=~(n81|n80);
 n83=n59&n58;
 O5=~(n38|n36);
 n107=n84&n83;
 n110=~(n111^n77);
 n141=n111&n77;
 n142=n111&n112;
 n143=n112&n77;
 n145=~(n147^n146);
 n179=n147&n146;
 n181=n148&n146;
 n183=~n186&n184;
 n215=~(n216|n184);
 n217=((A >> 5)&1)&n184;
 n42=~(n43^n36);
 n50=n43&n36;
 n51=n43&n44;
 n52=n44&n36;
 n54=~(n56^n55);
 n72=n56&n55;
 n73=n56&n57;
 n74=n57&n55;
 n76=~(n79|n77);
 n82=~(n84^n83);
 O6=~(n44^n42);
 n106=n84&n76;
 n108=n83&n76;
 n109=n112^n110;
 n140=~(n142|n141);
 n144=n148^n145;
 n178=~(n180|n179);
 n212=n182&n183;
 n214=~(n217|n215);
 n238=~(n239^n215);
 n249=~n239&n215;
 n49=~(n51|n50);
 n53=n57^n54;
 n71=~(n73|n72);
 n75=n82^n76;
 n100=n85&~n75;
 n105=~(n107|n106);
 n135=n114&~n109;
 n139=~n143&n140;
 n172=n149&~n144;
 n177=~n181&n178;
 n236=n218&n214;
 n248=~(n250^n249);
 n48=~n52&n49;
 n66=n60&~n53;
 n70=~n74&n71;
 n101=n85&~n70;
 n104=~n108&n105;
 n138=~(n144^n139);
 n171=~(n144|n139);
 n173=n149&~n139;
 n176=n182^n177;
 n211=n182&~n177;
 n213=n183&~n177;
 n47=~(n53^n48);
 n65=~(n53|n48);
 n67=n60&~n48;
 n69=~(n75^n70);
 n99=~(n75|n70);
 O7=~(n60^n47);
 n103=~(n109^n104);
 n134=~(n109|n104);
 n136=n114&~n104;
 n137=n149^n138;
 n170=~(n172|n171);
 n175=n183^n176;
 n210=~(n212|n211);
 n64=~(n66|n65);
 n68=n85^n69;
 n98=~(n100|n99);
 n102=n114^n103;
 n133=~(n135|n134);
 n165=n150&~n137;
 n169=~n173&n170;
 n204=n174&~n175;
 n209=~n213&n210;
 n63=~n67&n64;
 n93=n86&~n68;
 n97=~n101&n98;
 n126=~(n102|n97);
 n127=n115&~n97;
 n128=n115&~n102;
 n132=~n136&n133;
 n168=n174^n169;
 n203=n174&~n169;
 n205=~(n175|n169);
 n208=n214^n209;
 n235=n214&~n209;
 n237=n218&~n209;
 n62=~(n68^n63);
 n91=~(n68|n63);
 n92=n86&~n63;
 n96=~(n102^n97);
 O8=~(n86^n62);
 n125=~(n127|n126);
 n131=~(n137^n132);
 n163=~(n137|n132);
 n164=n150&~n132;
 n167=~(n175^n168);
 n202=~(n204|n203);
 n207=n218^n208;
 n234=~(n236|n235);
 n90=~(n92|n91);
 n95=n115^n96;
 n120=~(n94|n95);
 n124=~n128&n125;
 n130=n150^n131;
 n162=~(n164|n163);
 n197=~(n166|n167);
 n201=~n205&n202;
 n229=~(n206|n207);
 n233=~n237&n234;
 n89=~n93&n90;
 n119=~(n94|n89);
 n121=~(n95|n89);
 n123=~(n129^n124);
 n156=~(n129|n124);
 n157=~(n129|n130);
 n158=~(n124|n130);
 n161=~n165&n162;
 n200=~(n206^n201);
 n228=~(n206|n201);
 n230=~(n207|n201);
 n232=~(n238^n233);
 n88=~(n94^n89);
 O9=n95^n88;
 n118=~(n120|n119);
 n122=~(n130^n123);
 n155=~(n157|n156);
 n160=~(n166^n161);
 n196=~(n166|n161);
 n198=~(n167|n161);
 n199=~(n207^n200);
 n227=~(n229|n228);
 n231=~(n240^n232);
 n117=~n121&n118;
 n154=~n158&n155;
 n159=~(n167^n160);
 n195=~(n197|n196);
 n226=~n230&n227;
 O10=n122^n117;
 n152=~(n122|n117);
 n153=~(n159^n154);
 n192=~(n159|n154);
 n194=~n198&n195;
 O11=~(n153^n152);
 n191=~n159&n152;
 n193=~n154&n152;
 n224=~(n199|n194);
 n190=~(n192|n191);
 n189=~n193&n190;
 n188=~(n194^n189);
 n223=~(n194|n189);
 n225=~(n199|n189);
 O12=n199^n188;
 n222=~(n224|n223);
 n221=~n225&n222;
 n220=n226^n221;
 n245=n226&n221;
 O13=n231^n220;
 n244=n233&n245;
 n247=~(n233|n245);
 n243=~(n240|n244);
 n246=~(n238|n247);
 n242=n246&~n243;
 O14=n248^n242;
 n252=n249&~n242;
 O15=~(n250|n252);
 O = (O0 << 0)|(O1 << 1)|(O2 << 2)|(O3 << 3)|(O4 << 4)|(O5 << 5)|(O6 << 6)|(O7 << 7)|(O8 << 8)|(O9 << 9)|(O10 << 10)|(O11 << 11)|(O12 << 12)|(O13 << 13)|(O14 << 14)|(O15 << 15);
 return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 9.00 %
// MAE = 46 
// WCE% = 29.10 %
// WCE = 149 
// WCRE% = 6400.00 %
// EP% = 99.33 %
// MRE% = 22.62 %
// MSE = 3188 
// PDK45_PWR = 0.0015 mW
// PDK45_AREA = 8.0 um2
// PDK45_DELAY = 0.11 ns


uint64_t evoapproxlib::evoapprox_t::add8u_8GM(uint64_t a, uint64_t b) {
  int wa[8];
  int wb[8];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  int sig_18 = wb[7] ^ wa[7];
  int sig_25 = ~((int)0);
  int sig_26 = 0;
  int sig_31 = ~((int)0);
  int sig_42 = wa[7] & wb[7];
  y |=  (sig_31 & 0x01) << 0; // default output
  y |=  (wb[6] & 0x01) << 1; // default output
  y |=  (wb[1] & 0x01) << 2; // default output
  y |=  (sig_26 & 0x01) << 3; // default output
  y |=  (wa[2] & 0x01) << 4; // default output
  y |=  (wb[6] & 0x01) << 5; // default output
  y |=  (sig_25 & 0x01) << 6; // default output
  y |=  (sig_18 & 0x01) << 7; // default output
  y |=  (sig_42 & 0x01) << 8; // default output
   return y;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mse parameters
***/
// MAE% = 0.20 %
// MAE = 134 
// WCE% = 0.89 %
// WCE = 585 
// WCRE% = 700.00 %
// EP% = 98.16 %
// MRE% = 4.73 %
// MSE = 27987 
// PDK45_PWR = 0.195 mW
// PDK45_AREA = 401.7 um2
// PDK45_DELAY = 1.52 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_DM1(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_31, dout_60, dout_63, dout_64, dout_68, dout_71, dout_72, dout_73, dout_101, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110, dout_112, dout_117, dout_118, dout_141, dout_142, dout_146, dout_147, dout_148, dout_149, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_157, dout_160, dout_161, dout_162, dout_163, dout_172, dout_181, dout_182, dout_183, dout_184, dout_185, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_203, dout_204, dout_206, dout_207, dout_208, dout_220, dout_221, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_261, dout_264, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_301, dout_302, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_60=((A >> 1)&1)&((B >> 6)&1);
   dout_63=dout_60&((B >> 7)&1);
   dout_64=dout_60^dout_31;
   dout_68=((B >> 6)&1)|dout_31;
   dout_71=((B >> 5)&1)&((A >> 2)&1);
   dout_72=((B >> 6)&1)&((A >> 2)&1);
   dout_73=((B >> 7)&1)&((A >> 2)&1);
   dout_101=dout_64^dout_72;
   dout_102=dout_64&dout_72;
   dout_103=dout_68&dout_71;
   dout_104=dout_101^dout_71;
   dout_105=dout_102|dout_103;
   dout_106=dout_63^dout_73;
   dout_107=dout_63&((A >> 2)&1);
   dout_108=dout_73&dout_103;
   dout_109=dout_106^dout_105;
   dout_110=dout_107|dout_108;
   dout_112=((B >> 5)&1)&((A >> 3)&1);
   dout_117=((B >> 6)&1)&((A >> 3)&1);
   dout_118=((B >> 7)&1)&((A >> 3)&1);
   dout_141=dout_104^dout_112;
   dout_142=dout_104&dout_112;
   dout_146=dout_109^dout_117;
   dout_147=dout_109&dout_117;
   dout_148=dout_146&dout_142;
   dout_149=dout_146^dout_142;
   dout_150=dout_147|dout_148;
   dout_151=dout_110^dout_118;
   dout_152=dout_110&dout_118;
   dout_153=((B >> 7)&1)&dout_150;
   dout_154=dout_151^dout_150;
   dout_155=dout_152|dout_153;
   dout_157=((B >> 1)&1)&((A >> 4)&1);
   dout_160=((B >> 4)&1)&((A >> 4)&1);
   dout_161=((B >> 5)&1)&((A >> 4)&1);
   dout_162=((B >> 6)&1)&((A >> 4)&1);
   dout_163=((B >> 7)&1)&((A >> 4)&1);
   dout_172=((A >> 3)&1)&((B >> 4)&1);
   dout_181=dout_141^dout_160;
   dout_182=dout_141&dout_160;
   dout_183=dout_181&dout_157;
   dout_184=dout_181^dout_157;
   dout_185=dout_182|dout_183;
   dout_186=dout_149^dout_161;
   dout_187=dout_149&dout_161;
   dout_188=dout_186&dout_185;
   dout_189=dout_186^dout_185;
   dout_190=dout_187|dout_188;
   dout_191=dout_154^dout_162;
   dout_192=dout_154&dout_162;
   dout_193=dout_191&dout_190;
   dout_194=dout_191^dout_190;
   dout_195=dout_192|dout_193;
   dout_196=dout_155^dout_163;
   dout_197=dout_155&((A >> 4)&1);
   dout_198=((B >> 7)&1)&dout_195;
   dout_199=dout_196^dout_195;
   dout_200=dout_197|dout_198;
   dout_203=((B >> 4)&1)&((A >> 5)&1);
   dout_204=((B >> 3)&1)&((A >> 5)&1);
   dout_206=((B >> 5)&1)&((A >> 5)&1);
   dout_207=((B >> 6)&1)&((A >> 5)&1);
   dout_208=((B >> 7)&1)&((A >> 5)&1);
   dout_220=dout_204|dout_172;
   dout_221=dout_184^dout_204;
   dout_223=dout_221&dout_220;
   dout_224=dout_221^dout_220;
   dout_225=dout_204|dout_223;
   dout_226=dout_189^dout_203;
   dout_227=dout_189&dout_203;
   dout_228=dout_226&dout_225;
   dout_229=dout_226^dout_225;
   dout_230=dout_227|dout_228;
   dout_231=dout_194^dout_206;
   dout_232=dout_194&dout_206;
   dout_233=dout_231&dout_230;
   dout_234=dout_231^dout_230;
   dout_235=dout_232|dout_233;
   dout_236=dout_199^dout_207;
   dout_237=dout_199&dout_207;
   dout_238=dout_236&dout_235;
   dout_239=dout_236^dout_235;
   dout_240=dout_237|dout_238;
   dout_241=dout_200^dout_208;
   dout_242=dout_200&((A >> 5)&1);
   dout_243=dout_208&dout_240;
   dout_244=dout_241^dout_240;
   dout_245=dout_242|dout_243;
   dout_248=((B >> 2)&1)&((A >> 6)&1);
   dout_249=((B >> 3)&1)&((A >> 6)&1);
   dout_250=((B >> 4)&1)&((A >> 6)&1);
   dout_251=((B >> 5)&1)&((A >> 6)&1);
   dout_252=((B >> 6)&1)&((A >> 6)&1);
   dout_253=((B >> 7)&1)&((A >> 6)&1);
   dout_261=dout_224^((B >> 4)&1);
   dout_264=dout_261^((B >> 4)&1);
   dout_266=dout_229^dout_249;
   dout_267=dout_229&dout_249;
   dout_268=dout_266&dout_248;
   dout_269=dout_266^dout_248;
   dout_270=dout_267|dout_268;
   dout_271=dout_234^dout_250;
   dout_272=dout_234&dout_250;
   dout_273=dout_271&dout_270;
   dout_274=dout_271^dout_270;
   dout_275=dout_272|dout_273;
   dout_276=dout_239^dout_251;
   dout_277=dout_239&dout_251;
   dout_278=dout_276&dout_275;
   dout_279=dout_276^dout_275;
   dout_280=dout_277|dout_278;
   dout_281=dout_244^dout_252;
   dout_282=dout_244&dout_252;
   dout_283=dout_281&dout_280;
   dout_284=dout_281^dout_280;
   dout_285=dout_282|dout_283;
   dout_286=dout_245^dout_253;
   dout_287=dout_245&((A >> 6)&1);
   dout_288=dout_253&dout_285;
   dout_289=dout_286^dout_285;
   dout_290=dout_287|dout_288;
   dout_291=((B >> 7)&1)&((A >> 0)&1);
   dout_292=((B >> 1)&1)&((A >> 7)&1);
   dout_293=((B >> 2)&1)&((A >> 7)&1);
   dout_294=((B >> 3)&1)&((A >> 7)&1);
   dout_295=((B >> 4)&1)&((A >> 7)&1);
   dout_296=((B >> 5)&1)&((A >> 7)&1);
   dout_297=((B >> 6)&1)&((A >> 7)&1);
   dout_298=((B >> 7)&1)&((A >> 7)&1);
   dout_301=dout_264^dout_292;
   dout_302=dout_264&dout_292;
   dout_306=dout_269^dout_293;
   dout_307=dout_269&dout_293;
   dout_308=dout_306&dout_302;
   dout_309=dout_306^dout_302;
   dout_310=dout_307|dout_308;
   dout_311=dout_274^dout_294;
   dout_312=dout_274&dout_294;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_279^dout_295;
   dout_317=dout_279&dout_295;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_284^dout_296;
   dout_322=dout_284&dout_296;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_289^dout_297;
   dout_327=dout_289&dout_297;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_290^dout_298;
   dout_332=dout_290&((A >> 7)&1);
   dout_333=dout_298&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_249&1) << 0;
   O |= (0&1) << 1;
   O |= (dout_206&1) << 2;
   O |= (dout_277&1) << 3;
   O |= (dout_312&1) << 4;
   O |= (dout_293&1) << 5;
   O |= (dout_203&1) << 6;
   O |= (dout_291&1) << 7;
   O |= (dout_301&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 8.28 %
// MAE = 42 
// WCE% = 25.59 %
// WCE = 131 
// WCRE% = 10000.00 %
// EP% = 99.24 %
// MRE% = 25.01 %
// MSE = 2692 
// PDK45_PWR = 0.0015 mW
// PDK45_AREA = 8.0 um2
// PDK45_DELAY = 0.11 ns


uint64_t evoapproxlib::evoapprox_t::add8u_8ES(uint64_t a, uint64_t b) {
  int wa[8];
  int wb[8];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  int sig_29 = ~((int)0);
  int sig_41 = wb[4];
  int sig_46 = wa[7] & wb[7];
  int sig_49 = ~((int)0);
  int sig_50 = ~((int)0);
  int sig_52 = wa[7] ^ wb[7];
  y |=  (sig_50 & 0x01) << 0; // default output
  y |=  (sig_41 & 0x01) << 1; // default output
  y |=  (sig_50 & 0x01) << 2; // default output
  y |=  (wb[2] & 0x01) << 3; // default output
  y |=  (wa[5] & 0x01) << 4; // default output
  y |=  (sig_49 & 0x01) << 5; // default output
  y |=  (sig_29 & 0x01) << 6; // default output
  y |=  (sig_52 & 0x01) << 7; // default output
  y |=  (sig_46 & 0x01) << 8; // default output
   return y;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.78 %
// MAE = 2.0 
// WCE% = 1.56 %
// WCE = 4.0 
// WCRE% = 400.00 %
// EP% = 87.50 %
// MRE% = 8.05 %
// MSE = 5.5 
// PDK45_PWR = 0.023 mW
// PDK45_AREA = 48.8 um2
// PDK45_DELAY = 0.43 ns


uint64_t evoapproxlib::evoapprox_t::add8se_90R(const uint64_t B,const uint64_t A)
{
   uint64_t dout_28, dout_29, dout_30, dout_31, dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54;
   uint64_t O;

   dout_28=((A >> 3)&1)^((B >> 3)&1);
   dout_29=((A >> 3)&1)&((B >> 3)&1);
   dout_30=dout_28&((B >> 2)&1);
   dout_31=dout_28^((B >> 2)&1);
   dout_32=dout_29|dout_30;
   dout_33=((A >> 4)&1)^((B >> 4)&1);
   dout_34=((A >> 4)&1)&((B >> 4)&1);
   dout_35=dout_33&dout_32;
   dout_36=dout_33^dout_32;
   dout_37=dout_34|dout_35;
   dout_38=((A >> 5)&1)^((B >> 5)&1);
   dout_39=((A >> 5)&1)&((B >> 5)&1);
   dout_40=dout_38&dout_37;
   dout_41=dout_38^dout_37;
   dout_42=dout_39|dout_40;
   dout_43=((A >> 6)&1)^((B >> 6)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=dout_43&dout_42;
   dout_46=dout_43^dout_42;
   dout_47=dout_44|dout_45;
   dout_48=((A >> 7)&1)^((B >> 7)&1);
   dout_49=((A >> 7)&1)&((B >> 7)&1);
   dout_50=dout_48&dout_47;
   dout_51=dout_48^dout_47;
   dout_52=dout_49|dout_50;
   dout_53=((A >> 7)&1)^((B >> 7)&1);
   dout_54=dout_53^dout_52;

   O = 0;
   O |= (((A >> 0)&1)&1) << 0;
   O |= (((A >> 1)&1)&1) << 1;
   O |= (((A >> 2)&1)&1) << 2;
   O |= (dout_31&1) << 3;
   O |= (dout_36&1) << 4;
   O |= (dout_41&1) << 5;
   O |= (dout_46&1) << 6;
   O |= (dout_51&1) << 7;
   O |= (dout_54&1) << 8;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.20 %
// MAE = 0.5 
// WCE% = 0.78 %
// WCE = 2.0 
// WCRE% = 100.00 %
// EP% = 25.00 %
// MRE% = 1.74 %
// MSE = 1.0 
// PDK45_PWR = 0.032 mW
// PDK45_AREA = 70.4 um2
// PDK45_DELAY = 0.55 ns


uint64_t evoapproxlib::evoapprox_t::add8se_91X(const uint64_t B,const uint64_t A)
{
   uint64_t dout_16, dout_19, dout_21, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54;
   uint64_t O;

   dout_16=((A >> 0)&1)^((B >> 0)&1);
   dout_19=((A >> 1)&1)&((B >> 1)&1);
   dout_21=((A >> 1)&1)^((B >> 1)&1);
   dout_23=((A >> 2)&1)^((B >> 2)&1);
   dout_24=((A >> 2)&1)&((B >> 2)&1);
   dout_25=dout_23&dout_19;
   dout_26=dout_23^dout_19;
   dout_27=dout_24|dout_25;
   dout_28=((A >> 3)&1)^((B >> 3)&1);
   dout_29=((A >> 3)&1)&((B >> 3)&1);
   dout_30=dout_28&dout_27;
   dout_31=dout_28^dout_27;
   dout_32=dout_29|dout_30;
   dout_33=((A >> 4)&1)^((B >> 4)&1);
   dout_34=((A >> 4)&1)&((B >> 4)&1);
   dout_35=dout_33&dout_32;
   dout_36=dout_33^dout_32;
   dout_37=dout_34|dout_35;
   dout_38=((A >> 5)&1)^((B >> 5)&1);
   dout_39=((A >> 5)&1)&((B >> 5)&1);
   dout_40=dout_38&dout_37;
   dout_41=dout_38^dout_37;
   dout_42=dout_39|dout_40;
   dout_43=((A >> 6)&1)^((B >> 6)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=dout_43&dout_42;
   dout_46=dout_43^dout_42;
   dout_47=dout_44|dout_45;
   dout_48=((A >> 7)&1)^((B >> 7)&1);
   dout_49=((A >> 7)&1)&((B >> 7)&1);
   dout_50=dout_48&dout_47;
   dout_51=dout_48^dout_47;
   dout_52=dout_49|dout_50;
   dout_53=((A >> 7)&1)^((B >> 7)&1);
   dout_54=dout_53^dout_52;

   O = 0;
   O |= (dout_16&1) << 0;
   O |= (dout_21&1) << 1;
   O |= (dout_26&1) << 2;
   O |= (dout_31&1) << 3;
   O |= (dout_36&1) << 4;
   O |= (dout_41&1) << 5;
   O |= (dout_46&1) << 6;
   O |= (dout_51&1) << 7;
   O |= (dout_54&1) << 8;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mse parameters
***/
// MAE% = 1.21 %
// MAE = 3.1 
// WCE% = 3.91 %
// WCE = 10 
// WCRE% = 800.00 %
// EP% = 90.62 %
// MRE% = 12.28 %
// MSE = 15 
// PDK45_PWR = 0.019 mW
// PDK45_AREA = 41.3 um2
// PDK45_DELAY = 0.35 ns


uint64_t evoapproxlib::evoapprox_t::add8se_8UT(const uint64_t B,const uint64_t A)
{
   uint64_t dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_41, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_60, dout_62, dout_63, dout_65, dout_66, dout_67, dout_68, dout_75, dout_76, dout_80, dout_81, dout_82, dout_83, dout_84;
   uint64_t O;

   dout_24=((A >> 4)&1)&((B >> 4)&1);
   dout_25=((A >> 4)&1)^((B >> 4)&1);
   dout_26=((A >> 5)&1)&((B >> 5)&1);
   dout_27=((A >> 5)&1)^((B >> 5)&1);
   dout_28=((A >> 6)&1)&((B >> 6)&1);
   dout_29=((A >> 6)&1)^((B >> 6)&1);
   dout_30=((A >> 7)&1)&((B >> 7)&1);
   dout_31=((A >> 7)&1)^((B >> 7)&1);
   dout_32=((A >> 7)&1)^((B >> 7)&1);
   dout_41=dout_25&((B >> 3)&1);
   dout_43=dout_24|dout_41;
   dout_44=dout_27&dout_24;
   dout_45=dout_27&dout_25;
   dout_46=dout_26|dout_44;
   dout_47=dout_29&dout_26;
   dout_48=dout_29&dout_27;
   dout_49=dout_28|dout_47;
   dout_50=dout_31&dout_28;
   dout_51=dout_31&dout_29;
   dout_52=dout_30|dout_50;
   dout_53=((B >> 3)&1)^0xFFFFFFFFFFFFFFFFU;
   dout_60=dout_45&((B >> 3)&1);
   dout_62=dout_46|dout_60;
   dout_63=dout_48&dout_43;
   dout_65=dout_49|dout_63;
   dout_66=dout_51&dout_46;
   dout_67=dout_51&dout_45;
   dout_68=dout_52|dout_66;
   dout_75=dout_67&((B >> 3)&1);
   dout_76=dout_68|dout_75;
   dout_80=dout_25^((B >> 3)&1);
   dout_81=dout_27^dout_43;
   dout_82=dout_29^dout_62;
   dout_83=dout_31^dout_65;
   dout_84=dout_32^dout_76;

   O = 0;
   O |= (((A >> 3)&1)&1) << 0;
   O |= (0&1) << 1;
   O |= (dout_53&1) << 2;
   O |= (((A >> 3)&1)&1) << 3;
   O |= (dout_80&1) << 4;
   O |= (dout_81&1) << 5;
   O |= (dout_82&1) << 6;
   O |= (dout_83&1) << 7;
   O |= (dout_84&1) << 8;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mse parameters
***/
// MAE% = 28.83 %
// MAE = 37 
// WCE% = 84.38 %
// WCE = 108 
// WCRE% = 6500.00 %
// EP% = 99.22 %
// MRE% = 202.19 %
// MSE = 1995 
// PDK45_PWR = 0.0039 mW
// PDK45_AREA = 18.8 um2
// PDK45_DELAY = 0.20 ns


uint64_t evoapproxlib::evoapprox_t::add8s_6R6(const uint64_t B,const uint64_t A)
{
   uint64_t dout_28, dout_30, dout_38, dout_44, dout_54, dout_60, dout_61;
   uint64_t O;

   dout_28=((A >> 6)&1)&((B >> 6)&1);
   dout_30=((A >> 7)&1)^((B >> 7)&1);
   dout_38=((A >> 7)&1)&((B >> 7)&1);
   dout_44=dout_28|dout_38;
   dout_54=((B >> 5)&1)|((A >> 5)&1);
   dout_60=((B >> 1)&1)|dout_54;
   dout_61=dout_30^dout_44;

   O = 0;
   O |= (0&1) << 0;
   O |= (((A >> 1)&1)&1) << 1;
   O |= (((A >> 1)&1)&1) << 2;
   O |= (((A >> 4)&1)&1) << 3;
   O |= (0&1) << 4;
   O |= (((B >> 4)&1)&1) << 5;
   O |= (dout_60&1) << 6;
   O |= (dout_61&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 0.00095 %
// MAE = 0.62 
// WCE% = 0.0092 %
// WCE = 6.0 
// WCRE% = 28.57 %
// EP% = 17.19 %
// MRE% = 0.023 %
// MSE = 2.5 
// PDK45_PWR = 0.384 mW
// PDK45_AREA = 674.9 um2
// PDK45_DELAY = 1.42 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_125K(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_16, dout_17, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_34, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_65, dout_66, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_87, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_98, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110, dout_111, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143, dout_144, dout_145, dout_146, dout_147, dout_148, dout_149, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_171, dout_172, dout_173, dout_174, dout_175, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_183, dout_184, dout_185, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_16=((B >> 0)&1)&((A >> 0)&1);
   dout_17=((B >> 1)&1)&((A >> 0)&1);
   dout_18=((B >> 2)&1)&((A >> 0)&1);
   dout_19=((B >> 3)&1)&((A >> 0)&1);
   dout_20=((B >> 4)&1)&((A >> 0)&1);
   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_24=((B >> 0)&1)&((A >> 1)&1);
   dout_25=((B >> 1)&1)&((A >> 1)&1);
   dout_26=((B >> 2)&1)&((A >> 1)&1);
   dout_27=((B >> 3)&1)&((A >> 1)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_32=dout_17|dout_24;
   dout_34=dout_18|dout_25;
   dout_36=dout_19^dout_26;
   dout_37=dout_19&dout_26;
   dout_38=dout_20^dout_27;
   dout_39=dout_20&dout_27;
   dout_40=dout_21^dout_28;
   dout_41=dout_21&dout_28;
   dout_42=dout_22^dout_29;
   dout_43=dout_22&dout_29;
   dout_44=dout_23^dout_30;
   dout_45=dout_22&dout_31;
   dout_46=((B >> 0)&1)&((A >> 2)&1);
   dout_47=((B >> 1)&1)&((A >> 2)&1);
   dout_48=((B >> 2)&1)&((A >> 2)&1);
   dout_49=((B >> 3)&1)&((A >> 2)&1);
   dout_50=((B >> 4)&1)&((A >> 2)&1);
   dout_51=((B >> 5)&1)&((A >> 2)&1);
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_54=dout_34|dout_46;
   dout_59=dout_36^dout_47;
   dout_60=dout_36&dout_47;
   dout_61=dout_47&dout_24;
   dout_62=dout_59^dout_61;
   dout_63=dout_60|dout_61;
   dout_64=dout_38^dout_48;
   dout_65=dout_38&dout_48;
   dout_66=dout_64&dout_37;
   dout_67=dout_64^dout_37;
   dout_68=dout_65|dout_66;
   dout_69=dout_40^dout_49;
   dout_70=dout_40&dout_49;
   dout_71=dout_69&dout_39;
   dout_72=dout_69^dout_39;
   dout_73=dout_70|dout_71;
   dout_74=dout_42^dout_50;
   dout_75=dout_42&dout_50;
   dout_76=dout_74&dout_41;
   dout_77=dout_74^dout_41;
   dout_78=dout_75|dout_76;
   dout_79=dout_44^dout_51;
   dout_80=dout_44&dout_51;
   dout_81=dout_79&dout_43;
   dout_82=dout_79^dout_43;
   dout_83=dout_80|dout_81;
   dout_84=dout_31^dout_52;
   dout_85=dout_31&dout_52;
   dout_87=dout_84^dout_45;
   dout_88=dout_85|dout_45;
   dout_89=((B >> 0)&1)&((A >> 3)&1);
   dout_90=((B >> 1)&1)&((A >> 3)&1);
   dout_91=((B >> 2)&1)&((A >> 3)&1);
   dout_92=((B >> 3)&1)&((A >> 3)&1);
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_97=dout_62^dout_89;
   dout_98=dout_62&dout_89;
   dout_102=dout_67^dout_90;
   dout_103=dout_67&dout_90;
   dout_104=dout_102&dout_63;
   dout_105=dout_102^dout_63;
   dout_106=dout_103|dout_104;
   dout_107=dout_72^dout_91;
   dout_108=dout_72&dout_91;
   dout_109=dout_107&dout_68;
   dout_110=dout_107^dout_68;
   dout_111=dout_108|dout_109;
   dout_112=dout_77^dout_92;
   dout_113=dout_77&dout_92;
   dout_114=dout_112&dout_73;
   dout_115=dout_112^dout_73;
   dout_116=dout_113|dout_114;
   dout_117=dout_82^dout_93;
   dout_118=dout_82&dout_93;
   dout_119=dout_117&dout_78;
   dout_120=dout_117^dout_78;
   dout_121=dout_118|dout_119;
   dout_122=dout_87^dout_94;
   dout_123=dout_87&dout_94;
   dout_124=dout_122&dout_83;
   dout_125=dout_122^dout_83;
   dout_126=dout_123|dout_124;
   dout_127=dout_53^dout_95;
   dout_128=dout_53&dout_95;
   dout_129=dout_127&dout_88;
   dout_130=dout_127^dout_88;
   dout_131=dout_128|dout_129;
   dout_132=((B >> 0)&1)&((A >> 4)&1);
   dout_133=((B >> 1)&1)&((A >> 4)&1);
   dout_134=((B >> 2)&1)&((A >> 4)&1);
   dout_135=((B >> 3)&1)&((A >> 4)&1);
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_140=dout_105^dout_132;
   dout_141=dout_105&dout_132;
   dout_142=dout_140&dout_98;
   dout_143=dout_140^dout_98;
   dout_144=dout_141|dout_142;
   dout_145=dout_110^dout_133;
   dout_146=dout_110&dout_133;
   dout_147=dout_145&dout_106;
   dout_148=dout_145^dout_106;
   dout_149=dout_146|dout_147;
   dout_150=dout_115^dout_134;
   dout_151=dout_115&dout_134;
   dout_152=dout_150&dout_111;
   dout_153=dout_150^dout_111;
   dout_154=dout_151|dout_152;
   dout_155=dout_120^dout_135;
   dout_156=dout_120&dout_135;
   dout_157=dout_155&dout_116;
   dout_158=dout_155^dout_116;
   dout_159=dout_156|dout_157;
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_121;
   dout_163=dout_160^dout_121;
   dout_164=dout_161|dout_162;
   dout_165=dout_130^dout_137;
   dout_166=dout_130&dout_137;
   dout_167=dout_165&dout_126;
   dout_168=dout_165^dout_126;
   dout_169=dout_166|dout_167;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_172=dout_170&dout_131;
   dout_173=dout_170^dout_131;
   dout_174=dout_171|dout_172;
   dout_175=((B >> 0)&1)&((A >> 5)&1);
   dout_176=((B >> 1)&1)&((A >> 5)&1);
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_183=dout_148^dout_175;
   dout_184=dout_148&dout_175;
   dout_185=dout_183&dout_144;
   dout_186=dout_183^dout_144;
   dout_187=dout_184|dout_185;
   dout_188=dout_153^dout_176;
   dout_189=dout_153&dout_176;
   dout_190=dout_188&dout_149;
   dout_191=dout_188^dout_149;
   dout_192=dout_189|dout_190;
   dout_193=dout_158^dout_177;
   dout_194=dout_158&dout_177;
   dout_195=dout_193&dout_154;
   dout_196=dout_193^dout_154;
   dout_197=dout_194|dout_195;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_159;
   dout_201=dout_198^dout_159;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_218=((B >> 0)&1)&((A >> 6)&1);
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_226=dout_191^dout_218;
   dout_227=dout_191&dout_218;
   dout_228=dout_226&dout_187;
   dout_229=dout_226^dout_187;
   dout_230=dout_227|dout_228;
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_233=dout_231&dout_192;
   dout_234=dout_231^dout_192;
   dout_235=dout_232|dout_233;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_197;
   dout_239=dout_236^dout_197;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_234^dout_261;
   dout_270=dout_234&dout_261;
   dout_271=dout_269&dout_230;
   dout_272=dout_269^dout_230;
   dout_273=dout_270|dout_271;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_235;
   dout_277=dout_274^dout_235;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_304=dout_277^dout_273;
   dout_305=dout_277&dout_273;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_302^dout_298;
   dout_327=dout_302&dout_298;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_268^dout_303;
   dout_332=((A >> 7)&1)&dout_303;
   dout_333=dout_331&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_16&1) << 0;
   O |= (dout_32&1) << 1;
   O |= (dout_54&1) << 2;
   O |= (dout_97&1) << 3;
   O |= (dout_143&1) << 4;
   O |= (dout_186&1) << 5;
   O |= (dout_229&1) << 6;
   O |= (dout_272&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 1.97 %
// MAE = 10 
// WCE% = 6.25 %
// WCE = 32 
// WCRE% = 3100.00 %
// EP% = 96.97 %
// MRE% = 6.16 %
// MSE = 154 
// PDK45_PWR = 0.0095 mW
// PDK45_AREA = 25.8 um2
// PDK45_DELAY = 0.24 ns


uint64_t evoapproxlib::evoapprox_t::add8u_8LL(uint64_t a, uint64_t b) {
  int wa[8];
  int wb[8];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  int sig_18 = 0;
  int sig_31 = ~(wa[5] ^ wb[5]);
  int sig_42 = wb[5] | wa[5];
  int sig_43 = wa[6] ^ wb[6];
  int sig_44 = wa[6] & wb[6];
  int sig_45 = sig_43 & sig_42;
  int sig_46 = sig_43 ^ sig_42;
  int sig_47 = sig_44 | sig_45;
  int sig_48 = wa[7] ^ wb[7];
  int sig_49 = wa[7] & wb[7];
  int sig_50 = sig_48 & sig_47;
  int sig_51 = sig_48 ^ sig_47;
  int sig_52 = sig_49 | sig_50;
  y |=  (wb[3] & 0x01) << 0; // default output
  y |=  (wa[4] & 0x01) << 1; // default output
  y |=  (sig_18 & 0x01) << 2; // default output
  y |=  (wa[4] & 0x01) << 3; // default output
  y |=  (sig_18 & 0x01) << 4; // default output
  y |=  (sig_31 & 0x01) << 5; // default output
  y |=  (sig_46 & 0x01) << 6; // default output
  y |=  (sig_51 & 0x01) << 7; // default output
  y |=  (sig_52 & 0x01) << 8; // default output
   return y;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 0.27 %
// MAE = 0.7 
// WCE% = 0.78 %
// WCE = 2.0 
// WCRE% = 100.00 %
// EP% = 62.40 %
// MRE% = 2.88 %
// MSE = 1.0 
// PDK45_PWR = 0.030 mW
// PDK45_AREA = 65.7 um2
// PDK45_DELAY = 0.55 ns


uint64_t evoapproxlib::evoapprox_t::add8se_72D(const uint64_t B,const uint64_t A)
{
   uint64_t dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_32, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_58, dout_59, dout_60, dout_62, dout_63, dout_65, dout_66, dout_67, dout_68, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84;
   uint64_t O;

   dout_18=((A >> 1)&1)&((B >> 1)&1);
   dout_19=((A >> 1)&1)^((B >> 1)&1);
   dout_20=((A >> 2)&1)&((B >> 2)&1);
   dout_21=((A >> 2)&1)^((B >> 2)&1);
   dout_22=((A >> 3)&1)&((B >> 3)&1);
   dout_23=((A >> 3)&1)^((B >> 3)&1);
   dout_24=((A >> 4)&1)&((B >> 4)&1);
   dout_25=((A >> 4)&1)^((B >> 4)&1);
   dout_26=((A >> 5)&1)&((B >> 5)&1);
   dout_27=((A >> 5)&1)^((B >> 5)&1);
   dout_28=((A >> 6)&1)&((B >> 6)&1);
   dout_29=((A >> 6)&1)^((B >> 6)&1);
   dout_30=((A >> 7)&1)&((B >> 7)&1);
   dout_32=((A >> 7)&1)^((B >> 7)&1);
   dout_38=dout_23&dout_20;
   dout_39=dout_23&dout_21;
   dout_40=dout_22|dout_38;
   dout_41=dout_25&dout_22;
   dout_42=dout_25&dout_23;
   dout_43=dout_24|dout_41;
   dout_47=dout_29&dout_26;
   dout_48=dout_29&dout_27;
   dout_49=dout_28|dout_47;
   dout_50=dout_32&dout_49;
   dout_51=dout_32&dout_48;
   dout_52=dout_30|dout_50;
   dout_53=dout_21&dout_18;
   dout_54=dout_20|dout_53;
   dout_55=dout_39&dout_18;
   dout_56=dout_40|dout_55;
   dout_58=dout_42&dout_54;
   dout_59=dout_43|dout_58;
   dout_60=dout_27&dout_43;
   dout_62=dout_26|dout_60;
   dout_63=dout_48&dout_43;
   dout_65=dout_49|dout_63;
   dout_66=dout_51&dout_43;
   dout_67=dout_51&dout_42;
   dout_68=dout_52|dout_66;
   dout_71=dout_27&dout_58;
   dout_72=dout_62|dout_71;
   dout_73=dout_48&dout_58;
   dout_74=dout_65|dout_73;
   dout_75=dout_67&dout_56;
   dout_76=dout_68|dout_75;
   dout_78=dout_21^dout_18;
   dout_79=dout_23^dout_54;
   dout_80=dout_25^dout_56;
   dout_81=dout_27^dout_59;
   dout_82=dout_29^dout_72;
   dout_83=dout_32^dout_74;
   dout_84=dout_32^dout_76;

   O = 0;
   O |= (dout_84&1) << 0;
   O |= (dout_19&1) << 1;
   O |= (dout_78&1) << 2;
   O |= (dout_79&1) << 3;
   O |= (dout_80&1) << 4;
   O |= (dout_81&1) << 5;
   O |= (dout_82&1) << 6;
   O |= (dout_83&1) << 7;
   O |= (dout_84&1) << 8;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mse parameters
***/
// MAE% = 10.08 %
// MAE = 13 
// WCE% = 35.16 %
// WCE = 45 
// WCRE% = 1650.00 %
// EP% = 97.84 %
// MRE% = 49.43 %
// MSE = 240 
// PDK45_PWR = 0.013 mW
// PDK45_AREA = 31.4 um2
// PDK45_DELAY = 0.27 ns


uint64_t evoapproxlib::evoapprox_t::add8s_70S(const uint64_t B,const uint64_t A)
{
   uint64_t dout_34, dout_36, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49;
   uint64_t O;

   dout_34=((A >> 7)&1)&((B >> 7)&1);
   dout_36=((B >> 4)&1)|((A >> 4)&1);
   dout_38=((A >> 5)&1)^((B >> 5)&1);
   dout_39=((A >> 5)&1)&((B >> 5)&1);
   dout_40=dout_38&dout_34;
   dout_41=dout_38^dout_34;
   dout_42=dout_39|dout_40;
   dout_43=((A >> 6)&1)^((B >> 6)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=dout_43&dout_42;
   dout_46=dout_43^dout_42;
   dout_47=dout_44|dout_45;
   dout_48=((A >> 7)&1)^((B >> 7)&1);
   dout_49=dout_48^dout_47;

   O = 0;
   O |= (dout_46&1) << 0;
   O |= (0&1) << 1;
   O |= (((A >> 4)&1)&1) << 2;
   O |= (dout_36&1) << 3;
   O |= (dout_36&1) << 4;
   O |= (dout_41&1) << 5;
   O |= (dout_46&1) << 6;
   O |= (dout_49&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 3.08 %
// MAE = 2016 
// WCE% = 12.30 %
// WCE = 8064 
// WCRE% = 6300.00 %
// EP% = 98.05 %
// MRE% = 135.77 %
// MSE = 72829.102e2 
// PDK45_PWR = 0.052 mW
// PDK45_AREA = 172.2 um2
// PDK45_DELAY = 0.89 ns


int16_t evoapproxlib::evoapprox_t::mul8s_1KR3(int8_t A, int8_t B)
{
  int16_t P, P_;
  uint8_t tmp, C_6_1,C_6_7,C_7_0,C_7_1,C_7_2,C_7_3,C_7_4,C_7_5,C_7_6,C_7_7,S_0_7,S_1_6,S_2_5,S_3_4,S_4_3,S_5_2,S_6_0,S_6_1,S_6_2,S_6_3,S_6_4,S_6_5,S_6_6,S_6_7,S_7_0,S_7_1,S_7_2,S_7_3,S_7_4,S_7_5,S_7_6,S_7_7,S_8_0,S_8_1,S_8_2,S_8_3,S_8_4,S_8_5,S_8_6,S_8_7,S_8_8;
  S_0_7 = 1;
  S_1_6 = 1;
  S_2_5 = 1;
  S_3_4 = 1;
  S_4_3 = 1;
  S_5_2 = 1;
  S_6_0 = (((A>>6)&1) & ((B>>0)&1));
  S_6_1 = S_5_2^(((A>>6)&1) & ((B>>1)&1));
  C_6_1 = S_5_2&(((A>>6)&1) & ((B>>1)&1));
  S_6_2 = (((A>>6)&1) & ((B>>2)&1));
  S_6_3 = (((A>>6)&1) & ((B>>3)&1));
  S_6_4 = (((A>>6)&1) & ((B>>4)&1));
  S_6_5 = (((A>>6)&1) & ((B>>5)&1));
  S_6_6 = (((A>>6)&1) & ((B>>6)&1));
  S_6_7 = 1^(((((A>>6)&1) & ((B>>7)&1)))^1);
  C_6_7 = 1&(((((A>>6)&1) & ((B>>7)&1)))^1);
  S_7_0 = S_6_1^(((((A>>7)&1) & ((B>>0)&1)))^1);
  C_7_0 = S_6_1&(((((A>>7)&1) & ((B>>0)&1)))^1);
  tmp = S_6_2^C_6_1;
  S_7_1 = tmp^(((((A>>7)&1) & ((B>>1)&1)))^1);
  C_7_1 = (tmp&(((((A>>7)&1) & ((B>>1)&1)))^1))|(S_6_2&C_6_1);
  S_7_2 = S_6_3^(((((A>>7)&1) & ((B>>2)&1)))^1);
  C_7_2 = S_6_3&(((((A>>7)&1) & ((B>>2)&1)))^1);
  S_7_3 = S_6_4^(((((A>>7)&1) & ((B>>3)&1)))^1);
  C_7_3 = S_6_4&(((((A>>7)&1) & ((B>>3)&1)))^1);
  S_7_4 = S_6_5^(((((A>>7)&1) & ((B>>4)&1)))^1);
  C_7_4 = S_6_5&(((((A>>7)&1) & ((B>>4)&1)))^1);
  S_7_5 = S_6_6^(((((A>>7)&1) & ((B>>5)&1)))^1);
  C_7_5 = S_6_6&(((((A>>7)&1) & ((B>>5)&1)))^1);
  S_7_6 = S_6_7^(((((A>>7)&1) & ((B>>6)&1)))^1);
  C_7_6 = S_6_7&(((((A>>7)&1) & ((B>>6)&1)))^1);
  S_7_7 = C_6_7^(((A>>7)&1) & ((B>>7)&1));
  C_7_7 = C_6_7&(((A>>7)&1) & ((B>>7)&1));
  P_ = (((C_7_0 & 1)<<0)|((C_7_1 & 1)<<1)|((C_7_2 & 1)<<2)|((C_7_3 & 1)<<3)|((C_7_4 & 1)<<4)|((C_7_5 & 1)<<5)|((C_7_6 & 1)<<6)|((C_7_7 & 1)<<7)) + (((S_7_1 & 1)<<0)|((S_7_2 & 1)<<1)|((S_7_3 & 1)<<2)|((S_7_4 & 1)<<3)|((S_7_5 & 1)<<4)|((S_7_6 & 1)<<5)|((S_7_7 & 1)<<6)|((1 & 1)<<7));
  S_8_0 = (P_ >> 0) & 1;
  S_8_1 = (P_ >> 1) & 1;
  S_8_2 = (P_ >> 2) & 1;
  S_8_3 = (P_ >> 3) & 1;
  S_8_4 = (P_ >> 4) & 1;
  S_8_5 = (P_ >> 5) & 1;
  S_8_6 = (P_ >> 6) & 1;
  S_8_7 = (P_ >> 7) & 1;
  S_8_8 = (P_ >> 8) & 1;
  P = 0;
  P |= (S_6_0 & 1) << 6;
  P |= (S_7_0 & 1) << 7;
  P |= (S_8_0 & 1) << 8;
  P |= (S_8_1 & 1) << 9;
  P |= (S_8_2 & 1) << 10;
  P |= (S_8_3 & 1) << 11;
  P |= (S_8_4 & 1) << 12;
  P |= (S_8_5 & 1) << 13;
  P |= (S_8_6 & 1) << 14;
  P |= (S_8_7 & 1) << 15;
  return P;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 12.27 %
// MAE = 16 
// WCE% = 33.59 %
// WCE = 43 
// WCRE% = 2800.00 %
// EP% = 98.52 %
// MRE% = 75.00 %
// MSE = 343 
// PDK45_PWR = 0.012 mW
// PDK45_AREA = 32.9 um2
// PDK45_DELAY = 0.27 ns


uint64_t evoapproxlib::evoapprox_t::add8s_6J2(const uint64_t A /* 8-bit signed operand */, const uint64_t B /* 8-bit signed operand */)
{
   uint64_t dout_23, dout_29, dout_35, dout_38, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_49;
   uint64_t O;

   dout_23=((A >> 5)&1)&((B >> 5)&1);
   dout_29=((A >> 7)&1)^((B >> 7)&1);
   dout_35=((B >> 7)&1)&((A >> 7)&1);
   dout_38=((A >> 5)&1)^((B >> 5)&1);
   dout_40=dout_38&dout_35;
   dout_41=dout_38^dout_40;
   dout_42=dout_23|dout_40;
   dout_43=((A >> 6)&1)^((B >> 6)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=dout_43&dout_42;
   dout_46=dout_43^dout_42;
   dout_47=dout_44|dout_45;
   dout_49=dout_29^dout_47;

   O = 0;
   O |= (dout_46&1) << 0;
   O |= (((B >> 1)&1)&1) << 1;
   O |= (dout_49&1) << 2;
   O |= (((A >> 1)&1)&1) << 3;
   O |= (((A >> 4)&1)&1) << 4;
   O |= (dout_41&1) << 5;
   O |= (dout_46&1) << 6;
   O |= (dout_49&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.43 %
// MAE = 284 
// WCE% = 4.48 %
// WCE = 2938 
// WCRE% = 52.95 %
// EP% = 49.91 %
// MRE% = 2.61 %
// MSE = 386332 
// PDK45_PWR = 0.309 mW
// PDK45_AREA = 561.8 um2
// PDK45_DELAY = 1.73 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_RCG(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_16, dout_17, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_34, dout_39, dout_44, dout_49, dout_51, dout_54, dout_59, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_76, dout_80, dout_81, dout_86, dout_91, dout_96, dout_101, dout_111, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_143, dout_144, dout_146, dout_149, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_171, dout_172, dout_173, dout_174, dout_175, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_183, dout_184, dout_185, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_198, dout_199, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_238, dout_239, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_16=((B >> 0)&1)&((A >> 0)&1);
   dout_17=((B >> 1)&1)&((A >> 0)&1);
   dout_18=((B >> 2)&1)&((A >> 0)&1);
   dout_19=((B >> 3)&1)&((A >> 0)&1);
   dout_20=((B >> 4)&1)&((A >> 0)&1);
   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_24=((B >> 0)&1)&((A >> 1)&1);
   dout_25=((B >> 1)&1)&((A >> 1)&1);
   dout_26=((B >> 2)&1)&((A >> 1)&1);
   dout_27=((B >> 3)&1)&((A >> 1)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_32=dout_17|dout_24;
   dout_34=dout_18|dout_25;
   dout_39=dout_19|dout_26;
   dout_44=dout_20|dout_27;
   dout_49=dout_21|dout_28;
   dout_51=((B >> 0)&1)&((A >> 2)&1);
   dout_54=dout_22|dout_29;
   dout_59=dout_23|dout_30;
   dout_67=((B >> 1)&1)&((A >> 2)&1);
   dout_68=((B >> 2)&1)&((A >> 2)&1);
   dout_69=((B >> 3)&1)&((A >> 2)&1);
   dout_70=((B >> 4)&1)&((A >> 2)&1);
   dout_71=((B >> 5)&1)&((A >> 2)&1);
   dout_72=((B >> 6)&1)&((A >> 2)&1);
   dout_73=((B >> 7)&1)&((A >> 2)&1);
   dout_74=dout_34|dout_51;
   dout_76=dout_39|dout_67;
   dout_80=dout_76|dout_67;
   dout_81=dout_44|dout_68;
   dout_86=dout_49|dout_69;
   dout_91=dout_54|dout_70;
   dout_96=dout_59|dout_71;
   dout_101=dout_31|dout_72;
   dout_111=((B >> 0)&1)&((A >> 3)&1);
   dout_112=((B >> 1)&1)&((A >> 3)&1);
   dout_113=((B >> 2)&1)&((A >> 3)&1);
   dout_114=((B >> 3)&1)&((A >> 3)&1);
   dout_115=((B >> 4)&1)&((A >> 3)&1);
   dout_116=((B >> 5)&1)&((A >> 3)&1);
   dout_117=((B >> 6)&1)&((A >> 3)&1);
   dout_118=((B >> 7)&1)&((A >> 3)&1);
   dout_119=dout_80^dout_111;
   dout_120=dout_76&dout_111;
   dout_121=dout_81^dout_112;
   dout_122=dout_81&dout_112;
   dout_123=dout_121&dout_120;
   dout_124=dout_121^dout_120;
   dout_125=dout_122|dout_123;
   dout_126=dout_86^dout_113;
   dout_127=dout_86&dout_113;
   dout_128=dout_126&dout_125;
   dout_129=dout_126^dout_125;
   dout_130=dout_127|dout_128;
   dout_131=dout_91^dout_114;
   dout_132=dout_91&dout_114;
   dout_133=dout_131&dout_130;
   dout_134=dout_131^dout_130;
   dout_135=dout_132|dout_133;
   dout_136=dout_96^dout_115;
   dout_137=dout_96&dout_115;
   dout_138=dout_136&dout_135;
   dout_139=dout_136^dout_135;
   dout_140=dout_137|dout_138;
   dout_141=dout_101^dout_116;
   dout_143=dout_116&dout_140;
   dout_144=dout_141^dout_140;
   dout_146=dout_73|dout_117;
   dout_149=dout_146|dout_143;
   dout_156=((B >> 0)&1)&((A >> 4)&1);
   dout_157=((B >> 1)&1)&((A >> 4)&1);
   dout_158=((B >> 2)&1)&((A >> 4)&1);
   dout_159=((B >> 3)&1)&((A >> 4)&1);
   dout_160=((B >> 4)&1)&((A >> 4)&1);
   dout_161=((B >> 5)&1)&((A >> 4)&1);
   dout_162=((B >> 6)&1)&((A >> 4)&1);
   dout_163=((B >> 7)&1)&((A >> 4)&1);
   dout_164=dout_124^dout_156;
   dout_165=dout_124&dout_156;
   dout_166=dout_129^dout_157;
   dout_167=dout_129&dout_157;
   dout_168=dout_166&dout_165;
   dout_169=dout_166^dout_165;
   dout_170=dout_167|dout_168;
   dout_171=dout_134^dout_158;
   dout_172=dout_134&dout_158;
   dout_173=dout_171&dout_170;
   dout_174=dout_171^dout_170;
   dout_175=dout_172|dout_173;
   dout_176=dout_139^dout_159;
   dout_177=dout_139&dout_159;
   dout_178=dout_176&dout_175;
   dout_179=dout_176^dout_175;
   dout_180=dout_177|dout_178;
   dout_181=dout_144^dout_160;
   dout_182=dout_144&dout_160;
   dout_183=dout_181&dout_180;
   dout_184=dout_181^dout_180;
   dout_185=dout_182|dout_183;
   dout_186=dout_149^dout_161;
   dout_187=dout_149&dout_161;
   dout_188=dout_186&dout_185;
   dout_189=dout_186^dout_185;
   dout_190=dout_187|dout_188;
   dout_191=dout_118^dout_162;
   dout_192=dout_118&dout_162;
   dout_193=dout_191&dout_190;
   dout_194=dout_191^dout_190;
   dout_195=dout_192|dout_193;
   dout_198=((B >> 7)&1)&dout_195;
   dout_199=dout_163^dout_195;
   dout_201=((B >> 0)&1)&((A >> 5)&1);
   dout_202=((B >> 1)&1)&((A >> 5)&1);
   dout_203=((B >> 2)&1)&((A >> 5)&1);
   dout_204=((B >> 3)&1)&((A >> 5)&1);
   dout_205=((B >> 4)&1)&((A >> 5)&1);
   dout_206=((B >> 5)&1)&((A >> 5)&1);
   dout_207=((B >> 6)&1)&((A >> 5)&1);
   dout_208=((B >> 7)&1)&((A >> 5)&1);
   dout_209=dout_169^dout_201;
   dout_210=dout_169&dout_201;
   dout_211=dout_174^dout_202;
   dout_212=dout_174&dout_202;
   dout_213=dout_211&dout_210;
   dout_214=dout_211^dout_210;
   dout_215=dout_212|dout_213;
   dout_216=dout_179^dout_203;
   dout_217=dout_179&dout_203;
   dout_218=dout_216&dout_215;
   dout_219=dout_216^dout_215;
   dout_220=dout_217|dout_218;
   dout_221=dout_184^dout_204;
   dout_222=dout_184&dout_204;
   dout_223=dout_221&dout_220;
   dout_224=dout_221^dout_220;
   dout_225=dout_222|dout_223;
   dout_226=dout_189^dout_205;
   dout_227=dout_189&dout_205;
   dout_228=dout_226&dout_225;
   dout_229=dout_226^dout_225;
   dout_230=dout_227|dout_228;
   dout_231=dout_194^dout_206;
   dout_232=dout_194&dout_206;
   dout_233=dout_231&dout_230;
   dout_234=dout_231^dout_230;
   dout_235=dout_232|dout_233;
   dout_236=dout_199|dout_207;
   dout_238=dout_236&dout_235;
   dout_239=dout_236^dout_235;
   dout_241=dout_198^dout_208;
   dout_242=dout_198&dout_208;
   dout_243=dout_208&dout_238;
   dout_244=dout_241^dout_238;
   dout_245=dout_242|dout_243;
   dout_246=((B >> 0)&1)&((A >> 6)&1);
   dout_247=((B >> 1)&1)&((A >> 6)&1);
   dout_248=((B >> 2)&1)&((A >> 6)&1);
   dout_249=((B >> 3)&1)&((A >> 6)&1);
   dout_250=((B >> 4)&1)&((A >> 6)&1);
   dout_251=((B >> 5)&1)&((A >> 6)&1);
   dout_252=((B >> 6)&1)&((A >> 6)&1);
   dout_253=((B >> 7)&1)&((A >> 6)&1);
   dout_254=dout_214^dout_246;
   dout_255=dout_214&dout_246;
   dout_256=dout_219^dout_247;
   dout_257=dout_219&dout_247;
   dout_258=dout_256&dout_255;
   dout_259=dout_256^dout_255;
   dout_260=dout_257|dout_258;
   dout_261=dout_224^dout_248;
   dout_262=dout_224&dout_248;
   dout_263=dout_261&dout_260;
   dout_264=dout_261^dout_260;
   dout_265=dout_262|dout_263;
   dout_266=dout_229^dout_249;
   dout_267=dout_229&dout_249;
   dout_268=dout_266&dout_265;
   dout_269=dout_266^dout_265;
   dout_270=dout_267|dout_268;
   dout_271=dout_234^dout_250;
   dout_272=dout_234&dout_250;
   dout_273=dout_271&dout_270;
   dout_274=dout_271^dout_270;
   dout_275=dout_272|dout_273;
   dout_276=dout_239^dout_251;
   dout_277=dout_239&dout_251;
   dout_278=dout_276&dout_275;
   dout_279=dout_276^dout_275;
   dout_280=dout_277|dout_278;
   dout_281=dout_244^dout_252;
   dout_282=dout_244&dout_252;
   dout_283=dout_281&dout_280;
   dout_284=dout_281^dout_280;
   dout_285=dout_282|dout_283;
   dout_286=dout_245^dout_253;
   dout_287=dout_245&((A >> 6)&1);
   dout_288=((B >> 7)&1)&dout_285;
   dout_289=dout_286^dout_285;
   dout_290=dout_287|dout_288;
   dout_291=((B >> 0)&1)&((A >> 7)&1);
   dout_292=((B >> 1)&1)&((A >> 7)&1);
   dout_293=((B >> 2)&1)&((A >> 7)&1);
   dout_294=((B >> 3)&1)&((A >> 7)&1);
   dout_295=((B >> 4)&1)&((A >> 7)&1);
   dout_296=((B >> 5)&1)&((A >> 7)&1);
   dout_297=((B >> 6)&1)&((A >> 7)&1);
   dout_298=((B >> 7)&1)&((A >> 7)&1);
   dout_299=dout_259^dout_291;
   dout_300=dout_259&dout_291;
   dout_301=dout_264^dout_292;
   dout_302=dout_264&dout_292;
   dout_303=dout_301&dout_300;
   dout_304=dout_301^dout_300;
   dout_305=dout_302|dout_303;
   dout_306=dout_269^dout_293;
   dout_307=dout_269&dout_293;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_274^dout_294;
   dout_312=dout_274&dout_294;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_279^dout_295;
   dout_317=dout_279&dout_295;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_284^dout_296;
   dout_322=dout_284&dout_296;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_289^dout_297;
   dout_327=dout_289&dout_297;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_290^dout_298;
   dout_332=dout_290&((A >> 7)&1);
   dout_333=((B >> 7)&1)&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_16&1) << 0;
   O |= (dout_32&1) << 1;
   O |= (dout_74&1) << 2;
   O |= (dout_119&1) << 3;
   O |= (dout_164&1) << 4;
   O |= (dout_209&1) << 5;
   O |= (dout_254&1) << 6;
   O |= (dout_299&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 4.45 %
// MAE = 5.7 
// WCE% = 15.62 %
// WCE = 20 
// WCRE% = 800.00 %
// EP% = 94.39 %
// MRE% = 23.64 %
// MSE = 49 
// PDK45_PWR = 0.020 mW
// PDK45_AREA = 51.2 um2
// PDK45_DELAY = 0.44 ns


uint64_t evoapproxlib::evoapprox_t::add8s_6UC(const uint64_t B,const uint64_t A)
{
   uint64_t dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_35, dout_37, dout_38, dout_39, dout_44, dout_46, dout_47, dout_49, dout_50, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_60, dout_61, dout_62, dout_63, dout_64;
   uint64_t O;

   dout_23=((A >> 3)&1)|((B >> 3)&1);
   dout_24=((A >> 4)&1)&((B >> 4)&1);
   dout_25=((A >> 4)&1)^((B >> 4)&1);
   dout_26=((A >> 5)&1)&((B >> 5)&1);
   dout_27=((A >> 5)&1)^((B >> 5)&1);
   dout_28=((A >> 6)&1)&((B >> 6)&1);
   dout_29=((A >> 6)&1)^((B >> 6)&1);
   dout_30=((A >> 7)&1)^((B >> 7)&1);
   dout_35=dout_25&dout_23;
   dout_37=dout_29&dout_26;
   dout_38=dout_29&dout_27;
   dout_39=dout_28|dout_37;
   dout_44=dout_27&dout_24;
   dout_46=dout_26|dout_44;
   dout_47=dout_38&dout_24;
   dout_49=dout_39|dout_47;
   dout_50=dout_35&((A >> 7)&1);
   dout_52=dout_35&((A >> 7)&1);
   dout_53=dout_24|dout_50;
   dout_54=dout_27&dout_52;
   dout_55=dout_46|dout_54;
   dout_56=dout_38&dout_52;
   dout_57=dout_49|dout_56;
   dout_60=dout_50^dout_23;
   dout_61=dout_25^dout_50;
   dout_62=dout_27^dout_53;
   dout_63=dout_29^dout_55;
   dout_64=dout_30^dout_57;

   O = 0;
   O |= (0&1) << 0;
   O |= (dout_60&1) << 1;
   O |= (dout_62&1) << 2;
   O |= (dout_60&1) << 3;
   O |= (dout_61&1) << 4;
   O |= (dout_62&1) << 5;
   O |= (dout_63&1) << 6;
   O |= (dout_64&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mse parameters
***/
// MAE% = 0.065 %
// MAE = 42 
// WCE% = 0.25 %
// WCE = 161 
// WCRE% = 150.00 %
// EP% = 96.37 %
// MRE% = 1.90 %
// MSE = 2764 
// PDK45_PWR = 0.276 mW
// PDK45_AREA = 511.5 um2
// PDK45_DELAY = 1.37 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_NGR(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_22, dout_23, dout_27, dout_29, dout_30, dout_33, dout_42, dout_43, dout_44, dout_45, dout_50, dout_51, dout_52, dout_53, dout_74, dout_75, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_87, dout_88, dout_92, dout_93, dout_94, dout_95, dout_96, dout_110, dout_113, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_135, dout_136, dout_137, dout_138, dout_139, dout_155, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_171, dout_172, dout_173, dout_174, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_228, dout_229, dout_230, dout_231, dout_232, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_27=((B >> 2)&1)&((A >> 4)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_33=((B >> 7)&1)&((A >> 1)&1);
   dout_42=dout_22|dout_29;
   dout_43=dout_22&dout_29;
   dout_44=dout_23^dout_30;
   dout_45=dout_23&dout_30;
   dout_50=((B >> 4)&1)&((A >> 2)&1);
   dout_51=((B >> 5)&1)&((A >> 2)&1);
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_74=dout_42|dout_50;
   dout_75=dout_42&dout_50;
   dout_79=dout_44^dout_51;
   dout_80=dout_44&dout_51;
   dout_81=dout_79&dout_43;
   dout_82=dout_79^dout_43;
   dout_83=dout_80|dout_81;
   dout_84=dout_33^dout_52;
   dout_85=dout_33&dout_52;
   dout_87=dout_84^dout_45;
   dout_88=dout_85|dout_45;
   dout_92=((B >> 3)&1)&((A >> 3)&1);
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_110=dout_74|dout_92;
   dout_113=dout_74&dout_92;
   dout_117=dout_82^dout_93;
   dout_118=dout_82&dout_93;
   dout_119=dout_117&dout_75;
   dout_120=dout_117^dout_75;
   dout_121=dout_118|dout_119;
   dout_122=dout_87^dout_94;
   dout_123=dout_87&dout_94;
   dout_124=dout_122&dout_83;
   dout_125=dout_122^dout_83;
   dout_126=dout_123|dout_124;
   dout_127=dout_53^dout_95;
   dout_128=dout_53&dout_95;
   dout_129=dout_127&dout_88;
   dout_130=dout_127^dout_88;
   dout_131=dout_128|dout_129;
   dout_135=((B >> 3)&1)&((A >> 4)&1);
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_155=dout_120^dout_135;
   dout_156=dout_120&dout_135;
   dout_157=dout_155&dout_113;
   dout_158=dout_155^dout_113;
   dout_159=dout_156|dout_157;
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_121;
   dout_163=dout_160^dout_121;
   dout_164=dout_161|dout_162;
   dout_165=dout_130^dout_137;
   dout_166=dout_130&dout_137;
   dout_167=dout_165&dout_126;
   dout_168=dout_165^dout_126;
   dout_169=dout_166|dout_167;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_172=dout_170&dout_131;
   dout_173=dout_170^dout_131;
   dout_174=dout_171|dout_172;
   dout_176=((B >> 1)&1)&((A >> 5)&1);
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_193=dout_158^dout_177;
   dout_194=dout_158&dout_177;
   dout_195=dout_193&dout_27;
   dout_196=dout_193^dout_27;
   dout_197=dout_194|dout_195;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_159;
   dout_201=dout_198^dout_159;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_218=((B >> 0)&1)&((A >> 6)&1);
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_228=dout_218&dout_110;
   dout_229=dout_218|dout_110;
   dout_230=dout_176|dout_228;
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_197;
   dout_239=dout_236^dout_197;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_231^dout_261;
   dout_270=dout_231&dout_261;
   dout_271=dout_269&dout_230;
   dout_272=dout_269^dout_230;
   dout_273=dout_270|dout_271;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_232;
   dout_277=dout_274^dout_232;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_304=dout_277^dout_273;
   dout_305=dout_277&dout_273;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_302^dout_298;
   dout_327=dout_302&dout_298;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_268^dout_303;
   dout_332=((A >> 7)&1)&dout_303;
   dout_333=dout_331&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_265&1) << 0;
   O |= (dout_207&1) << 1;
   O |= (dout_74&1) << 2;
   O |= (dout_229&1) << 3;
   O |= (0&1) << 4;
   O |= (dout_176&1) << 5;
   O |= (dout_229&1) << 6;
   O |= (dout_272&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 14.06 %
// MAE = 72 
// WCE% = 42.38 %
// WCE = 217 
// WCRE% = 1300.00 %
// EP% = 99.61 %
// MRE% = 35.29 %
// MSE = 7477 
// PDK45_PWR = 0.000 mW
// PDK45_AREA = 0.0 um2
// PDK45_DELAY = 0.00 ns


uint64_t evoapproxlib::evoapprox_t::add8u_04A(uint64_t a, uint64_t b) {
  int wa[8];
  int wb[8];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  int sig_22 = ~((int)0);
  int sig_23 = ~((int)0);
  int sig_24 = 0;
  int sig_29 = wa[7];
  y |=  (sig_29 & 0x01) << 0; // default output
  y |=  (wa[0] & 0x01) << 1; // default output
  y |=  (sig_23 & 0x01) << 2; // default output
  y |=  (sig_22 & 0x01) << 3; // default output
  y |=  (wa[5] & 0x01) << 4; // default output
  y |=  (wa[3] & 0x01) << 5; // default output
  y |=  (sig_24 & 0x01) << 6; // default output
  y |=  (wb[7] & 0x01) << 7; // default output
  y |=  (sig_29 & 0x01) << 8; // default output
   return y;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 3.20 %
// MAE = 16 
// WCE% = 19.34 %
// WCE = 99 
// WCRE% = 1000.00 %
// EP% = 89.23 %
// MRE% = 7.47 %
// MSE = 745 
// PDK45_PWR = 0.0092 mW
// PDK45_AREA = 35.2 um2
// PDK45_DELAY = 0.17 ns


uint64_t evoapproxlib::evoapprox_t::add8u_8BB(uint64_t a, uint64_t b) {
  int wa[8];
  int wb[8];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  int sig_21 = wa[2] ^ wb[2];
  int sig_22 = wa[4] | wb[4];
  int sig_23 = wa[0] | wb[0];
  int sig_35 = ~((int)0);
  int sig_37 = wa[5] ^ wb[5];
  int sig_39 = wa[5] & wb[5];
  int sig_42 = sig_39;
  int sig_43 = wa[6] ^ wb[6];
  int sig_44 = wa[6] & wb[6];
  int sig_46 = sig_43 | sig_42;
  int sig_47 = sig_44;
  int sig_48 = wa[7] ^ wb[7];
  int sig_49 = wa[7] & wb[7];
  int sig_50 = sig_48 & sig_47;
  int sig_51 = sig_48 ^ sig_47;
  int sig_52 = sig_49 | sig_50;
  y |=  (sig_23 & 0x01) << 0; // default output
  y |=  (sig_35 & 0x01) << 1; // default output
  y |=  (sig_21 & 0x01) << 2; // default output
  y |=  (sig_35 & 0x01) << 3; // default output
  y |=  (sig_22 & 0x01) << 4; // default output
  y |=  (sig_37 & 0x01) << 5; // default output
  y |=  (sig_46 & 0x01) << 6; // default output
  y |=  (sig_51 & 0x01) << 7; // default output
  y |=  (sig_52 & 0x01) << 8; // default output
   return y;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.78 %
// MAE = 1.0 
// WCE% = 1.56 %
// WCE = 2.0 
// WCRE% = 100.00 %
// EP% = 49.74 %
// MRE% = 4.35 %
// MSE = 2.0 
// PDK45_PWR = 0.032 mW
// PDK45_AREA = 71.8 um2
// PDK45_DELAY = 0.67 ns


uint64_t evoapproxlib::evoapprox_t::add8s_6SN(const uint64_t A /* 8-bit signed operand */, const uint64_t B /* 8-bit signed operand */)
{
   uint64_t dout_16, dout_17, dout_18, dout_19, dout_20, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49;
   uint64_t O;

   dout_16=((A >> 0)&1)^((B >> 0)&1);
   dout_17=((A >> 0)&1)&((B >> 0)&1);
   dout_18=((A >> 1)&1)^((B >> 1)&1);
   dout_19=((A >> 1)&1)&((B >> 1)&1);
   dout_20=dout_18&dout_17;
   dout_22=dout_19|dout_20;
   dout_23=((A >> 2)&1)^((B >> 2)&1);
   dout_24=((A >> 2)&1)&((B >> 2)&1);
   dout_25=dout_23&dout_22;
   dout_26=dout_23^dout_22;
   dout_27=dout_24|dout_25;
   dout_28=((A >> 3)&1)^((B >> 3)&1);
   dout_29=((A >> 3)&1)&((B >> 3)&1);
   dout_30=dout_28&dout_27;
   dout_31=dout_28^dout_27;
   dout_32=dout_29|dout_30;
   dout_33=((A >> 4)&1)^((B >> 4)&1);
   dout_34=((A >> 4)&1)&((B >> 4)&1);
   dout_35=dout_33&dout_32;
   dout_36=dout_33^dout_32;
   dout_37=dout_34|dout_35;
   dout_38=((A >> 5)&1)^((B >> 5)&1);
   dout_39=((A >> 5)&1)&((B >> 5)&1);
   dout_40=dout_38&dout_37;
   dout_41=dout_38^dout_37;
   dout_42=dout_39|dout_40;
   dout_43=((A >> 6)&1)^((B >> 6)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=dout_43&dout_42;
   dout_46=dout_43^dout_42;
   dout_47=dout_44|dout_45;
   dout_48=((A >> 7)&1)^((B >> 7)&1);
   dout_49=dout_48^dout_47;

   O = 0;
   O |= (dout_16&1) << 0;
   O |= (dout_49&1) << 1;
   O |= (dout_26&1) << 2;
   O |= (dout_31&1) << 3;
   O |= (dout_36&1) << 4;
   O |= (dout_41&1) << 5;
   O |= (dout_46&1) << 6;
   O |= (dout_49&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mse parameters
***/
// MAE% = 6.41 %
// MAE = 8.2 
// WCE% = 14.06 %
// WCE = 18 
// WCRE% = 1500.00 %
// EP% = 97.20 %
// MRE% = 39.40 %
// MSE = 89 
// PDK45_PWR = 0.017 mW
// PDK45_AREA = 38.0 um2
// PDK45_DELAY = 0.35 ns


uint64_t evoapproxlib::evoapprox_t::add8s_6YE(const uint64_t B,const uint64_t A)
{
   uint64_t dout_22, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_34, dout_36, dout_37, dout_38, dout_39, dout_42, dout_44, dout_53, dout_54, dout_58, dout_59, dout_60, dout_61;
   uint64_t O;

   dout_22=((A >> 7)&1)&((B >> 7)&1);
   dout_24=((A >> 4)&1)&((B >> 4)&1);
   dout_25=((A >> 4)&1)^((B >> 4)&1);
   dout_26=((A >> 5)&1)&((B >> 5)&1);
   dout_27=((A >> 5)&1)^((B >> 5)&1);
   dout_28=((A >> 6)&1)&((B >> 6)&1);
   dout_29=((A >> 6)&1)^((B >> 6)&1);
   dout_30=((A >> 7)&1)^((B >> 7)&1);
   dout_34=dout_25&dout_22;
   dout_36=dout_24|dout_34;
   dout_37=dout_29&dout_26;
   dout_38=dout_29&dout_27;
   dout_39=dout_28|dout_37;
   dout_42=dout_38&dout_36;
   dout_44=dout_39|dout_42;
   dout_53=dout_27&dout_36;
   dout_54=dout_26|dout_53;
   dout_58=dout_25^dout_22;
   dout_59=dout_27^dout_36;
   dout_60=dout_29^dout_54;
   dout_61=dout_30^dout_44;

   O = 0;
   O |= (0&1) << 0;
   O |= (dout_61&1) << 1;
   O |= (((B >> 2)&1)&1) << 2;
   O |= (((A >> 3)&1)&1) << 3;
   O |= (dout_58&1) << 4;
   O |= (dout_59&1) << 5;
   O |= (dout_60&1) << 6;
   O |= (dout_61&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.0046 %
// MAE = 3.0 
// WCE% = 0.017 %
// WCE = 11 
// WCRE% = 100.00 %
// EP% = 75.00 %
// MRE% = 0.18 %
// MSE = 17 
// PDK45_PWR = 0.370 mW
// PDK45_AREA = 637.8 um2
// PDK45_DELAY = 1.40 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_KEM(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_19, dout_20, dout_21, dout_22, dout_23, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_59, dout_60, dout_64, dout_65, dout_66, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_87, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_98, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110, dout_111, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143, dout_144, dout_145, dout_146, dout_147, dout_148, dout_149, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_171, dout_172, dout_173, dout_174, dout_175, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_183, dout_184, dout_185, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_19=((B >> 3)&1)&((A >> 0)&1);
   dout_20=((B >> 4)&1)&((A >> 0)&1);
   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_26=((B >> 2)&1)&((A >> 1)&1);
   dout_27=((B >> 3)&1)&((A >> 1)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_35=((B >> 6)&1)&dout_31;
   dout_36=dout_19|dout_26;
   dout_37=dout_19&dout_26;
   dout_38=dout_20^dout_27;
   dout_39=dout_20&dout_27;
   dout_40=dout_21^dout_28;
   dout_41=dout_21&dout_28;
   dout_42=dout_22^dout_29;
   dout_43=dout_22&dout_29;
   dout_44=dout_23^dout_30;
   dout_45=((A >> 0)&1)&dout_35;
   dout_47=((B >> 1)&1)&((A >> 2)&1);
   dout_48=((B >> 2)&1)&((A >> 2)&1);
   dout_49=((B >> 3)&1)&((A >> 2)&1);
   dout_50=((B >> 4)&1)&((A >> 2)&1);
   dout_51=((B >> 5)&1)&((A >> 2)&1);
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_59=dout_36|dout_47;
   dout_60=dout_36&dout_47;
   dout_64=dout_38^dout_48;
   dout_65=dout_38&dout_48;
   dout_66=dout_64&dout_37;
   dout_67=dout_64^dout_37;
   dout_68=dout_65|dout_66;
   dout_69=dout_40^dout_49;
   dout_70=dout_40&dout_49;
   dout_71=dout_69&dout_39;
   dout_72=dout_69^dout_39;
   dout_73=dout_70|dout_71;
   dout_74=dout_42^dout_50;
   dout_75=dout_42&dout_50;
   dout_76=dout_74&dout_41;
   dout_77=dout_74^dout_41;
   dout_78=dout_75|dout_76;
   dout_79=dout_44^dout_51;
   dout_80=dout_44&dout_51;
   dout_81=dout_79&dout_43;
   dout_82=dout_79^dout_43;
   dout_83=dout_80|dout_81;
   dout_84=dout_31^dout_52;
   dout_85=dout_35&dout_52;
   dout_87=dout_84^dout_45;
   dout_88=dout_85|dout_45;
   dout_89=((B >> 0)&1)&((A >> 3)&1);
   dout_90=((B >> 1)&1)&((A >> 3)&1);
   dout_91=((B >> 2)&1)&((A >> 3)&1);
   dout_92=((B >> 3)&1)&((A >> 3)&1);
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_97=dout_59|dout_89;
   dout_98=dout_59&dout_89;
   dout_102=dout_67^dout_90;
   dout_103=dout_67&dout_90;
   dout_104=dout_102&dout_60;
   dout_105=dout_102^dout_60;
   dout_106=dout_103|dout_104;
   dout_107=dout_72^dout_91;
   dout_108=dout_72&dout_91;
   dout_109=dout_107&dout_68;
   dout_110=dout_107^dout_68;
   dout_111=dout_108|dout_109;
   dout_112=dout_77^dout_92;
   dout_113=dout_77&dout_92;
   dout_114=dout_112&dout_73;
   dout_115=dout_112^dout_73;
   dout_116=dout_113|dout_114;
   dout_117=dout_82^dout_93;
   dout_118=dout_82&dout_93;
   dout_119=dout_117&dout_78;
   dout_120=dout_117^dout_78;
   dout_121=dout_118|dout_119;
   dout_122=dout_87^dout_94;
   dout_123=dout_87&dout_94;
   dout_124=dout_122&dout_83;
   dout_125=dout_122^dout_83;
   dout_126=dout_123|dout_124;
   dout_127=dout_53^dout_95;
   dout_128=dout_53&dout_95;
   dout_129=dout_127&dout_88;
   dout_130=dout_127^dout_88;
   dout_131=dout_128|dout_129;
   dout_132=((B >> 0)&1)&((A >> 4)&1);
   dout_133=((B >> 1)&1)&((A >> 4)&1);
   dout_134=((B >> 2)&1)&((A >> 4)&1);
   dout_135=((B >> 3)&1)&((A >> 4)&1);
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_140=dout_105^dout_132;
   dout_141=dout_105&dout_132;
   dout_142=dout_140&dout_98;
   dout_143=dout_140^dout_98;
   dout_144=dout_141|dout_142;
   dout_145=dout_110^dout_133;
   dout_146=dout_110&dout_133;
   dout_147=dout_145&dout_106;
   dout_148=dout_145^dout_106;
   dout_149=dout_146|dout_147;
   dout_150=dout_115^dout_134;
   dout_151=dout_115&dout_134;
   dout_152=dout_150&dout_111;
   dout_153=dout_150^dout_111;
   dout_154=dout_151|dout_152;
   dout_155=dout_120^dout_135;
   dout_156=dout_120&dout_135;
   dout_157=dout_155&dout_116;
   dout_158=dout_155^dout_116;
   dout_159=dout_156|dout_157;
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_121;
   dout_163=dout_160^dout_121;
   dout_164=dout_161|dout_162;
   dout_165=dout_130^dout_137;
   dout_166=dout_130&dout_137;
   dout_167=dout_165&dout_126;
   dout_168=dout_165^dout_126;
   dout_169=dout_166|dout_167;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_172=dout_170&dout_131;
   dout_173=dout_170^dout_131;
   dout_174=dout_171|dout_172;
   dout_175=((B >> 0)&1)&((A >> 5)&1);
   dout_176=((B >> 1)&1)&((A >> 5)&1);
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_183=dout_148^dout_175;
   dout_184=dout_148&dout_175;
   dout_185=dout_183&dout_144;
   dout_186=dout_183^dout_144;
   dout_187=dout_184|dout_185;
   dout_188=dout_153^dout_176;
   dout_189=dout_153&dout_176;
   dout_190=dout_188&dout_149;
   dout_191=dout_188^dout_149;
   dout_192=dout_189|dout_190;
   dout_193=dout_158^dout_177;
   dout_194=dout_158&dout_177;
   dout_195=dout_193&dout_154;
   dout_196=dout_193^dout_154;
   dout_197=dout_194|dout_195;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_159;
   dout_201=dout_198^dout_159;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_218=((B >> 0)&1)&((A >> 6)&1);
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_226=dout_191^dout_218;
   dout_227=dout_191&dout_218;
   dout_228=dout_226&dout_187;
   dout_229=dout_226^dout_187;
   dout_230=dout_227|dout_228;
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_233=dout_231&dout_192;
   dout_234=dout_231^dout_192;
   dout_235=dout_232|dout_233;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_197;
   dout_239=dout_236^dout_197;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_234^dout_261;
   dout_270=dout_234&dout_261;
   dout_271=dout_269&dout_230;
   dout_272=dout_269^dout_230;
   dout_273=dout_270|dout_271;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_235;
   dout_277=dout_274^dout_235;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_304=dout_277^dout_273;
   dout_305=dout_277&dout_273;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_302^dout_298;
   dout_327=dout_302&dout_298;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_268^dout_303;
   dout_332=((A >> 7)&1)&dout_303;
   dout_333=dout_331&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (0&1) << 0;
   O |= (dout_97&1) << 1;
   O |= (0&1) << 2;
   O |= (dout_97&1) << 3;
   O |= (dout_143&1) << 4;
   O |= (dout_186&1) << 5;
   O |= (dout_229&1) << 6;
   O |= (dout_272&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 1.05 %
// MAE = 5.4 
// WCE% = 3.12 %
// WCE = 16 
// WCRE% = 800.00 %
// EP% = 94.14 %
// MRE% = 2.93 %
// MSE = 44 
// PDK45_PWR = 0.012 mW
// PDK45_AREA = 28.2 um2
// PDK45_DELAY = 0.27 ns


uint64_t evoapproxlib::evoapprox_t::add8u_5SY(uint64_t a, uint64_t b)
{
  uint16_t c = 0;
  uint8_t n4 = (a >> 2) & 0x1;
  uint8_t n6 = (a >> 3) & 0x1;
  uint8_t n8 = (a >> 4) & 0x1;
  uint8_t n10 = (a >> 5) & 0x1;
  uint8_t n12 = (a >> 6) & 0x1;
  uint8_t n14 = (a >> 7) & 0x1;
  uint8_t n16 = (b >> 0) & 0x1;
  uint8_t n20 = (b >> 2) & 0x1;
  uint8_t n24 = (b >> 4) & 0x1;
  uint8_t n26 = (b >> 5) & 0x1;
  uint8_t n28 = (b >> 6) & 0x1;
  uint8_t n30 = (b >> 7) & 0x1;
  uint8_t n108;
  uint8_t n282;
  uint8_t n283;
  uint8_t n332;
  uint8_t n333;
  uint8_t n382;
  uint8_t n383;

  n108 = ~((n20 | n24) & n24);
  n282 = (n10 ^ n26) ^ n24;
  n283 = (n10 & n26) | (n26 & n24) | (n10 & n24);
  n332 = (n12 ^ n28) ^ n283;
  n333 = (n12 & n28) | (n28 & n283) | (n12 & n283);
  n382 = (n14 ^ n30) ^ n333;
  n383 = (n14 & n30) | (n30 & n333) | (n14 & n333);

  c |= (n16 & 0x1) << 0;
  c |= (n4 & 0x1) << 1;
  c |= (n6 & 0x1) << 2;
  c |= (n108 & 0x1) << 3;
  c |= (n8 & 0x1) << 4;
  c |= (n282 & 0x1) << 5;
  c |= (n332 & 0x1) << 6;
  c |= (n382 & 0x1) << 7;
  c |= (n383 & 0x1) << 8;

  return c;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 0.0014 %
// MAE = 0.91 
// WCE% = 0.015 %
// WCE = 10 
// WCRE% = 28.57 %
// EP% = 19.53 %
// MRE% = 0.033 %
// MSE = 5.0 
// PDK45_PWR = 0.380 mW
// PDK45_AREA = 663.6 um2
// PDK45_DELAY = 1.40 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_LM7(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_16, dout_17, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_34, dout_35, dout_36, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_59, dout_63, dout_64, dout_65, dout_66, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_87, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_98, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110, dout_111, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143, dout_144, dout_145, dout_146, dout_147, dout_148, dout_149, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_171, dout_172, dout_173, dout_174, dout_175, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_183, dout_184, dout_185, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_16=((B >> 0)&1)&((A >> 0)&1);
   dout_17=((B >> 1)&1)&((A >> 0)&1);
   dout_18=((B >> 2)&1)&((A >> 0)&1);
   dout_19=((B >> 3)&1)&((A >> 0)&1);
   dout_20=((B >> 4)&1)&((A >> 0)&1);
   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_24=((B >> 0)&1)&((A >> 1)&1);
   dout_25=((B >> 1)&1)&((A >> 1)&1);
   dout_26=((B >> 2)&1)&((A >> 1)&1);
   dout_27=((B >> 3)&1)&((A >> 1)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_32=dout_17|dout_24;
   dout_34=dout_18|dout_25;
   dout_35=dout_19&dout_26;
   dout_36=dout_19|dout_26;
   dout_38=dout_20^dout_27;
   dout_39=dout_20&dout_27;
   dout_40=dout_21^dout_28;
   dout_41=dout_21&dout_28;
   dout_42=dout_22^dout_29;
   dout_43=dout_22&dout_29;
   dout_44=dout_23^dout_30;
   dout_45=dout_31&dout_22;
   dout_46=((B >> 0)&1)&((A >> 2)&1);
   dout_47=((B >> 1)&1)&((A >> 2)&1);
   dout_48=((B >> 2)&1)&((A >> 2)&1);
   dout_49=((B >> 3)&1)&((A >> 2)&1);
   dout_50=((B >> 4)&1)&((A >> 2)&1);
   dout_51=((B >> 5)&1)&((A >> 2)&1);
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_54=dout_34|dout_46;
   dout_59=dout_36^dout_47;
   dout_63=dout_36&dout_47;
   dout_64=dout_38^dout_48;
   dout_65=dout_38&dout_48;
   dout_66=dout_64&dout_35;
   dout_67=dout_64^dout_35;
   dout_68=dout_65|dout_66;
   dout_69=dout_40^dout_49;
   dout_70=dout_40&dout_49;
   dout_71=dout_69&dout_39;
   dout_72=dout_69^dout_39;
   dout_73=dout_70|dout_71;
   dout_74=dout_42^dout_50;
   dout_75=dout_42&dout_50;
   dout_76=dout_74&dout_41;
   dout_77=dout_74^dout_41;
   dout_78=dout_75|dout_76;
   dout_79=dout_44^dout_51;
   dout_80=dout_44&dout_51;
   dout_81=dout_79&dout_43;
   dout_82=dout_79^dout_43;
   dout_83=dout_80|dout_81;
   dout_84=dout_31^dout_52;
   dout_85=dout_31&dout_52;
   dout_87=dout_84^dout_45;
   dout_88=dout_85|dout_45;
   dout_89=((B >> 0)&1)&((A >> 3)&1);
   dout_90=((B >> 1)&1)&((A >> 3)&1);
   dout_91=((B >> 2)&1)&((A >> 3)&1);
   dout_92=((B >> 3)&1)&((A >> 3)&1);
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_97=dout_59^dout_89;
   dout_98=dout_59&dout_89;
   dout_102=dout_67^dout_90;
   dout_103=dout_67&dout_90;
   dout_104=dout_102&dout_63;
   dout_105=dout_102^dout_63;
   dout_106=dout_103|dout_104;
   dout_107=dout_72^dout_91;
   dout_108=dout_72&dout_91;
   dout_109=dout_107&dout_68;
   dout_110=dout_107^dout_68;
   dout_111=dout_108|dout_109;
   dout_112=dout_77^dout_92;
   dout_113=dout_77&dout_92;
   dout_114=dout_112&dout_73;
   dout_115=dout_112^dout_73;
   dout_116=dout_113|dout_114;
   dout_117=dout_82^dout_93;
   dout_118=dout_82&dout_93;
   dout_119=dout_117&dout_78;
   dout_120=dout_117^dout_78;
   dout_121=dout_118|dout_119;
   dout_122=dout_87^dout_94;
   dout_123=dout_87&dout_94;
   dout_124=dout_122&dout_83;
   dout_125=dout_122^dout_83;
   dout_126=dout_123|dout_124;
   dout_127=dout_53^dout_95;
   dout_128=dout_53&dout_95;
   dout_129=dout_127&dout_88;
   dout_130=dout_127^dout_88;
   dout_131=dout_128|dout_129;
   dout_132=((B >> 0)&1)&((A >> 4)&1);
   dout_133=((B >> 1)&1)&((A >> 4)&1);
   dout_134=((B >> 2)&1)&((A >> 4)&1);
   dout_135=((B >> 3)&1)&((A >> 4)&1);
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_140=dout_105^dout_132;
   dout_141=dout_105&dout_132;
   dout_142=dout_140&dout_98;
   dout_143=dout_140^dout_98;
   dout_144=dout_141|dout_142;
   dout_145=dout_110^dout_133;
   dout_146=dout_110&dout_133;
   dout_147=dout_145&dout_106;
   dout_148=dout_145^dout_106;
   dout_149=dout_146|dout_147;
   dout_150=dout_115^dout_134;
   dout_151=dout_115&dout_134;
   dout_152=dout_150&dout_111;
   dout_153=dout_150^dout_111;
   dout_154=dout_151|dout_152;
   dout_155=dout_120^dout_135;
   dout_156=dout_120&dout_135;
   dout_157=dout_155&dout_116;
   dout_158=dout_155^dout_116;
   dout_159=dout_156|dout_157;
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_121;
   dout_163=dout_160^dout_121;
   dout_164=dout_161|dout_162;
   dout_165=dout_130^dout_137;
   dout_166=dout_130&dout_137;
   dout_167=dout_165&dout_126;
   dout_168=dout_165^dout_126;
   dout_169=dout_166|dout_167;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_172=dout_170&dout_131;
   dout_173=dout_170^dout_131;
   dout_174=dout_171|dout_172;
   dout_175=((B >> 0)&1)&((A >> 5)&1);
   dout_176=((B >> 1)&1)&((A >> 5)&1);
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_183=dout_148^dout_175;
   dout_184=dout_148&dout_175;
   dout_185=dout_183&dout_144;
   dout_186=dout_183^dout_144;
   dout_187=dout_184|dout_185;
   dout_188=dout_153^dout_176;
   dout_189=dout_153&dout_176;
   dout_190=dout_188&dout_149;
   dout_191=dout_188^dout_149;
   dout_192=dout_189|dout_190;
   dout_193=dout_158^dout_177;
   dout_194=dout_158&dout_177;
   dout_195=dout_193&dout_154;
   dout_196=dout_193^dout_154;
   dout_197=dout_194|dout_195;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_159;
   dout_201=dout_198^dout_159;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_218=((B >> 0)&1)&((A >> 6)&1);
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_226=dout_191^dout_218;
   dout_227=dout_191&dout_218;
   dout_228=dout_226&dout_187;
   dout_229=dout_226^dout_187;
   dout_230=dout_227|dout_228;
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_233=dout_231&dout_192;
   dout_234=dout_231^dout_192;
   dout_235=dout_232|dout_233;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_197;
   dout_239=dout_236^dout_197;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_234^dout_261;
   dout_270=dout_234&dout_261;
   dout_271=dout_269&dout_230;
   dout_272=dout_269^dout_230;
   dout_273=dout_270|dout_271;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_235;
   dout_277=dout_274^dout_235;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_304=dout_277^dout_273;
   dout_305=dout_277&dout_273;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_302^dout_298;
   dout_327=dout_302&dout_298;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_268^dout_303;
   dout_332=((A >> 7)&1)&dout_303;
   dout_333=dout_331&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_16&1) << 0;
   O |= (dout_32&1) << 1;
   O |= (dout_54&1) << 2;
   O |= (dout_97&1) << 3;
   O |= (dout_143&1) << 4;
   O |= (dout_186&1) << 5;
   O |= (dout_229&1) << 6;
   O |= (dout_272&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mse parameters
***/
// MAE% = 0.017 %
// MAE = 11 
// WCE% = 0.082 %
// WCE = 54 
// WCRE% = 200.00 %
// EP% = 74.80 %
// MRE% = 0.51 %
// MSE = 241 
// PDK45_PWR = 0.344 mW
// PDK45_AREA = 624.2 um2
// PDK45_DELAY = 1.40 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_QJD(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_16, dout_17, dout_18, dout_21, dout_22, dout_23, dout_28, dout_29, dout_30, dout_31, dout_32, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_47, dout_49, dout_50, dout_51, dout_52, dout_53, dout_67, dout_69, dout_70, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_87, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_102, dout_103, dout_107, dout_108, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_145, dout_146, dout_147, dout_148, dout_149, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_171, dout_172, dout_173, dout_174, dout_175, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_183, dout_184, dout_185, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_16=((B >> 0)&1)&((A >> 0)&1);
   dout_17=((B >> 1)&1)&((A >> 0)&1);
   dout_18=((B >> 0)&1)&((A >> 1)&1);
   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_32=dout_18|dout_17;
   dout_40=dout_21|dout_28;
   dout_41=dout_21&dout_28;
   dout_42=dout_22^dout_29;
   dout_43=dout_22&dout_29;
   dout_44=dout_23^dout_30;
   dout_45=dout_23&dout_30;
   dout_47=((B >> 1)&1)&((A >> 2)&1);
   dout_49=((B >> 3)&1)&((A >> 2)&1);
   dout_50=((B >> 4)&1)&((A >> 2)&1);
   dout_51=((B >> 5)&1)&((A >> 2)&1);
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_67=((B >> 2)&1)&((A >> 2)&1);
   dout_69=dout_40|dout_49;
   dout_70=dout_40&dout_49;
   dout_74=dout_42^dout_50;
   dout_75=dout_42&dout_50;
   dout_76=dout_74&dout_41;
   dout_77=dout_74^dout_41;
   dout_78=dout_75|dout_76;
   dout_79=dout_44^dout_51;
   dout_80=dout_44&dout_51;
   dout_81=dout_79&dout_43;
   dout_82=dout_79^dout_43;
   dout_83=dout_80|dout_81;
   dout_84=dout_31^dout_52;
   dout_85=dout_31&dout_52;
   dout_87=dout_84^dout_45;
   dout_88=dout_85|dout_45;
   dout_89=((B >> 0)&1)&((A >> 3)&1);
   dout_90=((B >> 1)&1)&((A >> 3)&1);
   dout_91=((B >> 2)&1)&((A >> 3)&1);
   dout_92=((B >> 3)&1)&((A >> 3)&1);
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_97=dout_47|dout_89;
   dout_102=dout_67|dout_90;
   dout_103=dout_67&dout_90;
   dout_107=dout_69^dout_91;
   dout_108=dout_69&dout_91;
   dout_112=dout_77^dout_92;
   dout_113=dout_77&dout_92;
   dout_114=dout_112&dout_70;
   dout_115=dout_112^dout_70;
   dout_116=dout_113|dout_114;
   dout_117=dout_82^dout_93;
   dout_118=dout_82&dout_93;
   dout_119=dout_117&dout_78;
   dout_120=dout_117^dout_78;
   dout_121=dout_118|dout_119;
   dout_122=dout_87^dout_94;
   dout_123=dout_87&dout_94;
   dout_124=dout_122&dout_83;
   dout_125=dout_122^dout_83;
   dout_126=dout_123|dout_124;
   dout_127=dout_53^dout_95;
   dout_128=dout_53&dout_95;
   dout_129=dout_127&dout_88;
   dout_130=dout_127^dout_88;
   dout_131=dout_128|dout_129;
   dout_132=((B >> 0)&1)&((A >> 4)&1);
   dout_133=((B >> 1)&1)&((A >> 4)&1);
   dout_134=((B >> 2)&1)&((A >> 4)&1);
   dout_135=((B >> 3)&1)&((A >> 4)&1);
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_140=dout_102|dout_132;
   dout_141=dout_102&dout_132;
   dout_145=dout_107^dout_133;
   dout_146=dout_107&dout_133;
   dout_147=dout_145&dout_103;
   dout_148=dout_145^dout_103;
   dout_149=dout_146|dout_147;
   dout_150=dout_115^dout_134;
   dout_151=dout_115&dout_134;
   dout_152=dout_150&dout_108;
   dout_153=dout_150^dout_108;
   dout_154=dout_151|dout_152;
   dout_155=dout_120^dout_135;
   dout_156=dout_120&dout_135;
   dout_157=dout_155&dout_116;
   dout_158=dout_155^dout_116;
   dout_159=dout_156|dout_157;
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_121;
   dout_163=dout_160^dout_121;
   dout_164=dout_161|dout_162;
   dout_165=dout_130^dout_137;
   dout_166=dout_130&dout_137;
   dout_167=dout_165&dout_126;
   dout_168=dout_165^dout_126;
   dout_169=dout_166|dout_167;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_172=dout_170&dout_131;
   dout_173=dout_170^dout_131;
   dout_174=dout_171|dout_172;
   dout_175=((B >> 0)&1)&((A >> 5)&1);
   dout_176=((B >> 1)&1)&((A >> 5)&1);
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_183=dout_148^dout_175;
   dout_184=dout_148&dout_175;
   dout_185=dout_183&dout_141;
   dout_186=dout_183^dout_141;
   dout_187=dout_184|dout_185;
   dout_188=dout_153^dout_176;
   dout_189=dout_153&dout_176;
   dout_190=dout_188&dout_149;
   dout_191=dout_188^dout_149;
   dout_192=dout_189|dout_190;
   dout_193=dout_158^dout_177;
   dout_194=dout_158&dout_177;
   dout_195=dout_193&dout_154;
   dout_196=dout_193^dout_154;
   dout_197=dout_194|dout_195;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_159;
   dout_201=dout_198^dout_159;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_218=((B >> 0)&1)&((A >> 6)&1);
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_226=dout_191^dout_218;
   dout_227=dout_191&dout_218;
   dout_228=dout_226&dout_187;
   dout_229=dout_226^dout_187;
   dout_230=dout_227|dout_228;
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_233=dout_231&dout_192;
   dout_234=dout_231^dout_192;
   dout_235=dout_232|dout_233;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_197;
   dout_239=dout_236^dout_197;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_234^dout_261;
   dout_270=dout_234&dout_261;
   dout_271=dout_269&dout_230;
   dout_272=dout_269^dout_230;
   dout_273=dout_270|dout_271;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_235;
   dout_277=dout_274^dout_235;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_304=dout_277^dout_273;
   dout_305=dout_277&dout_273;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_302^dout_298;
   dout_327=dout_302&dout_298;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_268^dout_303;
   dout_332=dout_268&dout_303;
   dout_333=dout_331&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_16&1) << 0;
   O |= (dout_32&1) << 1;
   O |= (dout_17&1) << 2;
   O |= (dout_97&1) << 3;
   O |= (dout_140&1) << 4;
   O |= (dout_186&1) << 5;
   O |= (dout_229&1) << 6;
   O |= (dout_272&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.52 %
// MAE = 340 
// WCE% = 2.66 %
// WCE = 1743 
// WCRE% = 6300.00 %
// EP% = 97.75 %
// MRE% = 27.44 %
// MSE = 191238 
// PDK45_PWR = 0.126 mW
// PDK45_AREA = 284.9 um2
// PDK45_DELAY = 0.94 ns


int16_t evoapproxlib::evoapprox_t::mul8s_1L1G(int8_t A, int8_t B)
{
 uint16_t O;
 uint8_t n38,n39,O10,n95,O5,n36,n37,O2,n132,n133,n130,n131,n136,n137,n134,n135,n138,n139,n111,O1,n151,O4,n84,n87,n86,n81,n80,n83,n82,n89,n129,n128,n125,n124,n127,n126,n121,n120,n123,n122,n88,n98,n99,n92,n93,n90,n91,n96,n97,n94,O0,n158,n159,n150,n152,n153,n154,n155,n156,n157,n67,n66,n65,n63,n62,n61,n60,n69,n68,O15,O3,n149,n148,n143,n142,n141,n147,n146,n145,n144,n74,n75,n76,n77,n70,n71,n72,n73,O9,n78,n79,n174,n172,O6,n170,n171,n49,n48,n40,n43,n42,n45,n44,n47,O8,n161,n160,n163,n162,n165,n167,n166,n169,n168,O14,O11,n58,n59,n56,n57,n54,n55,n52,n53,n50,n51,n114,n115,n116,n117,n110,n113,O12,n118,n119,O13,n100,O7,n107,n106,n105,n104,n103,n102,n101,n109,n108;
 O0=0;
 O1=0;
 O2=0;
 O3=0;
 O4=0;
 O5=0;
 O6=((B >> 3)&1)&((A >> 3)&1);
 n109=((B >> 6)&1)&((A >> 5)&1);
 n110=((B >> 7)&1)&((A >> 4)&1);
 n111=((B >> 5)&1)&((A >> 6)&1);
 n126=((B >> 5)&1)&((A >> 7)&1);
 n134=((B >> 6)&1)&((A >> 6)&1);
 n137=~(((A >> 5)&1)|((A >> 4)&1));
 n161=((B >> 7)&1)&((A >> 6)&1);
 n163=((B >> 6)&1)&((A >> 7)&1);
 n172=((B >> 7)&1)&((A >> 7)&1);
 n37=((B >> 4)&1)&((A >> 4)&1);
 n39=((B >> 3)&1)&((A >> 4)&1);
 n40=((B >> 4)&1)&((A >> 3)&1);
 n43=((B >> 3)&1)&((A >> 5)&1);
 n45=((B >> 5)&1)&((A >> 3)&1);
 n56=((B >> 6)&1)&((A >> 4)&1);
 n58=((B >> 5)&1)&((A >> 4)&1);
 n59=((B >> 6)&1)&((A >> 3)&1);
 n62=((B >> 4)&1)&((A >> 5)&1);
 n63=((B >> 3)&1)&((A >> 6)&1);
 n71=((B >> 3)&1)&((A >> 7)&1);
 n81=((B >> 5)&1)&((A >> 5)&1);
 n83=((B >> 7)&1)&((A >> 3)&1);
 n84=((B >> 4)&1)&((A >> 6)&1);
 n98=((B >> 4)&1)&((A >> 7)&1);
 n108=~n83&n56;
 n132=n109&n110;
 n136=((B >> 7)&1)&~n137;
 n138=((A >> 5)&1)&n110;
 n36=n37&O6;
 n38=~(n40|n39);
 n44=n45^n37;
 n55=n56&n45;
 n57=~(n59|n58);
 n61=n45&n37;
 n82=~(n83^n56);
 O7=~(n38|n36);
 n103=n81&n55;
 n104=n81&n82;
 n105=n82&n55;
 n107=~(n109^n108);
 n131=n109&n108;
 n133=n110&n108;
 n135=~n138&n136;
 n160=~(n161|n136);
 n162=((A >> 6)&1)&n136;
 n42=~(n43^n36);
 n50=n43&n36;
 n51=n43&n44;
 n52=n44&n36;
 n54=~(n57|n55);
 n60=~(n62^n61);
 n77=n62&n61;
 n80=~(n81^n55);
 O8=~(n44^n42);
 n102=~(n104|n103);
 n106=n110^n107;
 n130=~(n132|n131);
 n157=n134&n135;
 n159=~(n162|n160);
 n171=~(n172^n160);
 n49=~(n51|n50);
 n53=n60^n54;
 n76=n62&n54;
 n78=n61&n54;
 n79=n82^n80;
 n101=~n105&n102;
 n124=n111&~n106;
 n129=~n133&n130;
 n48=~n52&n49;
 n69=n63&~n53;
 n75=~(n77|n76);
 n96=n84&~n79;
 n100=~(n106^n101);
 n123=~(n106|n101);
 n125=n111&~n101;
 n128=n134^n129;
 n156=n134&~n129;
 n158=n135&~n129;
 n47=~(n53^n48);
 n68=~(n53|n48);
 n70=n63&~n48;
 n74=~n78&n75;
 O9=~(n63^n47);
 n122=~(n124|n123);
 n127=n135^n128;
 n155=~(n157|n156);
 n67=~(n69|n68);
 n73=~(n79^n74);
 n95=~(n79|n74);
 n97=n84&~n74;
 n99=n111^n100;
 n117=~(n98|n99);
 n121=~n125&n122;
 n150=~(n126|n127);
 n154=~n158&n155;
 n66=~n70&n67;
 n72=n84^n73;
 n94=~(n96|n95);
 n120=~(n126^n121);
 n149=~(n126|n121);
 n151=~(n127|n121);
 n153=n159^n154;
 n65=~(n71^n66);
 n88=~(n71|n66);
 n89=~(n71|n72);
 n90=~(n66|n72);
 n93=~n97&n94;
 O10=n72^n65;
 n116=~(n98|n93);
 n118=~(n99|n93);
 n119=~(n127^n120);
 n148=~(n150|n149);
 n152=~(n163^n153);
 n87=~(n89|n88);
 n92=~(n98^n93);
 n115=~(n117|n116);
 n147=~n151&n148;
 n86=~n90&n87;
 n91=~(n99^n92);
 O11=n91^n86;
 n114=~n118&n115;
 n139=~(n91|n86);
 n113=~(n119^n114);
 n144=~(n119|n114);
 n145=~n119&n139;
 n146=~n114&n139;
 O12=~(n139^n113);
 n143=~(n145|n144);
 n142=~n146&n143;
 n141=n147^n142;
 n168=n147&n142;
 O13=~(n152^n141);
 n167=n154&n168;
 n170=~(n154|n168);
 n166=~(n163|n167);
 n169=~(n159|n170);
 n165=n169&~n166;
 O14=n171^n165;
 n174=n160&~n165;
 O15=~(n172|n174);
 O = (O0 << 0)|(O1 << 1)|(O2 << 2)|(O3 << 3)|(O4 << 4)|(O5 << 5)|(O6 << 6)|(O7 << 7)|(O8 << 8)|(O9 << 9)|(O10 << 10)|(O11 << 11)|(O12 << 12)|(O13 << 13)|(O14 << 14)|(O15 << 15);
 return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 0.86 %
// MAE = 1.1 
// WCE% = 3.91 %
// WCE = 5.0 
// WCRE% = 100.00 %
// EP% = 66.85 %
// MRE% = 4.21 %
// MSE = 2.4 
// PDK45_PWR = 0.030 mW
// PDK45_AREA = 67.6 um2
// PDK45_DELAY = 0.58 ns


uint64_t evoapproxlib::evoapprox_t::add8s_6TR(const uint64_t A /* 8-bit signed operand */, const uint64_t B /* 8-bit signed operand */)
{
   uint64_t dout_16, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_50, dout_51, dout_52, dout_53, dout_54, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61;
   uint64_t O;

   dout_16=((A >> 7)&1)&((B >> 7)&1);
   dout_18=((A >> 1)&1)&((B >> 1)&1);
   dout_19=((A >> 1)&1)^((B >> 1)&1);
   dout_20=((A >> 2)&1)&((B >> 2)&1);
   dout_21=((A >> 2)&1)^((B >> 2)&1);
   dout_22=((A >> 3)&1)&((B >> 3)&1);
   dout_23=((A >> 3)&1)^((B >> 3)&1);
   dout_24=((A >> 4)&1)&((B >> 4)&1);
   dout_25=((A >> 4)&1)^((B >> 4)&1);
   dout_26=((A >> 5)&1)&((B >> 5)&1);
   dout_27=((A >> 5)&1)^((B >> 5)&1);
   dout_28=((A >> 6)&1)&((B >> 6)&1);
   dout_29=((A >> 6)&1)^((B >> 6)&1);
   dout_30=((A >> 7)&1)^((B >> 7)&1);
   dout_31=dout_21&dout_18;
   dout_33=dout_20|dout_31;
   dout_34=dout_25&dout_22;
   dout_35=dout_25&dout_23;
   dout_36=dout_24|dout_34;
   dout_37=dout_29&dout_26;
   dout_38=dout_29&dout_27;
   dout_39=dout_28|dout_37;
   dout_40=dout_21&dout_16;
   dout_41=dout_33|dout_40;
   dout_42=dout_38&dout_36;
   dout_43=dout_38&dout_35;
   dout_44=dout_39|dout_42;
   dout_45=dout_43&dout_41;
   dout_46=dout_44|dout_45;
   dout_47=dout_35&dout_41;
   dout_48=dout_36|dout_47;
   dout_50=dout_18|dout_16;
   dout_51=dout_23&dout_41;
   dout_52=dout_22|dout_51;
   dout_53=dout_27&dout_48;
   dout_54=dout_26|dout_53;
   dout_56=dout_21^dout_50;
   dout_57=dout_23^dout_41;
   dout_58=dout_25^dout_52;
   dout_59=dout_27^dout_48;
   dout_60=dout_29^dout_54;
   dout_61=dout_30^dout_46;

   O = 0;
   O |= (dout_58&1) << 0;
   O |= (dout_19&1) << 1;
   O |= (dout_56&1) << 2;
   O |= (dout_57&1) << 3;
   O |= (dout_58&1) << 4;
   O |= (dout_59&1) << 5;
   O |= (dout_60&1) << 6;
   O |= (dout_61&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.16 %
// MAE = 0.8 
// WCE% = 0.98 %
// WCE = 5.0 
// WCRE% = 50.00 %
// EP% = 34.38 %
// MRE% = 0.40 %
// MSE = 2.5 
// PDK45_PWR = 0.026 mW
// PDK45_AREA = 63.8 um2
// PDK45_DELAY = 0.47 ns


uint64_t evoapproxlib::evoapprox_t::add8u_5NQ(uint64_t a, uint64_t b)
{
  uint16_t c = 0;
  uint8_t n0 = (a >> 0) & 0x1;
  uint8_t n2 = (a >> 1) & 0x1;
  uint8_t n4 = (a >> 2) & 0x1;
  uint8_t n6 = (a >> 3) & 0x1;
  uint8_t n8 = (a >> 4) & 0x1;
  uint8_t n10 = (a >> 5) & 0x1;
  uint8_t n12 = (a >> 6) & 0x1;
  uint8_t n14 = (a >> 7) & 0x1;
  uint8_t n16 = (b >> 0) & 0x1;
  uint8_t n18 = (b >> 1) & 0x1;
  uint8_t n20 = (b >> 2) & 0x1;
  uint8_t n22 = (b >> 3) & 0x1;
  uint8_t n24 = (b >> 4) & 0x1;
  uint8_t n26 = (b >> 5) & 0x1;
  uint8_t n28 = (b >> 6) & 0x1;
  uint8_t n30 = (b >> 7) & 0x1;
  uint8_t n32;
  uint8_t n40;
  uint8_t n41;
  uint8_t n50;
  uint8_t n51;
  uint8_t n58;
  uint8_t n59;
  uint8_t n68;
  uint8_t n69;
  uint8_t n78;
  uint8_t n79;
  uint8_t n86;
  uint8_t n87;
  uint8_t n88;
  uint8_t n96;
  uint8_t n97;
  uint8_t n111;
  uint8_t n125;
  uint8_t n134;
  uint8_t n143;
  uint8_t n152;
  uint8_t n162;
  uint8_t n170;
  uint8_t n180;
  uint8_t n198;
  uint8_t n199;
  uint8_t n208;
  uint8_t n209;
  uint8_t n226;
  uint8_t n227;
  uint8_t n236;
  uint8_t n245;
  uint8_t n254;
  uint8_t n293;
  uint8_t n320;
  uint8_t n328;
  uint8_t n338;
  uint8_t n348;
  uint8_t n366;
  uint8_t n376;
  uint8_t n384;
  uint8_t n394;
  uint8_t n404;
  uint8_t n412;
  uint8_t n413;
  uint8_t n422;

  n32 = n0 | n16;
  n40 = n2 ^ n18;
  n41 = n2 & n18;
  n50 = n4 ^ n20;
  n51 = n4 & n20;
  n58 = n6 ^ n22;
  n59 = n6 & n22;
  n68 = n8 ^ n24;
  n69 = n8 & n24;
  n78 = n10 ^ n26;
  n79 = n10 & n26;
  n86 = n12 ^ n28;
  n87 = n12 & n28;
  n88 = n24 | n8;
  n96 = n14 ^ n30;
  n97 = n14 & n30;
  n111 = n10 & n26;
  n125 = n51;
  n134 = n88 & n59;
  n143 = n68 & n58;
  n152 = n69 | n134;
  n162 = n86 & n79;
  n170 = n86 & n78;
  n180 = n87 | n162;
  n198 = n125;
  n199 = n125;
  n208 = n143 & n125;
  n209 = n143 & n125;
  n226 = n152 | n209;
  n227 = n152 | n209;
  n236 = n170 & n152;
  n245 = n170 & n208;
  n254 = n180 | n236;
  n293 = n254 | n245;
  n320 = n58 & n199;
  n328 = n59 | n320;
  n338 = n78 & n227;
  n348 = n111 | n338;
  n366 = n50 | n41;
  n376 = n58 ^ n198;
  n384 = n68 ^ n328;
  n394 = n78 ^ n226;
  n404 = n86 ^ n348;
  n412 = n96 ^ n293;
  n413 = n96 & n293;
  n422 = n97 | n413;

  c |= (n32 & 0x1) << 0;
  c |= (n40 & 0x1) << 1;
  c |= (n366 & 0x1) << 2;
  c |= (n376 & 0x1) << 3;
  c |= (n384 & 0x1) << 4;
  c |= (n394 & 0x1) << 5;
  c |= (n404 & 0x1) << 6;
  c |= (n412 & 0x1) << 7;
  c |= (n422 & 0x1) << 8;

  return c;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 0.0076 %
// MAE = 5.0 
// WCE% = 0.064 %
// WCE = 42 
// WCRE% = 40.00 %
// EP% = 37.30 %
// MRE% = 0.15 %
// MSE = 93 
// PDK45_PWR = 0.360 mW
// PDK45_AREA = 660.3 um2
// PDK45_DELAY = 1.39 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_150Q(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_16, dout_17, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_34, dout_36, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_59, dout_64, dout_65, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_86, dout_87, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_102, dout_107, dout_108, dout_109, dout_110, dout_111, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_144, dout_145, dout_146, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_171, dout_172, dout_173, dout_174, dout_175, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_183, dout_184, dout_185, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_16=((B >> 0)&1)&((A >> 0)&1);
   dout_17=((B >> 1)&1)&((A >> 0)&1);
   dout_18=((B >> 2)&1)&((A >> 0)&1);
   dout_19=((B >> 3)&1)&((A >> 0)&1);
   dout_20=((B >> 4)&1)&((A >> 0)&1);
   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_24=((B >> 0)&1)&((A >> 1)&1);
   dout_25=((B >> 1)&1)&((A >> 1)&1);
   dout_26=((B >> 2)&1)&((A >> 1)&1);
   dout_27=((B >> 3)&1)&((A >> 1)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_32=dout_17|dout_24;
   dout_34=dout_18|dout_25;
   dout_36=dout_19|dout_26;
   dout_38=dout_20|dout_27;
   dout_39=dout_20&dout_27;
   dout_40=dout_21^dout_28;
   dout_41=dout_21&dout_28;
   dout_42=dout_22^dout_29;
   dout_43=dout_22&dout_29;
   dout_44=dout_23^dout_30;
   dout_45=dout_23&dout_30;
   dout_46=((B >> 0)&1)&((A >> 2)&1);
   dout_47=((B >> 1)&1)&((A >> 2)&1);
   dout_48=((B >> 2)&1)&((A >> 2)&1);
   dout_49=((B >> 3)&1)&((A >> 2)&1);
   dout_50=((B >> 4)&1)&((A >> 2)&1);
   dout_51=((B >> 5)&1)&((A >> 2)&1);
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_54=dout_34|dout_46;
   dout_59=dout_36|dout_47;
   dout_64=dout_38^dout_48;
   dout_65=dout_38&dout_48;
   dout_69=dout_40^dout_49;
   dout_70=dout_40&dout_49;
   dout_71=dout_69&dout_39;
   dout_72=dout_69^dout_39;
   dout_73=dout_70|dout_71;
   dout_74=dout_42^dout_50;
   dout_75=dout_42&dout_50;
   dout_76=dout_74&dout_41;
   dout_77=dout_74^dout_41;
   dout_78=dout_75|dout_76;
   dout_79=dout_44^dout_51;
   dout_80=dout_44&dout_51;
   dout_81=dout_79&dout_43;
   dout_82=dout_79^dout_43;
   dout_83=dout_80|dout_81;
   dout_84=dout_31^dout_52;
   dout_85=dout_31&dout_52;
   dout_86=((B >> 7)&1)&dout_45;
   dout_87=dout_84^dout_45;
   dout_88=dout_85|dout_86;
   dout_89=((B >> 0)&1)&((A >> 3)&1);
   dout_90=((B >> 1)&1)&((A >> 3)&1);
   dout_91=((B >> 2)&1)&((A >> 3)&1);
   dout_92=((B >> 3)&1)&((A >> 3)&1);
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_97=dout_59|dout_89;
   dout_102=dout_64|dout_90;
   dout_107=dout_72^dout_91;
   dout_108=dout_72&dout_91;
   dout_109=dout_107&dout_65;
   dout_110=dout_107^dout_65;
   dout_111=dout_108|dout_109;
   dout_112=dout_77^dout_92;
   dout_113=dout_77&dout_92;
   dout_114=dout_112&dout_73;
   dout_115=dout_112^dout_73;
   dout_116=dout_113|dout_114;
   dout_117=dout_82^dout_93;
   dout_118=dout_82&dout_93;
   dout_119=dout_117&dout_78;
   dout_120=dout_117^dout_78;
   dout_121=dout_118|dout_119;
   dout_122=dout_87^dout_94;
   dout_123=dout_87&dout_94;
   dout_124=dout_122&dout_83;
   dout_125=dout_122^dout_83;
   dout_126=dout_123|dout_124;
   dout_127=dout_53^dout_95;
   dout_128=dout_53&dout_95;
   dout_129=dout_127&dout_88;
   dout_130=dout_127^dout_88;
   dout_131=dout_128|dout_129;
   dout_132=((B >> 0)&1)&((A >> 4)&1);
   dout_133=((B >> 1)&1)&((A >> 4)&1);
   dout_134=((B >> 2)&1)&((A >> 4)&1);
   dout_135=((B >> 3)&1)&((A >> 4)&1);
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_140=dout_102^dout_132;
   dout_141=dout_102&dout_132;
   dout_142=dout_133&dout_141;
   dout_144=dout_141|dout_142;
   dout_145=dout_110^dout_133;
   dout_146=dout_110&dout_133;
   dout_150=dout_115^dout_134;
   dout_151=dout_115&dout_134;
   dout_152=dout_150&dout_111;
   dout_153=dout_150^dout_111;
   dout_154=dout_151|dout_152;
   dout_155=dout_120^dout_135;
   dout_156=dout_120&dout_135;
   dout_157=dout_155&dout_116;
   dout_158=dout_155^dout_116;
   dout_159=dout_156|dout_157;
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_121;
   dout_163=dout_160^dout_121;
   dout_164=dout_161|dout_162;
   dout_165=dout_130^dout_137;
   dout_166=dout_130&dout_137;
   dout_167=dout_165&dout_126;
   dout_168=dout_165^dout_126;
   dout_169=dout_166|dout_167;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_172=dout_170&dout_131;
   dout_173=dout_170^dout_131;
   dout_174=dout_171|dout_172;
   dout_175=((B >> 0)&1)&((A >> 5)&1);
   dout_176=((B >> 1)&1)&((A >> 5)&1);
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_183=dout_145^dout_175;
   dout_184=dout_145&dout_175;
   dout_185=dout_183&dout_144;
   dout_186=dout_183^dout_141;
   dout_187=dout_184|dout_185;
   dout_188=dout_153^dout_176;
   dout_189=dout_153&dout_176;
   dout_190=dout_188&dout_146;
   dout_191=dout_188^dout_146;
   dout_192=dout_189|dout_190;
   dout_193=dout_158^dout_177;
   dout_194=dout_158&dout_177;
   dout_195=dout_193&dout_154;
   dout_196=dout_193^dout_154;
   dout_197=dout_194|dout_195;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_159;
   dout_201=dout_198^dout_159;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_218=((B >> 0)&1)&((A >> 6)&1);
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_226=dout_191^dout_218;
   dout_227=dout_191&dout_218;
   dout_228=dout_226&dout_187;
   dout_229=dout_226^dout_187;
   dout_230=dout_227|dout_228;
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_233=dout_231&dout_192;
   dout_234=dout_231^dout_192;
   dout_235=dout_232|dout_233;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_197;
   dout_239=dout_236^dout_197;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_234^dout_261;
   dout_270=dout_234&dout_261;
   dout_271=dout_269&dout_230;
   dout_272=dout_269^dout_230;
   dout_273=dout_270|dout_271;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_235;
   dout_277=dout_274^dout_235;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_304=dout_277^dout_273;
   dout_305=dout_277&dout_273;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_302^dout_298;
   dout_327=dout_302&dout_298;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_268^dout_303;
   dout_332=dout_268&dout_303;
   dout_333=dout_331&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_16&1) << 0;
   O |= (dout_32&1) << 1;
   O |= (dout_54&1) << 2;
   O |= (dout_97&1) << 3;
   O |= (dout_140&1) << 4;
   O |= (dout_186&1) << 5;
   O |= (dout_229&1) << 6;
   O |= (dout_272&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.00 %
// MAE = 0 
// WCE% = 0.00 %
// WCE = 0 
// WCRE% = 0.00 %
// EP% = 0.00 %
// MRE% = 0.00 %
// MSE = 0 
// PDK45_PWR = 0.391 mW
// PDK45_AREA = 709.6 um2
// PDK45_DELAY = 1.43 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_1JFF(const uint64_t a, const uint64_t b)
{
  uint16_t c = 0;
  uint8_t n0 = (a >> 0) & 0x1;
  uint8_t n2 = (a >> 1) & 0x1;
  uint8_t n4 = (a >> 2) & 0x1;
  uint8_t n6 = (a >> 3) & 0x1;
  uint8_t n8 = (a >> 4) & 0x1;
  uint8_t n10 = (a >> 5) & 0x1;
  uint8_t n12 = (a >> 6) & 0x1;
  uint8_t n14 = (a >> 7) & 0x1;
  uint8_t n16 = (b >> 0) & 0x1;
  uint8_t n18 = (b >> 1) & 0x1;
  uint8_t n20 = (b >> 2) & 0x1;
  uint8_t n22 = (b >> 3) & 0x1;
  uint8_t n24 = (b >> 4) & 0x1;
  uint8_t n26 = (b >> 5) & 0x1;
  uint8_t n28 = (b >> 6) & 0x1;
  uint8_t n30 = (b >> 7) & 0x1;
  uint8_t n32;
  uint8_t n48;
  uint8_t n64;
  uint8_t n82;
  uint8_t n98;
  uint8_t n114;
  uint8_t n132;
  uint8_t n148;
  uint8_t n164;
  uint8_t n182;
  uint8_t n198;
  uint8_t n214;
  uint8_t n232;
  uint8_t n248;
  uint8_t n264;
  uint8_t n282;
  uint8_t n298;
  uint8_t n299;
  uint8_t n314;
  uint8_t n315;
  uint8_t n332;
  uint8_t n333;
  uint8_t n348;
  uint8_t n349;
  uint8_t n364;
  uint8_t n365;
  uint8_t n382;
  uint8_t n383;
  uint8_t n398;
  uint8_t n399;
  uint8_t n414;
  uint8_t n432;
  uint8_t n448;
  uint8_t n464;
  uint8_t n482;
  uint8_t n498;
  uint8_t n514;
  uint8_t n532;
  uint8_t n548;
  uint8_t n549;
  uint8_t n564;
  uint8_t n565;
  uint8_t n582;
  uint8_t n583;
  uint8_t n598;
  uint8_t n599;
  uint8_t n614;
  uint8_t n615;
  uint8_t n632;
  uint8_t n633;
  uint8_t n648;
  uint8_t n649;
  uint8_t n664;
  uint8_t n682;
  uint8_t n698;
  uint8_t n714;
  uint8_t n732;
  uint8_t n748;
  uint8_t n764;
  uint8_t n782;
  uint8_t n798;
  uint8_t n799;
  uint8_t n814;
  uint8_t n815;
  uint8_t n832;
  uint8_t n833;
  uint8_t n848;
  uint8_t n849;
  uint8_t n864;
  uint8_t n865;
  uint8_t n882;
  uint8_t n883;
  uint8_t n898;
  uint8_t n899;
  uint8_t n914;
  uint8_t n932;
  uint8_t n948;
  uint8_t n964;
  uint8_t n982;
  uint8_t n998;
  uint8_t n1014;
  uint8_t n1032;
  uint8_t n1048;
  uint8_t n1049;
  uint8_t n1064;
  uint8_t n1065;
  uint8_t n1082;
  uint8_t n1083;
  uint8_t n1098;
  uint8_t n1099;
  uint8_t n1114;
  uint8_t n1115;
  uint8_t n1132;
  uint8_t n1133;
  uint8_t n1148;
  uint8_t n1149;
  uint8_t n1164;
  uint8_t n1182;
  uint8_t n1198;
  uint8_t n1214;
  uint8_t n1232;
  uint8_t n1248;
  uint8_t n1264;
  uint8_t n1282;
  uint8_t n1298;
  uint8_t n1299;
  uint8_t n1314;
  uint8_t n1315;
  uint8_t n1332;
  uint8_t n1333;
  uint8_t n1348;
  uint8_t n1349;
  uint8_t n1364;
  uint8_t n1365;
  uint8_t n1382;
  uint8_t n1383;
  uint8_t n1398;
  uint8_t n1399;
  uint8_t n1414;
  uint8_t n1432;
  uint8_t n1448;
  uint8_t n1464;
  uint8_t n1482;
  uint8_t n1498;
  uint8_t n1514;
  uint8_t n1533;
  uint8_t n1548;
  uint8_t n1549;
  uint8_t n1564;
  uint8_t n1565;
  uint8_t n1582;
  uint8_t n1583;
  uint8_t n1598;
  uint8_t n1599;
  uint8_t n1614;
  uint8_t n1615;
  uint8_t n1632;
  uint8_t n1633;
  uint8_t n1648;
  uint8_t n1649;
  uint8_t n1664;
  uint8_t n1682;
  uint8_t n1698;
  uint8_t n1714;
  uint8_t n1732;
  uint8_t n1748;
  uint8_t n1764;
  uint8_t n1782;
  uint8_t n1798;
  uint8_t n1799;
  uint8_t n1814;
  uint8_t n1815;
  uint8_t n1832;
  uint8_t n1833;
  uint8_t n1848;
  uint8_t n1849;
  uint8_t n1864;
  uint8_t n1865;
  uint8_t n1882;
  uint8_t n1883;
  uint8_t n1898;
  uint8_t n1899;
  uint8_t n1914;
  uint8_t n1915;
  uint8_t n1932;
  uint8_t n1933;
  uint8_t n1948;
  uint8_t n1949;
  uint8_t n1964;
  uint8_t n1965;
  uint8_t n1982;
  uint8_t n1983;
  uint8_t n1998;
  uint8_t n1999;
  uint8_t n2014;
  uint8_t n2015;

  n32 = n0 & n16;
  n48 = n2 & n16;
  n64 = n4 & n16;
  n82 = n6 & n16;
  n98 = n8 & n16;
  n114 = n10 & n16;
  n132 = n12 & n16;
  n148 = n14 & n16;
  n164 = n0 & n18;
  n182 = n2 & n18;
  n198 = n4 & n18;
  n214 = n6 & n18;
  n232 = n8 & n18;
  n248 = n10 & n18;
  n264 = n12 & n18;
  n282 = n14 & n18;
  n298 = n48 ^ n164;
  n299 = n48 & n164;
  n314 = n64 ^ n182;
  n315 = n64 & n182;
  n332 = n82 ^ n198;
  n333 = n82 & n198;
  n348 = n98 ^ n214;
  n349 = n98 & n214;
  n364 = n114 ^ n232;
  n365 = n114 & n232;
  n382 = n132 ^ n248;
  n383 = n132 & n248;
  n398 = n148 ^ n264;
  n399 = n148 & n264;
  n414 = n0 & n20;
  n432 = n2 & n20;
  n448 = n4 & n20;
  n464 = n6 & n20;
  n482 = n8 & n20;
  n498 = n10 & n20;
  n514 = n12 & n20;
  n532 = n14 & n20;
  n548 = (n314 ^ n414) ^ n299;
  n549 = (n314 & n414) | (n414 & n299) | (n314 & n299);
  n564 = (n332 ^ n432) ^ n315;
  n565 = (n332 & n432) | (n432 & n315) | (n332 & n315);
  n582 = (n348 ^ n448) ^ n333;
  n583 = (n348 & n448) | (n448 & n333) | (n348 & n333);
  n598 = (n364 ^ n464) ^ n349;
  n599 = (n364 & n464) | (n464 & n349) | (n364 & n349);
  n614 = (n382 ^ n482) ^ n365;
  n615 = (n382 & n482) | (n482 & n365) | (n382 & n365);
  n632 = (n398 ^ n498) ^ n383;
  n633 = (n398 & n498) | (n498 & n383) | (n398 & n383);
  n648 = (n282 ^ n514) ^ n399;
  n649 = (n282 & n514) | (n514 & n399) | (n282 & n399);
  n664 = n0 & n22;
  n682 = n2 & n22;
  n698 = n4 & n22;
  n714 = n6 & n22;
  n732 = n8 & n22;
  n748 = n10 & n22;
  n764 = n12 & n22;
  n782 = n14 & n22;
  n798 = (n564 ^ n664) ^ n549;
  n799 = (n564 & n664) | (n664 & n549) | (n564 & n549);
  n814 = (n582 ^ n682) ^ n565;
  n815 = (n582 & n682) | (n682 & n565) | (n582 & n565);
  n832 = (n598 ^ n698) ^ n583;
  n833 = (n598 & n698) | (n698 & n583) | (n598 & n583);
  n848 = (n614 ^ n714) ^ n599;
  n849 = (n614 & n714) | (n714 & n599) | (n614 & n599);
  n864 = (n632 ^ n732) ^ n615;
  n865 = (n632 & n732) | (n732 & n615) | (n632 & n615);
  n882 = (n648 ^ n748) ^ n633;
  n883 = (n648 & n748) | (n748 & n633) | (n648 & n633);
  n898 = (n532 ^ n764) ^ n649;
  n899 = (n532 & n764) | (n764 & n649) | (n532 & n649);
  n914 = n0 & n24;
  n932 = n2 & n24;
  n948 = n4 & n24;
  n964 = n6 & n24;
  n982 = n8 & n24;
  n998 = n10 & n24;
  n1014 = n12 & n24;
  n1032 = n14 & n24;
  n1048 = (n814 ^ n914) ^ n799;
  n1049 = (n814 & n914) | (n914 & n799) | (n814 & n799);
  n1064 = (n832 ^ n932) ^ n815;
  n1065 = (n832 & n932) | (n932 & n815) | (n832 & n815);
  n1082 = (n848 ^ n948) ^ n833;
  n1083 = (n848 & n948) | (n948 & n833) | (n848 & n833);
  n1098 = (n864 ^ n964) ^ n849;
  n1099 = (n864 & n964) | (n964 & n849) | (n864 & n849);
  n1114 = (n882 ^ n982) ^ n865;
  n1115 = (n882 & n982) | (n982 & n865) | (n882 & n865);
  n1132 = (n898 ^ n998) ^ n883;
  n1133 = (n898 & n998) | (n998 & n883) | (n898 & n883);
  n1148 = (n782 ^ n1014) ^ n899;
  n1149 = (n782 & n1014) | (n1014 & n899) | (n782 & n899);
  n1164 = n0 & n26;
  n1182 = n2 & n26;
  n1198 = n4 & n26;
  n1214 = n6 & n26;
  n1232 = n8 & n26;
  n1248 = n10 & n26;
  n1264 = n12 & n26;
  n1282 = n14 & n26;
  n1298 = (n1064 ^ n1164) ^ n1049;
  n1299 = (n1064 & n1164) | (n1164 & n1049) | (n1064 & n1049);
  n1314 = (n1082 ^ n1182) ^ n1065;
  n1315 = (n1082 & n1182) | (n1182 & n1065) | (n1082 & n1065);
  n1332 = (n1098 ^ n1198) ^ n1083;
  n1333 = (n1098 & n1198) | (n1198 & n1083) | (n1098 & n1083);
  n1348 = (n1114 ^ n1214) ^ n1099;
  n1349 = (n1114 & n1214) | (n1214 & n1099) | (n1114 & n1099);
  n1364 = (n1132 ^ n1232) ^ n1115;
  n1365 = (n1132 & n1232) | (n1232 & n1115) | (n1132 & n1115);
  n1382 = (n1148 ^ n1248) ^ n1133;
  n1383 = (n1148 & n1248) | (n1248 & n1133) | (n1148 & n1133);
  n1398 = (n1032 ^ n1264) ^ n1149;
  n1399 = (n1032 & n1264) | (n1264 & n1149) | (n1032 & n1149);
  n1414 = n0 & n28;
  n1432 = n2 & n28;
  n1448 = n4 & n28;
  n1464 = n6 & n28;
  n1482 = n8 & n28;
  n1498 = n10 & n28;
  n1514 = n12 & n28;
  n1533 = n14 & n28;
  n1548 = (n1314 ^ n1414) ^ n1299;
  n1549 = (n1314 & n1414) | (n1414 & n1299) | (n1314 & n1299);
  n1564 = (n1332 ^ n1432) ^ n1315;
  n1565 = (n1332 & n1432) | (n1432 & n1315) | (n1332 & n1315);
  n1582 = (n1348 ^ n1448) ^ n1333;
  n1583 = (n1348 & n1448) | (n1448 & n1333) | (n1348 & n1333);
  n1598 = (n1364 ^ n1464) ^ n1349;
  n1599 = (n1364 & n1464) | (n1464 & n1349) | (n1364 & n1349);
  n1614 = (n1382 ^ n1482) ^ n1365;
  n1615 = (n1382 & n1482) | (n1482 & n1365) | (n1382 & n1365);
  n1632 = (n1398 ^ n1498) ^ n1383;
  n1633 = (n1398 & n1498) | (n1498 & n1383) | (n1398 & n1383);
  n1648 = (n1282 ^ n1514) ^ n1399;
  n1649 = (n1282 & n1514) | (n1514 & n1399) | (n1282 & n1399);
  n1664 = n0 & n30;
  n1682 = n2 & n30;
  n1698 = n4 & n30;
  n1714 = n6 & n30;
  n1732 = n8 & n30;
  n1748 = n10 & n30;
  n1764 = n12 & n30;
  n1782 = n14 & n30;
  n1798 = (n1564 ^ n1664) ^ n1549;
  n1799 = (n1564 & n1664) | (n1664 & n1549) | (n1564 & n1549);
  n1814 = (n1582 ^ n1682) ^ n1565;
  n1815 = (n1582 & n1682) | (n1682 & n1565) | (n1582 & n1565);
  n1832 = (n1598 ^ n1698) ^ n1583;
  n1833 = (n1598 & n1698) | (n1698 & n1583) | (n1598 & n1583);
  n1848 = (n1614 ^ n1714) ^ n1599;
  n1849 = (n1614 & n1714) | (n1714 & n1599) | (n1614 & n1599);
  n1864 = (n1632 ^ n1732) ^ n1615;
  n1865 = (n1632 & n1732) | (n1732 & n1615) | (n1632 & n1615);
  n1882 = (n1648 ^ n1748) ^ n1633;
  n1883 = (n1648 & n1748) | (n1748 & n1633) | (n1648 & n1633);
  n1898 = (n1533 ^ n1764) ^ n1649;
  n1899 = (n1533 & n1764) | (n1764 & n1649) | (n1533 & n1649);
  n1914 = n1814 ^ n1799;
  n1915 = n1814 & n1799;
  n1932 = (n1832 ^ n1815) ^ n1915;
  n1933 = (n1832 & n1815) | (n1815 & n1915) | (n1832 & n1915);
  n1948 = (n1848 ^ n1833) ^ n1933;
  n1949 = (n1848 & n1833) | (n1833 & n1933) | (n1848 & n1933);
  n1964 = (n1864 ^ n1849) ^ n1949;
  n1965 = (n1864 & n1849) | (n1849 & n1949) | (n1864 & n1949);
  n1982 = (n1882 ^ n1865) ^ n1965;
  n1983 = (n1882 & n1865) | (n1865 & n1965) | (n1882 & n1965);
  n1998 = (n1898 ^ n1883) ^ n1983;
  n1999 = (n1898 & n1883) | (n1883 & n1983) | (n1898 & n1983);
  n2014 = (n1782 ^ n1899) ^ n1999;
  n2015 = (n1782 & n1899) | (n1899 & n1999) | (n1782 & n1999);

  c |= (n32 & 0x1) << 0;
  c |= (n298 & 0x1) << 1;
  c |= (n548 & 0x1) << 2;
  c |= (n798 & 0x1) << 3;
  c |= (n1048 & 0x1) << 4;
  c |= (n1298 & 0x1) << 5;
  c |= (n1548 & 0x1) << 6;
  c |= (n1798 & 0x1) << 7;
  c |= (n1914 & 0x1) << 8;
  c |= (n1932 & 0x1) << 9;
  c |= (n1948 & 0x1) << 10;
  c |= (n1964 & 0x1) << 11;
  c |= (n1982 & 0x1) << 12;
  c |= (n1998 & 0x1) << 13;
  c |= (n2014 & 0x1) << 14;
  c |= (n2015 & 0x1) << 15;

  return c;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.18 %
// MAE = 119 
// WCE% = 0.66 %
// WCE = 431 
// WCRE% = 101.56 %
// EP% = 98.37 %
// MRE% = 4.42 %
// MSE = 21037 
// PDK45_PWR = 0.206 mW
// PDK45_AREA = 395.6 um2
// PDK45_DELAY = 1.34 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_19DB(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_23, dout_24, dout_30, dout_31, dout_44, dout_45, dout_52, dout_53, dout_79, dout_80, dout_82, dout_85, dout_87, dout_88, dout_93, dout_94, dout_95, dout_96, dout_113, dout_117, dout_118, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_136, dout_137, dout_138, dout_139, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_171, dout_172, dout_173, dout_174, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_196, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_231, dout_232, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_301, dout_302, dout_303, dout_306, dout_307, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_24=((A >> 2)&1)&((B >> 5)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_44=dout_23|dout_30;
   dout_45=dout_23&dout_30;
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_79=dout_44^((A >> 4)&1);
   dout_80=dout_52^dout_31;
   dout_82=dout_79^((A >> 4)&1);
   dout_85=dout_31&dout_52;
   dout_87=dout_80^dout_45;
   dout_88=dout_85|dout_45;
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_113=((B >> 3)&1)&((A >> 4)&1);
   dout_117=dout_82|dout_93;
   dout_118=dout_82&dout_93;
   dout_122=dout_87^dout_94;
   dout_123=dout_87&dout_94;
   dout_124=dout_122&dout_24;
   dout_125=dout_122^dout_24;
   dout_126=dout_123|dout_124;
   dout_127=dout_53^dout_95;
   dout_128=dout_53&dout_95;
   dout_129=dout_127&dout_88;
   dout_130=dout_127^dout_88;
   dout_131=dout_128|dout_129;
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_118;
   dout_163=dout_160|dout_118;
   dout_164=dout_161|dout_162;
   dout_165=dout_130^dout_137;
   dout_166=dout_130&dout_137;
   dout_167=dout_165&dout_126;
   dout_168=dout_165^dout_126;
   dout_169=dout_166|dout_167;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_172=dout_170&dout_131;
   dout_173=dout_170^dout_131;
   dout_174=dout_171|dout_172;
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_196=dout_162^dout_117;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_113;
   dout_201=dout_198^dout_113;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_177;
   dout_239=dout_236^dout_177;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_273=dout_225&dout_267;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_232;
   dout_277=dout_274|dout_232;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_273|dout_301;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_307;
   dout_314=dout_311^dout_307;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_302^dout_298;
   dout_327=dout_302&dout_298;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_268^dout_303;
   dout_332=((A >> 7)&1)&dout_303;
   dout_333=dout_268&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_177&1) << 0;
   O |= (dout_163&1) << 1;
   O |= (dout_260&1) << 2;
   O |= (dout_117&1) << 3;
   O |= (dout_264&1) << 4;
   O |= (dout_199&1) << 5;
   O |= (dout_231&1) << 6;
   O |= (dout_261&1) << 7;
   O |= (dout_277&1) << 8;
   O |= (dout_306&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.081 %
// MAE = 53 
// WCE% = 0.39 %
// WCE = 255 
// WCRE% = 300.00 %
// EP% = 74.61 %
// MRE% = 4.41 %
// MSE = 5462 
// PDK45_PWR = 0.301 mW
// PDK45_AREA = 558.9 um2
// PDK45_DELAY = 1.36 ns


int16_t evoapproxlib::evoapprox_t::mul8s_1L2H(int8_t A, int8_t B)
{
 uint16_t O;
 uint8_t n162,O13,n85,O15,n38,n39,n88,O10,n290,n319,n95,O5,n36,n37,n349,n348,O11,n303,n341,O2,n343,n345,n117,n346,n132,n133,n228,n229,n136,n137,n134,n135,n222,n223,n138,n139,n226,n227,n224,O1,n160,n87,n327,n86,n316,n151,n231,O4,n325,n80,n235,n234,n237,n236,n81,n233,n83,n82,n200,n232,n239,n238,n320,n201,n169,n129,n128,n168,n334,n335,n127,n126,n330,n331,n332,n122,n89,O12,n64,n155,O6,n211,n317,n240,n98,n99,n245,n246,n247,n92,n93,n90,n91,n96,n97,n94,O0,n158,n159,n342,n329,n328,n150,n152,n153,n323,n322,n321,n157,n67,n66,n65,n333,n63,n62,n60,n284,n291,n307,n69,n230,n125,n175,n124,n301,n68,n173,n253,n252,n304,n257,n170,n255,n254,n121,O3,n171,n318,n120,n161,n149,n148,n123,n340,n143,n142,n310,n140,n147,n146,n145,n144,n74,n75,n76,n77,n70,n71,n72,n73,O9,n262,n339,n78,n79,n263,n338,n294,n178,n293,n261,n176,n177,n174,n306,n172,n300,n268,n269,n266,n267,n264,n265,n309,n308,n260,n179,n248,n131,n289,n326,n344,n49,n48,n286,n287,n280,n282,n283,n40,n43,n42,n45,n44,n47,O14,n250,n299,n251,O8,n298,n220,n256,n279,n278,n163,n221,n165,n164,n167,n166,n271,n270,n273,n272,n275,n274,n277,n276,n209,n324,n130,n225,n259,n315,n297,n296,n295,n258,n156,n292,n58,n59,n56,n57,n54,n55,n52,n53,n50,n51,n350,n314,n305,n351,n337,n198,n199,n106,n195,n196,n190,n191,n192,n193,n114,n116,n302,n110,n111,n112,n113,n204,n205,n206,n207,n118,n119,n202,n203,n219,n249,n218,n288,n100,n242,n285,O7,n312,n243,n313,n244,n208,n141,n214,n189,n188,n187,n186,n185,n184,n183,n182,n181,n180,n107,n194,n105,n104,n103,n102,n101,n217,n216,n215,n210,n213,n212,n109,n108;
 O0=0;
 O1=0;
 O2=((B >> 1)&1)&((A >> 1)&1);
 n108=((B >> 4)&1)&((A >> 3)&1);
 n110=((B >> 6)&1)&((A >> 1)&1);
 n111=((B >> 5)&1)&((A >> 2)&1);
 n112=((B >> 3)&1)&((A >> 4)&1);
 n113=((B >> 2)&1)&((A >> 5)&1);
 n114=((B >> 1)&1)&((A >> 6)&1);
 n122=((B >> 1)&1)&((A >> 7)&1);
 n147=((B >> 5)&1)&((A >> 3)&1);
 n149=((B >> 7)&1)&((A >> 1)&1);
 n150=((B >> 6)&1)&((A >> 2)&1);
 n151=((B >> 4)&1)&((A >> 4)&1);
 n152=((B >> 3)&1)&((A >> 5)&1);
 n153=((B >> 2)&1)&((A >> 6)&1);
 n167=((B >> 2)&1)&((A >> 7)&1);
 n192=((B >> 6)&1)&((A >> 3)&1);
 n193=((B >> 7)&1)&((A >> 2)&1);
 n194=((B >> 5)&1)&((A >> 4)&1);
 n195=((B >> 4)&1)&((A >> 5)&1);
 n196=((B >> 3)&1)&((A >> 6)&1);
 n212=((B >> 3)&1)&((A >> 7)&1);
 n227=((B >> 5)&1)&((A >> 5)&1);
 n235=((B >> 6)&1)&((A >> 4)&1);
 n238=~(((A >> 3)&1)|((A >> 2)&1));
 n240=((B >> 4)&1)&((A >> 6)&1);
 n260=((B >> 4)&1)&((A >> 7)&1);
 n277=((B >> 7)&1)&((A >> 4)&1);
 n279=((B >> 6)&1)&((A >> 5)&1);
 n280=((B >> 5)&1)&((A >> 6)&1);
 n300=((B >> 5)&1)&((A >> 7)&1);
 n308=((B >> 6)&1)&((A >> 6)&1);
 n310=((B >> 7)&1)&((A >> 5)&1);
 n330=((B >> 6)&1)&((A >> 7)&1);
 n334=((B >> 7)&1)&((A >> 6)&1);
 n346=((B >> 7)&1)&((A >> 7)&1);
 n37=((B >> 2)&1)&((A >> 2)&1);
 n39=((B >> 1)&1)&((A >> 2)&1);
 n40=((B >> 2)&1)&((A >> 1)&1);
 n43=((B >> 1)&1)&((A >> 3)&1);
 n45=((B >> 3)&1)&((A >> 1)&1);
 n56=((B >> 2)&1)&((A >> 3)&1);
 n58=((B >> 4)&1)&((A >> 1)&1);
 n59=((B >> 3)&1)&((A >> 2)&1);
 n60=((B >> 1)&1)&((A >> 4)&1);
 n78=((B >> 3)&1)&((A >> 3)&1);
 n80=((B >> 5)&1)&((A >> 1)&1);
 n81=((B >> 4)&1)&((A >> 2)&1);
 n82=((B >> 2)&1)&((A >> 4)&1);
 n83=((B >> 1)&1)&((A >> 5)&1);
 n107=n81&n80;
 n109=n111^n110;
 n146=n111&n110;
 n148=~(n150^n149);
 n191=n150&~n149;
 n233=n192&n193;
 n237=((B >> 7)&1)&~n238;
 n239=((A >> 3)&1)&n193;
 n36=n37&O2;
 n38=~(n40|n39);
 n44=n45^n37;
 n55=n45&n37;
 n57=n59^n58;
 n77=n59&n58;
 n79=n81^n80;
 O3=~(n38|n36);
 n102=n78&n77;
 n103=n78&n79;
 n104=n79&n77;
 n106=~(n108^n107);
 n141=n108&n107;
 n142=n108&n109;
 n143=n109&n107;
 n145=~(n147^n146);
 n186=n147&n146;
 n187=n147&n148;
 n188=n148&n146;
 n190=~(n192^n191);
 n232=n192&n191;
 n234=n193&n191;
 n236=~n239&n237;
 n276=~(n277|n237);
 n278=((A >> 4)&1)&n237;
 n42=~(n43^n36);
 n50=n43&n36;
 n51=n43&n44;
 n52=n44&n36;
 n54=~(n56^n55);
 n72=n56&n55;
 n73=n56&n57;
 n74=n57&n55;
 n76=~(n78^n77);
 O4=~(n44^n42);
 n101=~(n103|n102);
 n105=n109^n106;
 n140=~(n142|n141);
 n144=n148^n145;
 n185=~(n187|n186);
 n189=n193^n190;
 n231=~(n233|n232);
 n273=n235&n236;
 n275=~(n278|n276);
 n309=~(n310^n276);
 n333=~n310&n276;
 n49=~(n51|n50);
 n53=n57^n54;
 n71=~(n73|n72);
 n75=n79^n76;
 n100=~n104&n101;
 n135=n112&~n105;
 n139=~n143&n140;
 n180=n151&~n144;
 n184=~n188&n185;
 n225=n194&~n189;
 n230=~n234&n231;
 n306=n279&n275;
 n328=n308&n309;
 n332=~n334&n333;
 n335=((A >> 6)&1)&~n333;
 n48=~n52&n49;
 n66=n60&~n53;
 n70=~n74&n71;
 n96=n82&~n75;
 n134=~(n105|n100);
 n136=n112&~n100;
 n138=~(n144^n139);
 n179=~(n144|n139);
 n181=n151&~n139;
 n183=~(n189^n184);
 n224=~(n189|n184);
 n226=n194&~n184;
 n229=n235^n230;
 n272=n235&~n230;
 n274=n236&~n230;
 n331=~(n335|n332);
 n345=~(n346^n332);
 n350=n346&n332;
 n47=~(n53^n48);
 n65=~(n53|n48);
 n67=n60&~n48;
 n69=~(n75^n70);
 n95=~(n75|n70);
 n97=n82&~n70;
 n99=~(n105^n100);
 O5=~(n60^n47);
 n133=~(n135|n134);
 n137=n151^n138;
 n178=~(n180|n179);
 n182=n194^n183;
 n223=~(n225|n224);
 n228=n236^n229;
 n271=~(n273|n272);
 n64=~(n66|n65);
 n68=n82^n69;
 n94=~(n96|n95);
 n98=n112^n99;
 n129=n113&~n98;
 n132=~n136&n133;
 n174=n152&~n137;
 n177=~n181&n178;
 n219=n195&~n182;
 n222=~n226&n223;
 n266=n227&~n228;
 n270=~n274&n271;
 n63=~n67&n64;
 n90=n83&~n68;
 n93=~n97&n94;
 n127=~(n98|n93);
 n128=n113&~n93;
 n131=~(n137^n132);
 n172=~(n137|n132);
 n173=n152&~n132;
 n176=~(n182^n177);
 n217=~(n182|n177);
 n218=n195&~n177;
 n221=n227^n222;
 n265=n227&~n222;
 n267=~(n228|n222);
 n269=n275^n270;
 n305=n275&~n270;
 n307=n279&~n270;
 n62=~(n68^n63);
 n88=~(n68|n63);
 n89=n83&~n63;
 n92=~(n98^n93);
 O6=~(n83^n62);
 n126=~(n128|n127);
 n130=n152^n131;
 n171=~(n173|n172);
 n175=n195^n176;
 n216=~(n218|n217);
 n220=~(n228^n221);
 n264=~(n266|n265);
 n268=n279^n269;
 n304=~(n306|n305);
 n87=~(n89|n88);
 n91=n113^n92;
 n121=n114&~n91;
 n125=~n129&n126;
 n166=n153&~n130;
 n170=~n174&n171;
 n211=n196&~n175;
 n215=~n219&n216;
 n258=n240&~n220;
 n263=~n267&n264;
 n298=n280&~n268;
 n303=~n307&n304;
 n86=~n90&n87;
 n119=~(n91|n86);
 n120=n114&~n86;
 n124=~(n130^n125);
 n164=~(n130|n125);
 n165=n153&~n125;
 n169=~(n175^n170);
 n209=~(n175|n170);
 n210=n196&~n170;
 n214=~(n220^n215);
 n257=~(n220|n215);
 n259=n240&~n215;
 n262=~(n268^n263);
 n297=~(n268|n263);
 n299=n280&~n263;
 n302=n308^n303;
 n327=n308&~n303;
 n329=n309&~n303;
 n85=~(n91^n86);
 O7=~(n114^n85);
 n118=~(n120|n119);
 n123=n153^n124;
 n163=~(n165|n164);
 n168=n196^n169;
 n208=~(n210|n209);
 n213=n240^n214;
 n256=~(n258|n257);
 n261=n280^n262;
 n296=~(n298|n297);
 n301=n309^n302;
 n326=~(n328|n327);
 n117=~n121&n118;
 n158=~(n122|n123);
 n162=~n166&n163;
 n203=~(n167|n168);
 n207=~n211&n208;
 n251=~(n212|n213);
 n255=~n259&n256;
 n291=~(n260|n261);
 n295=~n299&n296;
 n321=~(n300|n301);
 n325=~n329&n326;
 n116=~(n122^n117);
 n157=~(n122|n117);
 n159=~(n123|n117);
 n161=~(n167^n162);
 n202=~(n167|n162);
 n204=~(n168|n162);
 n206=~(n212^n207);
 n250=~(n212|n207);
 n252=~(n213|n207);
 n254=~(n260^n255);
 n290=~(n260|n255);
 n292=~(n261|n255);
 n294=~(n300^n295);
 n320=~(n300|n295);
 n322=~(n301|n295);
 n324=n330^n325;
 n343=~(n330|n325);
 O8=n123^n116;
 n156=~(n158|n157);
 n160=~(n168^n161);
 n201=~(n203|n202);
 n205=~(n213^n206);
 n249=~(n251|n250);
 n253=~(n261^n254);
 n289=~(n291|n290);
 n293=~(n301^n294);
 n319=~(n321|n320);
 n323=n331^n324;
 n342=~(n331|n343);
 n155=~n159&n156;
 n200=~n204&n201;
 n248=~n252&n249;
 n288=~n292&n289;
 n318=~n322&n319;
 O9=n160^n155;
 n198=~(n160|n155);
 n199=~(n205^n200);
 n246=~(n205|n200);
 n286=~(n253|n248);
 n316=~(n293|n288);
 n341=n323&~n318;
 O10=~(n199^n198);
 n245=~n205&n198;
 n247=~n200&n198;
 n340=n342&~n341;
 n244=~(n246|n245);
 n243=~n247&n244;
 n242=~(n248^n243);
 n285=~(n248|n243);
 n287=~(n253|n243);
 O11=n253^n242;
 n284=~(n286|n285);
 n283=~n287&n284;
 n282=~(n288^n283);
 n315=~(n288|n283);
 n317=~(n293|n283);
 O12=n293^n282;
 n314=~(n316|n315);
 n313=~n317&n314;
 n312=~(n318^n313);
 n339=~(n318|n313);
 n344=n323&~n313;
 O13=~(n323^n312);
 n338=n340&~n339;
 n337=~n344&n338;
 O14=n345^n337;
 n349=n346&~n337;
 n351=n332&~n337;
 n348=~(n350|n349);
 O15=~n351&n348;
 O = (O0 << 0)|(O1 << 1)|(O2 << 2)|(O3 << 3)|(O4 << 4)|(O5 << 5)|(O6 << 6)|(O7 << 7)|(O8 << 8)|(O9 << 9)|(O10 << 10)|(O11 << 11)|(O12 << 12)|(O13 << 13)|(O14 << 14)|(O15 << 15);
 return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mse parameters
***/
// MAE% = 7.41 %
// MAE = 4858 
// WCE% = 25.78 %
// WCE = 16896 
// WCRE% = 300.00 %
// EP% = 99.21 %
// MRE% = 57.81 %
// MSE = 37660.75e3 
// PDK45_PWR = 0.0019 mW
// PDK45_AREA = 15.5 um2
// PDK45_DELAY = 0.10 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_17C8(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_181, dout_223, dout_267, dout_268, dout_303, dout_308, dout_328;   int avg=0;

   dout_181=((B >> 5)&1)&((A >> 6)&1);
   dout_223=((B >> 7)&1)&((A >> 5)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_303=dout_267|((B >> 7)&1);
   dout_308=((B >> 6)&1)&((A >> 6)&1);
   dout_328=((B >> 7)&1)^dout_303;

   O = 0;
   O |= (0&1) << 0;
   O |= (0&1) << 1;
   O |= (0&1) << 2;
   O |= (0&1) << 3;
   O |= (0&1) << 4;
   O |= (0&1) << 5;
   O |= (0&1) << 6;
   O |= (0&1) << 7;
   O |= (0&1) << 8;
   O |= (dout_223&1) << 9;
   O |= (dout_181&1) << 10;
   O |= (dout_181&1) << 11;
   O |= (dout_223&1) << 12;
   O |= (dout_328&1) << 13;
   O |= (dout_308&1) << 14;
   O |= (dout_268&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 0.78 %
// MAE = 4.0 
// WCE% = 2.93 %
// WCE = 15 
// WCRE% = 500.00 %
// EP% = 90.62 %
// MRE% = 2.08 %
// MSE = 27 
// PDK45_PWR = 0.014 mW
// PDK45_AREA = 37.1 um2
// PDK45_DELAY = 0.31 ns


uint64_t evoapproxlib::evoapprox_t::add8u_5G5(uint64_t a, uint64_t b)
{
  uint16_t c = 0;
  uint8_t n4 = (a >> 2) & 0x1;
  uint8_t n6 = (a >> 3) & 0x1;
  uint8_t n8 = (a >> 4) & 0x1;
  uint8_t n10 = (a >> 5) & 0x1;
  uint8_t n12 = (a >> 6) & 0x1;
  uint8_t n14 = (a >> 7) & 0x1;
  uint8_t n22 = (b >> 3) & 0x1;
  uint8_t n24 = (b >> 4) & 0x1;
  uint8_t n26 = (b >> 5) & 0x1;
  uint8_t n28 = (b >> 6) & 0x1;
  uint8_t n30 = (b >> 7) & 0x1;
  uint8_t n36;
  uint8_t n52;
  uint8_t n66;
  uint8_t n75;
  uint8_t n78;
  uint8_t n79;
  uint8_t n126;
  uint8_t n127;
  uint8_t n183;
  uint8_t n232;
  uint8_t n233;
  uint8_t n282;
  uint8_t n283;
  uint8_t n332;
  uint8_t n333;
  uint8_t n382;
  uint8_t n383;

  n36 = ~(n4 ^ n4);
  n52 = ~(n6 | n36);
  n66 = n52;
  n75 = n66;
  n78 = n75;
  n79 = n75;
  n126 = ~n79;
  n127 = ~n79;
  n183 = n6 | n22;
  n232 = (n8 ^ n24) ^ n78;
  n233 = (n8 & n24) | (n24 & n78) | (n8 & n78);
  n282 = (n10 ^ n26) ^ n233;
  n283 = (n10 & n26) | (n26 & n233) | (n10 & n233);
  n332 = (n12 ^ n28) ^ n283;
  n333 = (n12 & n28) | (n28 & n283) | (n12 & n283);
  n382 = (n14 ^ n30) ^ n333;
  n383 = (n14 & n30) | (n30 & n333) | (n14 & n333);

  c |= (n4 & 0x1) << 0;
  c |= (n126 & 0x1) << 1;
  c |= (n127 & 0x1) << 2;
  c |= (n183 & 0x1) << 3;
  c |= (n232 & 0x1) << 4;
  c |= (n282 & 0x1) << 5;
  c |= (n332 & 0x1) << 6;
  c |= (n382 & 0x1) << 7;
  c |= (n383 & 0x1) << 8;

  return c;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 4.92 %
// MAE = 25 
// WCE% = 17.97 %
// WCE = 92 
// WCRE% = 6300.00 %
// EP% = 98.77 %
// MRE% = 14.58 %
// MSE = 960 
// PDK45_PWR = 0.0046 mW
// PDK45_AREA = 15.0 um2
// PDK45_DELAY = 0.17 ns


uint64_t evoapproxlib::evoapprox_t::add8u_006(uint64_t a, uint64_t b) {
  int wa[8];
  int wb[8];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  int sig_16 = wa[6] & wb[6];
  int sig_26 = 0;
  int sig_32 = ~(wa[6] | wb[6]);
  int sig_45 = wb[7];
  int sig_47 = wb[6] | wa[6];
  int sig_48 = wa[7] ^ wb[7];
  int sig_49 = wa[7] & wb[7];
  int sig_50 = sig_48 & sig_47;
  int sig_51 = sig_48 ^ sig_47;
  int sig_52 = sig_49 | sig_50;
  y |=  (sig_52 & 0x01) << 0; // default output
  y |=  (wa[3] & 0x01) << 1; // default output
  y |=  (wa[7] & 0x01) << 2; // default output
  y |=  (sig_26 & 0x01) << 3; // default output
  y |=  (sig_45 & 0x01) << 4; // default output
  y |=  (sig_16 & 0x01) << 5; // default output
  y |=  (sig_32 & 0x01) << 6; // default output
  y |=  (sig_51 & 0x01) << 7; // default output
  y |=  (sig_52 & 0x01) << 8; // default output
   return y;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 1.54 %
// MAE = 7.9 
// WCE% = 8.59 %
// WCE = 44 
// WCRE% = 66.67 %
// EP% = 59.96 %
// MRE% = 3.76 %
// MSE = 190 
// PDK45_PWR = 0.018 mW
// PDK45_AREA = 65.2 um2
// PDK45_DELAY = 0.24 ns


uint64_t evoapproxlib::evoapprox_t::add8u_8FD(uint64_t a, uint64_t b) {
  int wa[8];
  int wb[8];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  int sig_17 = wa[0] & wb[0];
  int sig_18 = wa[1] | wb[1];
  int sig_21 = sig_18 | sig_17;
  int sig_24 = wa[2] & wb[2];
  int sig_27 = sig_24;
  int sig_28 = wa[3] ^ wb[3];
  int sig_29 = wa[3] & wb[3];
  int sig_31 = sig_28 | sig_27;
  int sig_32 = sig_29;
  int sig_33 = wa[4] ^ wb[4];
  int sig_34 = wa[4] & wb[4];
  int sig_35 = wa[0] ^ wb[0];
  int sig_36 = sig_33 | sig_32;
  int sig_37 = sig_34;
  int sig_38 = wa[5] ^ wb[5];
  int sig_39 = wa[5] & wb[5];
  int sig_40 = wb[2] ^ wa[2];
  int sig_41 = sig_38 | sig_37;
  int sig_42 = sig_39;
  int sig_43 = wa[6] ^ wb[6];
  int sig_44 = wa[6] & wb[6];
  int sig_45 = sig_43 & sig_42;
  int sig_46 = sig_43 ^ sig_42;
  int sig_47 = sig_44 | sig_45;
  int sig_48 = wa[7] ^ wb[7];
  int sig_49 = wa[7] & wb[7];
  int sig_50 = sig_48 & sig_47;
  int sig_51 = sig_48 ^ sig_47;
  int sig_52 = sig_49 | sig_50;
  y |=  (sig_35 & 0x01) << 0; // default output
  y |=  (sig_21 & 0x01) << 1; // default output
  y |=  (sig_40 & 0x01) << 2; // default output
  y |=  (sig_31 & 0x01) << 3; // default output
  y |=  (sig_36 & 0x01) << 4; // default output
  y |=  (sig_41 & 0x01) << 5; // default output
  y |=  (sig_46 & 0x01) << 6; // default output
  y |=  (sig_51 & 0x01) << 7; // default output
  y |=  (sig_52 & 0x01) << 8; // default output
   return y;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 6.25 %
// MAE = 16 
// WCE% = 12.50 %
// WCE = 32 
// WCRE% = 3100.00 %
// EP% = 99.80 %
// MRE% = 64.84 %
// MSE = 313 
// PDK45_PWR = 0.0093 mW
// PDK45_AREA = 22.1 um2
// PDK45_DELAY = 0.19 ns


uint64_t evoapproxlib::evoapprox_t::add8se_90Z(const uint64_t B,const uint64_t A)
{
   uint64_t dout_28, dout_29, dout_30, dout_31, dout_32, dout_40, dout_46, dout_57, dout_58, dout_64, dout_65, dout_66;
   uint64_t O;

   dout_28=((A >> 6)&1)&((B >> 6)&1);
   dout_29=((A >> 6)&1)^((B >> 6)&1);
   dout_30=((A >> 7)&1)&((B >> 7)&1);
   dout_31=((A >> 7)&1)^((B >> 7)&1);
   dout_32=((A >> 7)&1)^((B >> 7)&1);
   dout_40=dout_29&((A >> 5)&1);
   dout_46=dout_28|dout_40;
   dout_57=dout_31&dout_46;
   dout_58=dout_30|dout_57;
   dout_64=dout_29^((A >> 5)&1);
   dout_65=dout_31^dout_46;
   dout_66=dout_32^dout_58;

   O = 0;
   O |= (((B >> 4)&1)&1) << 0;
   O |= (((B >> 4)&1)&1) << 1;
   O |= (((A >> 3)&1)&1) << 2;
   O |= (((B >> 3)&1)&1) << 3;
   O |= (((A >> 4)&1)&1) << 4;
   O |= (((B >> 5)&1)&1) << 5;
   O |= (dout_64&1) << 6;
   O |= (dout_65&1) << 7;
   O |= (dout_66&1) << 8;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 0.056 %
// MAE = 36 
// WCE% = 0.25 %
// WCE = 161 
// WCRE% = 3300.00 %
// EP% = 84.18 %
// MRE% = 3.64 %
// MSE = 2872 
// PDK45_PWR = 0.351 mW
// PDK45_AREA = 599.8 um2
// PDK45_DELAY = 1.36 ns


int16_t evoapproxlib::evoapprox_t::mul8s_1KRC(int8_t A, int8_t B)
{
  int16_t P, P_;
  uint8_t tmp, C_1_6,C_1_7,C_2_2,C_2_3,C_2_4,C_2_5,C_2_6,C_2_7,C_3_1,C_3_2,C_3_3,C_3_4,C_3_5,C_3_6,C_3_7,C_4_0,C_4_1,C_4_2,C_4_3,C_4_4,C_4_5,C_4_6,C_4_7,C_5_0,C_5_1,C_5_2,C_5_3,C_5_4,C_5_5,C_5_6,C_5_7,C_6_0,C_6_1,C_6_2,C_6_3,C_6_4,C_6_5,C_6_6,C_6_7,C_7_0,C_7_1,C_7_2,C_7_3,C_7_4,C_7_5,C_7_6,C_7_7,C_8_0,C_8_1,C_8_2,C_8_3,C_8_4,C_8_5,C_8_6,C_8_7,S_0_7,S_1_3,S_1_4,S_1_5,S_1_6,S_1_7,S_2_2,S_2_3,S_2_4,S_2_5,S_2_6,S_2_7,S_3_1,S_3_2,S_3_3,S_3_4,S_3_5,S_3_6,S_3_7,S_4_0,S_4_1,S_4_2,S_4_3,S_4_4,S_4_5,S_4_6,S_4_7,S_5_0,S_5_1,S_5_2,S_5_3,S_5_4,S_5_5,S_5_6,S_5_7,S_6_0,S_6_1,S_6_2,S_6_3,S_6_4,S_6_5,S_6_6,S_6_7,S_7_0,S_7_1,S_7_2,S_7_3,S_7_4,S_7_5,S_7_6,S_7_7,S_8_0,S_8_1,S_8_2,S_8_3,S_8_4,S_8_5,S_8_6,S_8_7;
  S_0_7 = 1;
  S_1_3 = (((A>>1)&1) & ((B>>3)&1));
  S_1_4 = (((A>>1)&1) & ((B>>4)&1));
  S_1_5 = (((A>>1)&1) & ((B>>5)&1));
  S_1_6 = S_0_7^(((A>>1)&1) & ((B>>6)&1));
  C_1_6 = S_0_7&(((A>>1)&1) & ((B>>6)&1));
  S_1_7 = 1^(((((A>>1)&1) & ((B>>7)&1)))^1);
  C_1_7 = 1&(((((A>>1)&1) & ((B>>7)&1)))^1);
  S_2_2 = S_1_3^(((A>>2)&1) & ((B>>2)&1));
  C_2_2 = S_1_3&(((A>>2)&1) & ((B>>2)&1));
  S_2_3 = S_1_4^(((A>>2)&1) & ((B>>3)&1));
  C_2_3 = S_1_4&(((A>>2)&1) & ((B>>3)&1));
  S_2_4 = S_1_5^(((A>>2)&1) & ((B>>4)&1));
  C_2_4 = S_1_5&(((A>>2)&1) & ((B>>4)&1));
  S_2_5 = S_1_6^(((A>>2)&1) & ((B>>5)&1));
  C_2_5 = S_1_6&(((A>>2)&1) & ((B>>5)&1));
  tmp = S_1_7^C_1_6;
  S_2_6 = tmp^(((A>>2)&1) & ((B>>6)&1));
  C_2_6 = (tmp&(((A>>2)&1) & ((B>>6)&1)))|(S_1_7&C_1_6);
  S_2_7 = C_1_7^(((((A>>2)&1) & ((B>>7)&1)))^1);
  C_2_7 = C_1_7&(((((A>>2)&1) & ((B>>7)&1)))^1);
  S_3_1 = S_2_2^(((A>>3)&1) & ((B>>1)&1));
  C_3_1 = S_2_2&(((A>>3)&1) & ((B>>1)&1));
  tmp = S_2_3^C_2_2;
  S_3_2 = tmp^(((A>>3)&1) & ((B>>2)&1));
  C_3_2 = (tmp&(((A>>3)&1) & ((B>>2)&1)))|(S_2_3&C_2_2);
  tmp = S_2_4^C_2_3;
  S_3_3 = tmp^(((A>>3)&1) & ((B>>3)&1));
  C_3_3 = (tmp&(((A>>3)&1) & ((B>>3)&1)))|(S_2_4&C_2_3);
  tmp = S_2_5^C_2_4;
  S_3_4 = tmp^(((A>>3)&1) & ((B>>4)&1));
  C_3_4 = (tmp&(((A>>3)&1) & ((B>>4)&1)))|(S_2_5&C_2_4);
  tmp = S_2_6^C_2_5;
  S_3_5 = tmp^(((A>>3)&1) & ((B>>5)&1));
  C_3_5 = (tmp&(((A>>3)&1) & ((B>>5)&1)))|(S_2_6&C_2_5);
  tmp = S_2_7^C_2_6;
  S_3_6 = tmp^(((A>>3)&1) & ((B>>6)&1));
  C_3_6 = (tmp&(((A>>3)&1) & ((B>>6)&1)))|(S_2_7&C_2_6);
  S_3_7 = C_2_7^(((((A>>3)&1) & ((B>>7)&1)))^1);
  C_3_7 = C_2_7&(((((A>>3)&1) & ((B>>7)&1)))^1);
  S_4_0 = S_3_1^(((A>>4)&1) & ((B>>0)&1));
  C_4_0 = S_3_1&(((A>>4)&1) & ((B>>0)&1));
  tmp = S_3_2^C_3_1;
  S_4_1 = tmp^(((A>>4)&1) & ((B>>1)&1));
  C_4_1 = (tmp&(((A>>4)&1) & ((B>>1)&1)))|(S_3_2&C_3_1);
  tmp = S_3_3^C_3_2;
  S_4_2 = tmp^(((A>>4)&1) & ((B>>2)&1));
  C_4_2 = (tmp&(((A>>4)&1) & ((B>>2)&1)))|(S_3_3&C_3_2);
  tmp = S_3_4^C_3_3;
  S_4_3 = tmp^(((A>>4)&1) & ((B>>3)&1));
  C_4_3 = (tmp&(((A>>4)&1) & ((B>>3)&1)))|(S_3_4&C_3_3);
  tmp = S_3_5^C_3_4;
  S_4_4 = tmp^(((A>>4)&1) & ((B>>4)&1));
  C_4_4 = (tmp&(((A>>4)&1) & ((B>>4)&1)))|(S_3_5&C_3_4);
  tmp = S_3_6^C_3_5;
  S_4_5 = tmp^(((A>>4)&1) & ((B>>5)&1));
  C_4_5 = (tmp&(((A>>4)&1) & ((B>>5)&1)))|(S_3_6&C_3_5);
  tmp = S_3_7^C_3_6;
  S_4_6 = tmp^(((A>>4)&1) & ((B>>6)&1));
  C_4_6 = (tmp&(((A>>4)&1) & ((B>>6)&1)))|(S_3_7&C_3_6);
  S_4_7 = C_3_7^(((((A>>4)&1) & ((B>>7)&1)))^1);
  C_4_7 = C_3_7&(((((A>>4)&1) & ((B>>7)&1)))^1);
  tmp = S_4_1^C_4_0;
  S_5_0 = tmp^(((A>>5)&1) & ((B>>0)&1));
  C_5_0 = (tmp&(((A>>5)&1) & ((B>>0)&1)))|(S_4_1&C_4_0);
  tmp = S_4_2^C_4_1;
  S_5_1 = tmp^(((A>>5)&1) & ((B>>1)&1));
  C_5_1 = (tmp&(((A>>5)&1) & ((B>>1)&1)))|(S_4_2&C_4_1);
  tmp = S_4_3^C_4_2;
  S_5_2 = tmp^(((A>>5)&1) & ((B>>2)&1));
  C_5_2 = (tmp&(((A>>5)&1) & ((B>>2)&1)))|(S_4_3&C_4_2);
  tmp = S_4_4^C_4_3;
  S_5_3 = tmp^(((A>>5)&1) & ((B>>3)&1));
  C_5_3 = (tmp&(((A>>5)&1) & ((B>>3)&1)))|(S_4_4&C_4_3);
  tmp = S_4_5^C_4_4;
  S_5_4 = tmp^(((A>>5)&1) & ((B>>4)&1));
  C_5_4 = (tmp&(((A>>5)&1) & ((B>>4)&1)))|(S_4_5&C_4_4);
  tmp = S_4_6^C_4_5;
  S_5_5 = tmp^(((A>>5)&1) & ((B>>5)&1));
  C_5_5 = (tmp&(((A>>5)&1) & ((B>>5)&1)))|(S_4_6&C_4_5);
  tmp = S_4_7^C_4_6;
  S_5_6 = tmp^(((A>>5)&1) & ((B>>6)&1));
  C_5_6 = (tmp&(((A>>5)&1) & ((B>>6)&1)))|(S_4_7&C_4_6);
  S_5_7 = C_4_7^(((((A>>5)&1) & ((B>>7)&1)))^1);
  C_5_7 = C_4_7&(((((A>>5)&1) & ((B>>7)&1)))^1);
  tmp = S_5_1^C_5_0;
  S_6_0 = tmp^(((A>>6)&1) & ((B>>0)&1));
  C_6_0 = (tmp&(((A>>6)&1) & ((B>>0)&1)))|(S_5_1&C_5_0);
  tmp = S_5_2^C_5_1;
  S_6_1 = tmp^(((A>>6)&1) & ((B>>1)&1));
  C_6_1 = (tmp&(((A>>6)&1) & ((B>>1)&1)))|(S_5_2&C_5_1);
  tmp = S_5_3^C_5_2;
  S_6_2 = tmp^(((A>>6)&1) & ((B>>2)&1));
  C_6_2 = (tmp&(((A>>6)&1) & ((B>>2)&1)))|(S_5_3&C_5_2);
  tmp = S_5_4^C_5_3;
  S_6_3 = tmp^(((A>>6)&1) & ((B>>3)&1));
  C_6_3 = (tmp&(((A>>6)&1) & ((B>>3)&1)))|(S_5_4&C_5_3);
  tmp = S_5_5^C_5_4;
  S_6_4 = tmp^(((A>>6)&1) & ((B>>4)&1));
  C_6_4 = (tmp&(((A>>6)&1) & ((B>>4)&1)))|(S_5_5&C_5_4);
  tmp = S_5_6^C_5_5;
  S_6_5 = tmp^(((A>>6)&1) & ((B>>5)&1));
  C_6_5 = (tmp&(((A>>6)&1) & ((B>>5)&1)))|(S_5_6&C_5_5);
  tmp = S_5_7^C_5_6;
  S_6_6 = tmp^(((A>>6)&1) & ((B>>6)&1));
  C_6_6 = (tmp&(((A>>6)&1) & ((B>>6)&1)))|(S_5_7&C_5_6);
  S_6_7 = C_5_7^(((((A>>6)&1) & ((B>>7)&1)))^1);
  C_6_7 = C_5_7&(((((A>>6)&1) & ((B>>7)&1)))^1);
  tmp = S_6_1^C_6_0;
  S_7_0 = tmp^(((((A>>7)&1) & ((B>>0)&1)))^1);
  C_7_0 = (tmp&(((((A>>7)&1) & ((B>>0)&1)))^1))|(S_6_1&C_6_0);
  tmp = S_6_2^C_6_1;
  S_7_1 = tmp^(((((A>>7)&1) & ((B>>1)&1)))^1);
  C_7_1 = (tmp&(((((A>>7)&1) & ((B>>1)&1)))^1))|(S_6_2&C_6_1);
  tmp = S_6_3^C_6_2;
  S_7_2 = tmp^(((((A>>7)&1) & ((B>>2)&1)))^1);
  C_7_2 = (tmp&(((((A>>7)&1) & ((B>>2)&1)))^1))|(S_6_3&C_6_2);
  tmp = S_6_4^C_6_3;
  S_7_3 = tmp^(((((A>>7)&1) & ((B>>3)&1)))^1);
  C_7_3 = (tmp&(((((A>>7)&1) & ((B>>3)&1)))^1))|(S_6_4&C_6_3);
  tmp = S_6_5^C_6_4;
  S_7_4 = tmp^(((((A>>7)&1) & ((B>>4)&1)))^1);
  C_7_4 = (tmp&(((((A>>7)&1) & ((B>>4)&1)))^1))|(S_6_5&C_6_4);
  tmp = S_6_6^C_6_5;
  S_7_5 = tmp^(((((A>>7)&1) & ((B>>5)&1)))^1);
  C_7_5 = (tmp&(((((A>>7)&1) & ((B>>5)&1)))^1))|(S_6_6&C_6_5);
  tmp = S_6_7^C_6_6;
  S_7_6 = tmp^(((((A>>7)&1) & ((B>>6)&1)))^1);
  C_7_6 = (tmp&(((((A>>7)&1) & ((B>>6)&1)))^1))|(S_6_7&C_6_6);
  S_7_7 = C_6_7^(((A>>7)&1) & ((B>>7)&1));
  C_7_7 = C_6_7&(((A>>7)&1) & ((B>>7)&1));
  S_8_0 = S_7_1^C_7_0;
  C_8_0 = S_7_1&C_7_0;
  tmp = S_7_2^C_8_0;
  S_8_1 = tmp^C_7_1;
  C_8_1 = (tmp&C_7_1)|(S_7_2&C_8_0);
  tmp = S_7_3^C_8_1;
  S_8_2 = tmp^C_7_2;
  C_8_2 = (tmp&C_7_2)|(S_7_3&C_8_1);
  tmp = S_7_4^C_8_2;
  S_8_3 = tmp^C_7_3;
  C_8_3 = (tmp&C_7_3)|(S_7_4&C_8_2);
  tmp = S_7_5^C_8_3;
  S_8_4 = tmp^C_7_4;
  C_8_4 = (tmp&C_7_4)|(S_7_5&C_8_3);
  tmp = S_7_6^C_8_4;
  S_8_5 = tmp^C_7_5;
  C_8_5 = (tmp&C_7_5)|(S_7_6&C_8_4);
  tmp = S_7_7^C_8_5;
  S_8_6 = tmp^C_7_6;
  C_8_6 = (tmp&C_7_6)|(S_7_7&C_8_5);
  tmp = 1^C_8_6;
  S_8_7 = tmp^C_7_7;
  C_8_7 = (tmp&C_7_7)|(1&C_8_6);
  P = 0;
  P |= (S_4_0 & 1) << 4;
  P |= (S_5_0 & 1) << 5;
  P |= (S_6_0 & 1) << 6;
  P |= (S_7_0 & 1) << 7;
  P |= (S_8_0 & 1) << 8;
  P |= (S_8_1 & 1) << 9;
  P |= (S_8_2 & 1) << 10;
  P |= (S_8_3 & 1) << 11;
  P |= (S_8_4 & 1) << 12;
  P |= (S_8_5 & 1) << 13;
  P |= (S_8_6 & 1) << 14;
  P |= (S_8_7 & 1) << 15;
  return P;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 0.39 %
// MAE = 0.5 
// WCE% = 1.56 %
// WCE = 2.0 
// WCRE% = 66.67 %
// EP% = 37.30 %
// MRE% = 1.48 %
// MSE = 0.7 
// PDK45_PWR = 0.032 mW
// PDK45_AREA = 67.1 um2
// PDK45_DELAY = 0.60 ns


uint64_t evoapproxlib::evoapprox_t::add8s_6FR(const uint64_t B,const uint64_t A)
{
   uint64_t dout_16, dout_17, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61;
   uint64_t O;

   dout_16=((B >> 7)&1)&((A >> 7)&1);
   dout_17=((A >> 0)&1)|((B >> 0)&1);
   dout_18=((A >> 1)&1)&((B >> 1)&1);
   dout_19=((A >> 1)&1)^((B >> 1)&1);
   dout_20=((A >> 2)&1)&((B >> 2)&1);
   dout_21=((A >> 2)&1)^((B >> 2)&1);
   dout_22=((A >> 3)&1)&((B >> 3)&1);
   dout_23=((A >> 3)&1)^((B >> 3)&1);
   dout_24=((A >> 4)&1)&((B >> 4)&1);
   dout_25=((A >> 4)&1)^((B >> 4)&1);
   dout_26=((A >> 5)&1)&((B >> 5)&1);
   dout_27=((A >> 5)&1)^((B >> 5)&1);
   dout_28=((A >> 6)&1)&((B >> 6)&1);
   dout_29=((A >> 6)&1)^((B >> 6)&1);
   dout_30=((A >> 7)&1)^((B >> 7)&1);
   dout_31=dout_21&dout_18;
   dout_32=dout_21&dout_19;
   dout_33=dout_20|dout_31;
   dout_34=dout_25&dout_22;
   dout_35=dout_25&dout_23;
   dout_36=dout_24|dout_34;
   dout_37=dout_29&dout_26;
   dout_38=dout_29&dout_27;
   dout_39=dout_28|dout_37;
   dout_40=dout_32&dout_16;
   dout_41=dout_33|dout_40;
   dout_42=dout_38&dout_36;
   dout_43=dout_38&dout_35;
   dout_44=dout_39|dout_42;
   dout_45=dout_43&dout_41;
   dout_46=dout_44|dout_45;
   dout_47=dout_35&dout_41;
   dout_48=dout_36|dout_47;
   dout_49=dout_19&dout_16;
   dout_50=dout_18|dout_49;
   dout_51=dout_23&dout_41;
   dout_52=dout_22|dout_51;
   dout_53=dout_27&dout_48;
   dout_54=dout_26|dout_53;
   dout_55=dout_19^dout_16;
   dout_56=dout_21^dout_50;
   dout_57=dout_23^dout_41;
   dout_58=dout_25^dout_52;
   dout_59=dout_27^dout_48;
   dout_60=dout_29^dout_54;
   dout_61=dout_30^dout_46;

   O = 0;
   O |= (dout_17&1) << 0;
   O |= (dout_55&1) << 1;
   O |= (dout_56&1) << 2;
   O |= (dout_57&1) << 3;
   O |= (dout_58&1) << 4;
   O |= (dout_59&1) << 5;
   O |= (dout_60&1) << 6;
   O |= (dout_61&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 4.38 %
// MAE = 11 
// WCE% = 12.50 %
// WCE = 32 
// WCRE% = 3100.00 %
// EP% = 97.27 %
// MRE% = 39.03 %
// MSE = 190 
// PDK45_PWR = 0.0094 mW
// PDK45_AREA = 23.5 um2
// PDK45_DELAY = 0.19 ns


uint64_t evoapproxlib::evoapprox_t::add8se_8UF(const uint64_t B,const uint64_t A)
{
   uint64_t dout_25, dout_26, dout_28, dout_29, dout_30, dout_31, dout_32, dout_40, dout_46, dout_56, dout_57, dout_58, dout_62, dout_63, dout_64, dout_65, dout_66;
   uint64_t O;

   dout_25=((A >> 5)&1)^0xFFFFFFFFFFFFFFFFU;
   dout_26=((A >> 0)&1)&((B >> 5)&1);
   dout_28=((A >> 6)&1)&((B >> 6)&1);
   dout_29=((A >> 6)&1)^((B >> 6)&1);
   dout_30=((A >> 7)&1)&((B >> 7)&1);
   dout_31=((A >> 7)&1)^((B >> 7)&1);
   dout_32=((A >> 7)&1)^((B >> 7)&1);
   dout_40=dout_29&((B >> 5)&1);
   dout_46=dout_28|dout_40;
   dout_56=dout_26|((B >> 5)&1);
   dout_57=dout_31&dout_46;
   dout_58=dout_30|dout_57;
   dout_62=dout_25^0xFFFFFFFFFFFFFFFFU;
   dout_63=((B >> 5)&1)^0xFFFFFFFFFFFFFFFFU;
   dout_64=dout_29^dout_56;
   dout_65=dout_31^dout_46;
   dout_66=dout_32^dout_58;

   O = 0;
   O |= (0&1) << 0;
   O |= (((A >> 1)&1)&1) << 1;
   O |= (dout_62&1) << 2;
   O |= (((A >> 3)&1)&1) << 3;
   O |= (dout_62&1) << 4;
   O |= (dout_63&1) << 5;
   O |= (dout_64&1) << 6;
   O |= (dout_65&1) << 7;
   O |= (dout_66&1) << 8;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 0.059 %
// MAE = 38 
// WCE% = 0.45 %
// WCE = 292 
// WCRE% = 43.56 %
// EP% = 69.26 %
// MRE% = 0.80 %
// MSE = 3147 
// PDK45_PWR = 0.304 mW
// PDK45_AREA = 590.4 um2
// PDK45_DELAY = 1.13 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_ZFB(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_16, dout_17, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_65, dout_66, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_82, dout_85, dout_87, dout_90, dout_92, dout_95, dout_97, dout_100, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110, dout_111, dout_112, dout_113, dout_114, dout_116, dout_117, dout_119, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143, dout_144, dout_145, dout_146, dout_147, dout_153, dout_158, dout_163, dout_166, dout_168, dout_170, dout_171, dout_172, dout_173, dout_174, dout_175, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_183, dout_184, dout_185, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_218, dout_230, dout_231, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_262, dout_264, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_353, dout_356, dout_358, dout_363, dout_367, dout_368, dout_370, dout_372, dout_374, dout_378, dout_382, dout_383, dout_389, dout_390, dout_391, dout_401, dout_402, dout_404, dout_405, dout_407, dout_409, dout_411, dout_425, dout_432, dout_434, dout_435, dout_437, dout_448, dout_451, dout_452, dout_456, dout_457, dout_463, dout_464, dout_498, dout_499, dout_500, dout_501, dout_502, dout_503, dout_504, dout_505;   int avg=0;

   dout_16=((B >> 0)&1)&((A >> 0)&1);
   dout_17=((B >> 1)&1)&((A >> 0)&1);
   dout_18=((B >> 2)&1)&((A >> 0)&1);
   dout_19=((B >> 3)&1)&((A >> 0)&1);
   dout_20=((B >> 4)&1)&((A >> 0)&1);
   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_24=((B >> 0)&1)&((A >> 1)&1);
   dout_25=((B >> 1)&1)&((A >> 1)&1);
   dout_26=((B >> 2)&1)&((A >> 1)&1);
   dout_27=((B >> 3)&1)&((A >> 1)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_32=((B >> 0)&1)&((A >> 2)&1);
   dout_33=((B >> 1)&1)&((A >> 2)&1);
   dout_34=((B >> 2)&1)&((A >> 2)&1);
   dout_35=((B >> 3)&1)&((A >> 2)&1);
   dout_36=((B >> 4)&1)&((A >> 2)&1);
   dout_37=((B >> 5)&1)&((A >> 2)&1);
   dout_38=((B >> 6)&1)&((A >> 2)&1);
   dout_39=((B >> 7)&1)&((A >> 2)&1);
   dout_40=((B >> 0)&1)&((A >> 3)&1);
   dout_41=((B >> 1)&1)&((A >> 3)&1);
   dout_42=((B >> 2)&1)&((A >> 3)&1);
   dout_43=((B >> 3)&1)&((A >> 3)&1);
   dout_44=((B >> 4)&1)&((A >> 3)&1);
   dout_45=((B >> 5)&1)&((A >> 3)&1);
   dout_46=((B >> 6)&1)&((A >> 3)&1);
   dout_47=((B >> 7)&1)&((A >> 3)&1);
   dout_48=((B >> 0)&1)&((A >> 4)&1);
   dout_49=((B >> 1)&1)&((A >> 4)&1);
   dout_50=((B >> 2)&1)&((A >> 4)&1);
   dout_51=((B >> 3)&1)&((A >> 4)&1);
   dout_52=((B >> 4)&1)&((A >> 4)&1);
   dout_53=((B >> 5)&1)&((A >> 4)&1);
   dout_54=((B >> 6)&1)&((A >> 4)&1);
   dout_55=((B >> 7)&1)&((A >> 4)&1);
   dout_56=((B >> 0)&1)&((A >> 5)&1);
   dout_57=((B >> 1)&1)&((A >> 5)&1);
   dout_58=((B >> 2)&1)&((A >> 5)&1);
   dout_59=((B >> 3)&1)&((A >> 5)&1);
   dout_60=((B >> 4)&1)&((A >> 5)&1);
   dout_61=((B >> 5)&1)&((A >> 5)&1);
   dout_62=((B >> 6)&1)&((A >> 5)&1);
   dout_63=((B >> 7)&1)&((A >> 5)&1);
   dout_64=((B >> 0)&1)&((A >> 6)&1);
   dout_65=((B >> 1)&1)&((A >> 6)&1);
   dout_66=((B >> 2)&1)&((A >> 6)&1);
   dout_67=((B >> 3)&1)&((A >> 6)&1);
   dout_68=((B >> 4)&1)&((A >> 6)&1);
   dout_69=((B >> 5)&1)&((A >> 6)&1);
   dout_70=((B >> 6)&1)&((A >> 6)&1);
   dout_71=((B >> 7)&1)&((A >> 6)&1);
   dout_72=((B >> 0)&1)&((A >> 7)&1);
   dout_73=((B >> 1)&1)&((A >> 7)&1);
   dout_74=((B >> 2)&1)&((A >> 7)&1);
   dout_75=((B >> 3)&1)&((A >> 7)&1);
   dout_76=((B >> 4)&1)&((A >> 7)&1);
   dout_77=((B >> 5)&1)&((A >> 7)&1);
   dout_78=((B >> 6)&1)&((A >> 7)&1);
   dout_79=((B >> 7)&1)&((A >> 7)&1);
   dout_80=dout_17|dout_24;
   dout_82=dout_18|dout_25;
   dout_85=dout_82|dout_32;
   dout_87=dout_19|dout_26;
   dout_90=dout_87|dout_33;
   dout_92=dout_20|dout_27;
   dout_95=dout_92|dout_34;
   dout_97=dout_21|dout_28;
   dout_100=dout_97|dout_35;
   dout_102=dout_22|dout_29;
   dout_103=dout_22&dout_29;
   dout_104=dout_102&dout_36;
   dout_105=dout_102|dout_36;
   dout_106=dout_103|dout_104;
   dout_107=dout_23^dout_30;
   dout_108=dout_23&dout_30;
   dout_109=dout_107&dout_37;
   dout_110=dout_107^dout_37;
   dout_111=dout_108|dout_109;
   dout_112=dout_31&dout_38;
   dout_113=dout_31^dout_38;
   dout_114=dout_41|dout_48;
   dout_116=dout_42|dout_49;
   dout_117=dout_42&((B >> 5)&1);
   dout_119=dout_116|dout_56;
   dout_121=dout_43^dout_50;
   dout_122=dout_43&dout_50;
   dout_123=dout_121&dout_57;
   dout_124=dout_121^dout_57;
   dout_125=dout_122|dout_123;
   dout_126=dout_44^dout_51;
   dout_127=dout_44&dout_51;
   dout_128=dout_126&dout_58;
   dout_129=dout_126^dout_58;
   dout_130=dout_127|dout_128;
   dout_131=dout_45^dout_52;
   dout_132=dout_45&dout_52;
   dout_133=dout_131&dout_59;
   dout_134=dout_131^dout_59;
   dout_135=dout_132|dout_133;
   dout_136=dout_46^dout_53;
   dout_137=dout_46&dout_53;
   dout_138=dout_136&dout_60;
   dout_139=dout_136^dout_60;
   dout_140=dout_137|dout_138;
   dout_141=dout_47^dout_54;
   dout_142=dout_47&dout_54;
   dout_143=dout_141&dout_61;
   dout_144=dout_141^dout_61;
   dout_145=dout_142|dout_143;
   dout_146=dout_55&dout_62;
   dout_147=dout_55^dout_62;
   dout_153=dout_90|dout_40;
   dout_158=dout_95|dout_114;
   dout_163=dout_100|dout_119;
   dout_166=dout_105&dout_124;
   dout_168=dout_105|dout_124;
   dout_170=dout_110^dout_106;
   dout_171=dout_110&dout_106;
   dout_172=dout_170&dout_129;
   dout_173=dout_170^dout_129;
   dout_174=dout_171|dout_172;
   dout_175=dout_113^dout_111;
   dout_176=dout_113&dout_111;
   dout_177=dout_175&dout_134;
   dout_178=dout_175^dout_134;
   dout_179=dout_176|dout_177;
   dout_180=dout_39^dout_112;
   dout_181=((B >> 6)&1)&dout_112;
   dout_182=dout_180&dout_139;
   dout_183=dout_180^dout_139;
   dout_184=dout_181|dout_182;
   dout_185=dout_117|dout_64;
   dout_187=dout_125^dout_65;
   dout_188=dout_125&dout_65;
   dout_189=dout_187&dout_72;
   dout_190=dout_187|dout_72;
   dout_191=dout_188|dout_189;
   dout_192=dout_130^dout_66;
   dout_193=dout_130&dout_66;
   dout_194=dout_192&dout_73;
   dout_195=dout_192^dout_73;
   dout_196=dout_193|dout_194;
   dout_197=dout_135^dout_67;
   dout_198=dout_135&dout_67;
   dout_199=dout_197&dout_74;
   dout_200=dout_197^dout_74;
   dout_201=dout_198|dout_199;
   dout_202=dout_140^dout_68;
   dout_203=dout_140&dout_68;
   dout_204=dout_202&dout_75;
   dout_205=dout_202^dout_75;
   dout_206=dout_203|dout_204;
   dout_207=dout_145^dout_69;
   dout_208=dout_145&dout_69;
   dout_209=dout_207&dout_76;
   dout_210=dout_207^dout_76;
   dout_211=dout_208|dout_209;
   dout_212=dout_146^dout_70;
   dout_213=dout_146&dout_70;
   dout_214=dout_212&dout_77;
   dout_215=dout_212^dout_77;
   dout_216=dout_213|dout_214;
   dout_217=dout_71&((A >> 7)&1);
   dout_218=dout_71^dout_78;
   dout_230=dout_188&dout_185;
   dout_231=dout_168|dout_185;
   dout_233=dout_173^dout_166;
   dout_234=dout_173&dout_166;
   dout_235=dout_233&dout_190;
   dout_236=dout_233^dout_190;
   dout_237=dout_234|dout_235;
   dout_238=dout_178^dout_174;
   dout_239=dout_178&dout_174;
   dout_240=dout_238&dout_195;
   dout_241=dout_238^dout_195;
   dout_242=dout_239|dout_240;
   dout_243=dout_183^dout_179;
   dout_244=dout_183&dout_179;
   dout_245=dout_243&dout_200;
   dout_246=dout_243^dout_200;
   dout_247=dout_244|dout_245;
   dout_248=dout_144^dout_184;
   dout_249=dout_144&dout_184;
   dout_250=dout_248&dout_205;
   dout_251=dout_248^dout_205;
   dout_252=dout_249|dout_250;
   dout_253=dout_147&dout_210;
   dout_254=dout_147^dout_210;
   dout_255=dout_63&dout_215;
   dout_256=dout_63^dout_215;
   dout_262=((A >> 2)&1)&dout_235;
   dout_264=((A >> 1)&1)&dout_230;
   dout_268=dout_241^dout_237;
   dout_269=dout_241&dout_237;
   dout_270=dout_268&dout_191;
   dout_271=dout_268^dout_191;
   dout_272=dout_269|dout_270;
   dout_273=dout_246^dout_242;
   dout_274=dout_246&dout_242;
   dout_275=dout_273&dout_196;
   dout_276=dout_273^dout_196;
   dout_277=dout_274|dout_275;
   dout_278=dout_251^dout_247;
   dout_279=dout_251&dout_247;
   dout_280=dout_278&dout_201;
   dout_281=dout_278^dout_201;
   dout_282=dout_279|dout_280;
   dout_283=dout_254^dout_252;
   dout_284=dout_254&dout_252;
   dout_285=dout_283&dout_206;
   dout_286=dout_283^dout_206;
   dout_287=dout_284|dout_285;
   dout_288=dout_256^dout_253;
   dout_289=dout_256&dout_253;
   dout_290=dout_288&dout_211;
   dout_291=dout_288^dout_211;
   dout_292=dout_289|dout_290;
   dout_293=dout_218^dout_255;
   dout_294=dout_218&dout_255;
   dout_295=dout_293&dout_216;
   dout_296=dout_293^dout_216;
   dout_297=dout_294|dout_295;
   dout_298=((B >> 6)&1)&dout_217;
   dout_299=dout_79^dout_298;
   dout_305=dout_236&dout_262;
   dout_306=dout_271^dout_264;
   dout_307=dout_271&dout_264;
   dout_308=dout_276^dout_272;
   dout_309=dout_276&dout_272;
   dout_310=dout_281^dout_277;
   dout_311=dout_281&dout_277;
   dout_312=dout_286^dout_282;
   dout_313=dout_286&dout_282;
   dout_314=dout_291^dout_287;
   dout_315=dout_291&dout_287;
   dout_316=dout_296^dout_292;
   dout_317=dout_296&dout_292;
   dout_318=dout_299^dout_297;
   dout_319=dout_299&dout_297;
   dout_353=dout_308&dout_307;
   dout_356=dout_353|dout_309;
   dout_358=dout_310&dout_308;
   dout_363=dout_358&dout_356;
   dout_367=dout_310&dout_309;
   dout_368=dout_311|dout_367;
   dout_370=dout_305|dout_363;
   dout_372=dout_368|dout_370;
   dout_374=dout_307&((B >> 1)&1);
   dout_378=dout_312&dout_363;
   dout_382=dout_374&dout_358;
   dout_383=dout_312&dout_368;
   dout_389=dout_383|dout_378;
   dout_390=dout_313|dout_389;
   dout_391=dout_314&dout_312;
   dout_401=dout_391&dout_382;
   dout_402=dout_391&dout_368;
   dout_404=dout_314&dout_313;
   dout_405=dout_315|dout_404;
   dout_407=dout_401|dout_404;
   dout_409=dout_405|dout_402;
   dout_411=dout_409|dout_407;
   dout_425=dout_316&dout_409;
   dout_432=dout_316&dout_407;
   dout_434=dout_425|dout_432;
   dout_435=dout_317|dout_434;
   dout_437=dout_318&dout_316;
   dout_448=dout_437&dout_391;
   dout_451=dout_448&dout_382;
   dout_452=dout_437&dout_409;
   dout_456=dout_318&dout_317;
   dout_457=dout_319|dout_456;
   dout_463=dout_452|dout_457;
   dout_464=dout_451|dout_463;
   dout_498=dout_306^dout_305;
   dout_499=dout_308^dout_307;
   dout_500=dout_310^dout_356;
   dout_501=dout_312^dout_372;
   dout_502=dout_314^dout_390;
   dout_503=dout_316^dout_411;
   dout_504=dout_318^dout_435;
   dout_505=dout_298|dout_464;

   O = 0;
   O |= (dout_16&1) << 0;
   O |= (dout_80&1) << 1;
   O |= (dout_85&1) << 2;
   O |= (dout_153&1) << 3;
   O |= (dout_158&1) << 4;
   O |= (dout_163&1) << 5;
   O |= (dout_231&1) << 6;
   O |= (dout_236&1) << 7;
   O |= (dout_498&1) << 8;
   O |= (dout_499&1) << 9;
   O |= (dout_500&1) << 10;
   O |= (dout_501&1) << 11;
   O |= (dout_502&1) << 12;
   O |= (dout_503&1) << 13;
   O |= (dout_504&1) << 14;
   O |= (dout_505&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mse parameters
***/
// MAE% = 0.23 %
// MAE = 1.2 
// WCE% = 0.78 %
// WCE = 4.0 
// WCRE% = 100.00 %
// EP% = 76.56 %
// MRE% = 0.68 %
// MSE = 2.5 
// PDK45_PWR = 0.023 mW
// PDK45_AREA = 50.7 um2
// PDK45_DELAY = 0.47 ns


uint64_t evoapproxlib::evoapprox_t::add8u_5M7(uint64_t a, uint64_t b)
{
  uint16_t c = 0;
  uint8_t n2 = (a >> 1) & 0x1;
  uint8_t n4 = (a >> 2) & 0x1;
  uint8_t n6 = (a >> 3) & 0x1;
  uint8_t n8 = (a >> 4) & 0x1;
  uint8_t n10 = (a >> 5) & 0x1;
  uint8_t n12 = (a >> 6) & 0x1;
  uint8_t n14 = (a >> 7) & 0x1;
  uint8_t n20 = (b >> 2) & 0x1;
  uint8_t n22 = (b >> 3) & 0x1;
  uint8_t n24 = (b >> 4) & 0x1;
  uint8_t n26 = (b >> 5) & 0x1;
  uint8_t n28 = (b >> 6) & 0x1;
  uint8_t n30 = (b >> 7) & 0x1;
  uint8_t n34;
  uint8_t n38;
  uint8_t n45;
  uint8_t n48;
  uint8_t n49;
  uint8_t n51;
  uint8_t n58;
  uint8_t n59;
  uint8_t n68;
  uint8_t n69;
  uint8_t n78;
  uint8_t n79;
  uint8_t n85;
  uint8_t n86;
  uint8_t n87;
  uint8_t n88;
  uint8_t n96;
  uint8_t n97;
  uint8_t n127;
  uint8_t n134;
  uint8_t n145;
  uint8_t n152;
  uint8_t n162;
  uint8_t n170;
  uint8_t n181;
  uint8_t n198;
  uint8_t n199;
  uint8_t n226;
  uint8_t n240;
  uint8_t n245;
  uint8_t n255;
  uint8_t n272;
  uint8_t n391;
  uint8_t n394;
  uint8_t n404;
  uint8_t n412;
  uint8_t n413;
  uint8_t n423;

  n34 = ~(n20 & n4);
  n38 = ~n34;
  n45 = n38;
  n48 = n45;
  n49 = n45;
  n51 = n4 | n20;
  n58 = (n6 ^ n22) ^ n49;
  n59 = (n6 & n22) | (n22 & n49) | (n6 & n49);
  n68 = n8 ^ n24;
  n69 = n8 & n24;
  n78 = n10 ^ n26;
  n79 = n10 & n26;
  n85 = n59;
  n86 = n12 ^ n28;
  n87 = n12 & n28;
  n88 = n24 | n8;
  n96 = n14 ^ n30;
  n97 = n14 & n30;
  n127 = n69;
  n134 = n88 & n85;
  n145 = ~n48;
  n152 = n127 | n134;
  n162 = n86 & n79;
  n170 = n86 & n78;
  n181 = n87 | n162;
  n198 = n152;
  n199 = n152;
  n226 = n78 & n199;
  n240 = ~n85;
  n245 = n79 | n226;
  n255 = n170 & n198;
  n272 = n181 | n255;
  n391 = ~(n240 ^ n68);
  n394 = n78 ^ n199;
  n404 = n86 ^ n245;
  n412 = n96 ^ n272;
  n413 = n96 & n272;
  n423 = n97 | n413;

  c |= (n2 & 0x1) << 0;
  c |= (n145 & 0x1) << 1;
  c |= (n51 & 0x1) << 2;
  c |= (n58 & 0x1) << 3;
  c |= (n391 & 0x1) << 4;
  c |= (n394 & 0x1) << 5;
  c |= (n404 & 0x1) << 6;
  c |= (n412 & 0x1) << 7;
  c |= (n423 & 0x1) << 8;

  return c;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 0.68 %
// MAE = 3.5 
// WCE% = 2.93 %
// WCE = 15 
// WCRE% = 200.00 %
// EP% = 85.74 %
// MRE% = 1.80 %
// MSE = 24 
// PDK45_PWR = 0.017 mW
// PDK45_AREA = 53.0 um2
// PDK45_DELAY = 0.50 ns


uint64_t evoapproxlib::evoapprox_t::add8u_5HQ(uint64_t a, uint64_t b)
{
  uint16_t c = 0;
  uint8_t n4 = (a >> 2) & 0x1;
  uint8_t n6 = (a >> 3) & 0x1;
  uint8_t n8 = (a >> 4) & 0x1;
  uint8_t n10 = (a >> 5) & 0x1;
  uint8_t n12 = (a >> 6) & 0x1;
  uint8_t n14 = (a >> 7) & 0x1;
  uint8_t n20 = (b >> 2) & 0x1;
  uint8_t n22 = (b >> 3) & 0x1;
  uint8_t n24 = (b >> 4) & 0x1;
  uint8_t n26 = (b >> 5) & 0x1;
  uint8_t n28 = (b >> 6) & 0x1;
  uint8_t n30 = (b >> 7) & 0x1;
  uint8_t n33;
  uint8_t n40;
  uint8_t n43;
  uint8_t n49;
  uint8_t n52;
  uint8_t n78;
  uint8_t n127;
  uint8_t n132;
  uint8_t n144;
  uint8_t n182;
  uint8_t n232;
  uint8_t n233;
  uint8_t n282;
  uint8_t n283;
  uint8_t n332;
  uint8_t n333;
  uint8_t n382;
  uint8_t n383;

  n33 = ~(n22 & n20 & n6);
  n40 = n20 ^ n20;
  n43 = n10 | n33;
  n49 = ~(n43 | n30);
  n52 = n4 & n49;
  n78 = n52;
  n127 = ~n40;
  n132 = n4 | n20;
  n144 = ~n78;
  n182 = n6 | n22;
  n232 = (n8 ^ n24) ^ n78;
  n233 = (n8 & n24) | (n24 & n78) | (n8 & n78);
  n282 = (n10 ^ n26) ^ n233;
  n283 = (n10 & n26) | (n26 & n233) | (n10 & n233);
  n332 = (n12 ^ n28) ^ n283;
  n333 = (n12 & n28) | (n28 & n283) | (n12 & n283);
  n382 = (n14 ^ n30) ^ n333;
  n383 = (n14 & n30) | (n30 & n333) | (n14 & n333);

  c |= (n127 & 0x1) << 0;
  c |= (n144 & 0x1) << 1;
  c |= (n132 & 0x1) << 2;
  c |= (n182 & 0x1) << 3;
  c |= (n232 & 0x1) << 4;
  c |= (n282 & 0x1) << 5;
  c |= (n332 & 0x1) << 6;
  c |= (n382 & 0x1) << 7;
  c |= (n383 & 0x1) << 8;

  return c;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.39 %
// MAE = 0.5 
// WCE% = 0.78 %
// WCE = 1.0 
// WCRE% = 100.00 %
// EP% = 50.00 %
// MRE% = 2.62 %
// MSE = 0.5 
// PDK45_PWR = 0.033 mW
// PDK45_AREA = 64.8 um2
// PDK45_DELAY = 0.64 ns


uint64_t evoapproxlib::evoapprox_t::add8s_6X7(const uint64_t A /* 8-bit signed operand */, const uint64_t B /* 8-bit signed operand */)
{
   uint64_t dout_16, dout_17, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64;
   uint64_t O;

   dout_16=((A >> 0)&1)&((B >> 0)&1);
   dout_17=((A >> 6)&1)&((B >> 6)&1);
   dout_18=((A >> 1)&1)&((B >> 1)&1);
   dout_19=((A >> 1)&1)^((B >> 1)&1);
   dout_20=((A >> 2)&1)&((B >> 2)&1);
   dout_21=((A >> 2)&1)^((B >> 2)&1);
   dout_22=((A >> 3)&1)&((B >> 3)&1);
   dout_23=((A >> 3)&1)^((B >> 3)&1);
   dout_24=((A >> 4)&1)&((B >> 4)&1);
   dout_25=((A >> 4)&1)^((B >> 4)&1);
   dout_26=((A >> 5)&1)&((B >> 5)&1);
   dout_27=((A >> 5)&1)^((B >> 5)&1);
   dout_28=dout_18&dout_21;
   dout_29=((A >> 6)&1)^((B >> 6)&1);
   dout_30=((A >> 7)&1)^((B >> 7)&1);
   dout_32=dout_21&dout_19;
   dout_33=dout_20|dout_28;
   dout_34=dout_25&dout_22;
   dout_35=dout_25&dout_23;
   dout_36=dout_24|dout_34;
   dout_37=dout_29&dout_26;
   dout_39=dout_17|dout_37;
   dout_40=dout_19&dout_16;
   dout_41=dout_18|dout_40;
   dout_42=dout_32&dout_16;
   dout_43=dout_33|dout_42;
   dout_44=dout_27&dout_36;
   dout_45=dout_27&dout_35;
   dout_46=dout_26|dout_44;
   dout_47=dout_29&dout_44;
   dout_48=dout_29&dout_45;
   dout_49=dout_39|dout_47;
   dout_50=dout_23&dout_43;
   dout_51=dout_22|dout_50;
   dout_52=dout_35&dout_43;
   dout_53=dout_36|dout_52;
   dout_54=dout_45&dout_43;
   dout_55=dout_46|dout_54;
   dout_56=dout_48&dout_43;
   dout_57=dout_49|dout_56;
   dout_58=dout_19^dout_16;
   dout_59=dout_21^dout_41;
   dout_60=dout_23^dout_43;
   dout_61=dout_25^dout_51;
   dout_62=dout_27^dout_53;
   dout_63=dout_29^dout_55;
   dout_64=dout_30^dout_57;

   O = 0;
   O |= (dout_60&1) << 0;
   O |= (dout_58&1) << 1;
   O |= (dout_59&1) << 2;
   O |= (dout_60&1) << 3;
   O |= (dout_61&1) << 4;
   O |= (dout_62&1) << 5;
   O |= (dout_63&1) << 6;
   O |= (dout_64&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 25.00 %
// MAE = 64 
// WCE% = 50.00 %
// WCE = 128 
// WCRE% = 9700.00 %
// EP% = 99.95 %
// MRE% = 249.36 %
// MSE = 4798 
// PDK45_PWR = 0.000 mW
// PDK45_AREA = 0.0 um2
// PDK45_DELAY = 0.00 ns


uint64_t evoapproxlib::evoapprox_t::add8se_8XS(const uint64_t B,const uint64_t A)
{
   uint64_t O;


   O = 0;
   O |= (0&1) << 0;
   O |= (((A >> 1)&1)&1) << 1;
   O |= (((A >> 5)&1)&1) << 2;
   O |= (((B >> 3)&1)&1) << 3;
   O |= (((A >> 5)&1)&1) << 4;
   O |= (((B >> 6)&1)&1) << 5;
   O |= (((A >> 6)&1)&1) << 6;
   O |= (((A >> 7)&1)&1) << 7;
   O |= (((A >> 7)&1)&1) << 8;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 3.12 %
// MAE = 8.0 
// WCE% = 6.25 %
// WCE = 16 
// WCRE% = 1500.00 %
// EP% = 99.22 %
// MRE% = 32.28 %
// MSE = 77 
// PDK45_PWR = 0.014 mW
// PDK45_AREA = 31.0 um2
// PDK45_DELAY = 0.27 ns


uint64_t evoapproxlib::evoapprox_t::add8se_92J(const uint64_t B,const uint64_t A)
{
   uint64_t dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54;
   uint64_t O;

   dout_38=((A >> 5)&1)^((B >> 5)&1);
   dout_39=((A >> 5)&1)&((B >> 5)&1);
   dout_40=dout_38&((A >> 4)&1);
   dout_41=dout_38^((A >> 4)&1);
   dout_42=dout_39|dout_40;
   dout_43=((A >> 6)&1)^((B >> 6)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=dout_43&dout_42;
   dout_46=dout_43^dout_42;
   dout_47=dout_44|dout_45;
   dout_48=((A >> 7)&1)^((B >> 7)&1);
   dout_49=((A >> 7)&1)&((B >> 7)&1);
   dout_50=dout_48&dout_47;
   dout_51=dout_48^dout_47;
   dout_52=dout_49|dout_50;
   dout_53=((A >> 7)&1)^((B >> 7)&1);
   dout_54=dout_53^dout_52;

   O = 0;
   O |= (((A >> 3)&1)&1) << 0;
   O |= (((A >> 3)&1)&1) << 1;
   O |= (((A >> 2)&1)&1) << 2;
   O |= (((B >> 3)&1)&1) << 3;
   O |= (((B >> 4)&1)&1) << 4;
   O |= (dout_41&1) << 5;
   O |= (dout_46&1) << 6;
   O |= (dout_51&1) << 7;
   O |= (dout_54&1) << 8;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 6.88 %
// MAE = 8.8 
// WCE% = 25.00 %
// WCE = 32 
// WCRE% = 1000.00 %
// EP% = 99.27 %
// MRE% = 40.60 %
// MSE = 110 
// PDK45_PWR = 0.017 mW
// PDK45_AREA = 44.6 um2
// PDK45_DELAY = 0.38 ns


uint64_t evoapproxlib::evoapprox_t::add8s_6H2(const uint64_t A /* 8-bit signed operand */, const uint64_t B /* 8-bit signed operand */)
{
   uint64_t dout_22, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_34, dout_36, dout_37, dout_38, dout_39, dout_42, dout_44, dout_46, dout_53, dout_54, dout_59, dout_60, dout_61;
   uint64_t O;

   dout_22=((B >> 7)&1)&((A >> 7)&1);
   dout_24=((A >> 4)&1)&((B >> 4)&1);
   dout_25=((A >> 4)&1)^((B >> 4)&1);
   dout_26=((A >> 5)&1)&((B >> 5)&1);
   dout_27=((A >> 5)&1)^((B >> 5)&1);
   dout_28=((A >> 6)&1)&((B >> 6)&1);
   dout_29=((A >> 6)&1)^((B >> 6)&1);
   dout_30=((A >> 7)&1)^((B >> 7)&1);
   dout_34=dout_25&dout_22;
   dout_36=dout_24|dout_34;
   dout_37=dout_29&dout_26;
   dout_38=dout_29&dout_27;
   dout_39=dout_28|dout_37;
   dout_42=dout_38&dout_36;
   dout_44=dout_39|dout_42;
   dout_46=dout_34|dout_24;
   dout_53=dout_27&dout_36;
   dout_54=dout_26|dout_53;
   dout_59=dout_27^dout_46;
   dout_60=dout_29^dout_54;
   dout_61=dout_30^dout_44;

   O = 0;
   O |= (((A >> 3)&1)&1) << 0;
   O |= (((A >> 3)&1)&1) << 1;
   O |= (((A >> 3)&1)&1) << 2;
   O |= (((B >> 3)&1)&1) << 3;
   O |= (dout_25&1) << 4;
   O |= (dout_59&1) << 5;
   O |= (dout_60&1) << 6;
   O |= (dout_61&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.057 %
// MAE = 37 
// WCE% = 0.18 %
// WCE = 115 
// WCRE% = 8300.00 %
// EP% = 97.72 %
// MRE% = 2.56 %
// MSE = 2008 
// PDK45_PWR = 0.302 mW
// PDK45_AREA = 542.5 um2
// PDK45_DELAY = 1.44 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_2HH(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_22, dout_23, dout_28, dout_29, dout_30, dout_31, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_49, dout_50, dout_51, dout_52, dout_53, dout_70, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_87, dout_88, dout_92, dout_93, dout_94, dout_95, dout_96, dout_108, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_171, dout_172, dout_173, dout_174, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_189, dout_190, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_229, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_40=((A >> 0)&1)|((A >> 1)&1);
   dout_41=((A >> 0)&1)&dout_28;
   dout_42=dout_22^dout_29;
   dout_43=dout_22&dout_29;
   dout_44=dout_23^dout_30;
   dout_45=dout_23&dout_30;
   dout_49=((B >> 3)&1)&((A >> 2)&1);
   dout_50=((B >> 4)&1)&((A >> 2)&1);
   dout_51=((B >> 5)&1)&((A >> 2)&1);
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_70=dout_40&dout_49;
   dout_74=dout_42^dout_50;
   dout_75=dout_42&dout_50;
   dout_76=dout_74&dout_41;
   dout_77=dout_74^dout_41;
   dout_78=dout_75|dout_76;
   dout_79=dout_44^dout_51;
   dout_80=dout_44&dout_51;
   dout_81=dout_79&dout_43;
   dout_82=dout_79^dout_43;
   dout_83=dout_80|dout_81;
   dout_84=dout_31^dout_52;
   dout_85=dout_31&dout_52;
   dout_87=dout_84^dout_45;
   dout_88=dout_85|dout_45;
   dout_92=((B >> 3)&1)&((A >> 3)&1);
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_108=((A >> 3)&1)&((B >> 2)&1);
   dout_112=dout_77^dout_92;
   dout_113=dout_77&dout_92;
   dout_114=dout_112&dout_70;
   dout_115=dout_112^dout_70;
   dout_116=dout_113|dout_114;
   dout_117=dout_82^dout_93;
   dout_118=dout_82&dout_93;
   dout_119=dout_117&dout_78;
   dout_120=dout_117^dout_78;
   dout_121=dout_118|dout_119;
   dout_122=dout_87^dout_94;
   dout_123=dout_87&dout_94;
   dout_124=dout_122&dout_83;
   dout_125=dout_122^dout_83;
   dout_126=dout_123|dout_124;
   dout_127=dout_53^dout_95;
   dout_128=dout_53&dout_95;
   dout_129=dout_127&dout_88;
   dout_130=dout_127^dout_88;
   dout_131=dout_128|dout_129;
   dout_134=((B >> 2)&1)&((A >> 4)&1);
   dout_135=((B >> 3)&1)&((A >> 4)&1);
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_150=dout_115|dout_134;
   dout_151=dout_115&dout_134;
   dout_152=dout_150&dout_108;
   dout_153=dout_150^dout_108;
   dout_154=dout_151|dout_152;
   dout_155=dout_120^dout_135;
   dout_156=dout_120&dout_135;
   dout_157=dout_155&dout_116;
   dout_158=dout_155^dout_116;
   dout_159=dout_156|dout_157;
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_121;
   dout_163=dout_160^dout_121;
   dout_164=dout_161|dout_162;
   dout_165=dout_130^dout_137;
   dout_166=dout_130&dout_137;
   dout_167=dout_165&dout_126;
   dout_168=dout_165^dout_126;
   dout_169=dout_166|dout_167;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_172=dout_170&dout_131;
   dout_173=dout_170^dout_131;
   dout_174=dout_171|dout_172;
   dout_176=((B >> 1)&1)&((A >> 5)&1);
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_189=dout_153&dout_176;
   dout_190=dout_176&((A >> 4)&1);
   dout_192=dout_189|dout_190;
   dout_193=dout_158^dout_177;
   dout_194=dout_158&dout_177;
   dout_195=dout_193&dout_154;
   dout_196=dout_193^dout_154;
   dout_197=dout_194|dout_195;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_159;
   dout_201=dout_198^dout_159;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_218=((B >> 0)&1)&((A >> 6)&1);
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_229=dout_218^0xFFFFFFFFFFFFFFFFU;
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_233=dout_231&dout_192;
   dout_234=dout_231^dout_192;
   dout_235=dout_232|dout_233;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_197;
   dout_239=dout_236^dout_197;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_234^dout_261;
   dout_270=dout_234&dout_261;
   dout_271=dout_269&dout_218;
   dout_272=dout_269^dout_218;
   dout_273=dout_270|dout_271;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_235;
   dout_277=dout_274^dout_235;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_304=dout_277^dout_273;
   dout_305=dout_277&dout_273;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_302^dout_298;
   dout_327=dout_302&dout_298;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_268^dout_303;
   dout_332=((A >> 7)&1)&dout_303;
   dout_333=dout_331&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_75&1) << 0;
   O |= (dout_137&1) << 1;
   O |= (((B >> 0)&1)&1) << 2;
   O |= (dout_172&1) << 3;
   O |= (((B >> 0)&1)&1) << 4;
   O |= (0&1) << 5;
   O |= (dout_229&1) << 6;
   O |= (dout_272&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 6.74 %
// MAE = 34 
// WCE% = 19.14 %
// WCE = 98 
// WCRE% = 3400.00 %
// EP% = 99.22 %
// MRE% = 17.40 %
// MSE = 1688 
// PDK45_PWR = 0.0032 mW
// PDK45_AREA = 8.9 um2
// PDK45_DELAY = 0.12 ns


uint64_t evoapproxlib::evoapprox_t::add8u_8AS(uint64_t a, uint64_t b) {
  int wa[8];
  int wb[8];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  int sig_19 = ~((int)0);
  int sig_24 = ~((int)0);
  int sig_35 = 0;
  int sig_48 = wa[7] ^ wb[7];
  int sig_49 = wa[7] & wb[7];
  int sig_50 = sig_48 & wb[6];
  int sig_51 = sig_48 ^ wb[6];
  int sig_52 = sig_49 | sig_50;
  y |=  (wb[0] & 0x01) << 0; // default output
  y |=  (sig_24 & 0x01) << 1; // default output
  y |=  (wa[5] & 0x01) << 2; // default output
  y |=  (wa[4] & 0x01) << 3; // default output
  y |=  (sig_35 & 0x01) << 4; // default output
  y |=  (sig_19 & 0x01) << 5; // default output
  y |=  (wa[6] & 0x01) << 6; // default output
  y |=  (sig_51 & 0x01) << 7; // default output
  y |=  (sig_52 & 0x01) << 8; // default output
   return y;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 19.67 %
// MAE = 101 
// WCE% = 50.39 %
// WCE = 258 
// WCRE% = 6300.00 %
// EP% = 99.77 %
// MRE% = 49.16 %
// MSE = 14074 
// PDK45_PWR = 0.000 mW
// PDK45_AREA = 0.0 um2
// PDK45_DELAY = 0.00 ns


uint64_t evoapproxlib::evoapprox_t::add8u_88L(uint64_t a, uint64_t b) {
  int wa[8];
  int wb[8];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  int sig_32 = 0;
  int sig_34 = ~((int)0);
  int sig_50 = wb[7];
  y |=  (wb[3] & 0x01) << 0; // default output
  y |=  (wb[7] & 0x01) << 1; // default output
  y |=  (sig_32 & 0x01) << 2; // default output
  y |=  (wa[3] & 0x01) << 3; // default output
  y |=  (wb[4] & 0x01) << 4; // default output
  y |=  (wa[7] & 0x01) << 5; // default output
  y |=  (sig_34 & 0x01) << 6; // default output
  y |=  (sig_50 & 0x01) << 7; // default output
  y |=  (wa[6] & 0x01) << 8; // default output
   return y;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.039 %
// MAE = 0.2 
// WCE% = 0.20 %
// WCE = 1.0 
// WCRE% = 50.00 %
// EP% = 25.00 %
// MRE% = 0.14 %
// MSE = 0.2 
// PDK45_PWR = 0.029 mW
// PDK45_AREA = 63.8 um2
// PDK45_DELAY = 0.55 ns


uint64_t evoapproxlib::evoapprox_t::add8u_5R3(uint64_t a, uint64_t b)
{
  uint16_t c = 0;
  uint8_t n0 = (a >> 0) & 0x1;
  uint8_t n2 = (a >> 1) & 0x1;
  uint8_t n4 = (a >> 2) & 0x1;
  uint8_t n6 = (a >> 3) & 0x1;
  uint8_t n8 = (a >> 4) & 0x1;
  uint8_t n10 = (a >> 5) & 0x1;
  uint8_t n12 = (a >> 6) & 0x1;
  uint8_t n14 = (a >> 7) & 0x1;
  uint8_t n16 = (b >> 0) & 0x1;
  uint8_t n18 = (b >> 1) & 0x1;
  uint8_t n20 = (b >> 2) & 0x1;
  uint8_t n22 = (b >> 3) & 0x1;
  uint8_t n24 = (b >> 4) & 0x1;
  uint8_t n26 = (b >> 5) & 0x1;
  uint8_t n28 = (b >> 6) & 0x1;
  uint8_t n30 = (b >> 7) & 0x1;
  uint8_t n76;
  uint8_t n82;
  uint8_t n83;
  uint8_t n113;
  uint8_t n132;
  uint8_t n133;
  uint8_t n174;
  uint8_t n182;
  uint8_t n183;
  uint8_t n208;
  uint8_t n232;
  uint8_t n233;
  uint8_t n282;
  uint8_t n283;
  uint8_t n332;
  uint8_t n333;
  uint8_t n382;
  uint8_t n383;

  n76 = n0 | n16;
  n82 = n2 ^ n18;
  n83 = n2 & n18;
  n113 = n83;
  n132 = (n4 ^ n20) ^ n113;
  n133 = (n4 & n20) | (n20 & n113) | (n4 & n113);
  n174 = n133;
  n182 = (n6 ^ n22) ^ n174;
  n183 = (n6 & n22) | (n22 & n174) | (n6 & n174);
  n208 = n183;
  n232 = (n8 ^ n24) ^ n208;
  n233 = (n8 & n24) | (n24 & n208) | (n8 & n208);
  n282 = (n10 ^ n26) ^ n233;
  n283 = (n10 & n26) | (n26 & n233) | (n10 & n233);
  n332 = (n12 ^ n28) ^ n283;
  n333 = (n12 & n28) | (n28 & n283) | (n12 & n283);
  n382 = (n14 ^ n30) ^ n333;
  n383 = (n14 & n30) | (n30 & n333) | (n14 & n333);

  c |= (n76 & 0x1) << 0;
  c |= (n82 & 0x1) << 1;
  c |= (n132 & 0x1) << 2;
  c |= (n182 & 0x1) << 3;
  c |= (n232 & 0x1) << 4;
  c |= (n282 & 0x1) << 5;
  c |= (n332 & 0x1) << 6;
  c |= (n382 & 0x1) << 7;
  c |= (n383 & 0x1) << 8;

  return c;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 0.037 %
// MAE = 25 
// WCE% = 0.12 %
// WCE = 79 
// WCRE% = 3100.00 %
// EP% = 98.12 %
// MRE% = 1.25 %
// MSE = 892 
// PDK45_PWR = 0.311 mW
// PDK45_AREA = 508.3 um2
// PDK45_DELAY = 1.39 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_2AC(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_20, dout_21, dout_22, dout_23, dout_29, dout_31, dout_40, dout_41, dout_42, dout_43, dout_44, dout_47, dout_49, dout_50, dout_51, dout_52, dout_53, dout_56, dout_70, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_86, dout_87, dout_88, dout_92, dout_93, dout_94, dout_95, dout_96, dout_106, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_150, dout_151, dout_155, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_171, dout_172, dout_173, dout_174, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_186, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_20=((B >> 6)&1)&((A >> 1)&1);
   dout_21=((A >> 1)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_40=((A >> 1)&1)|((A >> 0)&1);
   dout_41=dout_21&((B >> 4)&1);
   dout_42=dout_22^dout_29;
   dout_43=dout_22&dout_29;
   dout_44=dout_23^dout_20;
   dout_47=((B >> 7)&1)&dout_21;
   dout_49=((B >> 3)&1)&((A >> 2)&1);
   dout_50=((B >> 4)&1)&((A >> 2)&1);
   dout_51=((B >> 5)&1)&((A >> 2)&1);
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_56=dout_52&dout_31;
   dout_70=dout_40&dout_49;
   dout_74=dout_42^dout_50;
   dout_75=dout_42&dout_50;
   dout_76=dout_74&dout_41;
   dout_77=dout_74^dout_41;
   dout_78=dout_75|dout_76;
   dout_79=dout_44^dout_51;
   dout_80=dout_44&dout_51;
   dout_81=dout_79&dout_43;
   dout_82=dout_79^dout_43;
   dout_83=dout_80|dout_81;
   dout_84=dout_31^dout_52;
   dout_86=((B >> 6)&1)&dout_47;
   dout_87=dout_84^dout_86;
   dout_88=dout_56|dout_86;
   dout_92=((B >> 3)&1)&((A >> 3)&1);
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_106=((B >> 2)&1)&((A >> 3)&1);
   dout_112=dout_77^dout_92;
   dout_113=dout_77&dout_92;
   dout_114=dout_112&dout_70;
   dout_115=dout_112^dout_70;
   dout_116=dout_113|dout_114;
   dout_117=dout_82^dout_93;
   dout_118=dout_82&dout_93;
   dout_119=dout_117&dout_78;
   dout_120=dout_117^dout_78;
   dout_121=dout_118|dout_119;
   dout_122=dout_87^dout_94;
   dout_123=dout_87&dout_94;
   dout_124=dout_122&dout_83;
   dout_125=dout_122^dout_83;
   dout_126=dout_123|dout_124;
   dout_127=dout_53^dout_95;
   dout_128=dout_53&dout_95;
   dout_129=dout_127&dout_88;
   dout_130=dout_127^dout_88;
   dout_131=dout_128|dout_129;
   dout_133=((B >> 1)&1)&((A >> 4)&1);
   dout_134=((B >> 2)&1)&((A >> 4)&1);
   dout_135=((B >> 3)&1)&((A >> 4)&1);
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_150=dout_115^dout_134;
   dout_151=dout_115&dout_134;
   dout_155=dout_120^dout_135;
   dout_156=dout_120&dout_135;
   dout_157=dout_155&dout_116;
   dout_158=dout_155^dout_116;
   dout_159=dout_156|dout_157;
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_121;
   dout_163=dout_160^dout_121;
   dout_164=dout_161|dout_162;
   dout_165=dout_130^dout_137;
   dout_166=dout_130&dout_137;
   dout_167=dout_165&dout_126;
   dout_168=dout_165^dout_126;
   dout_169=dout_166|dout_167;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_172=dout_170&dout_131;
   dout_173=dout_170^dout_131;
   dout_174=dout_171|dout_172;
   dout_176=((B >> 1)&1)&((A >> 5)&1);
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_186=dout_133^0xFFFFFFFFFFFFFFFFU;
   dout_188=dout_150^dout_176;
   dout_189=dout_150&dout_176;
   dout_190=dout_188&dout_106;
   dout_191=dout_188^dout_106;
   dout_192=dout_189|dout_190;
   dout_193=dout_158^dout_177;
   dout_194=dout_158&dout_177;
   dout_195=dout_193&dout_151;
   dout_196=dout_193^dout_151;
   dout_197=dout_194|dout_195;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_159;
   dout_201=dout_198^dout_159;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_218=((B >> 0)&1)&((A >> 6)&1);
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_226=dout_191^dout_218;
   dout_227=dout_191&dout_218;
   dout_228=dout_226&dout_133;
   dout_229=dout_226^dout_133;
   dout_230=dout_227|dout_228;
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_233=dout_231&dout_192;
   dout_234=dout_231^dout_192;
   dout_235=dout_232|dout_233;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_197;
   dout_239=dout_236^dout_197;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_234^dout_261;
   dout_270=dout_234&dout_261;
   dout_271=dout_269&dout_230;
   dout_272=dout_269^dout_230;
   dout_273=dout_270|dout_271;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_235;
   dout_277=dout_274^dout_235;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_304=dout_277^dout_273;
   dout_305=dout_277&dout_273;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_302^dout_298;
   dout_327=dout_302&dout_298;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_268^dout_303;
   dout_332=((A >> 7)&1)&dout_303;
   dout_333=dout_331&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_134&1) << 0;
   O |= (dout_252&1) << 1;
   O |= (((A >> 5)&1)&1) << 2;
   O |= (dout_180&1) << 3;
   O |= (dout_133&1) << 4;
   O |= (dout_186&1) << 5;
   O |= (dout_229&1) << 6;
   O |= (dout_272&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.65 %
// MAE = 426 
// WCE% = 6.23 %
// WCE = 4084 
// WCRE% = 65.98 %
// EP% = 65.97 %
// MRE% = 4.05 %
// MSE = 645336 
// PDK45_PWR = 0.237 mW
// PDK45_AREA = 479.2 um2
// PDK45_DELAY = 1.59 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_1CMB(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_16, dout_17, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_33, dout_34, dout_37, dout_42, dout_44, dout_49, dout_54, dout_59, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_76, dout_81, dout_86, dout_87, dout_91, dout_94, dout_96, dout_101, dout_111, dout_112, dout_113, dout_115, dout_116, dout_117, dout_118, dout_119, dout_121, dout_126, dout_136, dout_141, dout_146, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_169, dout_171, dout_172, dout_173, dout_174, dout_175, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_183, dout_184, dout_186, dout_189, dout_191, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_243, dout_244, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_16=((B >> 0)&1)&((A >> 0)&1);
   dout_17=((B >> 1)&1)&((A >> 0)&1);
   dout_18=((B >> 2)&1)&((A >> 0)&1);
   dout_19=((B >> 3)&1)&((A >> 0)&1);
   dout_20=((B >> 4)&1)&((A >> 0)&1);
   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_24=((B >> 0)&1)&((A >> 1)&1);
   dout_25=((B >> 1)&1)&((A >> 1)&1);
   dout_26=((B >> 2)&1)&((A >> 1)&1);
   dout_27=((B >> 3)&1)&((A >> 1)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_32=dout_17|dout_24;
   dout_33=((A >> 2)&1)&((B >> 0)&1);
   dout_34=dout_18|dout_25;
   dout_37=dout_34|dout_33;
   dout_42=dout_26|dout_19;
   dout_44=dout_20|dout_27;
   dout_49=dout_21|dout_28;
   dout_54=dout_22|dout_29;
   dout_59=dout_23|dout_30;
   dout_67=((B >> 1)&1)&((A >> 2)&1);
   dout_68=((B >> 2)&1)&((A >> 2)&1);
   dout_69=((B >> 3)&1)&((A >> 2)&1);
   dout_70=((B >> 4)&1)&((A >> 2)&1);
   dout_71=((B >> 5)&1)&((A >> 2)&1);
   dout_72=((B >> 6)&1)&((A >> 2)&1);
   dout_73=((B >> 7)&1)&((A >> 2)&1);
   dout_76=dout_42|dout_67;
   dout_81=dout_44|dout_68;
   dout_86=dout_49|dout_69;
   dout_87=((A >> 3)&1)&((B >> 3)&1);
   dout_91=dout_54|dout_70;
   dout_94=dout_91|dout_87;
   dout_96=dout_59|dout_71;
   dout_101=dout_31|dout_72;
   dout_111=((B >> 0)&1)&((A >> 3)&1);
   dout_112=((B >> 1)&1)&((A >> 3)&1);
   dout_113=((B >> 2)&1)&((A >> 3)&1);
   dout_115=((B >> 4)&1)&((A >> 3)&1);
   dout_116=((B >> 5)&1)&((A >> 3)&1);
   dout_117=((B >> 6)&1)&((A >> 3)&1);
   dout_118=((B >> 7)&1)&((A >> 3)&1);
   dout_119=dout_76|dout_111;
   dout_121=dout_81|dout_112;
   dout_126=dout_86|dout_113;
   dout_136=dout_96|dout_115;
   dout_141=dout_101|dout_116;
   dout_146=dout_73|dout_117;
   dout_156=((B >> 0)&1)&((A >> 4)&1);
   dout_157=((B >> 1)&1)&((A >> 4)&1);
   dout_158=((B >> 2)&1)&((A >> 4)&1);
   dout_159=((B >> 3)&1)&((A >> 4)&1);
   dout_160=((B >> 4)&1)&((A >> 4)&1);
   dout_161=((B >> 5)&1)&((A >> 4)&1);
   dout_162=((B >> 6)&1)&((A >> 4)&1);
   dout_163=((B >> 7)&1)&((A >> 4)&1);
   dout_164=dout_121^dout_156;
   dout_165=dout_121&dout_156;
   dout_166=dout_126^dout_157;
   dout_167=dout_126&dout_157;
   dout_169=dout_166|dout_165;
   dout_171=dout_94^dout_158;
   dout_172=dout_94&dout_158;
   dout_173=dout_171&dout_167;
   dout_174=dout_171^dout_167;
   dout_175=dout_172|dout_173;
   dout_176=dout_136^dout_159;
   dout_177=dout_136&dout_159;
   dout_178=dout_176&dout_175;
   dout_179=dout_176^dout_175;
   dout_180=dout_177|dout_178;
   dout_181=dout_141|dout_160;
   dout_183=dout_160&dout_180;
   dout_184=dout_181^dout_180;
   dout_186=dout_146|dout_161;
   dout_189=dout_186|dout_183;
   dout_191=dout_118|dout_162;
   dout_201=((B >> 0)&1)&((A >> 5)&1);
   dout_202=((B >> 1)&1)&((A >> 5)&1);
   dout_203=((B >> 2)&1)&((A >> 5)&1);
   dout_204=((B >> 3)&1)&((A >> 5)&1);
   dout_205=((B >> 4)&1)&((A >> 5)&1);
   dout_206=((B >> 5)&1)&((A >> 5)&1);
   dout_207=((B >> 6)&1)&((A >> 5)&1);
   dout_208=((B >> 7)&1)&((A >> 5)&1);
   dout_209=dout_169^dout_201;
   dout_210=dout_169&dout_201;
   dout_211=dout_174^dout_202;
   dout_212=dout_174&dout_202;
   dout_214=dout_211^dout_210;
   dout_215=dout_212|dout_210;
   dout_216=dout_179^dout_203;
   dout_217=dout_179&dout_203;
   dout_218=dout_216&dout_215;
   dout_219=dout_216^dout_215;
   dout_220=dout_217|dout_218;
   dout_221=dout_184^dout_204;
   dout_222=dout_184&dout_204;
   dout_223=dout_221&dout_220;
   dout_224=dout_221^dout_220;
   dout_225=dout_222|dout_223;
   dout_226=dout_189^dout_205;
   dout_227=dout_189&dout_205;
   dout_228=dout_226&dout_225;
   dout_229=dout_226^dout_225;
   dout_230=dout_227|dout_228;
   dout_231=dout_191^dout_206;
   dout_232=dout_191&dout_206;
   dout_233=dout_231&dout_230;
   dout_234=dout_231^dout_230;
   dout_235=dout_232|dout_233;
   dout_236=dout_163^dout_207;
   dout_237=dout_163&dout_207;
   dout_238=dout_236&dout_235;
   dout_239=dout_236^dout_235;
   dout_240=dout_237|dout_238;
   dout_243=dout_208&dout_240;
   dout_244=dout_208^dout_240;
   dout_246=((B >> 0)&1)&((A >> 6)&1);
   dout_247=((B >> 1)&1)&((A >> 6)&1);
   dout_248=((B >> 2)&1)&((A >> 6)&1);
   dout_249=((B >> 3)&1)&((A >> 6)&1);
   dout_250=((B >> 4)&1)&((A >> 6)&1);
   dout_251=((B >> 5)&1)&((A >> 6)&1);
   dout_252=((B >> 6)&1)&((A >> 6)&1);
   dout_253=((B >> 7)&1)&((A >> 6)&1);
   dout_254=dout_214^dout_246;
   dout_255=dout_214&dout_246;
   dout_256=dout_219^dout_247;
   dout_257=dout_219&dout_247;
   dout_258=dout_256&dout_255;
   dout_259=dout_256^dout_255;
   dout_260=dout_257|dout_258;
   dout_261=dout_224^dout_248;
   dout_262=dout_224&dout_248;
   dout_263=dout_261&dout_260;
   dout_264=dout_261^dout_260;
   dout_265=dout_262|dout_263;
   dout_266=dout_229^dout_249;
   dout_267=dout_229&dout_249;
   dout_268=dout_266&dout_265;
   dout_269=dout_266^dout_265;
   dout_270=dout_267|dout_268;
   dout_271=dout_234^dout_250;
   dout_272=dout_234&dout_250;
   dout_273=dout_271&dout_270;
   dout_274=dout_271^dout_270;
   dout_275=dout_272|dout_273;
   dout_276=dout_239^dout_251;
   dout_277=dout_239&dout_251;
   dout_278=dout_276&dout_275;
   dout_279=dout_276^dout_275;
   dout_280=dout_277|dout_278;
   dout_281=dout_244^dout_252;
   dout_282=dout_244&dout_252;
   dout_283=dout_281&dout_280;
   dout_284=dout_281^dout_280;
   dout_285=dout_282|dout_283;
   dout_286=dout_243^dout_253;
   dout_287=dout_243&((A >> 6)&1);
   dout_288=dout_253&dout_285;
   dout_289=dout_286^dout_285;
   dout_290=dout_287|dout_288;
   dout_291=((B >> 0)&1)&((A >> 7)&1);
   dout_292=((B >> 1)&1)&((A >> 7)&1);
   dout_293=((B >> 2)&1)&((A >> 7)&1);
   dout_294=((B >> 3)&1)&((A >> 7)&1);
   dout_295=((B >> 4)&1)&((A >> 7)&1);
   dout_296=((B >> 5)&1)&((A >> 7)&1);
   dout_297=((B >> 6)&1)&((A >> 7)&1);
   dout_298=((B >> 7)&1)&((A >> 7)&1);
   dout_299=dout_259^dout_291;
   dout_300=dout_259&dout_291;
   dout_301=dout_264^dout_292;
   dout_302=dout_264&dout_292;
   dout_303=dout_301&dout_300;
   dout_304=dout_301^dout_300;
   dout_305=dout_302|dout_303;
   dout_306=dout_269^dout_293;
   dout_307=dout_269&dout_293;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_274^dout_294;
   dout_312=dout_274&dout_294;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_279^dout_295;
   dout_317=dout_279&dout_295;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_284^dout_296;
   dout_322=dout_284&dout_296;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_289^dout_297;
   dout_327=dout_289&dout_297;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_290^dout_298;
   dout_332=dout_290&((A >> 7)&1);
   dout_333=((B >> 7)&1)&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_16&1) << 0;
   O |= (dout_32&1) << 1;
   O |= (dout_37&1) << 2;
   O |= (dout_119&1) << 3;
   O |= (dout_164&1) << 4;
   O |= (dout_209&1) << 5;
   O |= (dout_254&1) << 6;
   O |= (dout_299&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 8.28 %
// MAE = 21 
// WCE% = 26.17 %
// WCE = 67 
// WCRE% = 6300.00 %
// EP% = 98.49 %
// MRE% = 56.09 %
// MSE = 672 
// PDK45_PWR = 0.0042 mW
// PDK45_AREA = 11.7 um2
// PDK45_DELAY = 0.13 ns


uint64_t evoapproxlib::evoapprox_t::add8se_8UN(const uint64_t B,const uint64_t A)
{
   uint64_t dout_46, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54;
   uint64_t O;

   dout_46=((A >> 6)&1)^0xFFFFFFFFFFFFFFFFU;
   dout_48=((A >> 7)&1)^((B >> 7)&1);
   dout_49=((A >> 7)&1)&((B >> 7)&1);
   dout_50=dout_48&((A >> 6)&1);
   dout_51=dout_48^((A >> 6)&1);
   dout_52=dout_49|dout_50;
   dout_53=((A >> 7)&1)^((B >> 7)&1);
   dout_54=dout_53^dout_52;

   O = 0;
   O |= (dout_54&1) << 0;
   O |= (dout_51&1) << 1;
   O |= (((B >> 6)&1)&1) << 2;
   O |= (((A >> 4)&1)&1) << 3;
   O |= (((B >> 6)&1)&1) << 4;
   O |= (((B >> 6)&1)&1) << 5;
   O |= (dout_46&1) << 6;
   O |= (dout_51&1) << 7;
   O |= (dout_54&1) << 8;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 0.18 %
// MAE = 119 
// WCE% = 0.79 %
// WCE = 518 
// WCRE% = 125.00 %
// EP% = 98.05 %
// MRE% = 4.16 %
// MSE = 22286 
// PDK45_PWR = 0.206 mW
// PDK45_AREA = 427.5 um2
// PDK45_DELAY = 1.41 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_185Q(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_17, dout_30, dout_39, dout_59, dout_62, dout_63, dout_72, dout_73, dout_81, dout_98, dout_100, dout_101, dout_104, dout_106, dout_107, dout_108, dout_109, dout_110, dout_115, dout_116, dout_117, dout_118, dout_136, dout_141, dout_142, dout_143, dout_144, dout_145, dout_146, dout_147, dout_148, dout_149, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_160, dout_161, dout_162, dout_163, dout_167, dout_177, dout_179, dout_180, dout_181, dout_182, dout_183, dout_184, dout_185, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_202, dout_204, dout_205, dout_206, dout_207, dout_208, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_259, dout_260, dout_261, dout_262, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_17=((B >> 7)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_39=dout_17^0xFFFFFFFFFFFFFFFFU;
   dout_59=((A >> 3)&1)|dout_30;
   dout_62=dout_59^((A >> 3)&1);
   dout_63=((A >> 0)&1)&dout_17;
   dout_72=((B >> 6)&1)&((A >> 2)&1);
   dout_73=((B >> 7)&1)&((A >> 2)&1);
   dout_81=(((A >> 0)&1)|dout_39)^0xFFFFFFFFFFFFFFFFU;
   dout_98=dout_62&((A >> 2)&1);
   dout_100=((A >> 2)&1)&dout_98;
   dout_101=dout_81|dout_72;
   dout_104=dout_101^dout_98;
   dout_106=dout_63^dout_73;
   dout_107=dout_63&((A >> 2)&1);
   dout_108=((B >> 7)&1)&dout_100;
   dout_109=dout_106^dout_100;
   dout_110=dout_107|dout_108;
   dout_115=((B >> 4)&1)&((A >> 3)&1);
   dout_116=((B >> 5)&1)&((A >> 3)&1);
   dout_117=((B >> 6)&1)&((A >> 3)&1);
   dout_118=((B >> 7)&1)&((A >> 3)&1);
   dout_136=dout_117|dout_115;
   dout_141=dout_104^dout_116;
   dout_142=dout_101&dout_116;
   dout_143=dout_115&dout_72;
   dout_144=dout_141^dout_143;
   dout_145=dout_142|dout_143;
   dout_146=dout_109^dout_117;
   dout_147=dout_109&dout_117;
   dout_148=dout_146&dout_145;
   dout_149=dout_146^dout_145;
   dout_150=dout_147|dout_148;
   dout_151=dout_110^dout_118;
   dout_152=dout_110&((A >> 3)&1);
   dout_153=dout_151&dout_150;
   dout_154=dout_151^dout_150;
   dout_155=dout_152|dout_153;
   dout_160=((B >> 4)&1)&((A >> 4)&1);
   dout_161=((B >> 5)&1)&((A >> 4)&1);
   dout_162=((B >> 6)&1)&((A >> 4)&1);
   dout_163=((B >> 7)&1)&((A >> 4)&1);
   dout_167=((B >> 5)&1)&((A >> 2)&1);
   dout_177=((A >> 4)&1)&((B >> 3)&1);
   dout_179=dout_136|dout_167;
   dout_180=dout_177|dout_142;
   dout_181=dout_144^dout_160;
   dout_182=dout_144&dout_160;
   dout_183=dout_181&dout_180;
   dout_184=dout_181^dout_180;
   dout_185=dout_182|dout_183;
   dout_186=dout_149^dout_161;
   dout_187=dout_149&dout_161;
   dout_188=dout_186&dout_185;
   dout_189=dout_186^dout_185;
   dout_190=dout_187|dout_188;
   dout_191=dout_154^dout_162;
   dout_192=dout_154&dout_162;
   dout_193=dout_191&dout_190;
   dout_194=dout_191^dout_190;
   dout_195=dout_192|dout_193;
   dout_196=dout_155^dout_163;
   dout_197=dout_155&((A >> 4)&1);
   dout_198=((B >> 7)&1)&dout_195;
   dout_199=dout_196^dout_195;
   dout_200=dout_197|dout_198;
   dout_202=((B >> 2)&1)&((A >> 5)&1);
   dout_204=((B >> 3)&1)&((A >> 5)&1);
   dout_205=((B >> 4)&1)&((A >> 5)&1);
   dout_206=((B >> 5)&1)&((A >> 5)&1);
   dout_207=((B >> 6)&1)&((A >> 5)&1);
   dout_208=((B >> 7)&1)&((A >> 5)&1);
   dout_221=dout_184^dout_204;
   dout_222=dout_184&dout_204;
   dout_223=dout_221&dout_179;
   dout_224=dout_221^dout_179;
   dout_225=dout_222|dout_223;
   dout_226=dout_189^dout_205;
   dout_227=dout_189&dout_205;
   dout_228=dout_226&dout_225;
   dout_229=dout_226^dout_225;
   dout_230=dout_227|dout_228;
   dout_231=dout_194^dout_206;
   dout_232=dout_194&dout_206;
   dout_233=dout_231&dout_230;
   dout_234=dout_231^dout_230;
   dout_235=dout_232|dout_233;
   dout_236=dout_199^dout_207;
   dout_237=dout_199&dout_207;
   dout_238=dout_236&dout_235;
   dout_239=dout_236^dout_235;
   dout_240=dout_237|dout_238;
   dout_241=dout_200^dout_208;
   dout_242=dout_200&dout_208;
   dout_243=dout_241&dout_240;
   dout_244=dout_241^dout_240;
   dout_245=dout_242|dout_243;
   dout_247=((B >> 1)&1)&((A >> 6)&1);
   dout_248=((B >> 2)&1)&((A >> 6)&1);
   dout_249=((B >> 3)&1)&((A >> 6)&1);
   dout_250=((B >> 4)&1)&((A >> 6)&1);
   dout_251=((B >> 5)&1)&((A >> 6)&1);
   dout_252=((B >> 6)&1)&((A >> 6)&1);
   dout_253=((B >> 7)&1)&((A >> 6)&1);
   dout_259=dout_247|dout_202;
   dout_260=dout_247&dout_202;
   dout_261=dout_224^dout_248;
   dout_262=dout_224&dout_248;
   dout_264=dout_261^dout_260;
   dout_265=dout_262|dout_260;
   dout_266=dout_229^dout_249;
   dout_267=dout_229&dout_249;
   dout_268=dout_266&dout_265;
   dout_269=dout_266^dout_265;
   dout_270=dout_267|dout_268;
   dout_271=dout_234^dout_250;
   dout_272=dout_234&dout_250;
   dout_273=dout_271&dout_270;
   dout_274=dout_271^dout_270;
   dout_275=dout_272|dout_273;
   dout_276=dout_239^dout_251;
   dout_277=dout_239&dout_251;
   dout_278=dout_276&dout_275;
   dout_279=dout_276^dout_275;
   dout_280=dout_277|dout_278;
   dout_281=dout_244^dout_252;
   dout_282=dout_244&dout_252;
   dout_283=dout_281&dout_280;
   dout_284=dout_281^dout_280;
   dout_285=dout_282|dout_283;
   dout_286=dout_245^dout_253;
   dout_287=dout_245&((A >> 6)&1);
   dout_288=dout_253&dout_285;
   dout_289=dout_286^dout_285;
   dout_290=dout_287|dout_288;
   dout_291=((B >> 0)&1)&((A >> 7)&1);
   dout_292=((B >> 1)&1)&((A >> 7)&1);
   dout_293=((B >> 2)&1)&((A >> 7)&1);
   dout_294=((B >> 3)&1)&((A >> 7)&1);
   dout_295=((B >> 4)&1)&((A >> 7)&1);
   dout_296=((B >> 5)&1)&((A >> 7)&1);
   dout_297=((B >> 6)&1)&((A >> 7)&1);
   dout_298=((B >> 7)&1)&((A >> 7)&1);
   dout_299=dout_259|dout_291;
   dout_300=dout_259&dout_291;
   dout_301=dout_264^dout_292;
   dout_302=dout_264&dout_292;
   dout_303=dout_301&dout_300;
   dout_304=dout_301^dout_300;
   dout_305=dout_302|dout_303;
   dout_306=dout_269^dout_293;
   dout_307=dout_269&dout_293;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_274^dout_294;
   dout_312=dout_274&dout_294;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_279^dout_295;
   dout_317=dout_279&dout_295;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_284^dout_296;
   dout_322=dout_284&dout_296;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_289^dout_297;
   dout_327=dout_289&dout_297;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_290^dout_298;
   dout_332=dout_290&((A >> 7)&1);
   dout_333=((B >> 7)&1)&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (0&1) << 0;
   O |= (dout_147&1) << 1;
   O |= (dout_290&1) << 2;
   O |= (0&1) << 3;
   O |= (dout_110&1) << 4;
   O |= (dout_304&1) << 5;
   O |= (dout_162&1) << 6;
   O |= (dout_299&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 0.33 %
// MAE = 1.7 
// WCE% = 1.37 %
// WCE = 7.0 
// WCRE% = 50.00 %
// EP% = 71.88 %
// MRE% = 0.91 %
// MSE = 6.0 
// PDK45_PWR = 0.021 mW
// PDK45_AREA = 56.3 um2
// PDK45_DELAY = 0.39 ns


uint64_t evoapproxlib::evoapprox_t::add8u_5LT(uint64_t a, uint64_t b)
{
  uint16_t c = 0;
  uint8_t n2 = (a >> 1) & 0x1;
  uint8_t n4 = (a >> 2) & 0x1;
  uint8_t n6 = (a >> 3) & 0x1;
  uint8_t n8 = (a >> 4) & 0x1;
  uint8_t n10 = (a >> 5) & 0x1;
  uint8_t n12 = (a >> 6) & 0x1;
  uint8_t n14 = (a >> 7) & 0x1;
  uint8_t n18 = (b >> 1) & 0x1;
  uint8_t n20 = (b >> 2) & 0x1;
  uint8_t n22 = (b >> 3) & 0x1;
  uint8_t n24 = (b >> 4) & 0x1;
  uint8_t n26 = (b >> 5) & 0x1;
  uint8_t n28 = (b >> 6) & 0x1;
  uint8_t n30 = (b >> 7) & 0x1;
  uint8_t n34;
  uint8_t n36;
  uint8_t n50;
  uint8_t n66;
  uint8_t n82;
  uint8_t n85;
  uint8_t n126;
  uint8_t n132;
  uint8_t n182;
  uint8_t n183;
  uint8_t n232;
  uint8_t n233;
  uint8_t n282;
  uint8_t n283;
  uint8_t n332;
  uint8_t n333;
  uint8_t n382;
  uint8_t n383;

  n34 = ~(n2 & n4 & n18);
  n36 = ~(n34 | n22 | n6);
  n50 = n20 & n36;
  n66 = n4 & n50;
  n82 = n2 | n18;
  n85 = n66;
  n126 = ~(n22 & n85);
  n132 = n4 | n20;
  n182 = (n6 ^ n22) ^ n85;
  n183 = (n6 & n22) | (n22 & n85) | (n6 & n85);
  n232 = (n8 ^ n24) ^ n183;
  n233 = (n8 & n24) | (n24 & n183) | (n8 & n183);
  n282 = (n10 ^ n26) ^ n233;
  n283 = (n10 & n26) | (n26 & n233) | (n10 & n233);
  n332 = (n12 ^ n28) ^ n283;
  n333 = (n12 & n28) | (n28 & n283) | (n12 & n283);
  n382 = (n14 ^ n30) ^ n333;
  n383 = (n14 & n30) | (n30 & n333) | (n14 & n333);

  c |= (n126 & 0x1) << 0;
  c |= (n82 & 0x1) << 1;
  c |= (n132 & 0x1) << 2;
  c |= (n182 & 0x1) << 3;
  c |= (n232 & 0x1) << 4;
  c |= (n282 & 0x1) << 5;
  c |= (n332 & 0x1) << 6;
  c |= (n382 & 0x1) << 7;
  c |= (n383 & 0x1) << 8;

  return c;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 1.09 %
// MAE = 1.4 
// WCE% = 3.12 %
// WCE = 4.0 
// WCRE% = 200.00 %
// EP% = 77.83 %
// MRE% = 7.00 %
// MSE = 2.9 
// PDK45_PWR = 0.030 mW
// PDK45_AREA = 63.8 um2
// PDK45_DELAY = 0.63 ns


uint64_t evoapproxlib::evoapprox_t::add8s_6XL(const uint64_t B,const uint64_t A)
{
   uint64_t dout_18, dout_19, dout_20, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49;
   uint64_t O;

   dout_18=((A >> 1)&1)|((B >> 1)&1);
   dout_19=((A >> 1)&1)&((B >> 1)&1);
   dout_20=dout_18&((B >> 7)&1);
   dout_22=dout_19|dout_20;
   dout_23=((A >> 2)&1)^((B >> 2)&1);
   dout_24=((A >> 2)&1)&((B >> 2)&1);
   dout_25=dout_23&dout_22;
   dout_26=dout_23^dout_22;
   dout_27=dout_24|dout_25;
   dout_28=((A >> 3)&1)^((B >> 3)&1);
   dout_29=((A >> 3)&1)&((B >> 3)&1);
   dout_30=dout_28&dout_27;
   dout_31=dout_28^dout_27;
   dout_32=dout_29|dout_30;
   dout_33=((A >> 4)&1)^((B >> 4)&1);
   dout_34=((A >> 4)&1)&((B >> 4)&1);
   dout_35=dout_33&dout_32;
   dout_36=dout_33^dout_32;
   dout_37=dout_34|dout_35;
   dout_38=((A >> 5)&1)^((B >> 5)&1);
   dout_39=((A >> 5)&1)&((B >> 5)&1);
   dout_40=dout_38&dout_37;
   dout_41=dout_38^dout_37;
   dout_42=dout_39|dout_40;
   dout_43=((A >> 6)&1)^((B >> 6)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=dout_43&dout_42;
   dout_46=dout_43^dout_42;
   dout_47=dout_44|dout_45;
   dout_48=((A >> 7)&1)^((B >> 7)&1);
   dout_49=dout_48^dout_47;

   O = 0;
   O |= (dout_41&1) << 0;
   O |= (0&1) << 1;
   O |= (dout_26&1) << 2;
   O |= (dout_31&1) << 3;
   O |= (dout_36&1) << 4;
   O |= (dout_41&1) << 5;
   O |= (dout_46&1) << 6;
   O |= (dout_49&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 1.56 %
// MAE = 4.0 
// WCE% = 3.12 %
// WCE = 8.0 
// WCRE% = 700.00 %
// EP% = 93.75 %
// MRE% = 16.11 %
// MSE = 22 
// PDK45_PWR = 0.019 mW
// PDK45_AREA = 39.9 um2
// PDK45_DELAY = 0.35 ns


uint64_t evoapproxlib::evoapprox_t::add8se_8ZU(const uint64_t B,const uint64_t A)
{
   uint64_t dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54;
   uint64_t O;

   dout_33=((A >> 4)&1)^((B >> 4)&1);
   dout_34=((A >> 4)&1)&((B >> 4)&1);
   dout_35=dout_33&((A >> 3)&1);
   dout_36=dout_33^((A >> 3)&1);
   dout_37=dout_34|dout_35;
   dout_38=((A >> 5)&1)^((B >> 5)&1);
   dout_39=((A >> 5)&1)&((B >> 5)&1);
   dout_40=dout_38&dout_37;
   dout_41=dout_38^dout_37;
   dout_42=dout_39|dout_40;
   dout_43=((A >> 6)&1)^((B >> 6)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=dout_43&dout_42;
   dout_46=dout_43^dout_42;
   dout_47=dout_44|dout_45;
   dout_48=((A >> 7)&1)^((B >> 7)&1);
   dout_49=((A >> 7)&1)&((B >> 7)&1);
   dout_50=dout_48&dout_47;
   dout_51=dout_48^dout_47;
   dout_52=dout_49|dout_50;
   dout_53=((A >> 7)&1)^((B >> 7)&1);
   dout_54=dout_53^dout_52;

   O = 0;
   O |= (0&1) << 0;
   O |= (((A >> 1)&1)&1) << 1;
   O |= (((A >> 2)&1)&1) << 2;
   O |= (((B >> 3)&1)&1) << 3;
   O |= (dout_36&1) << 4;
   O |= (dout_41&1) << 5;
   O |= (dout_46&1) << 6;
   O |= (dout_51&1) << 7;
   O |= (dout_54&1) << 8;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 18.28 %
// MAE = 23 
// WCE% = 54.69 %
// WCE = 70 
// WCRE% = 3300.00 %
// EP% = 98.52 %
// MRE% = 67.56 %
// MSE = 839 
// PDK45_PWR = 0.0063 mW
// PDK45_AREA = 26.8 um2
// PDK45_DELAY = 0.17 ns


uint64_t evoapproxlib::evoapprox_t::add8s_6T8(const uint64_t B,const uint64_t A)
{
   uint64_t dout_27, dout_28, dout_29, dout_30, dout_34, dout_44, dout_49, dout_62, dout_63, dout_64;
   uint64_t O;

   dout_27=((A >> 5)&1)|((B >> 5)&1);
   dout_28=((A >> 6)&1)&((B >> 6)&1);
   dout_29=((A >> 6)&1)^((B >> 6)&1);
   dout_30=((A >> 7)&1)^((B >> 7)&1);
   dout_34=((B >> 7)&1)&((A >> 7)&1);
   dout_44=dout_27&dout_34;
   dout_49=dout_28|dout_34;
   dout_62=dout_44^dout_27;
   dout_63=dout_29|dout_34;
   dout_64=dout_30^dout_49;

   O = 0;
   O |= (0&1) << 0;
   O |= (dout_63&1) << 1;
   O |= (dout_64&1) << 2;
   O |= (dout_62&1) << 3;
   O |= (dout_62&1) << 4;
   O |= (dout_62&1) << 5;
   O |= (dout_63&1) << 6;
   O |= (dout_64&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mse parameters
***/
// MAE% = 16.48 %
// MAE = 21 
// WCE% = 54.69 %
// WCE = 70 
// WCRE% = 3300.00 %
// EP% = 98.32 %
// MRE% = 68.05 %
// MSE = 684 
// PDK45_PWR = 0.0099 mW
// PDK45_AREA = 35.7 um2
// PDK45_DELAY = 0.35 ns


uint64_t evoapproxlib::evoapprox_t::add8s_70F(const uint64_t B,const uint64_t A)
{
   uint64_t dout_27, dout_28, dout_29, dout_30, dout_38, dout_44, dout_47, dout_49, dout_62, dout_63, dout_64;
   uint64_t O;

   dout_27=((A >> 5)&1)|((B >> 5)&1);
   dout_28=((A >> 6)&1)&((B >> 6)&1);
   dout_29=((A >> 6)&1)^((B >> 6)&1);
   dout_30=((A >> 7)&1)^((B >> 7)&1);
   dout_38=dout_29&dout_27;
   dout_44=dout_29&((B >> 7)&1);
   dout_47=dout_38&((B >> 7)&1);
   dout_49=dout_28|dout_47;
   dout_62=dout_27^dout_44;
   dout_63=dout_29^dout_44;
   dout_64=dout_30^dout_49;

   O = 0;
   O |= (dout_63&1) << 0;
   O |= (0&1) << 1;
   O |= (dout_64&1) << 2;
   O |= (dout_62&1) << 3;
   O |= (dout_62&1) << 4;
   O |= (dout_62&1) << 5;
   O |= (dout_63&1) << 6;
   O |= (dout_64&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mse parameters
***/
// MAE% = 4.22 %
// MAE = 11 
// WCE% = 13.28 %
// WCE = 34 
// WCRE% = 3100.00 %
// EP% = 97.07 %
// MRE% = 38.69 %
// MSE = 175 
// PDK45_PWR = 0.0094 mW
// PDK45_AREA = 23.5 um2
// PDK45_DELAY = 0.19 ns


uint64_t evoapproxlib::evoapprox_t::add8se_8TX(const uint64_t B,const uint64_t A)
{
   uint64_t dout_28, dout_29, dout_30, dout_31, dout_32, dout_40, dout_46, dout_57, dout_58, dout_63, dout_64, dout_65, dout_66;
   uint64_t O;

   dout_28=((A >> 6)&1)&((B >> 6)&1);
   dout_29=((A >> 6)&1)^((B >> 6)&1);
   dout_30=((A >> 7)&1)&((B >> 7)&1);
   dout_31=((A >> 7)&1)^((B >> 7)&1);
   dout_32=((A >> 7)&1)^((B >> 7)&1);
   dout_40=dout_29&((B >> 5)&1);
   dout_46=dout_28|dout_40;
   dout_57=dout_31&dout_46;
   dout_58=dout_30|dout_57;
   dout_63=((B >> 5)&1)^0xFFFFFFFFFFFFFFFFU;
   dout_64=dout_29^((B >> 5)&1);
   dout_65=dout_31^dout_46;
   dout_66=dout_32^dout_58;

   O = 0;
   O |= (((A >> 1)&1)&1) << 0;
   O |= (dout_64&1) << 1;
   O |= (((B >> 4)&1)&1) << 2;
   O |= (((B >> 4)&1)&1) << 3;
   O |= (((A >> 5)&1)&1) << 4;
   O |= (dout_63&1) << 5;
   O |= (dout_64&1) << 6;
   O |= (dout_65&1) << 7;
   O |= (dout_66&1) << 8;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 44.45 %
// MAE = 57 
// WCE% = 100.00 %
// WCE = 128 
// WCRE% = 200.00 %
// EP% = 99.48 %
// MRE% = 99.98 %
// MSE = 4551 
// PDK45_PWR = 0.000 mW
// PDK45_AREA = 0.0 um2
// PDK45_DELAY = 0.00 ns


uint64_t evoapproxlib::evoapprox_t::add8s_6HF(const uint64_t B,const uint64_t A)
{
   uint64_t dout_61, dout_64;
   uint64_t O;

   dout_61=((B >> 3)&1)^0xFFFFFFFFFFFFFFFFU;
   dout_64=(dout_61&((B >> 3)&1))^0xFFFFFFFFFFFFFFFFU;

   O = 0;
   O |= (dout_64&1) << 0;
   O |= (dout_64&1) << 1;
   O |= (dout_64&1) << 2;
   O |= (dout_64&1) << 3;
   O |= (dout_64&1) << 4;
   O |= (dout_64&1) << 5;
   O |= (dout_64&1) << 6;
   O |= (dout_64&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.049 %
// MAE = 32 
// WCE% = 0.20 %
// WCE = 128 
// WCRE% = 100.00 %
// EP% = 49.80 %
// MRE% = 2.40 %
// MSE = 2731 
// PDK45_PWR = 0.369 mW
// PDK45_AREA = 652.8 um2
// PDK45_DELAY = 1.37 ns


int16_t evoapproxlib::evoapprox_t::mul8s_1KR8(int8_t A, int8_t B)
{
  int16_t P, P_;
  uint8_t tmp, C_1_6,C_1_7,C_2_0,C_2_1,C_2_2,C_2_3,C_2_4,C_2_5,C_2_6,C_2_7,C_3_0,C_3_1,C_3_2,C_3_3,C_3_4,C_3_5,C_3_6,C_3_7,C_4_0,C_4_1,C_4_2,C_4_3,C_4_4,C_4_5,C_4_6,C_4_7,C_5_0,C_5_1,C_5_2,C_5_3,C_5_4,C_5_5,C_5_6,C_5_7,C_6_0,C_6_1,C_6_2,C_6_3,C_6_4,C_6_5,C_6_6,C_6_7,C_7_0,C_7_1,C_7_2,C_7_3,C_7_4,C_7_5,C_7_6,C_7_7,C_8_0,C_8_1,C_8_2,C_8_3,C_8_4,C_8_5,C_8_6,C_8_7,S_0_7,S_1_0,S_1_1,S_1_2,S_1_3,S_1_4,S_1_5,S_1_6,S_1_7,S_2_0,S_2_1,S_2_2,S_2_3,S_2_4,S_2_5,S_2_6,S_2_7,S_3_0,S_3_1,S_3_2,S_3_3,S_3_4,S_3_5,S_3_6,S_3_7,S_4_0,S_4_1,S_4_2,S_4_3,S_4_4,S_4_5,S_4_6,S_4_7,S_5_0,S_5_1,S_5_2,S_5_3,S_5_4,S_5_5,S_5_6,S_5_7,S_6_0,S_6_1,S_6_2,S_6_3,S_6_4,S_6_5,S_6_6,S_6_7,S_7_0,S_7_1,S_7_2,S_7_3,S_7_4,S_7_5,S_7_6,S_7_7,S_8_0,S_8_1,S_8_2,S_8_3,S_8_4,S_8_5,S_8_6,S_8_7;
  S_0_7 = 1;
  S_1_0 = (((A>>1)&1) & ((B>>0)&1));
  S_1_1 = (((A>>1)&1) & ((B>>1)&1));
  S_1_2 = (((A>>1)&1) & ((B>>2)&1));
  S_1_3 = (((A>>1)&1) & ((B>>3)&1));
  S_1_4 = (((A>>1)&1) & ((B>>4)&1));
  S_1_5 = (((A>>1)&1) & ((B>>5)&1));
  S_1_6 = S_0_7^(((A>>1)&1) & ((B>>6)&1));
  C_1_6 = S_0_7&(((A>>1)&1) & ((B>>6)&1));
  S_1_7 = 1^(((((A>>1)&1) & ((B>>7)&1)))^1);
  C_1_7 = 1&(((((A>>1)&1) & ((B>>7)&1)))^1);
  S_2_0 = S_1_1^(((A>>2)&1) & ((B>>0)&1));
  C_2_0 = S_1_1&(((A>>2)&1) & ((B>>0)&1));
  S_2_1 = S_1_2^(((A>>2)&1) & ((B>>1)&1));
  C_2_1 = S_1_2&(((A>>2)&1) & ((B>>1)&1));
  S_2_2 = S_1_3^(((A>>2)&1) & ((B>>2)&1));
  C_2_2 = S_1_3&(((A>>2)&1) & ((B>>2)&1));
  S_2_3 = S_1_4^(((A>>2)&1) & ((B>>3)&1));
  C_2_3 = S_1_4&(((A>>2)&1) & ((B>>3)&1));
  S_2_4 = S_1_5^(((A>>2)&1) & ((B>>4)&1));
  C_2_4 = S_1_5&(((A>>2)&1) & ((B>>4)&1));
  S_2_5 = S_1_6^(((A>>2)&1) & ((B>>5)&1));
  C_2_5 = S_1_6&(((A>>2)&1) & ((B>>5)&1));
  tmp = S_1_7^C_1_6;
  S_2_6 = tmp^(((A>>2)&1) & ((B>>6)&1));
  C_2_6 = (tmp&(((A>>2)&1) & ((B>>6)&1)))|(S_1_7&C_1_6);
  S_2_7 = C_1_7^(((((A>>2)&1) & ((B>>7)&1)))^1);
  C_2_7 = C_1_7&(((((A>>2)&1) & ((B>>7)&1)))^1);
  tmp = S_2_1^C_2_0;
  S_3_0 = tmp^(((A>>3)&1) & ((B>>0)&1));
  C_3_0 = (tmp&(((A>>3)&1) & ((B>>0)&1)))|(S_2_1&C_2_0);
  tmp = S_2_2^C_2_1;
  S_3_1 = tmp^(((A>>3)&1) & ((B>>1)&1));
  C_3_1 = (tmp&(((A>>3)&1) & ((B>>1)&1)))|(S_2_2&C_2_1);
  tmp = S_2_3^C_2_2;
  S_3_2 = tmp^(((A>>3)&1) & ((B>>2)&1));
  C_3_2 = (tmp&(((A>>3)&1) & ((B>>2)&1)))|(S_2_3&C_2_2);
  tmp = S_2_4^C_2_3;
  S_3_3 = tmp^(((A>>3)&1) & ((B>>3)&1));
  C_3_3 = (tmp&(((A>>3)&1) & ((B>>3)&1)))|(S_2_4&C_2_3);
  tmp = S_2_5^C_2_4;
  S_3_4 = tmp^(((A>>3)&1) & ((B>>4)&1));
  C_3_4 = (tmp&(((A>>3)&1) & ((B>>4)&1)))|(S_2_5&C_2_4);
  tmp = S_2_6^C_2_5;
  S_3_5 = tmp^(((A>>3)&1) & ((B>>5)&1));
  C_3_5 = (tmp&(((A>>3)&1) & ((B>>5)&1)))|(S_2_6&C_2_5);
  tmp = S_2_7^C_2_6;
  S_3_6 = tmp^(((A>>3)&1) & ((B>>6)&1));
  C_3_6 = (tmp&(((A>>3)&1) & ((B>>6)&1)))|(S_2_7&C_2_6);
  S_3_7 = C_2_7^(((((A>>3)&1) & ((B>>7)&1)))^1);
  C_3_7 = C_2_7&(((((A>>3)&1) & ((B>>7)&1)))^1);
  tmp = S_3_1^C_3_0;
  S_4_0 = tmp^(((A>>4)&1) & ((B>>0)&1));
  C_4_0 = (tmp&(((A>>4)&1) & ((B>>0)&1)))|(S_3_1&C_3_0);
  tmp = S_3_2^C_3_1;
  S_4_1 = tmp^(((A>>4)&1) & ((B>>1)&1));
  C_4_1 = (tmp&(((A>>4)&1) & ((B>>1)&1)))|(S_3_2&C_3_1);
  tmp = S_3_3^C_3_2;
  S_4_2 = tmp^(((A>>4)&1) & ((B>>2)&1));
  C_4_2 = (tmp&(((A>>4)&1) & ((B>>2)&1)))|(S_3_3&C_3_2);
  tmp = S_3_4^C_3_3;
  S_4_3 = tmp^(((A>>4)&1) & ((B>>3)&1));
  C_4_3 = (tmp&(((A>>4)&1) & ((B>>3)&1)))|(S_3_4&C_3_3);
  tmp = S_3_5^C_3_4;
  S_4_4 = tmp^(((A>>4)&1) & ((B>>4)&1));
  C_4_4 = (tmp&(((A>>4)&1) & ((B>>4)&1)))|(S_3_5&C_3_4);
  tmp = S_3_6^C_3_5;
  S_4_5 = tmp^(((A>>4)&1) & ((B>>5)&1));
  C_4_5 = (tmp&(((A>>4)&1) & ((B>>5)&1)))|(S_3_6&C_3_5);
  tmp = S_3_7^C_3_6;
  S_4_6 = tmp^(((A>>4)&1) & ((B>>6)&1));
  C_4_6 = (tmp&(((A>>4)&1) & ((B>>6)&1)))|(S_3_7&C_3_6);
  S_4_7 = C_3_7^(((((A>>4)&1) & ((B>>7)&1)))^1);
  C_4_7 = C_3_7&(((((A>>4)&1) & ((B>>7)&1)))^1);
  tmp = S_4_1^C_4_0;
  S_5_0 = tmp^(((A>>5)&1) & ((B>>0)&1));
  C_5_0 = (tmp&(((A>>5)&1) & ((B>>0)&1)))|(S_4_1&C_4_0);
  tmp = S_4_2^C_4_1;
  S_5_1 = tmp^(((A>>5)&1) & ((B>>1)&1));
  C_5_1 = (tmp&(((A>>5)&1) & ((B>>1)&1)))|(S_4_2&C_4_1);
  tmp = S_4_3^C_4_2;
  S_5_2 = tmp^(((A>>5)&1) & ((B>>2)&1));
  C_5_2 = (tmp&(((A>>5)&1) & ((B>>2)&1)))|(S_4_3&C_4_2);
  tmp = S_4_4^C_4_3;
  S_5_3 = tmp^(((A>>5)&1) & ((B>>3)&1));
  C_5_3 = (tmp&(((A>>5)&1) & ((B>>3)&1)))|(S_4_4&C_4_3);
  tmp = S_4_5^C_4_4;
  S_5_4 = tmp^(((A>>5)&1) & ((B>>4)&1));
  C_5_4 = (tmp&(((A>>5)&1) & ((B>>4)&1)))|(S_4_5&C_4_4);
  tmp = S_4_6^C_4_5;
  S_5_5 = tmp^(((A>>5)&1) & ((B>>5)&1));
  C_5_5 = (tmp&(((A>>5)&1) & ((B>>5)&1)))|(S_4_6&C_4_5);
  tmp = S_4_7^C_4_6;
  S_5_6 = tmp^(((A>>5)&1) & ((B>>6)&1));
  C_5_6 = (tmp&(((A>>5)&1) & ((B>>6)&1)))|(S_4_7&C_4_6);
  S_5_7 = C_4_7^(((((A>>5)&1) & ((B>>7)&1)))^1);
  C_5_7 = C_4_7&(((((A>>5)&1) & ((B>>7)&1)))^1);
  tmp = S_5_1^C_5_0;
  S_6_0 = tmp^(((A>>6)&1) & ((B>>0)&1));
  C_6_0 = (tmp&(((A>>6)&1) & ((B>>0)&1)))|(S_5_1&C_5_0);
  tmp = S_5_2^C_5_1;
  S_6_1 = tmp^(((A>>6)&1) & ((B>>1)&1));
  C_6_1 = (tmp&(((A>>6)&1) & ((B>>1)&1)))|(S_5_2&C_5_1);
  tmp = S_5_3^C_5_2;
  S_6_2 = tmp^(((A>>6)&1) & ((B>>2)&1));
  C_6_2 = (tmp&(((A>>6)&1) & ((B>>2)&1)))|(S_5_3&C_5_2);
  tmp = S_5_4^C_5_3;
  S_6_3 = tmp^(((A>>6)&1) & ((B>>3)&1));
  C_6_3 = (tmp&(((A>>6)&1) & ((B>>3)&1)))|(S_5_4&C_5_3);
  tmp = S_5_5^C_5_4;
  S_6_4 = tmp^(((A>>6)&1) & ((B>>4)&1));
  C_6_4 = (tmp&(((A>>6)&1) & ((B>>4)&1)))|(S_5_5&C_5_4);
  tmp = S_5_6^C_5_5;
  S_6_5 = tmp^(((A>>6)&1) & ((B>>5)&1));
  C_6_5 = (tmp&(((A>>6)&1) & ((B>>5)&1)))|(S_5_6&C_5_5);
  tmp = S_5_7^C_5_6;
  S_6_6 = tmp^(((A>>6)&1) & ((B>>6)&1));
  C_6_6 = (tmp&(((A>>6)&1) & ((B>>6)&1)))|(S_5_7&C_5_6);
  S_6_7 = C_5_7^(((((A>>6)&1) & ((B>>7)&1)))^1);
  C_6_7 = C_5_7&(((((A>>6)&1) & ((B>>7)&1)))^1);
  tmp = S_6_1^C_6_0;
  S_7_0 = tmp^(((((A>>7)&1) & ((B>>0)&1)))^1);
  C_7_0 = (tmp&(((((A>>7)&1) & ((B>>0)&1)))^1))|(S_6_1&C_6_0);
  tmp = S_6_2^C_6_1;
  S_7_1 = tmp^(((((A>>7)&1) & ((B>>1)&1)))^1);
  C_7_1 = (tmp&(((((A>>7)&1) & ((B>>1)&1)))^1))|(S_6_2&C_6_1);
  tmp = S_6_3^C_6_2;
  S_7_2 = tmp^(((((A>>7)&1) & ((B>>2)&1)))^1);
  C_7_2 = (tmp&(((((A>>7)&1) & ((B>>2)&1)))^1))|(S_6_3&C_6_2);
  tmp = S_6_4^C_6_3;
  S_7_3 = tmp^(((((A>>7)&1) & ((B>>3)&1)))^1);
  C_7_3 = (tmp&(((((A>>7)&1) & ((B>>3)&1)))^1))|(S_6_4&C_6_3);
  tmp = S_6_5^C_6_4;
  S_7_4 = tmp^(((((A>>7)&1) & ((B>>4)&1)))^1);
  C_7_4 = (tmp&(((((A>>7)&1) & ((B>>4)&1)))^1))|(S_6_5&C_6_4);
  tmp = S_6_6^C_6_5;
  S_7_5 = tmp^(((((A>>7)&1) & ((B>>5)&1)))^1);
  C_7_5 = (tmp&(((((A>>7)&1) & ((B>>5)&1)))^1))|(S_6_6&C_6_5);
  tmp = S_6_7^C_6_6;
  S_7_6 = tmp^(((((A>>7)&1) & ((B>>6)&1)))^1);
  C_7_6 = (tmp&(((((A>>7)&1) & ((B>>6)&1)))^1))|(S_6_7&C_6_6);
  S_7_7 = C_6_7^(((A>>7)&1) & ((B>>7)&1));
  C_7_7 = C_6_7&(((A>>7)&1) & ((B>>7)&1));
  S_8_0 = S_7_1^C_7_0;
  C_8_0 = S_7_1&C_7_0;
  tmp = S_7_2^C_8_0;
  S_8_1 = tmp^C_7_1;
  C_8_1 = (tmp&C_7_1)|(S_7_2&C_8_0);
  tmp = S_7_3^C_8_1;
  S_8_2 = tmp^C_7_2;
  C_8_2 = (tmp&C_7_2)|(S_7_3&C_8_1);
  tmp = S_7_4^C_8_2;
  S_8_3 = tmp^C_7_3;
  C_8_3 = (tmp&C_7_3)|(S_7_4&C_8_2);
  tmp = S_7_5^C_8_3;
  S_8_4 = tmp^C_7_4;
  C_8_4 = (tmp&C_7_4)|(S_7_5&C_8_3);
  tmp = S_7_6^C_8_4;
  S_8_5 = tmp^C_7_5;
  C_8_5 = (tmp&C_7_5)|(S_7_6&C_8_4);
  tmp = S_7_7^C_8_5;
  S_8_6 = tmp^C_7_6;
  C_8_6 = (tmp&C_7_6)|(S_7_7&C_8_5);
  tmp = 1^C_8_6;
  S_8_7 = tmp^C_7_7;
  C_8_7 = (tmp&C_7_7)|(1&C_8_6);
  P = 0;
  P |= (S_1_0 & 1) << 1;
  P |= (S_2_0 & 1) << 2;
  P |= (S_3_0 & 1) << 3;
  P |= (S_4_0 & 1) << 4;
  P |= (S_5_0 & 1) << 5;
  P |= (S_6_0 & 1) << 6;
  P |= (S_7_0 & 1) << 7;
  P |= (S_8_0 & 1) << 8;
  P |= (S_8_1 & 1) << 9;
  P |= (S_8_2 & 1) << 10;
  P |= (S_8_3 & 1) << 11;
  P |= (S_8_4 & 1) << 12;
  P |= (S_8_5 & 1) << 13;
  P |= (S_8_6 & 1) << 14;
  P |= (S_8_7 & 1) << 15;
  return P;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 1.41 %
// MAE = 1.8 
// WCE% = 3.91 %
// WCE = 5.0 
// WCRE% = 300.00 %
// EP% = 83.20 %
// MRE% = 8.59 %
// MSE = 4.6 
// PDK45_PWR = 0.027 mW
// PDK45_AREA = 55.8 um2
// PDK45_DELAY = 0.51 ns


uint64_t evoapproxlib::evoapprox_t::add8s_6FC(const uint64_t B,const uint64_t A)
{
   uint64_t dout_18, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64;
   uint64_t O;

   dout_18=((A >> 7)&1)&((B >> 7)&1);
   dout_20=((A >> 2)&1)&((B >> 2)&1);
   dout_21=((A >> 2)&1)^((B >> 2)&1);
   dout_22=((A >> 3)&1)&((B >> 3)&1);
   dout_23=((A >> 3)&1)^((B >> 3)&1);
   dout_24=((A >> 4)&1)&((B >> 4)&1);
   dout_25=((A >> 4)&1)^((B >> 4)&1);
   dout_26=((A >> 5)&1)&((B >> 5)&1);
   dout_27=((A >> 5)&1)^((B >> 5)&1);
   dout_28=((A >> 6)&1)&((B >> 6)&1);
   dout_29=((A >> 6)&1)^((B >> 6)&1);
   dout_30=((A >> 7)&1)^((B >> 7)&1);
   dout_31=dout_21&dout_18;
   dout_33=dout_20|dout_31;
   dout_34=dout_25&dout_22;
   dout_35=dout_25&dout_23;
   dout_36=dout_24|dout_34;
   dout_37=dout_29&dout_26;
   dout_38=dout_29&dout_27;
   dout_39=dout_28|dout_37;
   dout_44=dout_27&dout_36;
   dout_45=dout_27&dout_35;
   dout_46=dout_26|dout_44;
   dout_47=dout_38&dout_36;
   dout_48=dout_38&dout_35;
   dout_49=dout_39|dout_47;
   dout_50=dout_23&dout_33;
   dout_51=dout_22|dout_50;
   dout_52=dout_35&dout_33;
   dout_53=dout_36|dout_52;
   dout_54=dout_45&dout_33;
   dout_55=dout_46|dout_54;
   dout_56=dout_48&dout_33;
   dout_57=dout_49|dout_56;
   dout_59=dout_21^dout_18;
   dout_60=dout_23^dout_33;
   dout_61=dout_25^dout_51;
   dout_62=dout_27^dout_53;
   dout_63=dout_29^dout_55;
   dout_64=dout_30^dout_57;

   O = 0;
   O |= (((A >> 1)&1)&1) << 0;
   O |= (((A >> 1)&1)&1) << 1;
   O |= (dout_59&1) << 2;
   O |= (dout_60&1) << 3;
   O |= (dout_61&1) << 4;
   O |= (dout_62&1) << 5;
   O |= (dout_63&1) << 6;
   O |= (dout_64&1) << 7;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, R. Hrbacek, Z. Vasicek and L. Sekanina, "EvoApprox8b: Library of approximate adders and multipliers for circuit design and benchmarking of approximation methods". Design, Automation & Test in Europe Conference & Exhibition (DATE), 2017, Lausanne, 2017, pp. 258-261. doi: 10.23919/DATE.2017.7926993 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mse parameters
***/
// MAE% = 0.67 %
// MAE = 442 
// WCE% = 2.94 %
// WCE = 1925 
// WCRE% = 300.00 %
// EP% = 99.05 %
// MRE% = 12.14 %
// MSE = 305440 
// PDK45_PWR = 0.095 mW
// PDK45_AREA = 228.5 um2
// PDK45_DELAY = 1.08 ns


uint64_t evoapproxlib::evoapprox_t::mul8u_1AGV(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_72, dout_118, dout_147, dout_151, dout_152, dout_153, dout_154, dout_155, dout_161, dout_162, dout_163, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_205, dout_206, dout_207, dout_208, dout_231, dout_232, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_249, dout_250, dout_251, dout_252, dout_253, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_295, dout_296, dout_297, dout_298, dout_307, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_72=((B >> 7)&1)&((A >> 2)&1);
   dout_118=((B >> 7)&1)&((A >> 3)&1);
   dout_147=((B >> 6)&1)&((A >> 3)&1);
   dout_151=dout_72^dout_118;
   dout_152=dout_72&((A >> 3)&1);
   dout_153=((B >> 7)&1)&dout_147;
   dout_154=dout_151^dout_147;
   dout_155=dout_152|dout_153;
   dout_161=((B >> 5)&1)&((A >> 4)&1);
   dout_162=((B >> 6)&1)&((A >> 4)&1);
   dout_163=((B >> 7)&1)&((A >> 4)&1);
   dout_191=dout_154^dout_162;
   dout_192=dout_154&dout_162;
   dout_193=dout_191&dout_161;
   dout_194=dout_191^dout_161;
   dout_195=dout_192|dout_193;
   dout_196=dout_155^dout_163;
   dout_197=dout_155&dout_163;
   dout_198=((B >> 7)&1)&dout_195;
   dout_199=dout_196^dout_195;
   dout_200=dout_197|dout_198;
   dout_205=((B >> 4)&1)&((A >> 5)&1);
   dout_206=((B >> 5)&1)&((A >> 5)&1);
   dout_207=((B >> 6)&1)&((A >> 5)&1);
   dout_208=((B >> 7)&1)&((A >> 5)&1);
   dout_231=dout_194^dout_206;
   dout_232=dout_194&dout_206;
   dout_236=dout_199^dout_207;
   dout_237=dout_199&dout_207;
   dout_238=dout_236&dout_232;
   dout_239=dout_236^dout_232;
   dout_240=dout_237|dout_238;
   dout_241=dout_200^dout_208;
   dout_242=dout_200&dout_208;
   dout_243=((B >> 7)&1)&dout_240;
   dout_244=dout_241^dout_240;
   dout_245=dout_242|dout_243;
   dout_249=((B >> 2)&1)&((A >> 6)&1);
   dout_250=((B >> 4)&1)&((A >> 6)&1);
   dout_251=((B >> 5)&1)&((A >> 6)&1);
   dout_252=((B >> 6)&1)&((A >> 6)&1);
   dout_253=((B >> 7)&1)&((A >> 6)&1);
   dout_271=dout_231^dout_250;
   dout_272=dout_231&dout_250;
   dout_273=dout_271&dout_249;
   dout_274=dout_271^dout_249;
   dout_275=dout_272|dout_273;
   dout_276=dout_239^dout_251;
   dout_277=dout_239&dout_251;
   dout_278=dout_276&dout_275;
   dout_279=dout_276^dout_275;
   dout_280=dout_277|dout_278;
   dout_281=dout_244^dout_252;
   dout_282=dout_244&dout_252;
   dout_283=dout_281&dout_280;
   dout_284=dout_281^dout_280;
   dout_285=dout_282|dout_283;
   dout_286=dout_245^dout_253;
   dout_287=dout_245&dout_253;
   dout_288=dout_253&dout_285;
   dout_289=dout_286^dout_285;
   dout_290=dout_287|dout_288;
   dout_295=((B >> 4)&1)&((A >> 7)&1);
   dout_296=((B >> 5)&1)&((A >> 7)&1);
   dout_297=((B >> 6)&1)&((A >> 7)&1);
   dout_298=((B >> 7)&1)&((A >> 7)&1);
   dout_307=((A >> 7)&1)&((B >> 3)&1);
   dout_316=dout_279^dout_295;
   dout_317=dout_279&dout_295;
   dout_318=dout_316&dout_307;
   dout_319=dout_316^dout_307;
   dout_320=dout_317|dout_318;
   dout_321=dout_284^dout_296;
   dout_322=dout_284&dout_296;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_289^dout_297;
   dout_327=dout_289&dout_297;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_290^dout_298;
   dout_332=dout_290&((A >> 7)&1);
   dout_333=dout_298&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (0&1) << 0;
   O |= (dout_205&1) << 1;
   O |= (dout_163&1) << 2;
   O |= (dout_194&1) << 3;
   O |= (0&1) << 4;
   O |= (dout_250&1) << 5;
   O |= (0&1) << 6;
   O |= (0&1) << 7;
   O |= (dout_205&1) << 8;
   O |= (dout_205&1) << 9;
   O |= (dout_274&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

/***
* This code is a part of evoapproxlib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek and R. Hrbacek, "Role of circuit representation in evolutionary design of energy-efficient approximate circuits" in IET Computers & Digital Techniques, vol. 12, no. 4, pp. 139-149, 7 2018. doi: 10.1049/iet-cdt.2017.0188 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 1.64 %
// MAE = 8.4 
// WCE% = 4.30 %
// WCE = 22 
// WCRE% = 100.00 %
// EP% = 96.88 %
// MRE% = 4.57 %
// MSE = 100 
// PDK45_PWR = 0.012 mW
// PDK45_AREA = 26.8 um2
// PDK45_DELAY = 0.27 ns


uint64_t evoapproxlib::evoapprox_t::add8u_2XT(uint64_t a, uint64_t b) {
  uint64_t o = 0;
  int n_193=0, n_44=0, n_47=0, n_40=0, n_42=0, n_187=0, n_49=0, n_149=0, n_147=0, n_144=0;
  int n_209=0, n_182=0, n_180=0, n_8=0, n_9=0, n_184=0, n_4=0, n_5=0, n_6=0, n_7=0;
  int n_0=0, n_1=0, n_2=0, n_3=0, n_37=0, n_38=0, n_14=0, n_15=0, n_12=0, n_13=0;
  int n_10=0, n_11=0, n_116=0, n_178=0, n_118=0, n_156=0, n_213=0, n_211=0;
  n_0 = (a >> 0) & 0x1;
  n_1 = (a >> 1) & 0x1;
  n_2 = (a >> 2) & 0x1;
  n_3 = (a >> 3) & 0x1;
  n_4 = (a >> 4) & 0x1;
  n_5 = (a >> 5) & 0x1;
  n_6 = (a >> 6) & 0x1;
  n_7 = (a >> 7) & 0x1;
  n_8 = (b >> 0) & 0x1;
  n_9 = (b >> 1) & 0x1;
  n_10 = (b >> 2) & 0x1;
  n_11 = (b >> 3) & 0x1;
  n_12 = (b >> 4) & 0x1;
  n_13 = (b >> 5) & 0x1;
  n_14 = (b >> 6) & 0x1;
  n_15 = (b >> 7) & 0x1;
  n_37 = n_7 | n_15;
  n_38 = n_5 ^ n_13;
  n_40 = n_5 & n_13;
  n_42 = n_6 ^ n_14;
  n_44 = n_6 & n_14;
  n_47 = ~(n_7 ^ n_15);
  n_49 = n_7 & n_15;
  n_116 = n_38 & n_12;
  n_118 = ~(n_40 | n_116);
  n_144 = n_42 & n_116;
  n_147 = n_42 & n_40;
  n_149 = n_44 | n_147;
  n_156 = ~(n_149 | n_144);
  n_178 = n_37 & n_144;
  n_180 = n_37 & n_147;
  n_182 = n_37 & n_44;
  n_184 = n_49 | n_182;
  n_187 = n_180 | n_178;
  n_193 = n_184 | n_187;
  n_209 = n_38 ^ n_12;
  n_211 = ~(n_42 ^ n_118);
  n_213 = n_47 ^ n_156;
  o |= (n_0 & 0x01) << 0;
  o |= (n_5 & 0x01) << 1;
  o |= (n_5 & 0x01) << 2;
  o |= (n_11 & 0x01) << 3;
  o |= (n_4 & 0x01) << 4;
  o |= (n_209 & 0x01) << 5;
  o |= (n_211 & 0x01) << 6;
  o |= (n_213 & 0x01) << 7;
  o |= (n_193 & 0x01) << 8;
  return o;
}

/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 0.0063 %
// MAE = 4.1 
// WCE% = 0.015 %
// WCE = 10 
// WCRE% = 500.00 %
// EP% = 93.75 %
// MRE% = 0.13 %
// MSE = 24 
// PDK45_PWR = 0.057 mW
// PDK45_AREA = 113.6 um2
// PDK45_DELAY = 1.03 ns



uint64_t evoapproxlib::evoapprox_t::add16se_294(const uint64_t B,const uint64_t A)
{
   uint64_t dout_38, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_68, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_88, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_99, dout_100, dout_101, dout_102, dout_103, dout_104, dout_105, dout_108, dout_109, dout_110, dout_111, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143;
   uint64_t O;

   dout_38=((A >> 3)&1)|((B >> 3)&1);
   dout_40=((A >> 4)&1)&((B >> 4)&1);
   dout_41=((A >> 4)&1)^((B >> 4)&1);
   dout_42=((A >> 5)&1)&((B >> 5)&1);
   dout_43=((A >> 5)&1)^((B >> 5)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=((A >> 6)&1)^((B >> 6)&1);
   dout_46=((A >> 7)&1)&((B >> 7)&1);
   dout_47=((A >> 7)&1)^((B >> 7)&1);
   dout_48=((A >> 8)&1)&((B >> 8)&1);
   dout_49=((A >> 8)&1)^((B >> 8)&1);
   dout_50=((A >> 9)&1)&((B >> 9)&1);
   dout_51=((A >> 9)&1)^((B >> 9)&1);
   dout_52=((A >> 10)&1)&((B >> 10)&1);
   dout_53=((A >> 10)&1)^((B >> 10)&1);
   dout_54=((A >> 11)&1)&((B >> 11)&1);
   dout_55=((A >> 11)&1)^((B >> 11)&1);
   dout_56=((A >> 12)&1)&((B >> 12)&1);
   dout_57=((A >> 12)&1)^((B >> 12)&1);
   dout_58=((A >> 13)&1)&((B >> 13)&1);
   dout_59=((A >> 13)&1)^((B >> 13)&1);
   dout_60=((A >> 14)&1)&((B >> 14)&1);
   dout_61=((A >> 14)&1)^((B >> 14)&1);
   dout_62=((A >> 15)&1)&((B >> 15)&1);
   dout_63=((A >> 15)&1)^((B >> 15)&1);
   dout_64=((A >> 15)&1)^((B >> 15)&1);
   dout_68=dout_41&dout_38;
   dout_70=dout_40|dout_68;
   dout_71=dout_45&dout_42;
   dout_72=dout_45&dout_43;
   dout_73=dout_44|dout_71;
   dout_74=dout_49&dout_46;
   dout_75=dout_49&dout_47;
   dout_76=dout_48|dout_74;
   dout_77=dout_53&dout_50;
   dout_78=dout_53&dout_51;
   dout_79=dout_52|dout_77;
   dout_80=dout_57&dout_54;
   dout_81=dout_57&dout_55;
   dout_82=dout_56|dout_80;
   dout_83=dout_61&dout_58;
   dout_84=dout_61&dout_59;
   dout_85=dout_60|dout_83;
   dout_88=dout_72&dout_70;
   dout_90=dout_73|dout_88;
   dout_91=dout_78&dout_76;
   dout_92=dout_78&dout_75;
   dout_93=dout_79|dout_91;
   dout_94=dout_84&dout_82;
   dout_95=dout_84&dout_81;
   dout_96=dout_85|dout_94;
   dout_99=dout_95&dout_93;
   dout_100=dout_95&dout_92;
   dout_101=dout_96|dout_99;
   dout_102=dout_100&dout_90;
   dout_103=dout_101|dout_102;
   dout_104=dout_92&dout_90;
   dout_105=dout_93|dout_104;
   dout_108=dout_75&dout_90;
   dout_109=dout_76|dout_108;
   dout_110=dout_81&dout_105;
   dout_111=dout_82|dout_110;
   dout_116=dout_43&dout_70;
   dout_117=dout_42|dout_116;
   dout_118=dout_47&dout_90;
   dout_119=dout_46|dout_118;
   dout_120=dout_51&dout_109;
   dout_121=dout_50|dout_120;
   dout_122=dout_55&dout_105;
   dout_123=dout_54|dout_122;
   dout_124=dout_59&dout_111;
   dout_125=dout_58|dout_124;
   dout_126=dout_63&dout_103;
   dout_127=dout_62|dout_126;
   dout_131=dout_41^dout_38;
   dout_132=dout_43^dout_70;
   dout_133=dout_45^dout_117;
   dout_134=dout_47^dout_90;
   dout_135=dout_49^dout_119;
   dout_136=dout_51^dout_109;
   dout_137=dout_53^dout_121;
   dout_138=dout_55^dout_105;
   dout_139=dout_57^dout_123;
   dout_140=dout_59^dout_111;
   dout_141=dout_61^dout_125;
   dout_142=dout_63^dout_103;
   dout_143=dout_64^dout_127;

   O = 0;
   O |= (0&1) << 0;
   O |= (0&1) << 1;
   O |= (((B >> 2)&1)&1) << 2;
   O |= (0&1) << 3;
   O |= (dout_131&1) << 4;
   O |= (dout_132&1) << 5;
   O |= (dout_133&1) << 6;
   O |= (dout_134&1) << 7;
   O |= (dout_135&1) << 8;
   O |= (dout_136&1) << 9;
   O |= (dout_137&1) << 10;
   O |= (dout_138&1) << 11;
   O |= (dout_139&1) << 12;
   O |= (dout_140&1) << 13;
   O |= (dout_141&1) << 14;
   O |= (dout_142&1) << 15;
   O |= (dout_143&1) << 16;
   return O;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 0.0047 %
// MAE = 3.1 
// WCE% = 0.015 %
// WCE = 10 
// WCRE% = 800.00 %
// EP% = 90.62 %
// MRE% = 0.10 %
// MSE = 15 
// PDK45_PWR = 0.062 mW
// PDK45_AREA = 127.6 um2
// PDK45_DELAY = 1.06 ns



uint64_t evoapproxlib::evoapprox_t::add16se_28H(const uint64_t B,const uint64_t A)
{
   uint64_t dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_98, dout_99, dout_100, dout_101, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110, dout_111, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_130, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143;
   uint64_t O;

   dout_38=((A >> 3)&1)&((B >> 3)&1);
   dout_39=((A >> 3)&1)^((B >> 3)&1);
   dout_40=((A >> 4)&1)&((B >> 4)&1);
   dout_41=((A >> 4)&1)^((B >> 4)&1);
   dout_42=((A >> 5)&1)&((B >> 5)&1);
   dout_43=((A >> 5)&1)^((B >> 5)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=((A >> 6)&1)^((B >> 6)&1);
   dout_46=((A >> 7)&1)&((B >> 7)&1);
   dout_47=((A >> 7)&1)^((B >> 7)&1);
   dout_48=((A >> 8)&1)&((B >> 8)&1);
   dout_49=((A >> 8)&1)^((B >> 8)&1);
   dout_50=((A >> 9)&1)&((B >> 9)&1);
   dout_51=((A >> 9)&1)^((B >> 9)&1);
   dout_52=((A >> 10)&1)&((B >> 10)&1);
   dout_53=((A >> 10)&1)^((B >> 10)&1);
   dout_54=((A >> 11)&1)&((B >> 11)&1);
   dout_55=((A >> 11)&1)^((B >> 11)&1);
   dout_56=((A >> 12)&1)&((B >> 12)&1);
   dout_57=((A >> 12)&1)^((B >> 12)&1);
   dout_58=((A >> 13)&1)&((B >> 13)&1);
   dout_59=((A >> 13)&1)^((B >> 13)&1);
   dout_60=((A >> 14)&1)&((B >> 14)&1);
   dout_61=((A >> 14)&1)^((B >> 14)&1);
   dout_62=((A >> 15)&1)&((B >> 15)&1);
   dout_63=((A >> 15)&1)^((B >> 15)&1);
   dout_64=((A >> 15)&1)^((B >> 15)&1);
   dout_68=dout_41&dout_38;
   dout_69=dout_41&dout_39;
   dout_70=dout_40|dout_68;
   dout_71=dout_45&dout_42;
   dout_72=dout_45&dout_43;
   dout_73=dout_44|dout_71;
   dout_74=dout_49&dout_46;
   dout_75=dout_49&dout_47;
   dout_76=dout_48|dout_74;
   dout_77=dout_53&dout_50;
   dout_78=dout_53&dout_51;
   dout_79=dout_52|dout_77;
   dout_80=dout_57&dout_54;
   dout_81=dout_57&dout_55;
   dout_82=dout_56|dout_80;
   dout_83=dout_61&dout_58;
   dout_84=dout_61&dout_59;
   dout_85=dout_60|dout_83;
   dout_88=dout_72&dout_70;
   dout_89=dout_72&dout_69;
   dout_90=dout_73|dout_88;
   dout_91=dout_78&dout_76;
   dout_92=dout_78&dout_75;
   dout_93=dout_79|dout_91;
   dout_94=dout_84&dout_82;
   dout_95=dout_84&dout_81;
   dout_96=dout_85|dout_94;
   dout_97=dout_89&((A >> 2)&1);
   dout_98=dout_90|dout_97;
   dout_99=dout_95&dout_93;
   dout_100=dout_95&dout_92;
   dout_101=dout_96|dout_99;
   dout_102=dout_100&dout_98;
   dout_103=dout_101|dout_102;
   dout_104=dout_92&dout_98;
   dout_105=dout_93|dout_104;
   dout_106=dout_69&((A >> 2)&1);
   dout_107=dout_70|dout_106;
   dout_108=dout_75&dout_98;
   dout_109=dout_76|dout_108;
   dout_110=dout_81&dout_105;
   dout_111=dout_82|dout_110;
   dout_114=dout_39&((A >> 2)&1);
   dout_115=dout_38|dout_114;
   dout_116=dout_43&dout_107;
   dout_117=dout_42|dout_116;
   dout_118=dout_47&dout_98;
   dout_119=dout_46|dout_118;
   dout_120=dout_51&dout_109;
   dout_121=dout_50|dout_120;
   dout_122=dout_55&dout_105;
   dout_123=dout_54|dout_122;
   dout_124=dout_59&dout_111;
   dout_125=dout_58|dout_124;
   dout_126=dout_63&dout_103;
   dout_127=dout_62|dout_126;
   dout_130=(dout_39&((A >> 2)&1))^0xFFFFFFFFFFFFFFFFU;
   dout_131=dout_41^dout_115;
   dout_132=dout_43^dout_107;
   dout_133=dout_45^dout_117;
   dout_134=dout_47^dout_98;
   dout_135=dout_49^dout_119;
   dout_136=dout_51^dout_109;
   dout_137=dout_53^dout_121;
   dout_138=dout_55^dout_105;
   dout_139=dout_57^dout_123;
   dout_140=dout_59^dout_111;
   dout_141=dout_61^dout_125;
   dout_142=dout_63^dout_103;
   dout_143=dout_64^dout_127;

   O = 0;
   O |= (dout_142&1) << 0;
   O |= (0&1) << 1;
   O |= (0&1) << 2;
   O |= (dout_130&1) << 3;
   O |= (dout_131&1) << 4;
   O |= (dout_132&1) << 5;
   O |= (dout_133&1) << 6;
   O |= (dout_134&1) << 7;
   O |= (dout_135&1) << 8;
   O |= (dout_136&1) << 9;
   O |= (dout_137&1) << 10;
   O |= (dout_138&1) << 11;
   O |= (dout_139&1) << 12;
   O |= (dout_140&1) << 13;
   O |= (dout_141&1) << 14;
   O |= (dout_142&1) << 15;
   O |= (dout_143&1) << 16;
   return O;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.049 %
// MAE = 32 
// WCE% = 0.099 %
// WCE = 65 
// WCRE% = 5300.00 %
// EP% = 99.80 %
// MRE% = 1.03 %
// MSE = 1248 
// PDK45_PWR = 0.043 mW
// PDK45_AREA = 86.8 um2
// PDK45_DELAY = 0.79 ns



uint64_t evoapproxlib::evoapprox_t::add16se_2E1(const uint64_t B,const uint64_t A)
{
   uint64_t dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_98, dout_99, dout_100, dout_101, dout_102, dout_103, dout_104, dout_105, dout_108, dout_109, dout_110, dout_111, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143;
   uint64_t O;

   dout_46=((A >> 7)&1)&((B >> 7)&1);
   dout_47=((A >> 7)&1)^((B >> 7)&1);
   dout_48=((A >> 8)&1)&((B >> 8)&1);
   dout_49=((A >> 8)&1)^((B >> 8)&1);
   dout_50=((A >> 9)&1)&((B >> 9)&1);
   dout_51=((A >> 9)&1)^((B >> 9)&1);
   dout_52=((A >> 10)&1)&((B >> 10)&1);
   dout_53=((A >> 10)&1)^((B >> 10)&1);
   dout_54=((A >> 11)&1)&((B >> 11)&1);
   dout_55=((A >> 11)&1)^((B >> 11)&1);
   dout_56=((A >> 12)&1)&((B >> 12)&1);
   dout_57=((A >> 12)&1)^((B >> 12)&1);
   dout_58=((A >> 13)&1)&((B >> 13)&1);
   dout_59=((A >> 13)&1)^((B >> 13)&1);
   dout_60=((A >> 14)&1)&((B >> 14)&1);
   dout_61=((A >> 14)&1)^((B >> 14)&1);
   dout_62=((A >> 15)&1)&((B >> 15)&1);
   dout_63=((A >> 15)&1)^((B >> 15)&1);
   dout_64=((A >> 15)&1)^((B >> 15)&1);
   dout_74=dout_49&dout_46;
   dout_75=dout_49&dout_47;
   dout_76=dout_48|dout_74;
   dout_77=dout_53&dout_50;
   dout_78=dout_53&dout_51;
   dout_79=dout_52|dout_77;
   dout_80=dout_57&dout_54;
   dout_81=dout_57&dout_55;
   dout_82=dout_56|dout_80;
   dout_83=dout_61&dout_58;
   dout_84=dout_61&dout_59;
   dout_85=dout_60|dout_83;
   dout_91=dout_78&dout_76;
   dout_92=dout_78&dout_75;
   dout_93=dout_79|dout_91;
   dout_94=dout_84&dout_82;
   dout_95=dout_84&dout_81;
   dout_96=dout_85|dout_94;
   dout_98=((A >> 6)&1)|((B >> 6)&1);
   dout_99=dout_95&dout_93;
   dout_100=dout_95&dout_92;
   dout_101=dout_96|dout_99;
   dout_102=dout_100&dout_98;
   dout_103=dout_101|dout_102;
   dout_104=dout_92&dout_98;
   dout_105=dout_93|dout_104;
   dout_108=dout_75&dout_98;
   dout_109=dout_76|dout_108;
   dout_110=dout_81&dout_105;
   dout_111=dout_82|dout_110;
   dout_118=dout_47&dout_98;
   dout_119=dout_46|dout_118;
   dout_120=dout_51&dout_109;
   dout_121=dout_50|dout_120;
   dout_122=dout_55&dout_105;
   dout_123=dout_54|dout_122;
   dout_124=dout_59&dout_111;
   dout_125=dout_58|dout_124;
   dout_126=dout_63&dout_103;
   dout_127=dout_62|dout_126;
   dout_134=dout_47^dout_98;
   dout_135=dout_49^dout_119;
   dout_136=dout_51^dout_109;
   dout_137=dout_53^dout_121;
   dout_138=dout_55^dout_105;
   dout_139=dout_57^dout_123;
   dout_140=dout_59^dout_111;
   dout_141=dout_61^dout_125;
   dout_142=dout_63^dout_103;
   dout_143=dout_64^dout_127;

   O = 0;
   O |= (dout_136&1) << 0;
   O |= (((A >> 5)&1)&1) << 1;
   O |= (((B >> 2)&1)&1) << 2;
   O |= (((A >> 5)&1)&1) << 3;
   O |= (((B >> 4)&1)&1) << 4;
   O |= (((B >> 5)&1)&1) << 5;
   O |= (0&1) << 6;
   O |= (dout_134&1) << 7;
   O |= (dout_135&1) << 8;
   O |= (dout_136&1) << 9;
   O |= (dout_137&1) << 10;
   O |= (dout_138&1) << 11;
   O |= (dout_139&1) << 12;
   O |= (dout_140&1) << 13;
   O |= (dout_141&1) << 14;
   O |= (dout_142&1) << 15;
   O |= (dout_143&1) << 16;
   return O;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.00076 %
// MAE = 0.5 
// WCE% = 0.0046 %
// WCE = 3.0 
// WCRE% = 75.00 %
// EP% = 25.00 %
// MRE% = 0.015 %
// MSE = 1.2 
// PDK45_PWR = 0.072 mW
// PDK45_AREA = 148.3 um2
// PDK45_DELAY = 1.33 ns



uint64_t evoapproxlib::evoapprox_t::add16se_2H0(const uint64_t B,const uint64_t A)
{
   uint64_t dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_65, dout_66, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_86, dout_87, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_98, dout_99, dout_100, dout_101, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110, dout_111, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_129, dout_130, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143;
   uint64_t O;

   dout_32=((A >> 0)&1)&((B >> 0)&1);
   dout_33=((A >> 0)&1)|((B >> 0)&1);
   dout_34=((A >> 1)&1)&((B >> 1)&1);
   dout_35=((A >> 1)&1)^((B >> 1)&1);
   dout_36=((A >> 2)&1)&((B >> 2)&1);
   dout_37=((A >> 2)&1)^((B >> 2)&1);
   dout_38=((A >> 3)&1)&((B >> 3)&1);
   dout_39=((A >> 3)&1)^((B >> 3)&1);
   dout_40=((A >> 4)&1)&((B >> 4)&1);
   dout_41=((A >> 4)&1)^((B >> 4)&1);
   dout_42=((A >> 5)&1)&((B >> 5)&1);
   dout_43=((A >> 5)&1)^((B >> 5)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=((A >> 6)&1)^((B >> 6)&1);
   dout_46=((A >> 7)&1)&((B >> 7)&1);
   dout_47=((A >> 7)&1)^((B >> 7)&1);
   dout_48=((A >> 8)&1)&((B >> 8)&1);
   dout_49=((A >> 8)&1)^((B >> 8)&1);
   dout_50=((A >> 9)&1)&((B >> 9)&1);
   dout_51=((A >> 9)&1)^((B >> 9)&1);
   dout_52=((A >> 10)&1)&((B >> 10)&1);
   dout_53=((A >> 10)&1)^((B >> 10)&1);
   dout_54=((A >> 11)&1)&((B >> 11)&1);
   dout_55=((A >> 11)&1)^((B >> 11)&1);
   dout_56=((A >> 12)&1)&((B >> 12)&1);
   dout_57=((A >> 12)&1)^((B >> 12)&1);
   dout_58=((A >> 13)&1)&((B >> 13)&1);
   dout_59=((A >> 13)&1)^((B >> 13)&1);
   dout_60=((A >> 14)&1)&((B >> 14)&1);
   dout_61=((A >> 14)&1)^((B >> 14)&1);
   dout_62=((A >> 15)&1)&((B >> 15)&1);
   dout_63=((A >> 15)&1)^((B >> 15)&1);
   dout_64=((A >> 15)&1)^((B >> 15)&1);
   dout_65=dout_37&dout_34;
   dout_66=dout_37&dout_35;
   dout_67=dout_36|dout_65;
   dout_68=dout_41&dout_38;
   dout_69=dout_41&dout_39;
   dout_70=dout_40|dout_68;
   dout_71=dout_45&dout_42;
   dout_72=dout_45&dout_43;
   dout_73=dout_44|dout_71;
   dout_74=dout_49&dout_46;
   dout_75=dout_49&dout_47;
   dout_76=dout_48|dout_74;
   dout_77=dout_53&dout_50;
   dout_78=dout_53&dout_51;
   dout_79=dout_52|dout_77;
   dout_80=dout_57&dout_54;
   dout_81=dout_57&dout_55;
   dout_82=dout_56|dout_80;
   dout_83=dout_61&dout_58;
   dout_84=dout_61&dout_59;
   dout_85=dout_60|dout_83;
   dout_86=dout_66&dout_32;
   dout_87=dout_67|dout_86;
   dout_88=dout_72&dout_70;
   dout_89=dout_72&dout_69;
   dout_90=dout_73|dout_88;
   dout_91=dout_78&dout_76;
   dout_92=dout_78&dout_75;
   dout_93=dout_79|dout_91;
   dout_94=dout_84&dout_82;
   dout_95=dout_84&dout_81;
   dout_96=dout_85|dout_94;
   dout_97=dout_89&dout_87;
   dout_98=dout_90|dout_97;
   dout_99=dout_95&dout_93;
   dout_100=dout_95&dout_92;
   dout_101=dout_96|dout_99;
   dout_102=dout_100&dout_98;
   dout_103=dout_101|dout_102;
   dout_104=dout_92&dout_98;
   dout_105=dout_93|dout_104;
   dout_106=dout_69&dout_87;
   dout_107=dout_70|dout_106;
   dout_108=dout_75&dout_98;
   dout_109=dout_76|dout_108;
   dout_110=dout_81&dout_105;
   dout_111=dout_82|dout_110;
   dout_112=dout_35&dout_32;
   dout_113=dout_34|dout_112;
   dout_114=dout_39&dout_87;
   dout_115=dout_38|dout_114;
   dout_116=dout_43&dout_107;
   dout_117=dout_42|dout_116;
   dout_118=dout_47&dout_98;
   dout_119=dout_46|dout_118;
   dout_120=dout_51&dout_109;
   dout_121=dout_50|dout_120;
   dout_122=dout_55&dout_105;
   dout_123=dout_54|dout_122;
   dout_124=dout_59&dout_111;
   dout_125=dout_58|dout_124;
   dout_126=dout_63&dout_103;
   dout_127=dout_62|dout_126;
   dout_129=dout_37^dout_113;
   dout_130=dout_39^dout_87;
   dout_131=dout_41^dout_115;
   dout_132=dout_43^dout_107;
   dout_133=dout_45^dout_117;
   dout_134=dout_47^dout_98;
   dout_135=dout_49^dout_119;
   dout_136=dout_51^dout_109;
   dout_137=dout_53^dout_121;
   dout_138=dout_55^dout_105;
   dout_139=dout_57^dout_123;
   dout_140=dout_59^dout_111;
   dout_141=dout_61^dout_125;
   dout_142=dout_63^dout_103;
   dout_143=dout_64^dout_127;

   O = 0;
   O |= (dout_33&1) << 0;
   O |= (dout_35&1) << 1;
   O |= (dout_129&1) << 2;
   O |= (dout_130&1) << 3;
   O |= (dout_131&1) << 4;
   O |= (dout_132&1) << 5;
   O |= (dout_133&1) << 6;
   O |= (dout_134&1) << 7;
   O |= (dout_135&1) << 8;
   O |= (dout_136&1) << 9;
   O |= (dout_137&1) << 10;
   O |= (dout_138&1) << 11;
   O |= (dout_139&1) << 12;
   O |= (dout_140&1) << 13;
   O |= (dout_141&1) << 14;
   O |= (dout_142&1) << 15;
   O |= (dout_143&1) << 16;
   return O;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.023 %
// MAE = 15 
// WCE% = 0.058 %
// WCE = 38 
// WCRE% = 3100.00 %
// EP% = 97.95 %
// MRE% = 0.48 %
// MSE = 312 
// PDK45_PWR = 0.048 mW
// PDK45_AREA = 97.1 um2
// PDK45_DELAY = 0.87 ns



uint64_t evoapproxlib::evoapprox_t::add16se_2JB(const uint64_t B,const uint64_t A)
{
   uint64_t dout_55, dout_57, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_65, dout_66, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_86, dout_87, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_98, dout_99, dout_100, dout_101, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110;
   uint64_t O;

   dout_55=((A >> 5)&1)&((B >> 5)&1);
   dout_57=(((A >> 5)&1)&((B >> 5)&1))^0xFFFFFFFFFFFFFFFFU;
   dout_59=((A >> 6)&1)^((B >> 6)&1);
   dout_60=((A >> 6)&1)&((B >> 6)&1);
   dout_61=dout_59&dout_55;
   dout_62=dout_59^dout_55;
   dout_63=dout_60|dout_61;
   dout_64=((A >> 7)&1)^((B >> 7)&1);
   dout_65=((A >> 7)&1)&((B >> 7)&1);
   dout_66=dout_64&dout_63;
   dout_67=dout_64^dout_63;
   dout_68=dout_65|dout_66;
   dout_69=((A >> 8)&1)^((B >> 8)&1);
   dout_70=((A >> 8)&1)&((B >> 8)&1);
   dout_71=dout_69&dout_68;
   dout_72=dout_69^dout_68;
   dout_73=dout_70|dout_71;
   dout_74=((A >> 9)&1)^((B >> 9)&1);
   dout_75=((A >> 9)&1)&((B >> 9)&1);
   dout_76=dout_74&dout_73;
   dout_77=dout_74^dout_73;
   dout_78=dout_75|dout_76;
   dout_79=((A >> 10)&1)^((B >> 10)&1);
   dout_80=((A >> 10)&1)&((B >> 10)&1);
   dout_81=dout_79&dout_78;
   dout_82=dout_79^dout_78;
   dout_83=dout_80|dout_81;
   dout_84=((A >> 11)&1)^((B >> 11)&1);
   dout_85=((A >> 11)&1)&((B >> 11)&1);
   dout_86=dout_84&dout_83;
   dout_87=dout_84^dout_83;
   dout_88=dout_85|dout_86;
   dout_89=((A >> 12)&1)^((B >> 12)&1);
   dout_90=((A >> 12)&1)&((B >> 12)&1);
   dout_91=dout_89&dout_88;
   dout_92=dout_89^dout_88;
   dout_93=dout_90|dout_91;
   dout_94=((A >> 13)&1)^((B >> 13)&1);
   dout_95=((A >> 13)&1)&((B >> 13)&1);
   dout_96=dout_94&dout_93;
   dout_97=dout_94^dout_93;
   dout_98=dout_95|dout_96;
   dout_99=((A >> 14)&1)^((B >> 14)&1);
   dout_100=((A >> 14)&1)&((B >> 14)&1);
   dout_101=dout_99&dout_98;
   dout_102=dout_99^dout_98;
   dout_103=dout_100|dout_101;
   dout_104=((A >> 15)&1)^((B >> 15)&1);
   dout_105=((A >> 15)&1)&((B >> 15)&1);
   dout_106=dout_104&dout_103;
   dout_107=dout_104^dout_103;
   dout_108=dout_105|dout_106;
   dout_109=((A >> 15)&1)^((B >> 15)&1);
   dout_110=dout_109^dout_108;

   O = 0;
   O |= (dout_77&1) << 0;
   O |= (dout_67&1) << 1;
   O |= (((A >> 5)&1)&1) << 2;
   O |= (((B >> 3)&1)&1) << 3;
   O |= (((A >> 4)&1)&1) << 4;
   O |= (dout_57&1) << 5;
   O |= (dout_62&1) << 6;
   O |= (dout_67&1) << 7;
   O |= (dout_72&1) << 8;
   O |= (dout_77&1) << 9;
   O |= (dout_82&1) << 10;
   O |= (dout_87&1) << 11;
   O |= (dout_92&1) << 12;
   O |= (dout_97&1) << 13;
   O |= (dout_102&1) << 14;
   O |= (dout_107&1) << 15;
   O |= (dout_110&1) << 16;
   return O;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.00076 %
// MAE = 0.5 
// WCE% = 0.0015 %
// WCE = 1.0 
// WCRE% = 100.00 %
// EP% = 50.00 %
// MRE% = 0.017 %
// MSE = 0.5 
// PDK45_PWR = 0.071 mW
// PDK45_AREA = 138.0 um2
// PDK45_DELAY = 1.25 ns



uint64_t evoapproxlib::evoapprox_t::add16se_26Q(const uint64_t B,const uint64_t A)
{
   uint64_t dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_65, dout_66, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_86, dout_87, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_98, dout_99, dout_100, dout_101, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110;
   uint64_t O;

   dout_34=((A >> 1)&1)^((B >> 1)&1);
   dout_35=((A >> 1)&1)&((B >> 1)&1);
   dout_36=dout_34&((A >> 0)&1);
   dout_37=dout_34^((A >> 0)&1);
   dout_38=dout_35|dout_36;
   dout_39=((A >> 2)&1)^((B >> 2)&1);
   dout_40=((A >> 2)&1)&((B >> 2)&1);
   dout_41=dout_39&dout_38;
   dout_42=dout_39^dout_38;
   dout_43=dout_40|dout_41;
   dout_44=((A >> 3)&1)^((B >> 3)&1);
   dout_45=((A >> 3)&1)&((B >> 3)&1);
   dout_46=dout_44&dout_43;
   dout_47=dout_44^dout_43;
   dout_48=dout_45|dout_46;
   dout_49=((A >> 4)&1)^((B >> 4)&1);
   dout_50=((A >> 4)&1)&((B >> 4)&1);
   dout_51=dout_49&dout_48;
   dout_52=dout_49^dout_48;
   dout_53=dout_50|dout_51;
   dout_54=((A >> 5)&1)^((B >> 5)&1);
   dout_55=((A >> 5)&1)&((B >> 5)&1);
   dout_56=dout_54&dout_53;
   dout_57=dout_54^dout_53;
   dout_58=dout_55|dout_56;
   dout_59=((A >> 6)&1)^((B >> 6)&1);
   dout_60=((A >> 6)&1)&((B >> 6)&1);
   dout_61=dout_59&dout_58;
   dout_62=dout_59^dout_58;
   dout_63=dout_60|dout_61;
   dout_64=((A >> 7)&1)^((B >> 7)&1);
   dout_65=((A >> 7)&1)&((B >> 7)&1);
   dout_66=dout_64&dout_63;
   dout_67=dout_64^dout_63;
   dout_68=dout_65|dout_66;
   dout_69=((A >> 8)&1)^((B >> 8)&1);
   dout_70=((A >> 8)&1)&((B >> 8)&1);
   dout_71=dout_69&dout_68;
   dout_72=dout_69^dout_68;
   dout_73=dout_70|dout_71;
   dout_74=((A >> 9)&1)^((B >> 9)&1);
   dout_75=((A >> 9)&1)&((B >> 9)&1);
   dout_76=dout_74&dout_73;
   dout_77=dout_74^dout_73;
   dout_78=dout_75|dout_76;
   dout_79=((A >> 10)&1)^((B >> 10)&1);
   dout_80=((A >> 10)&1)&((B >> 10)&1);
   dout_81=dout_79&dout_78;
   dout_82=dout_79^dout_78;
   dout_83=dout_80|dout_81;
   dout_84=((A >> 11)&1)^((B >> 11)&1);
   dout_85=((A >> 11)&1)&((B >> 11)&1);
   dout_86=dout_84&dout_83;
   dout_87=dout_84^dout_83;
   dout_88=dout_85|dout_86;
   dout_89=((A >> 12)&1)^((B >> 12)&1);
   dout_90=((A >> 12)&1)&((B >> 12)&1);
   dout_91=dout_89&dout_88;
   dout_92=dout_89^dout_88;
   dout_93=dout_90|dout_91;
   dout_94=((A >> 13)&1)^((B >> 13)&1);
   dout_95=((A >> 13)&1)&((B >> 13)&1);
   dout_96=dout_94&dout_93;
   dout_97=dout_94^dout_93;
   dout_98=dout_95|dout_96;
   dout_99=((A >> 14)&1)^((B >> 14)&1);
   dout_100=((A >> 14)&1)&((B >> 14)&1);
   dout_101=dout_99&dout_98;
   dout_102=dout_99^dout_98;
   dout_103=dout_100|dout_101;
   dout_104=((A >> 15)&1)^((B >> 15)&1);
   dout_105=((A >> 15)&1)&((B >> 15)&1);
   dout_106=dout_104&dout_103;
   dout_107=dout_104^dout_103;
   dout_108=dout_105|dout_106;
   dout_109=((A >> 15)&1)^((B >> 15)&1);
   dout_110=dout_109^dout_108;

   O = 0;
   O |= (0&1) << 0;
   O |= (dout_37&1) << 1;
   O |= (dout_42&1) << 2;
   O |= (dout_47&1) << 3;
   O |= (dout_52&1) << 4;
   O |= (dout_57&1) << 5;
   O |= (dout_62&1) << 6;
   O |= (dout_67&1) << 7;
   O |= (dout_72&1) << 8;
   O |= (dout_77&1) << 9;
   O |= (dout_82&1) << 10;
   O |= (dout_87&1) << 11;
   O |= (dout_92&1) << 12;
   O |= (dout_97&1) << 13;
   O |= (dout_102&1) << 14;
   O |= (dout_107&1) << 15;
   O |= (dout_110&1) << 16;
   return O;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 0.0099 %
// MAE = 6.5 
// WCE% = 0.035 %
// WCE = 23 
// WCRE% = 2100.00 %
// EP% = 95.31 %
// MRE% = 0.22 %
// MSE = 64 
// PDK45_PWR = 0.052 mW
// PDK45_AREA = 106.1 um2
// PDK45_DELAY = 0.92 ns



uint64_t evoapproxlib::evoapprox_t::add16se_2GE(const uint64_t B,const uint64_t A)
{
   uint64_t dout_52, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_65, dout_66, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_86, dout_87, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_98, dout_99, dout_100, dout_101, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110;
   uint64_t O;

   dout_52=((B >> 4)&1)^0xFFFFFFFFFFFFFFFFU;
   dout_54=((A >> 5)&1)^((B >> 5)&1);
   dout_55=((A >> 5)&1)&((B >> 5)&1);
   dout_56=dout_54&((B >> 4)&1);
   dout_57=dout_54^((B >> 4)&1);
   dout_58=dout_55|dout_56;
   dout_59=((A >> 6)&1)^((B >> 6)&1);
   dout_60=((A >> 6)&1)&((B >> 6)&1);
   dout_61=dout_59&dout_58;
   dout_62=dout_59^dout_58;
   dout_63=dout_60|dout_61;
   dout_64=((A >> 7)&1)^((B >> 7)&1);
   dout_65=((A >> 7)&1)&((B >> 7)&1);
   dout_66=dout_64&dout_63;
   dout_67=dout_64^dout_63;
   dout_68=dout_65|dout_66;
   dout_69=((A >> 8)&1)^((B >> 8)&1);
   dout_70=((A >> 8)&1)&((B >> 8)&1);
   dout_71=dout_69&dout_68;
   dout_72=dout_69^dout_68;
   dout_73=dout_70|dout_71;
   dout_74=((A >> 9)&1)^((B >> 9)&1);
   dout_75=((A >> 9)&1)&((B >> 9)&1);
   dout_76=dout_74&dout_73;
   dout_77=dout_74^dout_73;
   dout_78=dout_75|dout_76;
   dout_79=((A >> 10)&1)^((B >> 10)&1);
   dout_80=((A >> 10)&1)&((B >> 10)&1);
   dout_81=dout_79&dout_78;
   dout_82=dout_79^dout_78;
   dout_83=dout_80|dout_81;
   dout_84=((A >> 11)&1)^((B >> 11)&1);
   dout_85=((A >> 11)&1)&((B >> 11)&1);
   dout_86=dout_84&dout_83;
   dout_87=dout_84^dout_83;
   dout_88=dout_85|dout_86;
   dout_89=((A >> 12)&1)^((B >> 12)&1);
   dout_90=((A >> 12)&1)&((B >> 12)&1);
   dout_91=dout_89&dout_88;
   dout_92=dout_89^dout_88;
   dout_93=dout_90|dout_91;
   dout_94=((A >> 13)&1)^((B >> 13)&1);
   dout_95=((A >> 13)&1)&((B >> 13)&1);
   dout_96=dout_94&dout_93;
   dout_97=dout_94^dout_93;
   dout_98=dout_95|dout_96;
   dout_99=((A >> 14)&1)^((B >> 14)&1);
   dout_100=((A >> 14)&1)&((B >> 14)&1);
   dout_101=dout_99&dout_98;
   dout_102=dout_99^dout_98;
   dout_103=dout_100|dout_101;
   dout_104=((A >> 15)&1)^((B >> 15)&1);
   dout_105=((A >> 15)&1)&((B >> 15)&1);
   dout_106=dout_104&dout_103;
   dout_107=dout_104^dout_103;
   dout_108=dout_105|dout_106;
   dout_109=((A >> 15)&1)^((B >> 15)&1);
   dout_110=dout_109^dout_108;

   O = 0;
   O |= (dout_68&1) << 0;
   O |= (dout_90&1) << 1;
   O |= (dout_98&1) << 2;
   O |= (((A >> 4)&1)&1) << 3;
   O |= (dout_52&1) << 4;
   O |= (dout_57&1) << 5;
   O |= (dout_62&1) << 6;
   O |= (dout_67&1) << 7;
   O |= (dout_72&1) << 8;
   O |= (dout_77&1) << 9;
   O |= (dout_82&1) << 10;
   O |= (dout_87&1) << 11;
   O |= (dout_92&1) << 12;
   O |= (dout_97&1) << 13;
   O |= (dout_102&1) << 14;
   O |= (dout_107&1) << 15;
   O |= (dout_110&1) << 16;
   return O;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mse parameters
***/
// MAE% = 0.0024 %
// MAE = 1.6 
// WCE% = 0.0076 %
// WCE = 5.0 
// WCRE% = 400.00 %
// EP% = 81.25 %
// MRE% = 0.053 %
// MSE = 4.0 
// PDK45_PWR = 0.062 mW
// PDK45_AREA = 121.5 um2
// PDK45_DELAY = 1.08 ns



uint64_t evoapproxlib::evoapprox_t::add16se_259(const uint64_t B,const uint64_t A)
{
   uint64_t dout_42, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_65, dout_66, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_86, dout_87, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_98, dout_99, dout_100, dout_101, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110;
   uint64_t O;

   dout_42=((B >> 2)&1)^0xFFFFFFFFFFFFFFFFU;
   dout_44=((A >> 3)&1)^((B >> 3)&1);
   dout_45=((A >> 3)&1)&((B >> 3)&1);
   dout_46=dout_44&((B >> 2)&1);
   dout_47=dout_44^((B >> 2)&1);
   dout_48=dout_45|dout_46;
   dout_49=((A >> 4)&1)^((B >> 4)&1);
   dout_50=((A >> 4)&1)&((B >> 4)&1);
   dout_51=dout_49&dout_48;
   dout_52=dout_49^dout_48;
   dout_53=dout_50|dout_51;
   dout_54=((A >> 5)&1)^((B >> 5)&1);
   dout_55=((A >> 5)&1)&((B >> 5)&1);
   dout_56=dout_54&dout_53;
   dout_57=dout_54^dout_53;
   dout_58=dout_55|dout_56;
   dout_59=((A >> 6)&1)^((B >> 6)&1);
   dout_60=((A >> 6)&1)&((B >> 6)&1);
   dout_61=dout_59&dout_58;
   dout_62=dout_59^dout_58;
   dout_63=dout_60|dout_61;
   dout_64=((A >> 7)&1)^((B >> 7)&1);
   dout_65=((A >> 7)&1)&((B >> 7)&1);
   dout_66=dout_64&dout_63;
   dout_67=dout_64^dout_63;
   dout_68=dout_65|dout_66;
   dout_69=((A >> 8)&1)^((B >> 8)&1);
   dout_70=((A >> 8)&1)&((B >> 8)&1);
   dout_71=dout_69&dout_68;
   dout_72=dout_69^dout_68;
   dout_73=dout_70|dout_71;
   dout_74=((A >> 9)&1)^((B >> 9)&1);
   dout_75=((A >> 9)&1)&((B >> 9)&1);
   dout_76=dout_74&dout_73;
   dout_77=dout_74^dout_73;
   dout_78=dout_75|dout_76;
   dout_79=((A >> 10)&1)^((B >> 10)&1);
   dout_80=((A >> 10)&1)&((B >> 10)&1);
   dout_81=dout_79&dout_78;
   dout_82=dout_79^dout_78;
   dout_83=dout_80|dout_81;
   dout_84=((A >> 11)&1)^((B >> 11)&1);
   dout_85=((A >> 11)&1)&((B >> 11)&1);
   dout_86=dout_84&dout_83;
   dout_87=dout_84^dout_83;
   dout_88=dout_85|dout_86;
   dout_89=((A >> 12)&1)^((B >> 12)&1);
   dout_90=((A >> 12)&1)&((B >> 12)&1);
   dout_91=dout_89&dout_88;
   dout_92=dout_89^dout_88;
   dout_93=dout_90|dout_91;
   dout_94=((A >> 13)&1)^((B >> 13)&1);
   dout_95=((A >> 13)&1)&((B >> 13)&1);
   dout_96=dout_94&dout_93;
   dout_97=dout_94^dout_93;
   dout_98=dout_95|dout_96;
   dout_99=((A >> 14)&1)^((B >> 14)&1);
   dout_100=((A >> 14)&1)&((B >> 14)&1);
   dout_101=dout_99&dout_98;
   dout_102=dout_99^dout_98;
   dout_103=dout_100|dout_101;
   dout_104=((A >> 15)&1)^((B >> 15)&1);
   dout_105=((A >> 15)&1)&((B >> 15)&1);
   dout_106=dout_104&dout_103;
   dout_107=dout_104^dout_103;
   dout_108=dout_105|dout_106;
   dout_109=((A >> 15)&1)^((B >> 15)&1);
   dout_110=dout_109^dout_108;

   O = 0;
   O |= (dout_78&1) << 0;
   O |= (((A >> 2)&1)&1) << 1;
   O |= (dout_42&1) << 2;
   O |= (dout_47&1) << 3;
   O |= (dout_52&1) << 4;
   O |= (dout_57&1) << 5;
   O |= (dout_62&1) << 6;
   O |= (dout_67&1) << 7;
   O |= (dout_72&1) << 8;
   O |= (dout_77&1) << 9;
   O |= (dout_82&1) << 10;
   O |= (dout_87&1) << 11;
   O |= (dout_92&1) << 12;
   O |= (dout_97&1) << 13;
   O |= (dout_102&1) << 14;
   O |= (dout_107&1) << 15;
   O |= (dout_110&1) << 16;
   return O;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.046 %
// MAE = 30 
// WCE% = 0.13 %
// WCE = 86 
// WCRE% = 6300.00 %
// EP% = 99.02 %
// MRE% = 0.96 %
// MSE = 1281 
// PDK45_PWR = 0.043 mW
// PDK45_AREA = 85.9 um2
// PDK45_DELAY = 0.76 ns



uint64_t evoapproxlib::evoapprox_t::add16se_2AS(const uint64_t B,const uint64_t A)
{
   uint64_t dout_44, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_99, dout_100, dout_101, dout_102, dout_103, dout_104, dout_105, dout_108, dout_109, dout_110, dout_111, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143;
   uint64_t O;

   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_46=((A >> 7)&1)&((B >> 7)&1);
   dout_47=((A >> 7)&1)^((B >> 7)&1);
   dout_48=((A >> 8)&1)&((B >> 8)&1);
   dout_49=((A >> 8)&1)^((B >> 8)&1);
   dout_50=((A >> 9)&1)&((B >> 9)&1);
   dout_51=((A >> 9)&1)^((B >> 9)&1);
   dout_52=((A >> 10)&1)&((B >> 10)&1);
   dout_53=((A >> 10)&1)^((B >> 10)&1);
   dout_54=((A >> 11)&1)&((B >> 11)&1);
   dout_55=((A >> 11)&1)^((B >> 11)&1);
   dout_56=((A >> 12)&1)&((B >> 12)&1);
   dout_57=((A >> 12)&1)^((B >> 12)&1);
   dout_58=((A >> 13)&1)&((B >> 13)&1);
   dout_59=((A >> 13)&1)^((B >> 13)&1);
   dout_60=((A >> 14)&1)&((B >> 14)&1);
   dout_61=((A >> 14)&1)^((B >> 14)&1);
   dout_62=((A >> 15)&1)&((B >> 15)&1);
   dout_63=((A >> 15)&1)^((B >> 15)&1);
   dout_64=((A >> 15)&1)^((B >> 15)&1);
   dout_74=dout_49&dout_46;
   dout_75=dout_49&dout_47;
   dout_76=dout_48|dout_74;
   dout_77=dout_53&dout_50;
   dout_78=dout_53&dout_51;
   dout_79=dout_52|dout_77;
   dout_80=dout_57&dout_54;
   dout_81=dout_57&dout_55;
   dout_82=dout_56|dout_80;
   dout_83=dout_61&dout_58;
   dout_84=dout_61&dout_59;
   dout_85=dout_60|dout_83;
   dout_90=dout_44|((A >> 6)&1);
   dout_91=dout_78&dout_76;
   dout_92=dout_78&dout_75;
   dout_93=dout_79|dout_91;
   dout_94=dout_84&dout_82;
   dout_95=dout_84&dout_81;
   dout_96=dout_85|dout_94;
   dout_99=dout_95&dout_93;
   dout_100=dout_95&dout_92;
   dout_101=dout_96|dout_99;
   dout_102=dout_100&((A >> 6)&1);
   dout_103=dout_101|dout_102;
   dout_104=dout_92&dout_90;
   dout_105=dout_93|dout_104;
   dout_108=dout_75&dout_90;
   dout_109=dout_76|dout_108;
   dout_110=dout_81&dout_105;
   dout_111=dout_82|dout_110;
   dout_117=((A >> 12)&1)|((A >> 6)&1);
   dout_118=dout_47&dout_90;
   dout_119=dout_46|dout_118;
   dout_120=dout_51&dout_109;
   dout_121=dout_50|dout_120;
   dout_122=dout_55&dout_105;
   dout_123=dout_54|dout_122;
   dout_124=dout_59&dout_111;
   dout_125=dout_58|dout_124;
   dout_126=dout_63&dout_103;
   dout_127=dout_62|dout_126;
   dout_133=(((A >> 6)&1)&dout_117)^0xFFFFFFFFFFFFFFFFU;
   dout_134=dout_47^dout_90;
   dout_135=dout_49^dout_119;
   dout_136=dout_51^dout_109;
   dout_137=dout_53^dout_121;
   dout_138=dout_55^dout_105;
   dout_139=dout_57^dout_123;
   dout_140=dout_59^dout_111;
   dout_141=dout_61^dout_125;
   dout_142=dout_63^dout_103;
   dout_143=dout_64^dout_127;

   O = 0;
   O |= (dout_135&1) << 0;
   O |= (0&1) << 1;
   O |= (0&1) << 2;
   O |= (((B >> 6)&1)&1) << 3;
   O |= (((B >> 5)&1)&1) << 4;
   O |= (((B >> 4)&1)&1) << 5;
   O |= (dout_133&1) << 6;
   O |= (dout_134&1) << 7;
   O |= (dout_135&1) << 8;
   O |= (dout_136&1) << 9;
   O |= (dout_137&1) << 10;
   O |= (dout_138&1) << 11;
   O |= (dout_139&1) << 12;
   O |= (dout_140&1) << 13;
   O |= (dout_141&1) << 14;
   O |= (dout_142&1) << 15;
   O |= (dout_143&1) << 16;
   return O;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.012 %
// MAE = 8.0 
// WCE% = 0.027 %
// WCE = 18 
// WCRE% = 1700.00 %
// EP% = 96.88 %
// MRE% = 0.26 %
// MSE = 87 
// PDK45_PWR = 0.052 mW
// PDK45_AREA = 104.7 um2
// PDK45_DELAY = 0.92 ns



uint64_t evoapproxlib::evoapprox_t::add16se_29A(const uint64_t B,const uint64_t A)
{
   uint64_t dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_88, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_99, dout_100, dout_101, dout_102, dout_103, dout_104, dout_105, dout_108, dout_109, dout_110, dout_111, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143;
   uint64_t O;

   dout_42=((A >> 5)&1)&((B >> 5)&1);
   dout_43=((A >> 5)&1)^((B >> 5)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=((A >> 6)&1)^((B >> 6)&1);
   dout_46=((A >> 7)&1)&((B >> 7)&1);
   dout_47=((A >> 7)&1)^((B >> 7)&1);
   dout_48=((A >> 8)&1)&((B >> 8)&1);
   dout_49=((A >> 8)&1)^((B >> 8)&1);
   dout_50=((A >> 9)&1)&((B >> 9)&1);
   dout_51=((A >> 9)&1)^((B >> 9)&1);
   dout_52=((A >> 10)&1)&((B >> 10)&1);
   dout_53=((A >> 10)&1)^((B >> 10)&1);
   dout_54=((A >> 11)&1)&((B >> 11)&1);
   dout_55=((A >> 11)&1)^((B >> 11)&1);
   dout_56=((A >> 12)&1)&((B >> 12)&1);
   dout_57=((A >> 12)&1)^((B >> 12)&1);
   dout_58=((A >> 13)&1)&((B >> 13)&1);
   dout_59=((A >> 13)&1)^((B >> 13)&1);
   dout_60=((A >> 14)&1)&((B >> 14)&1);
   dout_61=((A >> 14)&1)^((B >> 14)&1);
   dout_62=((A >> 15)&1)&((B >> 15)&1);
   dout_63=((A >> 15)&1)^((B >> 15)&1);
   dout_64=((A >> 15)&1)^((B >> 15)&1);
   dout_71=dout_45&dout_42;
   dout_72=dout_45&dout_43;
   dout_73=dout_44|dout_71;
   dout_74=dout_49&dout_46;
   dout_75=dout_49&dout_47;
   dout_76=dout_48|dout_74;
   dout_77=dout_53&dout_50;
   dout_78=dout_53&dout_51;
   dout_79=dout_52|dout_77;
   dout_80=dout_57&dout_54;
   dout_81=dout_57&dout_55;
   dout_82=dout_56|dout_80;
   dout_83=dout_61&dout_58;
   dout_84=dout_61&dout_59;
   dout_85=dout_60|dout_83;
   dout_88=dout_72&((A >> 4)&1);
   dout_90=dout_73|dout_88;
   dout_91=dout_78&dout_76;
   dout_92=dout_78&dout_75;
   dout_93=dout_79|dout_91;
   dout_94=dout_84&dout_82;
   dout_95=dout_84&dout_81;
   dout_96=dout_85|dout_94;
   dout_99=dout_95&dout_93;
   dout_100=dout_95&dout_92;
   dout_101=dout_96|dout_99;
   dout_102=dout_100&dout_90;
   dout_103=dout_101|dout_102;
   dout_104=dout_92&dout_90;
   dout_105=dout_93|dout_104;
   dout_108=dout_75&dout_90;
   dout_109=dout_76|dout_108;
   dout_110=dout_81&dout_105;
   dout_111=dout_82|dout_110;
   dout_116=dout_43&((A >> 4)&1);
   dout_117=dout_42|dout_116;
   dout_118=dout_47&dout_90;
   dout_119=dout_46|dout_118;
   dout_120=dout_51&dout_109;
   dout_121=dout_50|dout_120;
   dout_122=dout_55&dout_105;
   dout_123=dout_54|dout_122;
   dout_124=dout_59&dout_111;
   dout_125=dout_58|dout_124;
   dout_126=dout_63&dout_103;
   dout_127=dout_62|dout_126;
   dout_132=dout_43^((A >> 4)&1);
   dout_133=dout_45^dout_117;
   dout_134=dout_47^dout_90;
   dout_135=dout_49^dout_119;
   dout_136=dout_51^dout_109;
   dout_137=dout_53^dout_121;
   dout_138=dout_55^dout_105;
   dout_139=dout_57^dout_123;
   dout_140=dout_59^dout_111;
   dout_141=dout_61^dout_125;
   dout_142=dout_63^dout_103;
   dout_143=dout_64^dout_127;

   O = 0;
   O |= (dout_50&1) << 0;
   O |= (((A >> 0)&1)&1) << 1;
   O |= (((A >> 2)&1)&1) << 2;
   O |= (((A >> 3)&1)&1) << 3;
   O |= (((B >> 4)&1)&1) << 4;
   O |= (dout_132&1) << 5;
   O |= (dout_133&1) << 6;
   O |= (dout_134&1) << 7;
   O |= (dout_135&1) << 8;
   O |= (dout_136&1) << 9;
   O |= (dout_137&1) << 10;
   O |= (dout_138&1) << 11;
   O |= (dout_139&1) << 12;
   O |= (dout_140&1) << 13;
   O |= (dout_141&1) << 14;
   O |= (dout_142&1) << 15;
   O |= (dout_143&1) << 16;
   return O;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.0015 %
// MAE = 1.0 
// WCE% = 0.0031 %
// WCE = 2.0 
// WCRE% = 100.00 %
// EP% = 75.00 %
// MRE% = 0.033 %
// MSE = 1.5 
// PDK45_PWR = 0.066 mW
// PDK45_AREA = 129.1 um2
// PDK45_DELAY = 1.17 ns



uint64_t evoapproxlib::evoapprox_t::add16se_20J(const uint64_t B,const uint64_t A)
{
   uint64_t dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_65, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_98, dout_99, dout_100, dout_101, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110, dout_111, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_129, dout_130, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143;
   uint64_t O;

   dout_36=((A >> 2)&1)&((B >> 2)&1);
   dout_37=((A >> 2)&1)^((B >> 2)&1);
   dout_38=((A >> 3)&1)&((B >> 3)&1);
   dout_39=((A >> 3)&1)^((B >> 3)&1);
   dout_40=((A >> 4)&1)&((B >> 4)&1);
   dout_41=((A >> 4)&1)^((B >> 4)&1);
   dout_42=((A >> 5)&1)&((B >> 5)&1);
   dout_43=((A >> 5)&1)^((B >> 5)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=((A >> 6)&1)^((B >> 6)&1);
   dout_46=((A >> 7)&1)&((B >> 7)&1);
   dout_47=((A >> 7)&1)^((B >> 7)&1);
   dout_48=((A >> 8)&1)&((B >> 8)&1);
   dout_49=((A >> 8)&1)^((B >> 8)&1);
   dout_50=((A >> 9)&1)&((B >> 9)&1);
   dout_51=((A >> 9)&1)^((B >> 9)&1);
   dout_52=((A >> 10)&1)&((B >> 10)&1);
   dout_53=((A >> 10)&1)^((B >> 10)&1);
   dout_54=((A >> 11)&1)&((B >> 11)&1);
   dout_55=((A >> 11)&1)^((B >> 11)&1);
   dout_56=((A >> 12)&1)&((B >> 12)&1);
   dout_57=((A >> 12)&1)^((B >> 12)&1);
   dout_58=((A >> 13)&1)&((B >> 13)&1);
   dout_59=((A >> 13)&1)^((B >> 13)&1);
   dout_60=((A >> 14)&1)&((B >> 14)&1);
   dout_61=((A >> 14)&1)^((B >> 14)&1);
   dout_62=((A >> 15)&1)&((B >> 15)&1);
   dout_63=((A >> 15)&1)^((B >> 15)&1);
   dout_64=((A >> 15)&1)^((B >> 15)&1);
   dout_65=dout_37&((A >> 1)&1);
   dout_67=dout_36|dout_65;
   dout_68=dout_41&dout_38;
   dout_69=dout_41&dout_39;
   dout_70=dout_40|dout_68;
   dout_71=dout_45&dout_42;
   dout_72=dout_45&dout_43;
   dout_73=dout_44|dout_71;
   dout_74=dout_49&dout_46;
   dout_75=dout_49&dout_47;
   dout_76=dout_48|dout_74;
   dout_77=dout_53&dout_50;
   dout_78=dout_53&dout_51;
   dout_79=dout_52|dout_77;
   dout_80=dout_57&dout_54;
   dout_81=dout_57&dout_55;
   dout_82=dout_56|dout_80;
   dout_83=dout_61&dout_58;
   dout_84=dout_61&dout_59;
   dout_85=dout_60|dout_83;
   dout_88=dout_72&dout_70;
   dout_89=dout_72&dout_69;
   dout_90=dout_73|dout_88;
   dout_91=dout_78&dout_76;
   dout_92=dout_78&dout_75;
   dout_93=dout_79|dout_91;
   dout_94=dout_84&dout_82;
   dout_95=dout_84&dout_81;
   dout_96=dout_85|dout_94;
   dout_97=dout_89&dout_67;
   dout_98=dout_90|dout_97;
   dout_99=dout_95&dout_93;
   dout_100=dout_95&dout_92;
   dout_101=dout_96|dout_99;
   dout_102=dout_100&dout_98;
   dout_103=dout_101|dout_102;
   dout_104=dout_92&dout_98;
   dout_105=dout_93|dout_104;
   dout_106=dout_69&dout_67;
   dout_107=dout_70|dout_106;
   dout_108=dout_75&dout_98;
   dout_109=dout_76|dout_108;
   dout_110=dout_81&dout_105;
   dout_111=dout_82|dout_110;
   dout_114=dout_39&dout_67;
   dout_115=dout_38|dout_114;
   dout_116=dout_43&dout_107;
   dout_117=dout_42|dout_116;
   dout_118=dout_47&dout_98;
   dout_119=dout_46|dout_118;
   dout_120=dout_51&dout_109;
   dout_121=dout_50|dout_120;
   dout_122=dout_55&dout_105;
   dout_123=dout_54|dout_122;
   dout_124=dout_59&dout_111;
   dout_125=dout_58|dout_124;
   dout_126=dout_63&dout_103;
   dout_127=dout_62|dout_126;
   dout_129=dout_37^((A >> 1)&1);
   dout_130=dout_39^dout_67;
   dout_131=dout_41^dout_115;
   dout_132=dout_43^dout_107;
   dout_133=dout_45^dout_117;
   dout_134=dout_47^dout_98;
   dout_135=dout_49^dout_119;
   dout_136=dout_51^dout_109;
   dout_137=dout_53^dout_121;
   dout_138=dout_55^dout_105;
   dout_139=dout_57^dout_123;
   dout_140=dout_59^dout_111;
   dout_141=dout_61^dout_125;
   dout_142=dout_63^dout_103;
   dout_143=dout_64^dout_127;

   O = 0;
   O |= (0&1) << 0;
   O |= (((B >> 1)&1)&1) << 1;
   O |= (dout_129&1) << 2;
   O |= (dout_130&1) << 3;
   O |= (dout_131&1) << 4;
   O |= (dout_132&1) << 5;
   O |= (dout_133&1) << 6;
   O |= (dout_134&1) << 7;
   O |= (dout_135&1) << 8;
   O |= (dout_136&1) << 9;
   O |= (dout_137&1) << 10;
   O |= (dout_138&1) << 11;
   O |= (dout_139&1) << 12;
   O |= (dout_140&1) << 13;
   O |= (dout_141&1) << 14;
   O |= (dout_142&1) << 15;
   O |= (dout_143&1) << 16;
   return O;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.00076 %
// MAE = 0.5 
// WCE% = 0.012 %
// WCE = 8.0 
// WCRE% = 100.00 %
// EP% = 6.25 %
// MRE% = 0.013 %
// MSE = 4.0 
// PDK45_PWR = 0.075 mW
// PDK45_AREA = 159.6 um2
// PDK45_DELAY = 1.25 ns



uint64_t evoapproxlib::evoapprox_t::add16se_2LJ(const uint64_t B,const uint64_t A)
{
   uint64_t dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_65, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_98, dout_99, dout_100, dout_101, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110, dout_111, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143;
   uint64_t O;

   dout_32=((A >> 0)&1)&((B >> 0)&1);
   dout_33=((A >> 0)&1)^((B >> 0)&1);
   dout_34=((A >> 1)&1)&((B >> 1)&1);
   dout_35=((A >> 1)&1)^((B >> 1)&1);
   dout_36=((A >> 2)&1)&((B >> 2)&1);
   dout_37=((A >> 2)&1)^((B >> 2)&1);
   dout_38=((A >> 3)&1)&((B >> 3)&1);
   dout_39=((A >> 3)&1)^((B >> 3)&1);
   dout_40=((A >> 4)&1)&((B >> 4)&1);
   dout_41=((A >> 4)&1)^((B >> 4)&1);
   dout_42=((A >> 5)&1)&((B >> 5)&1);
   dout_43=((A >> 5)&1)^((B >> 5)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=((A >> 6)&1)^((B >> 6)&1);
   dout_46=((A >> 7)&1)&((B >> 7)&1);
   dout_47=((A >> 7)&1)^((B >> 7)&1);
   dout_48=((A >> 8)&1)&((B >> 8)&1);
   dout_49=((A >> 8)&1)^((B >> 8)&1);
   dout_50=((A >> 9)&1)&((B >> 9)&1);
   dout_51=((A >> 9)&1)^((B >> 9)&1);
   dout_52=((A >> 10)&1)&((B >> 10)&1);
   dout_53=((A >> 10)&1)^((B >> 10)&1);
   dout_54=((A >> 11)&1)&((B >> 11)&1);
   dout_55=((A >> 11)&1)^((B >> 11)&1);
   dout_56=((A >> 12)&1)&((B >> 12)&1);
   dout_57=((A >> 12)&1)^((B >> 12)&1);
   dout_58=((A >> 13)&1)&((B >> 13)&1);
   dout_59=((A >> 13)&1)^((B >> 13)&1);
   dout_60=((A >> 14)&1)&((B >> 14)&1);
   dout_61=((A >> 14)&1)^((B >> 14)&1);
   dout_62=((A >> 15)&1)&((B >> 15)&1);
   dout_63=((A >> 15)&1)^((B >> 15)&1);
   dout_64=((A >> 15)&1)^((B >> 15)&1);
   dout_65=dout_37&dout_34;
   dout_67=dout_36|dout_65;
   dout_68=dout_41&dout_38;
   dout_69=dout_41&dout_39;
   dout_70=dout_40|dout_68;
   dout_71=dout_45&dout_42;
   dout_72=dout_45&dout_43;
   dout_73=dout_44|dout_71;
   dout_74=dout_49&dout_46;
   dout_75=dout_49&dout_47;
   dout_76=dout_48|dout_74;
   dout_77=dout_53&dout_50;
   dout_78=dout_53&dout_51;
   dout_79=dout_52|dout_77;
   dout_80=dout_57&dout_54;
   dout_81=dout_57&dout_55;
   dout_82=dout_56|dout_80;
   dout_83=dout_61&dout_58;
   dout_84=dout_61&dout_59;
   dout_85=dout_60|dout_83;
   dout_88=dout_72&dout_70;
   dout_89=dout_72&dout_69;
   dout_90=dout_73|dout_88;
   dout_91=dout_78&dout_76;
   dout_92=dout_78&dout_75;
   dout_93=dout_79|dout_91;
   dout_94=dout_84&dout_82;
   dout_95=dout_84&dout_81;
   dout_96=dout_85|dout_94;
   dout_97=dout_89&dout_67;
   dout_98=dout_90|dout_97;
   dout_99=dout_95&dout_93;
   dout_100=dout_95&dout_92;
   dout_101=dout_96|dout_99;
   dout_102=dout_100&dout_98;
   dout_103=dout_101|dout_102;
   dout_104=dout_92&dout_98;
   dout_105=dout_93|dout_104;
   dout_106=dout_69&dout_67;
   dout_107=dout_70|dout_106;
   dout_108=dout_75&dout_98;
   dout_109=dout_76|dout_108;
   dout_110=dout_81&dout_105;
   dout_111=dout_82|dout_110;
   dout_112=dout_35&dout_32;
   dout_113=dout_34|dout_112;
   dout_114=dout_39&dout_67;
   dout_115=dout_38|dout_114;
   dout_116=dout_43&dout_107;
   dout_117=dout_42|dout_116;
   dout_118=dout_47&dout_98;
   dout_119=dout_46|dout_118;
   dout_120=dout_51&dout_109;
   dout_121=dout_50|dout_120;
   dout_122=dout_55&dout_105;
   dout_123=dout_54|dout_122;
   dout_124=dout_59&dout_111;
   dout_125=dout_58|dout_124;
   dout_126=dout_63&dout_103;
   dout_127=dout_62|dout_126;
   dout_128=dout_35^dout_32;
   dout_129=dout_37^dout_113;
   dout_130=dout_39^dout_67;
   dout_131=dout_41^dout_115;
   dout_132=dout_43^dout_107;
   dout_133=dout_45^dout_117;
   dout_134=dout_47^dout_98;
   dout_135=dout_49^dout_119;
   dout_136=dout_51^dout_109;
   dout_137=dout_53^dout_121;
   dout_138=dout_55^dout_105;
   dout_139=dout_57^dout_123;
   dout_140=dout_59^dout_111;
   dout_141=dout_61^dout_125;
   dout_142=dout_63^dout_103;
   dout_143=dout_64^dout_127;

   O = 0;
   O |= (dout_33&1) << 0;
   O |= (dout_128&1) << 1;
   O |= (dout_129&1) << 2;
   O |= (dout_130&1) << 3;
   O |= (dout_131&1) << 4;
   O |= (dout_132&1) << 5;
   O |= (dout_133&1) << 6;
   O |= (dout_134&1) << 7;
   O |= (dout_135&1) << 8;
   O |= (dout_136&1) << 9;
   O |= (dout_137&1) << 10;
   O |= (dout_138&1) << 11;
   O |= (dout_139&1) << 12;
   O |= (dout_140&1) << 13;
   O |= (dout_141&1) << 14;
   O |= (dout_142&1) << 15;
   O |= (dout_143&1) << 16;
   return O;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 0.00031 %
// MAE = 0.2 
// WCE% = 0.0015 %
// WCE = 1.0 
// WCRE% = 50.00 %
// EP% = 25.00 %
// MRE% = 0.0076 %
// MSE = 0.2 
// PDK45_PWR = 0.072 mW
// PDK45_AREA = 141.7 um2
// PDK45_DELAY = 1.28 ns



uint64_t evoapproxlib::evoapprox_t::add16se_2DN(const uint64_t B,const uint64_t A)
{
   uint64_t dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_65, dout_66, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_86, dout_87, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_98, dout_99, dout_100, dout_101, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110, dout_111, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143;
   uint64_t O;

   dout_32=((A >> 0)&1)&((B >> 0)&1);
   dout_33=(((A >> 0)&1)&((B >> 0)&1))^0xFFFFFFFFFFFFFFFFU;
   dout_34=((A >> 1)&1)&((B >> 1)&1);
   dout_35=((A >> 1)&1)^((B >> 1)&1);
   dout_36=((A >> 2)&1)&((B >> 2)&1);
   dout_37=((A >> 2)&1)^((B >> 2)&1);
   dout_38=((A >> 3)&1)&((B >> 3)&1);
   dout_39=((A >> 3)&1)^((B >> 3)&1);
   dout_40=((A >> 4)&1)&((B >> 4)&1);
   dout_41=((A >> 4)&1)^((B >> 4)&1);
   dout_42=((A >> 5)&1)&((B >> 5)&1);
   dout_43=((A >> 5)&1)^((B >> 5)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=((A >> 6)&1)^((B >> 6)&1);
   dout_46=((A >> 7)&1)&((B >> 7)&1);
   dout_47=((A >> 7)&1)^((B >> 7)&1);
   dout_48=((A >> 8)&1)&((B >> 8)&1);
   dout_49=((A >> 8)&1)^((B >> 8)&1);
   dout_50=((A >> 9)&1)&((B >> 9)&1);
   dout_51=((A >> 9)&1)^((B >> 9)&1);
   dout_52=((A >> 10)&1)&((B >> 10)&1);
   dout_53=((A >> 10)&1)^((B >> 10)&1);
   dout_54=((A >> 11)&1)&((B >> 11)&1);
   dout_55=((A >> 11)&1)^((B >> 11)&1);
   dout_56=((A >> 12)&1)&((B >> 12)&1);
   dout_57=((A >> 12)&1)^((B >> 12)&1);
   dout_58=((A >> 13)&1)&((B >> 13)&1);
   dout_59=((A >> 13)&1)^((B >> 13)&1);
   dout_60=((A >> 14)&1)&((B >> 14)&1);
   dout_61=((A >> 14)&1)^((B >> 14)&1);
   dout_62=((A >> 15)&1)&((B >> 15)&1);
   dout_63=((A >> 15)&1)^((B >> 15)&1);
   dout_64=((A >> 15)&1)^((B >> 15)&1);
   dout_65=dout_37&dout_34;
   dout_66=dout_37&dout_35;
   dout_67=dout_36|dout_65;
   dout_68=dout_41&dout_38;
   dout_69=dout_41&dout_39;
   dout_70=dout_40|dout_68;
   dout_71=dout_45&dout_42;
   dout_72=dout_45&dout_43;
   dout_73=dout_44|dout_71;
   dout_74=dout_49&dout_46;
   dout_75=dout_49&dout_47;
   dout_76=dout_48|dout_74;
   dout_77=dout_53&dout_50;
   dout_78=dout_53&dout_51;
   dout_79=dout_52|dout_77;
   dout_80=dout_57&dout_54;
   dout_81=dout_57&dout_55;
   dout_82=dout_56|dout_80;
   dout_83=dout_61&dout_58;
   dout_84=dout_61&dout_59;
   dout_85=dout_60|dout_83;
   dout_86=dout_66&dout_32;
   dout_87=dout_67|dout_86;
   dout_88=dout_72&dout_70;
   dout_89=dout_72&dout_69;
   dout_90=dout_73|dout_88;
   dout_91=dout_78&dout_76;
   dout_92=dout_78&dout_75;
   dout_93=dout_79|dout_91;
   dout_94=dout_84&dout_82;
   dout_95=dout_84&dout_81;
   dout_96=dout_85|dout_94;
   dout_97=dout_89&dout_87;
   dout_98=dout_90|dout_97;
   dout_99=dout_95&dout_93;
   dout_100=dout_95&dout_92;
   dout_101=dout_96|dout_99;
   dout_102=dout_100&dout_98;
   dout_103=dout_101|dout_102;
   dout_104=dout_92&dout_98;
   dout_105=dout_93|dout_104;
   dout_106=dout_69&dout_87;
   dout_107=dout_70|dout_106;
   dout_108=dout_75&dout_98;
   dout_109=dout_76|dout_108;
   dout_110=dout_81&dout_105;
   dout_111=dout_82|dout_110;
   dout_112=dout_35&dout_32;
   dout_113=dout_34|dout_112;
   dout_114=dout_39&dout_87;
   dout_115=dout_38|dout_114;
   dout_116=dout_43&dout_107;
   dout_117=dout_42|dout_116;
   dout_118=dout_47&dout_98;
   dout_119=dout_46|dout_118;
   dout_120=dout_51&dout_109;
   dout_121=dout_50|dout_120;
   dout_122=dout_55&dout_105;
   dout_123=dout_54|dout_122;
   dout_124=dout_59&dout_111;
   dout_125=dout_58|dout_124;
   dout_126=dout_63&dout_103;
   dout_127=dout_62|dout_126;
   dout_128=dout_35^dout_32;
   dout_129=dout_37^dout_113;
   dout_130=dout_39^dout_87;
   dout_131=dout_41^dout_115;
   dout_132=dout_43^dout_107;
   dout_133=dout_45^dout_117;
   dout_134=dout_47^dout_98;
   dout_135=dout_49^dout_119;
   dout_136=dout_51^dout_109;
   dout_137=dout_53^dout_121;
   dout_138=dout_55^dout_105;
   dout_139=dout_57^dout_123;
   dout_140=dout_59^dout_111;
   dout_141=dout_61^dout_125;
   dout_142=dout_63^dout_103;
   dout_143=dout_64^dout_127;

   O = 0;
   O |= (dout_33&1) << 0;
   O |= (dout_128&1) << 1;
   O |= (dout_129&1) << 2;
   O |= (dout_130&1) << 3;
   O |= (dout_131&1) << 4;
   O |= (dout_132&1) << 5;
   O |= (dout_133&1) << 6;
   O |= (dout_134&1) << 7;
   O |= (dout_135&1) << 8;
   O |= (dout_136&1) << 9;
   O |= (dout_137&1) << 10;
   O |= (dout_138&1) << 11;
   O |= (dout_139&1) << 12;
   O |= (dout_140&1) << 13;
   O |= (dout_141&1) << 14;
   O |= (dout_142&1) << 15;
   O |= (dout_143&1) << 16;
   return O;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.0024 %
// MAE = 1.6 
// WCE% = 0.0076 %
// WCE = 5.0 
// WCRE% = 300.00 %
// EP% = 78.12 %
// MRE% = 0.052 %
// MSE = 4.5 
// PDK45_PWR = 0.063 mW
// PDK45_AREA = 126.2 um2
// PDK45_DELAY = 1.11 ns



uint64_t evoapproxlib::evoapprox_t::add16se_2BY(const uint64_t B,const uint64_t A)
{
   uint64_t dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_98, dout_99, dout_100, dout_101, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110, dout_111, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143;
   uint64_t O;

   dout_36=((A >> 2)&1)&((B >> 2)&1);
   dout_37=((A >> 2)&1)&((B >> 2)&1);
   dout_38=((A >> 3)&1)&((B >> 3)&1);
   dout_39=((A >> 3)&1)^((B >> 3)&1);
   dout_40=((A >> 4)&1)&((B >> 4)&1);
   dout_41=((A >> 4)&1)^((B >> 4)&1);
   dout_42=((A >> 5)&1)&((B >> 5)&1);
   dout_43=((A >> 5)&1)^((B >> 5)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=((A >> 6)&1)^((B >> 6)&1);
   dout_46=((A >> 7)&1)&((B >> 7)&1);
   dout_47=((A >> 7)&1)^((B >> 7)&1);
   dout_48=((A >> 8)&1)&((B >> 8)&1);
   dout_49=((A >> 8)&1)^((B >> 8)&1);
   dout_50=((A >> 9)&1)&((B >> 9)&1);
   dout_51=((A >> 9)&1)^((B >> 9)&1);
   dout_52=((A >> 10)&1)&((B >> 10)&1);
   dout_53=((A >> 10)&1)^((B >> 10)&1);
   dout_54=((A >> 11)&1)&((B >> 11)&1);
   dout_55=((A >> 11)&1)^((B >> 11)&1);
   dout_56=((A >> 12)&1)&((B >> 12)&1);
   dout_57=((A >> 12)&1)^((B >> 12)&1);
   dout_58=((A >> 13)&1)&((B >> 13)&1);
   dout_59=((A >> 13)&1)^((B >> 13)&1);
   dout_60=((A >> 14)&1)&((B >> 14)&1);
   dout_61=((A >> 14)&1)^((B >> 14)&1);
   dout_62=((A >> 15)&1)&((B >> 15)&1);
   dout_63=((A >> 15)&1)^((B >> 15)&1);
   dout_64=((A >> 15)&1)^((B >> 15)&1);
   dout_68=dout_41&dout_38;
   dout_69=dout_41&dout_39;
   dout_70=dout_40|dout_68;
   dout_71=dout_45&dout_42;
   dout_72=dout_45&dout_43;
   dout_73=dout_44|dout_71;
   dout_74=dout_49&dout_46;
   dout_75=dout_49&dout_47;
   dout_76=dout_48|dout_74;
   dout_77=dout_53&dout_50;
   dout_78=dout_53&dout_51;
   dout_79=dout_52|dout_77;
   dout_80=dout_57&dout_54;
   dout_81=dout_57&dout_55;
   dout_82=dout_56|dout_80;
   dout_83=dout_61&dout_58;
   dout_84=dout_61&dout_59;
   dout_85=dout_60|dout_83;
   dout_88=dout_72&dout_70;
   dout_89=dout_72&dout_69;
   dout_90=dout_73|dout_88;
   dout_91=dout_78&dout_76;
   dout_92=dout_78&dout_75;
   dout_93=dout_79|dout_91;
   dout_94=dout_84&dout_82;
   dout_95=dout_84&dout_81;
   dout_96=dout_85|dout_94;
   dout_97=dout_89&dout_36;
   dout_98=dout_90|dout_97;
   dout_99=dout_95&dout_93;
   dout_100=dout_95&dout_92;
   dout_101=dout_96|dout_99;
   dout_102=dout_100&dout_98;
   dout_103=dout_101|dout_102;
   dout_104=dout_92&dout_98;
   dout_105=dout_93|dout_104;
   dout_106=dout_69&dout_36;
   dout_107=dout_70|dout_106;
   dout_108=dout_75&dout_98;
   dout_109=dout_76|dout_108;
   dout_110=dout_81&dout_105;
   dout_111=dout_82|dout_110;
   dout_114=dout_39&dout_36;
   dout_115=dout_38|dout_114;
   dout_116=dout_43&dout_107;
   dout_117=dout_42|dout_116;
   dout_118=dout_47&dout_98;
   dout_119=dout_46|dout_118;
   dout_120=dout_51&dout_109;
   dout_121=dout_50|dout_120;
   dout_122=dout_55&dout_105;
   dout_123=dout_54|dout_122;
   dout_124=dout_59&dout_111;
   dout_125=dout_58|dout_124;
   dout_126=dout_63&dout_103;
   dout_127=dout_62|dout_126;
   dout_128=((B >> 1)&1)|((A >> 1)&1);
   dout_129=dout_37^0xFFFFFFFFFFFFFFFFU;
   dout_130=dout_39^dout_36;
   dout_131=dout_41^dout_115;
   dout_132=dout_43^dout_107;
   dout_133=dout_45^dout_117;
   dout_134=dout_47^dout_98;
   dout_135=dout_49^dout_119;
   dout_136=dout_51^dout_109;
   dout_137=dout_53^dout_121;
   dout_138=dout_55^dout_105;
   dout_139=dout_57^dout_123;
   dout_140=dout_59^dout_111;
   dout_141=dout_61^dout_125;
   dout_142=dout_63^dout_103;
   dout_143=dout_64^dout_127;

   O = 0;
   O |= (dout_134&1) << 0;
   O |= (dout_128&1) << 1;
   O |= (dout_129&1) << 2;
   O |= (dout_130&1) << 3;
   O |= (dout_131&1) << 4;
   O |= (dout_132&1) << 5;
   O |= (dout_133&1) << 6;
   O |= (dout_134&1) << 7;
   O |= (dout_135&1) << 8;
   O |= (dout_136&1) << 9;
   O |= (dout_137&1) << 10;
   O |= (dout_138&1) << 11;
   O |= (dout_139&1) << 12;
   O |= (dout_140&1) << 13;
   O |= (dout_141&1) << 14;
   O |= (dout_142&1) << 15;
   O |= (dout_143&1) << 16;
   return O;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.0012 %
// MAE = 0.8 
// WCE% = 0.0031 %
// WCE = 2.0 
// WCRE% = 100.00 %
// EP% = 62.50 %
// MRE% = 0.024 %
// MSE = 1.0 
// PDK45_PWR = 0.066 mW
// PDK45_AREA = 130.5 um2
// PDK45_DELAY = 1.17 ns



uint64_t evoapproxlib::evoapprox_t::add16se_2KV(const uint64_t B,const uint64_t A)
{
   uint64_t dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_65, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_98, dout_99, dout_100, dout_101, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110, dout_111, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_129, dout_130, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143;
   uint64_t O;

   dout_35=((A >> 1)&1)^0xFFFFFFFFFFFFFFFFU;
   dout_36=((A >> 2)&1)&((B >> 2)&1);
   dout_37=((A >> 2)&1)^((B >> 2)&1);
   dout_38=((A >> 3)&1)&((B >> 3)&1);
   dout_39=((A >> 3)&1)^((B >> 3)&1);
   dout_40=((A >> 4)&1)&((B >> 4)&1);
   dout_41=((A >> 4)&1)^((B >> 4)&1);
   dout_42=((A >> 5)&1)&((B >> 5)&1);
   dout_43=((A >> 5)&1)^((B >> 5)&1);
   dout_44=((A >> 6)&1)&((B >> 6)&1);
   dout_45=((A >> 6)&1)^((B >> 6)&1);
   dout_46=((A >> 7)&1)&((B >> 7)&1);
   dout_47=((A >> 7)&1)^((B >> 7)&1);
   dout_48=((A >> 8)&1)&((B >> 8)&1);
   dout_49=((A >> 8)&1)^((B >> 8)&1);
   dout_50=((A >> 9)&1)&((B >> 9)&1);
   dout_51=((A >> 9)&1)^((B >> 9)&1);
   dout_52=((A >> 10)&1)&((B >> 10)&1);
   dout_53=((A >> 10)&1)^((B >> 10)&1);
   dout_54=((A >> 11)&1)&((B >> 11)&1);
   dout_55=((A >> 11)&1)^((B >> 11)&1);
   dout_56=((A >> 12)&1)&((B >> 12)&1);
   dout_57=((A >> 12)&1)^((B >> 12)&1);
   dout_58=((A >> 13)&1)&((B >> 13)&1);
   dout_59=((A >> 13)&1)^((B >> 13)&1);
   dout_60=((A >> 14)&1)&((B >> 14)&1);
   dout_61=((A >> 14)&1)^((B >> 14)&1);
   dout_62=((A >> 15)&1)&((B >> 15)&1);
   dout_63=((A >> 15)&1)^((B >> 15)&1);
   dout_64=((A >> 15)&1)^((B >> 15)&1);
   dout_65=dout_37&((A >> 1)&1);
   dout_67=dout_36|dout_65;
   dout_68=dout_41&dout_38;
   dout_69=dout_41&dout_39;
   dout_70=dout_40|dout_68;
   dout_71=dout_45&dout_42;
   dout_72=dout_45&dout_43;
   dout_73=dout_44|dout_71;
   dout_74=dout_49&dout_46;
   dout_75=dout_49&dout_47;
   dout_76=dout_48|dout_74;
   dout_77=dout_53&dout_50;
   dout_78=dout_53&dout_51;
   dout_79=dout_52|dout_77;
   dout_80=dout_57&dout_54;
   dout_81=dout_57&dout_55;
   dout_82=dout_56|dout_80;
   dout_83=dout_61&dout_58;
   dout_84=dout_61&dout_59;
   dout_85=dout_60|dout_83;
   dout_88=dout_72&dout_70;
   dout_89=dout_72&dout_69;
   dout_90=dout_73|dout_88;
   dout_91=dout_78&dout_76;
   dout_92=dout_78&dout_75;
   dout_93=dout_79|dout_91;
   dout_94=dout_84&dout_82;
   dout_95=dout_84&dout_81;
   dout_96=dout_85|dout_94;
   dout_97=dout_89&dout_67;
   dout_98=dout_90|dout_97;
   dout_99=dout_95&dout_93;
   dout_100=dout_95&dout_92;
   dout_101=dout_96|dout_99;
   dout_102=dout_100&dout_98;
   dout_103=dout_101|dout_102;
   dout_104=dout_92&dout_98;
   dout_105=dout_93|dout_104;
   dout_106=dout_69&dout_67;
   dout_107=dout_70|dout_106;
   dout_108=dout_75&dout_98;
   dout_109=dout_76|dout_108;
   dout_110=dout_81&dout_105;
   dout_111=dout_82|dout_110;
   dout_114=dout_39&dout_67;
   dout_115=dout_38|dout_114;
   dout_116=dout_43&dout_107;
   dout_117=dout_42|dout_116;
   dout_118=dout_47&dout_98;
   dout_119=dout_46|dout_118;
   dout_120=dout_51&dout_109;
   dout_121=dout_50|dout_120;
   dout_122=dout_55&dout_105;
   dout_123=dout_54|dout_122;
   dout_124=dout_59&dout_111;
   dout_125=dout_58|dout_124;
   dout_126=dout_63&dout_103;
   dout_127=dout_62|dout_126;
   dout_129=dout_37^((A >> 1)&1);
   dout_130=dout_39^dout_67;
   dout_131=dout_41^dout_115;
   dout_132=dout_43^dout_107;
   dout_133=dout_45^dout_117;
   dout_134=dout_47^dout_98;
   dout_135=dout_49^dout_119;
   dout_136=dout_51^dout_109;
   dout_137=dout_53^dout_121;
   dout_138=dout_55^dout_105;
   dout_139=dout_57^dout_123;
   dout_140=dout_59^dout_111;
   dout_141=dout_61^dout_125;
   dout_142=dout_63^dout_103;
   dout_143=dout_64^dout_127;

   O = 0;
   O |= (((B >> 1)&1)&1) << 0;
   O |= (dout_35&1) << 1;
   O |= (dout_129&1) << 2;
   O |= (dout_130&1) << 3;
   O |= (dout_131&1) << 4;
   O |= (dout_132&1) << 5;
   O |= (dout_133&1) << 6;
   O |= (dout_134&1) << 7;
   O |= (dout_135&1) << 8;
   O |= (dout_136&1) << 9;
   O |= (dout_137&1) << 10;
   O |= (dout_138&1) << 11;
   O |= (dout_139&1) << 12;
   O |= (dout_140&1) << 13;
   O |= (dout_141&1) << 14;
   O |= (dout_142&1) << 15;
   O |= (dout_143&1) << 16;
   return O;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.0031 %
// MAE = 2.0 
// WCE% = 0.0061 %
// WCE = 4.0 
// WCRE% = 400.00 %
// EP% = 87.50 %
// MRE% = 0.065 %
// MSE = 5.5 
// PDK45_PWR = 0.062 mW
// PDK45_AREA = 120.1 um2
// PDK45_DELAY = 1.08 ns



uint64_t evoapproxlib::evoapprox_t::add16se_2JY(const uint64_t B,const uint64_t A)
{
   uint64_t dout_34, dout_37, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_65, dout_66, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_86, dout_87, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_98, dout_99, dout_100, dout_101, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110;
   uint64_t O;

   dout_34=(((B >> 1)&1)&((B >> 1)&1))^0xFFFFFFFFFFFFFFFFU;
   dout_37=dout_34^0xFFFFFFFFFFFFFFFFU;
   dout_44=((A >> 3)&1)^((B >> 3)&1);
   dout_45=((A >> 3)&1)&((B >> 3)&1);
   dout_46=dout_44&((A >> 2)&1);
   dout_47=dout_44^((A >> 2)&1);
   dout_48=dout_45|dout_46;
   dout_49=((A >> 4)&1)^((B >> 4)&1);
   dout_50=((A >> 4)&1)&((B >> 4)&1);
   dout_51=dout_49&dout_48;
   dout_52=dout_49^dout_48;
   dout_53=dout_50|dout_51;
   dout_54=((A >> 5)&1)^((B >> 5)&1);
   dout_55=((A >> 5)&1)&((B >> 5)&1);
   dout_56=dout_54&dout_53;
   dout_57=dout_54^dout_53;
   dout_58=dout_55|dout_56;
   dout_59=((A >> 6)&1)^((B >> 6)&1);
   dout_60=((A >> 6)&1)&((B >> 6)&1);
   dout_61=dout_59&dout_58;
   dout_62=dout_59^dout_58;
   dout_63=dout_60|dout_61;
   dout_64=((A >> 7)&1)^((B >> 7)&1);
   dout_65=((A >> 7)&1)&((B >> 7)&1);
   dout_66=dout_64&dout_63;
   dout_67=dout_64^dout_63;
   dout_68=dout_65|dout_66;
   dout_69=((A >> 8)&1)^((B >> 8)&1);
   dout_70=((A >> 8)&1)&((B >> 8)&1);
   dout_71=dout_69&dout_68;
   dout_72=dout_69^dout_68;
   dout_73=dout_70|dout_71;
   dout_74=((A >> 9)&1)^((B >> 9)&1);
   dout_75=((A >> 9)&1)&((B >> 9)&1);
   dout_76=dout_74&dout_73;
   dout_77=dout_74^dout_73;
   dout_78=dout_75|dout_76;
   dout_79=((A >> 10)&1)^((B >> 10)&1);
   dout_80=((A >> 10)&1)&((B >> 10)&1);
   dout_81=dout_79&dout_78;
   dout_82=dout_79^dout_78;
   dout_83=dout_80|dout_81;
   dout_84=((A >> 11)&1)^((B >> 11)&1);
   dout_85=((A >> 11)&1)&((B >> 11)&1);
   dout_86=dout_84&dout_83;
   dout_87=dout_84^dout_83;
   dout_88=dout_85|dout_86;
   dout_89=((A >> 12)&1)^((B >> 12)&1);
   dout_90=((A >> 12)&1)&((B >> 12)&1);
   dout_91=dout_89&dout_88;
   dout_92=dout_89^dout_88;
   dout_93=dout_90|dout_91;
   dout_94=((A >> 13)&1)^((B >> 13)&1);
   dout_95=((A >> 13)&1)&((B >> 13)&1);
   dout_96=dout_94&dout_93;
   dout_97=dout_94^dout_93;
   dout_98=dout_95|dout_96;
   dout_99=((A >> 14)&1)^((B >> 14)&1);
   dout_100=((A >> 14)&1)&((B >> 14)&1);
   dout_101=dout_99&dout_98;
   dout_102=dout_99^dout_98;
   dout_103=dout_100|dout_101;
   dout_104=((A >> 15)&1)^((B >> 15)&1);
   dout_105=((A >> 15)&1)&((B >> 15)&1);
   dout_106=dout_104&dout_103;
   dout_107=dout_104^dout_103;
   dout_108=dout_105|dout_106;
   dout_109=((A >> 15)&1)^((B >> 15)&1);
   dout_110=dout_109^dout_108;

   O = 0;
   O |= (((B >> 0)&1)&1) << 0;
   O |= (dout_37&1) << 1;
   O |= (((B >> 2)&1)&1) << 2;
   O |= (dout_47&1) << 3;
   O |= (dout_52&1) << 4;
   O |= (dout_57&1) << 5;
   O |= (dout_62&1) << 6;
   O |= (dout_67&1) << 7;
   O |= (dout_72&1) << 8;
   O |= (dout_77&1) << 9;
   O |= (dout_82&1) << 10;
   O |= (dout_87&1) << 11;
   O |= (dout_92&1) << 12;
   O |= (dout_97&1) << 13;
   O |= (dout_102&1) << 14;
   O |= (dout_107&1) << 15;
   O |= (dout_110&1) << 16;
   return O;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 0.02 %
// MAE = 13 
// WCE% = 0.058 %
// WCE = 38 
// WCRE% = 2100.00 %
// EP% = 98.15 %
// MRE% = 0.38 %
// MSE = 232 
// PDK45_PWR = 0.051 mW
// PDK45_AREA = 112.2 um2
// PDK45_DELAY = 0.84 ns



uint64_t evoapproxlib::evoapprox_t::add16se_25S(const uint64_t B,const uint64_t A)
{
   uint64_t dout_44, dout_47, dout_49, dout_52, dout_54, dout_55, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_65, dout_66, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_86, dout_87, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_98, dout_99, dout_100, dout_101, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110;
   uint64_t O;

   dout_44=(((B >> 2)&1)|((B >> 4)&1))^0xFFFFFFFFFFFFFFFFU;
   dout_47=dout_44^0xFFFFFFFFFFFFFFFFU;
   dout_49=(((A >> 4)&1)|((B >> 2)&1))^0xFFFFFFFFFFFFFFFFU;
   dout_52=dout_49^0xFFFFFFFFFFFFFFFFU;
   dout_54=((A >> 5)&1)^((B >> 5)&1);
   dout_55=((A >> 5)&1)&((B >> 5)&1);
   dout_59=((A >> 6)&1)^((B >> 6)&1);
   dout_60=((A >> 6)&1)&((B >> 6)&1);
   dout_61=dout_59&dout_55;
   dout_62=dout_59^dout_55;
   dout_63=dout_60|dout_61;
   dout_64=((A >> 7)&1)^((B >> 7)&1);
   dout_65=((A >> 7)&1)&((B >> 7)&1);
   dout_66=dout_64&dout_63;
   dout_67=dout_64^dout_63;
   dout_68=dout_65|dout_66;
   dout_69=((A >> 8)&1)^((B >> 8)&1);
   dout_70=((A >> 8)&1)&((B >> 8)&1);
   dout_71=dout_69&dout_68;
   dout_72=dout_69^dout_68;
   dout_73=dout_70|dout_71;
   dout_74=((A >> 9)&1)^((B >> 9)&1);
   dout_75=((A >> 9)&1)&((B >> 9)&1);
   dout_76=dout_74&dout_73;
   dout_77=dout_74^dout_73;
   dout_78=dout_75|dout_76;
   dout_79=((A >> 10)&1)^((B >> 10)&1);
   dout_80=((A >> 10)&1)&((B >> 10)&1);
   dout_81=dout_79&dout_78;
   dout_82=dout_79^dout_78;
   dout_83=dout_80|dout_81;
   dout_84=((A >> 11)&1)^((B >> 11)&1);
   dout_85=((A >> 11)&1)&((B >> 11)&1);
   dout_86=dout_84&dout_83;
   dout_87=dout_84^dout_83;
   dout_88=dout_85|dout_86;
   dout_89=((A >> 12)&1)^((B >> 12)&1);
   dout_90=((A >> 12)&1)&((B >> 12)&1);
   dout_91=dout_89&dout_88;
   dout_92=dout_89^dout_88;
   dout_93=dout_90|dout_91;
   dout_94=((A >> 13)&1)^((B >> 13)&1);
   dout_95=((A >> 13)&1)&((B >> 13)&1);
   dout_96=dout_94&dout_93;
   dout_97=dout_94^dout_93;
   dout_98=dout_95|dout_96;
   dout_99=((A >> 14)&1)^((B >> 14)&1);
   dout_100=((A >> 14)&1)&((B >> 14)&1);
   dout_101=dout_99&dout_98;
   dout_102=dout_99^dout_98;
   dout_103=dout_100|dout_101;
   dout_104=((A >> 15)&1)^((B >> 15)&1);
   dout_105=((A >> 15)&1)&((B >> 15)&1);
   dout_106=dout_104&dout_103;
   dout_107=dout_104^dout_103;
   dout_108=dout_105|dout_106;
   dout_109=((A >> 15)&1)^((B >> 15)&1);
   dout_110=dout_109^dout_108;

   O = 0;
   O |= (dout_78&1) << 0;
   O |= (dout_65&1) << 1;
   O |= (dout_104&1) << 2;
   O |= (dout_47&1) << 3;
   O |= (dout_52&1) << 4;
   O |= (dout_54&1) << 5;
   O |= (dout_62&1) << 6;
   O |= (dout_67&1) << 7;
   O |= (dout_72&1) << 8;
   O |= (dout_77&1) << 9;
   O |= (dout_82&1) << 10;
   O |= (dout_87&1) << 11;
   O |= (dout_92&1) << 12;
   O |= (dout_97&1) << 13;
   O |= (dout_102&1) << 14;
   O |= (dout_107&1) << 15;
   O |= (dout_110&1) << 16;
   return O;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.0069 %
// MAE = 4.5 
// WCE% = 0.021 %
// WCE = 14 
// WCRE% = 900.00 %
// EP% = 93.75 %
// MRE% = 0.15 %
// MSE = 30 
// PDK45_PWR = 0.057 mW
// PDK45_AREA = 111.2 um2
// PDK45_DELAY = 1.00 ns



uint64_t evoapproxlib::evoapprox_t::add16se_1Y7(const uint64_t B,const uint64_t A)
{
   uint64_t dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_65, dout_66, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_86, dout_87, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_98, dout_99, dout_100, dout_101, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110;
   uint64_t O;

   dout_49=((A >> 4)&1)^((B >> 4)&1);
   dout_50=((A >> 4)&1)&((B >> 4)&1);
   dout_51=dout_49&((B >> 3)&1);
   dout_52=dout_49^((B >> 3)&1);
   dout_53=dout_50|dout_51;
   dout_54=((A >> 5)&1)^((B >> 5)&1);
   dout_55=((A >> 5)&1)&((B >> 5)&1);
   dout_56=dout_54&dout_53;
   dout_57=dout_54^dout_53;
   dout_58=dout_55|dout_56;
   dout_59=((A >> 6)&1)^((B >> 6)&1);
   dout_60=((A >> 6)&1)&((B >> 6)&1);
   dout_61=dout_59&dout_58;
   dout_62=dout_59^dout_58;
   dout_63=dout_60|dout_61;
   dout_64=((A >> 7)&1)^((B >> 7)&1);
   dout_65=((A >> 7)&1)&((B >> 7)&1);
   dout_66=dout_64&dout_63;
   dout_67=dout_64^dout_63;
   dout_68=dout_65|dout_66;
   dout_69=((A >> 8)&1)^((B >> 8)&1);
   dout_70=((A >> 8)&1)&((B >> 8)&1);
   dout_71=dout_69&dout_68;
   dout_72=dout_69^dout_68;
   dout_73=dout_70|dout_71;
   dout_74=((A >> 9)&1)^((B >> 9)&1);
   dout_75=((A >> 9)&1)&((B >> 9)&1);
   dout_76=dout_74&dout_73;
   dout_77=dout_74^dout_73;
   dout_78=dout_75|dout_76;
   dout_79=((A >> 10)&1)^((B >> 10)&1);
   dout_80=((A >> 10)&1)&((B >> 10)&1);
   dout_81=dout_79&dout_78;
   dout_82=dout_79^dout_78;
   dout_83=dout_80|dout_81;
   dout_84=((A >> 11)&1)^((B >> 11)&1);
   dout_85=((A >> 11)&1)&((B >> 11)&1);
   dout_86=dout_84&dout_83;
   dout_87=dout_84^dout_83;
   dout_88=dout_85|dout_86;
   dout_89=((A >> 12)&1)^((B >> 12)&1);
   dout_90=((A >> 12)&1)&((B >> 12)&1);
   dout_91=dout_89&dout_88;
   dout_92=dout_89^dout_88;
   dout_93=dout_90|dout_91;
   dout_94=((A >> 13)&1)^((B >> 13)&1);
   dout_95=((A >> 13)&1)&((B >> 13)&1);
   dout_96=dout_94&dout_93;
   dout_97=dout_94^dout_93;
   dout_98=dout_95|dout_96;
   dout_99=((A >> 14)&1)^((B >> 14)&1);
   dout_100=((A >> 14)&1)&((B >> 14)&1);
   dout_101=dout_99&dout_98;
   dout_102=dout_99^dout_98;
   dout_103=dout_100|dout_101;
   dout_104=((A >> 15)&1)^((B >> 15)&1);
   dout_105=((A >> 15)&1)&((B >> 15)&1);
   dout_106=dout_104&dout_103;
   dout_107=dout_104^dout_103;
   dout_108=dout_105|dout_106;
   dout_109=((A >> 15)&1)^((B >> 15)&1);
   dout_110=dout_109^dout_108;

   O = 0;
   O |= (dout_62&1) << 0;
   O |= (dout_103&1) << 1;
   O |= (0&1) << 2;
   O |= (((A >> 3)&1)&1) << 3;
   O |= (dout_52&1) << 4;
   O |= (dout_57&1) << 5;
   O |= (dout_62&1) << 6;
   O |= (dout_67&1) << 7;
   O |= (dout_72&1) << 8;
   O |= (dout_77&1) << 9;
   O |= (dout_82&1) << 10;
   O |= (dout_87&1) << 11;
   O |= (dout_92&1) << 12;
   O |= (dout_97&1) << 13;
   O |= (dout_102&1) << 14;
   O |= (dout_107&1) << 15;
   O |= (dout_110&1) << 16;
   return O;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.056 %
// MAE = 74 
// WCE% = 0.32 %
// WCE = 418 
// WCRE% = 200.00 %
// EP% = 68.55 %
// MRE% = 0.15 %
// MSE = 14574 
// PDK45_PWR = 0.057 mW
// PDK45_AREA = 143.1 um2
// PDK45_DELAY = 0.63 ns



uint64_t evoapproxlib::evoapprox_t::add16u_1US(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_32 = wa[0] ^ wb[0];
  int sig_33 = wa[0] & wb[0];
  int sig_34 = wa[1] ^ wb[1];
  int sig_35 = wa[1] & wb[1];
  int sig_37 = sig_34 | sig_33;
  int sig_38 = sig_35;
  int sig_39 = wa[2] ^ wb[2];
  int sig_40 = wa[2] & wb[2];
  int sig_41 = wa[1] & wb[1];
  int sig_42 = sig_39 ^ sig_38;
  int sig_43 = sig_40 | sig_41;
  int sig_44 = wa[3] ^ wb[3];
  int sig_45 = wa[3] & wb[3];
  int sig_46 = sig_44 & sig_43;
  int sig_47 = sig_44 ^ sig_43;
  int sig_48 = sig_45 | sig_46;
  int sig_49 = wa[4] ^ wb[4];
  int sig_50 = wa[4] & wb[4];
  int sig_51 = sig_49 & sig_48;
  int sig_52 = sig_49 ^ sig_48;
  int sig_53 = sig_50 | sig_51;
  int sig_54 = wa[5] | wb[5];
  int sig_56 = sig_54 & sig_53;
  int sig_57 = sig_54 ^ sig_53;
  int sig_58 = wa[6] | sig_56;
  int sig_62 = wb[6] | sig_58;
  int sig_64 = wa[7] ^ wb[7];
  int sig_65 = wa[7] & wb[7];
  int sig_67 = sig_64;
  int sig_68 = sig_65;
  int sig_69 = wa[8] ^ wb[8];
  int sig_70 = wa[8] & wb[8];
  int sig_72 = sig_69 | sig_68;
  int sig_73 = sig_70;
  int sig_74 = wa[9] ^ wb[9];
  int sig_75 = wa[9] & wb[9];
  int sig_76 = sig_74 & sig_73;
  int sig_77 = sig_74 ^ sig_73;
  int sig_78 = sig_75 | sig_76;
  int sig_79 = wa[10] ^ wb[10];
  int sig_80 = wa[10] & wb[10];
  int sig_81 = sig_79 & sig_78;
  int sig_82 = sig_79 ^ sig_78;
  int sig_83 = sig_80 | sig_81;
  int sig_84 = wa[11] ^ wb[11];
  int sig_85 = wa[11] & wb[11];
  int sig_86 = sig_84 & sig_83;
  int sig_87 = sig_84 ^ sig_83;
  int sig_88 = sig_85 | sig_86;
  int sig_89 = wa[12] ^ wb[12];
  int sig_90 = wa[12] & wb[12];
  int sig_91 = sig_89 & sig_88;
  int sig_92 = sig_89 ^ sig_88;
  int sig_93 = sig_90 | sig_91;
  int sig_94 = wa[13] ^ wb[13];
  int sig_95 = wa[13] & wb[13];
  int sig_96 = sig_94 & sig_93;
  int sig_97 = sig_94 ^ sig_93;
  int sig_98 = sig_95 | sig_96;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & sig_98;
  int sig_102 = sig_99 ^ sig_98;
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (sig_32 & 0x01) << 0; // default output
  y |=  (sig_37 & 0x01) << 1; // default output
  y |=  (sig_42 & 0x01) << 2; // default output
  y |=  (sig_47 & 0x01) << 3; // default output
  y |=  (sig_52 & 0x01) << 4; // default output
  y |=  (sig_57 & 0x01) << 5; // default output
  y |=  (sig_62 & 0x01) << 6; // default output
  y |=  (sig_67 & 0x01) << 7; // default output
  y |=  (sig_72 & 0x01) << 8; // default output
  y |=  (sig_77 & 0x01) << 9; // default output
  y |=  (sig_82 & 0x01) << 10; // default output
  y |=  (sig_87 & 0x01) << 11; // default output
  y |=  (sig_92 & 0x01) << 12; // default output
  y |=  (sig_97 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.20 %
// MAE = 261 
// WCE% = 0.50 %
// WCE = 652 
// WCRE% = 100.00 %
// EP% = 99.90 %
// MRE% = 0.55 %
// MSE = 92768 
// PDK45_PWR = 0.027 mW
// PDK45_AREA = 55.8 um2
// PDK45_DELAY = 0.54 ns



uint64_t evoapproxlib::evoapprox_t::add16u_02U(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_54 = wb[4];
  int sig_60 = 0;
  int sig_63 = wb[8];
  int sig_75 = wb[6];
  int sig_78 = wb[9] | wa[9];
  int sig_79 = wa[10] ^ wb[10];
  int sig_80 = wa[10] & wb[10];
  int sig_81 = sig_79 & sig_78;
  int sig_82 = sig_79 ^ sig_78;
  int sig_83 = sig_80 | sig_81;
  int sig_84 = wa[11] ^ wb[11];
  int sig_85 = wa[11] & wb[11];
  int sig_86 = sig_84 & sig_83;
  int sig_87 = sig_84 ^ sig_83;
  int sig_88 = sig_85 | sig_86;
  int sig_89 = wa[12] ^ wb[12];
  int sig_90 = wa[12] & wb[12];
  int sig_91 = sig_89 & sig_88;
  int sig_92 = sig_89 ^ sig_88;
  int sig_93 = sig_90 | sig_91;
  int sig_94 = wa[13] ^ wb[13];
  int sig_95 = wa[13] & wb[13];
  int sig_96 = sig_94 & sig_93;
  int sig_97 = sig_94 ^ sig_93;
  int sig_98 = sig_95 | sig_96;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & sig_98;
  int sig_102 = sig_99 ^ sig_98;
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (wa[8] & 0x01) << 0; // default output
  y |=  (sig_75 & 0x01) << 1; // default output
  y |=  (wb[12] & 0x01) << 2; // default output
  y |=  (wa[14] & 0x01) << 3; // default output
  y |=  (wb[12] & 0x01) << 4; // default output
  y |=  (sig_54 & 0x01) << 5; // default output
  y |=  (wa[5] & 0x01) << 6; // default output
  y |=  (wa[6] & 0x01) << 7; // default output
  y |=  (sig_63 & 0x01) << 8; // default output
  y |=  (sig_60 & 0x01) << 9; // default output
  y |=  (sig_82 & 0x01) << 10; // default output
  y |=  (sig_87 & 0x01) << 11; // default output
  y |=  (sig_92 & 0x01) << 12; // default output
  y |=  (sig_97 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 0.00061 %
// MAE = 0.8 
// WCE% = 0.0015 %
// WCE = 2.0 
// WCRE% = 100.00 %
// EP% = 62.50 %
// MRE% = 0.0017 %
// MSE = 1.0 
// PDK45_PWR = 0.067 mW
// PDK45_AREA = 132.8 um2
// PDK45_DELAY = 1.20 ns



uint64_t evoapproxlib::evoapprox_t::add16u_1B4(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_34 = wa[1] ^ wb[1];
  int sig_35 = wa[1] & wb[1];
  int sig_36 = 0;
  int sig_37 = sig_34;
  int sig_38 = sig_35 | sig_36;
  int sig_39 = wa[2] ^ wb[2];
  int sig_40 = wa[2] & wb[2];
  int sig_41 = sig_39 & sig_38;
  int sig_42 = sig_39 ^ sig_38;
  int sig_43 = sig_40 | sig_41;
  int sig_44 = wa[3] ^ wb[3];
  int sig_45 = wa[3] & wb[3];
  int sig_46 = sig_44 & sig_43;
  int sig_47 = sig_44 ^ sig_43;
  int sig_48 = sig_45 | sig_46;
  int sig_49 = wa[4] ^ wb[4];
  int sig_50 = wa[4] & wb[4];
  int sig_51 = sig_49 & sig_48;
  int sig_52 = sig_49 ^ sig_48;
  int sig_53 = sig_50 | sig_51;
  int sig_54 = wa[5] ^ wb[5];
  int sig_55 = wa[5] & wb[5];
  int sig_56 = sig_54 & sig_53;
  int sig_57 = sig_54 ^ sig_53;
  int sig_58 = sig_55 | sig_56;
  int sig_59 = wa[6] ^ wb[6];
  int sig_60 = wa[6] & wb[6];
  int sig_61 = sig_59 & sig_58;
  int sig_62 = sig_59 ^ sig_58;
  int sig_63 = sig_60 | sig_61;
  int sig_64 = wa[7] ^ wb[7];
  int sig_65 = wa[7] & wb[7];
  int sig_66 = sig_64 & sig_63;
  int sig_67 = sig_64 ^ sig_63;
  int sig_68 = sig_65 | sig_66;
  int sig_69 = wa[8] ^ wb[8];
  int sig_70 = wa[8] & wb[8];
  int sig_71 = sig_69 & sig_68;
  int sig_72 = sig_69 ^ sig_68;
  int sig_73 = sig_70 | sig_71;
  int sig_74 = wa[9] ^ wb[9];
  int sig_75 = wa[9] & wb[9];
  int sig_76 = sig_74 & sig_73;
  int sig_77 = sig_74 ^ sig_73;
  int sig_78 = sig_75 | sig_76;
  int sig_79 = wa[10] ^ wb[10];
  int sig_80 = wa[10] & wb[10];
  int sig_81 = sig_79 & sig_78;
  int sig_82 = sig_79 ^ sig_78;
  int sig_83 = sig_80 | sig_81;
  int sig_84 = wa[11] ^ wb[11];
  int sig_85 = wa[11] & wb[11];
  int sig_86 = sig_84 & sig_83;
  int sig_87 = sig_84 ^ sig_83;
  int sig_88 = sig_85 | sig_86;
  int sig_89 = wa[12] ^ wb[12];
  int sig_90 = wa[12] & wb[12];
  int sig_91 = sig_89 & sig_88;
  int sig_92 = sig_89 ^ sig_88;
  int sig_93 = sig_90 | sig_91;
  int sig_94 = wa[13] ^ wb[13];
  int sig_95 = wa[13] & wb[13];
  int sig_96 = sig_94 & sig_93;
  int sig_97 = sig_94 ^ sig_93;
  int sig_98 = sig_95 | sig_96;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & sig_98;
  int sig_102 = sig_99 ^ sig_98;
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (sig_103 & 0x01) << 0; // default output
  y |=  (sig_37 & 0x01) << 1; // default output
  y |=  (sig_42 & 0x01) << 2; // default output
  y |=  (sig_47 & 0x01) << 3; // default output
  y |=  (sig_52 & 0x01) << 4; // default output
  y |=  (sig_57 & 0x01) << 5; // default output
  y |=  (sig_62 & 0x01) << 6; // default output
  y |=  (sig_67 & 0x01) << 7; // default output
  y |=  (sig_72 & 0x01) << 8; // default output
  y |=  (sig_77 & 0x01) << 9; // default output
  y |=  (sig_82 & 0x01) << 10; // default output
  y |=  (sig_87 & 0x01) << 11; // default output
  y |=  (sig_92 & 0x01) << 12; // default output
  y |=  (sig_97 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 0.20 %
// MAE = 262 
// WCE% = 0.52 %
// WCE = 684 
// WCRE% = 6300.00 %
// EP% = 99.91 %
// MRE% = 0.55 %
// MSE = 92039 
// PDK45_PWR = 0.026 mW
// PDK45_AREA = 55.8 um2
// PDK45_DELAY = 0.51 ns



uint64_t evoapproxlib::evoapprox_t::add16u_0DL(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_35 = wb[10];
  int sig_65 = 0;
  int sig_79 = wa[10] ^ wb[10];
  int sig_80 = wa[10] & wb[10];
  int sig_81 = sig_79 & wb[9];
  int sig_82 = sig_79 ^ wb[9];
  int sig_83 = sig_80 | sig_81;
  int sig_84 = wa[11] ^ wb[11];
  int sig_85 = wa[11] & wb[11];
  int sig_86 = sig_84 & sig_83;
  int sig_87 = sig_84 ^ sig_83;
  int sig_88 = sig_85 | sig_86;
  int sig_89 = wa[12] ^ wb[12];
  int sig_90 = wa[12] & wb[12];
  int sig_91 = sig_89 & sig_88;
  int sig_92 = sig_89 ^ sig_88;
  int sig_93 = sig_90 | sig_91;
  int sig_94 = wa[13] ^ wb[13];
  int sig_95 = wa[13] & wb[13];
  int sig_96 = sig_94 & sig_93;
  int sig_97 = sig_94 ^ sig_93;
  int sig_98 = sig_95 | sig_96;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & sig_98;
  int sig_102 = sig_99 ^ sig_98;
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (sig_35 & 0x01) << 0; // default output
  y |=  (sig_65 & 0x01) << 1; // default output
  y |=  (wb[14] & 0x01) << 2; // default output
  y |=  (sig_92 & 0x01) << 3; // default output
  y |=  (wa[8] & 0x01) << 4; // default output
  y |=  (sig_95 & 0x01) << 5; // default output
  y |=  (wa[7] & 0x01) << 6; // default output
  y |=  (wb[1] & 0x01) << 7; // default output
  y |=  (wb[8] & 0x01) << 8; // default output
  y |=  (wa[9] & 0x01) << 9; // default output
  y |=  (sig_82 & 0x01) << 10; // default output
  y |=  (sig_87 & 0x01) << 11; // default output
  y |=  (sig_92 & 0x01) << 12; // default output
  y |=  (sig_97 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mse parameters
***/
// MAE% = 0.0063 %
// MAE = 8.3 
// WCE% = 0.018 %
// WCE = 23 
// WCRE% = 100.00 %
// EP% = 96.88 %
// MRE% = 0.018 %
// MSE = 96 
// PDK45_PWR = 0.051 mW
// PDK45_AREA = 100.4 um2
// PDK45_DELAY = 0.95 ns



uint64_t evoapproxlib::evoapprox_t::add16u_0Q7(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_50 = wa[4] | wb[4];
  int sig_52 = 0;
  int sig_53 = sig_50;
  int sig_54 = wa[5] ^ wb[5];
  int sig_55 = wa[5] & wb[5];
  int sig_56 = sig_54 & sig_53;
  int sig_57 = sig_54 ^ sig_53;
  int sig_58 = sig_55 | sig_56;
  int sig_59 = wa[6] ^ wb[6];
  int sig_60 = wa[6] & wb[6];
  int sig_61 = sig_59 & sig_58;
  int sig_62 = sig_59 ^ sig_58;
  int sig_63 = sig_60 | sig_61;
  int sig_64 = wa[7] ^ wb[7];
  int sig_65 = wa[7] & wb[7];
  int sig_66 = sig_64 & sig_63;
  int sig_67 = sig_64 ^ sig_63;
  int sig_68 = sig_65 | sig_66;
  int sig_69 = wa[8] ^ wb[8];
  int sig_70 = wa[8] & wb[8];
  int sig_71 = sig_69 & sig_68;
  int sig_72 = sig_69 ^ sig_68;
  int sig_73 = sig_70 | sig_71;
  int sig_74 = wa[9] ^ wb[9];
  int sig_75 = wa[9] & wb[9];
  int sig_76 = sig_74 & sig_73;
  int sig_77 = sig_74 ^ sig_73;
  int sig_78 = sig_75 | sig_76;
  int sig_79 = wa[10] ^ wb[10];
  int sig_80 = wa[10] & wb[10];
  int sig_81 = sig_79 & sig_78;
  int sig_82 = sig_79 ^ sig_78;
  int sig_83 = sig_80 | sig_81;
  int sig_84 = wa[11] ^ wb[11];
  int sig_85 = wa[11] & wb[11];
  int sig_86 = sig_84 & sig_83;
  int sig_87 = sig_84 ^ sig_83;
  int sig_88 = sig_85 | sig_86;
  int sig_89 = wa[12] ^ wb[12];
  int sig_90 = wa[12] & wb[12];
  int sig_91 = sig_89 & sig_88;
  int sig_92 = sig_89 ^ sig_88;
  int sig_93 = sig_90 | sig_91;
  int sig_94 = wa[13] ^ wb[13];
  int sig_95 = wa[13] & wb[13];
  int sig_96 = sig_94 & sig_93;
  int sig_97 = sig_94 ^ sig_93;
  int sig_98 = sig_95 | sig_96;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & sig_98;
  int sig_102 = sig_99 ^ sig_98;
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (wb[14] & 0x01) << 0; // default output
  y |=  (sig_83 & 0x01) << 1; // default output
  y |=  (sig_72 & 0x01) << 2; // default output
  y |=  (wa[3] & 0x01) << 3; // default output
  y |=  (sig_52 & 0x01) << 4; // default output
  y |=  (sig_57 & 0x01) << 5; // default output
  y |=  (sig_62 & 0x01) << 6; // default output
  y |=  (sig_67 & 0x01) << 7; // default output
  y |=  (sig_72 & 0x01) << 8; // default output
  y |=  (sig_77 & 0x01) << 9; // default output
  y |=  (sig_82 & 0x01) << 10; // default output
  y |=  (sig_87 & 0x01) << 11; // default output
  y |=  (sig_92 & 0x01) << 12; // default output
  y |=  (sig_97 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.00061 %
// MAE = 0.8 
// WCE% = 0.0031 %
// WCE = 4.0 
// WCRE% = 50.00 %
// EP% = 18.75 %
// MRE% = 0.0016 %
// MSE = 3.0 
// PDK45_PWR = 0.069 mW
// PDK45_AREA = 144.5 um2
// PDK45_DELAY = 1.11 ns



uint64_t evoapproxlib::evoapprox_t::add16u_1NN(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_32 = wa[0] ^ wb[0];
  int sig_33 = wa[0] & wb[0];
  int sig_34 = wa[1] ^ wb[1];
  int sig_35 = wa[1] & wb[1];
  int sig_36 = sig_34 & sig_33;
  int sig_37 = sig_34 ^ sig_33;
  int sig_38 = sig_35 | sig_36;
  int sig_39 = wa[2] ^ wb[2];
  int sig_40 = wa[2] & wb[2];
  int sig_42 = sig_39 | sig_38;
  int sig_43 = sig_40;
  int sig_44 = wa[3] ^ wb[3];
  int sig_45 = wa[3] & wb[3];
  int sig_46 = sig_44 & sig_43;
  int sig_47 = sig_44 ^ sig_43;
  int sig_48 = sig_45 | sig_46;
  int sig_49 = wa[4] ^ wb[4];
  int sig_50 = wa[4] & wb[4];
  int sig_51 = sig_49 & sig_48;
  int sig_52 = sig_49 ^ sig_48;
  int sig_53 = sig_50 | sig_51;
  int sig_54 = wa[5] ^ wb[5];
  int sig_55 = wa[5] & wb[5];
  int sig_56 = sig_54 & sig_53;
  int sig_57 = sig_54 ^ sig_53;
  int sig_58 = sig_55 | sig_56;
  int sig_59 = wa[6] ^ wb[6];
  int sig_60 = wa[6] & wb[6];
  int sig_61 = sig_59 & sig_58;
  int sig_62 = sig_59 ^ sig_58;
  int sig_63 = sig_60 | sig_61;
  int sig_64 = wa[7] ^ wb[7];
  int sig_65 = wa[7] & wb[7];
  int sig_66 = sig_64 & sig_63;
  int sig_67 = sig_64 ^ sig_63;
  int sig_68 = sig_65 | sig_66;
  int sig_69 = wa[8] ^ wb[8];
  int sig_70 = wa[8] & wb[8];
  int sig_71 = sig_69 & sig_68;
  int sig_72 = sig_69 ^ sig_68;
  int sig_73 = sig_70 | sig_71;
  int sig_74 = wa[9] ^ wb[9];
  int sig_75 = wa[9] & wb[9];
  int sig_76 = sig_74 & sig_73;
  int sig_77 = sig_74 ^ sig_73;
  int sig_78 = sig_75 | sig_76;
  int sig_79 = wa[10] ^ wb[10];
  int sig_80 = wa[10] & wb[10];
  int sig_81 = sig_79 & sig_78;
  int sig_82 = sig_79 ^ sig_78;
  int sig_83 = sig_80 | sig_81;
  int sig_84 = wa[11] ^ wb[11];
  int sig_85 = wa[11] & wb[11];
  int sig_86 = sig_84 & sig_83;
  int sig_87 = sig_84 ^ sig_83;
  int sig_88 = sig_85 | sig_86;
  int sig_89 = wa[12] ^ wb[12];
  int sig_90 = wa[12] & wb[12];
  int sig_91 = sig_89 & sig_88;
  int sig_92 = sig_89 ^ sig_88;
  int sig_93 = sig_90 | sig_91;
  int sig_94 = wa[13] ^ wb[13];
  int sig_95 = wa[13] & wb[13];
  int sig_96 = sig_94 & sig_93;
  int sig_97 = sig_94 ^ sig_93;
  int sig_98 = sig_95 | sig_96;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & sig_98;
  int sig_102 = sig_99 ^ sig_98;
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (sig_32 & 0x01) << 0; // default output
  y |=  (sig_37 & 0x01) << 1; // default output
  y |=  (sig_42 & 0x01) << 2; // default output
  y |=  (sig_47 & 0x01) << 3; // default output
  y |=  (sig_52 & 0x01) << 4; // default output
  y |=  (sig_57 & 0x01) << 5; // default output
  y |=  (sig_62 & 0x01) << 6; // default output
  y |=  (sig_67 & 0x01) << 7; // default output
  y |=  (sig_72 & 0x01) << 8; // default output
  y |=  (sig_77 & 0x01) << 9; // default output
  y |=  (sig_82 & 0x01) << 10; // default output
  y |=  (sig_87 & 0x01) << 11; // default output
  y |=  (sig_92 & 0x01) << 12; // default output
  y |=  (sig_97 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.015 %
// MAE = 20 
// WCE% = 0.049 %
// WCE = 64 
// WCRE% = 66.67 %
// EP% = 49.22 %
// MRE% = 0.041 %
// MSE = 876 
// PDK45_PWR = 0.062 mW
// PDK45_AREA = 136.1 um2
// PDK45_DELAY = 0.79 ns



uint64_t evoapproxlib::evoapprox_t::add16u_1MB(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_32 = wa[0] ^ wb[0];
  int sig_33 = wa[0] & wb[0];
  int sig_34 = wa[1] ^ wb[1];
  int sig_35 = wa[1] & wb[1];
  int sig_36 = sig_34 & sig_33;
  int sig_37 = sig_34 ^ sig_33;
  int sig_38 = sig_35 | sig_36;
  int sig_39 = wa[2] ^ wb[2];
  int sig_40 = wa[2] & wb[2];
  int sig_41 = sig_39 & sig_38;
  int sig_42 = sig_39 ^ sig_38;
  int sig_43 = sig_40 | sig_41;
  int sig_44 = wa[3] ^ wb[3];
  int sig_45 = wa[3] & wb[3];
  int sig_46 = sig_44 & sig_43;
  int sig_47 = sig_44 ^ sig_43;
  int sig_48 = sig_45 | sig_46;
  int sig_49 = wa[4] ^ wb[4];
  int sig_50 = wa[4] & wb[4];
  int sig_51 = sig_49 & sig_48;
  int sig_52 = sig_49 ^ sig_48;
  int sig_53 = sig_50 | sig_51;
  int sig_54 = wa[5] | wb[5];
  int sig_57 = sig_54 | sig_53;
  int sig_59 = wa[6] ^ wb[6];
  int sig_60 = wa[6] & wb[6];
  int sig_63 = sig_60;
  int sig_64 = wa[7] ^ wb[7];
  int sig_65 = wa[7] & wb[7];
  int sig_66 = sig_64 & sig_63;
  int sig_67 = sig_64 ^ sig_63;
  int sig_68 = sig_65 | sig_66;
  int sig_69 = wa[8] ^ wb[8];
  int sig_70 = wa[8] & wb[8];
  int sig_71 = sig_69 & sig_68;
  int sig_72 = sig_69 ^ sig_68;
  int sig_73 = sig_70 | sig_71;
  int sig_74 = wa[9] ^ wb[9];
  int sig_75 = wa[9] & wb[9];
  int sig_76 = sig_74 & sig_73;
  int sig_77 = sig_74 ^ sig_73;
  int sig_78 = sig_75 | sig_76;
  int sig_79 = wa[10] ^ wb[10];
  int sig_80 = wa[10] & wb[10];
  int sig_81 = sig_79 & sig_78;
  int sig_82 = sig_79 ^ sig_78;
  int sig_83 = sig_80 | sig_81;
  int sig_84 = wa[11] ^ wb[11];
  int sig_85 = wa[11] & wb[11];
  int sig_86 = sig_84 & sig_83;
  int sig_87 = sig_84 ^ sig_83;
  int sig_88 = sig_85 | sig_86;
  int sig_89 = wa[12] ^ wb[12];
  int sig_90 = wa[12] & wb[12];
  int sig_91 = sig_89 & sig_88;
  int sig_92 = sig_89 ^ sig_88;
  int sig_93 = sig_90 | sig_91;
  int sig_94 = wa[13] ^ wb[13];
  int sig_95 = wa[13] & wb[13];
  int sig_96 = sig_94 & sig_93;
  int sig_97 = sig_94 ^ sig_93;
  int sig_98 = sig_95 | sig_96;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & sig_98;
  int sig_102 = sig_99 ^ sig_98;
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (sig_32 & 0x01) << 0; // default output
  y |=  (sig_37 & 0x01) << 1; // default output
  y |=  (sig_42 & 0x01) << 2; // default output
  y |=  (sig_47 & 0x01) << 3; // default output
  y |=  (sig_52 & 0x01) << 4; // default output
  y |=  (sig_57 & 0x01) << 5; // default output
  y |=  (sig_59 & 0x01) << 6; // default output
  y |=  (sig_67 & 0x01) << 7; // default output
  y |=  (sig_72 & 0x01) << 8; // default output
  y |=  (sig_77 & 0x01) << 9; // default output
  y |=  (sig_82 & 0x01) << 10; // default output
  y |=  (sig_87 & 0x01) << 11; // default output
  y |=  (sig_92 & 0x01) << 12; // default output
  y |=  (sig_97 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.00069 %
// MAE = 0.9 
// WCE% = 0.0031 %
// WCE = 4.0 
// WCRE% = 66.67 %
// EP% = 37.50 %
// MRE% = 0.0019 %
// MSE = 2.2 
// PDK45_PWR = 0.065 mW
// PDK45_AREA = 138.4 um2
// PDK45_DELAY = 1.12 ns



uint64_t evoapproxlib::evoapprox_t::add16u_1DM(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_32 = wa[0] ^ wb[0];
  int sig_33 = wa[0] & wb[0];
  int sig_34 = wa[1] | wb[1];
  int sig_37 = sig_34 | sig_33;
  int sig_39 = wa[2] ^ wb[2];
  int sig_40 = wa[2] & wb[2];
  int sig_42 = sig_39;
  int sig_43 = sig_40;
  int sig_44 = wa[3] ^ wb[3];
  int sig_45 = wa[3] & wb[3];
  int sig_46 = sig_44 & sig_43;
  int sig_47 = sig_44 ^ sig_43;
  int sig_48 = sig_45 | sig_46;
  int sig_49 = wa[4] ^ wb[4];
  int sig_50 = wa[4] & wb[4];
  int sig_51 = sig_49 & sig_48;
  int sig_52 = sig_49 ^ sig_48;
  int sig_53 = sig_50 | sig_51;
  int sig_54 = wa[5] ^ wb[5];
  int sig_55 = wa[5] & wb[5];
  int sig_56 = sig_54 & sig_53;
  int sig_57 = sig_54 ^ sig_53;
  int sig_58 = sig_55 | sig_56;
  int sig_59 = wa[6] ^ wb[6];
  int sig_60 = wa[6] & wb[6];
  int sig_61 = sig_59 & sig_58;
  int sig_62 = sig_59 ^ sig_58;
  int sig_63 = sig_60 | sig_61;
  int sig_64 = wa[7] ^ wb[7];
  int sig_65 = wa[7] & wb[7];
  int sig_66 = sig_64 & sig_63;
  int sig_67 = sig_64 ^ sig_63;
  int sig_68 = sig_65 | sig_66;
  int sig_69 = wa[8] ^ wb[8];
  int sig_70 = wa[8] & wb[8];
  int sig_71 = sig_69 & sig_68;
  int sig_72 = sig_69 ^ sig_68;
  int sig_73 = sig_70 | sig_71;
  int sig_74 = wa[9] ^ wb[9];
  int sig_75 = wa[9] & wb[9];
  int sig_76 = sig_74 & sig_73;
  int sig_77 = sig_74 ^ sig_73;
  int sig_78 = sig_75 | sig_76;
  int sig_79 = wa[10] ^ wb[10];
  int sig_80 = wa[10] & wb[10];
  int sig_81 = sig_79 & sig_78;
  int sig_82 = sig_79 ^ sig_78;
  int sig_83 = sig_80 | sig_81;
  int sig_84 = wa[11] ^ wb[11];
  int sig_85 = wa[11] & wb[11];
  int sig_86 = sig_84 & sig_83;
  int sig_87 = sig_84 ^ sig_83;
  int sig_88 = sig_85 | sig_86;
  int sig_89 = wa[12] ^ wb[12];
  int sig_90 = wa[12] & wb[12];
  int sig_91 = sig_89 & sig_88;
  int sig_92 = sig_89 ^ sig_88;
  int sig_93 = sig_90 | sig_91;
  int sig_94 = wa[13] ^ wb[13];
  int sig_95 = wa[13] & wb[13];
  int sig_96 = sig_94 & sig_93;
  int sig_97 = sig_94 ^ sig_93;
  int sig_98 = sig_95 | sig_96;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & sig_98;
  int sig_102 = sig_99 ^ sig_98;
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (sig_32 & 0x01) << 0; // default output
  y |=  (sig_37 & 0x01) << 1; // default output
  y |=  (sig_42 & 0x01) << 2; // default output
  y |=  (sig_47 & 0x01) << 3; // default output
  y |=  (sig_52 & 0x01) << 4; // default output
  y |=  (sig_57 & 0x01) << 5; // default output
  y |=  (sig_62 & 0x01) << 6; // default output
  y |=  (sig_67 & 0x01) << 7; // default output
  y |=  (sig_72 & 0x01) << 8; // default output
  y |=  (sig_77 & 0x01) << 9; // default output
  y |=  (sig_82 & 0x01) << 10; // default output
  y |=  (sig_87 & 0x01) << 11; // default output
  y |=  (sig_92 & 0x01) << 12; // default output
  y |=  (sig_97 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mse parameters
***/
// MAE% = 0.019 %
// MAE = 26 
// WCE% = 0.068 %
// WCE = 89 
// WCRE% = 6300.00 %
// EP% = 98.83 %
// MRE% = 0.054 %
// MSE = 980 
// PDK45_PWR = 0.043 mW
// PDK45_AREA = 90.6 um2
// PDK45_DELAY = 0.80 ns



uint64_t evoapproxlib::evoapprox_t::add16u_0QC(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_32 = 0;
  int sig_43 = wb[4];
  int sig_59 = wa[6] ^ wb[6];
  int sig_62 = !sig_59;
  int sig_63 = wb[6] | wa[6];
  int sig_64 = wa[7] ^ wb[7];
  int sig_65 = wa[7] & wb[7];
  int sig_66 = sig_64 & sig_63;
  int sig_67 = sig_64 ^ sig_63;
  int sig_68 = sig_65 | sig_66;
  int sig_69 = wa[8] ^ wb[8];
  int sig_70 = wa[8] & wb[8];
  int sig_71 = sig_69 & sig_68;
  int sig_72 = sig_69 ^ sig_68;
  int sig_73 = sig_70 | sig_71;
  int sig_74 = wa[9] ^ wb[9];
  int sig_75 = wa[9] & wb[9];
  int sig_76 = sig_74 & sig_73;
  int sig_77 = sig_74 ^ sig_73;
  int sig_78 = sig_75 | sig_76;
  int sig_79 = wa[10] ^ wb[10];
  int sig_80 = wa[10] & wb[10];
  int sig_81 = sig_79 & sig_78;
  int sig_82 = sig_79 ^ sig_78;
  int sig_83 = sig_80 | sig_81;
  int sig_84 = wa[11] ^ wb[11];
  int sig_85 = wa[11] & wb[11];
  int sig_86 = sig_84 & sig_83;
  int sig_87 = sig_84 ^ sig_83;
  int sig_88 = sig_85 | sig_86;
  int sig_89 = wa[12] ^ wb[12];
  int sig_90 = wa[12] & wb[12];
  int sig_91 = sig_89 & sig_88;
  int sig_92 = sig_89 ^ sig_88;
  int sig_93 = sig_90 | sig_91;
  int sig_94 = wa[13] ^ wb[13];
  int sig_95 = wa[13] & wb[13];
  int sig_96 = sig_94 & sig_93;
  int sig_97 = sig_94 ^ sig_93;
  int sig_98 = sig_95 | sig_96;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & sig_98;
  int sig_102 = sig_99 ^ sig_98;
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (wb[15] & 0x01) << 0; // default output
  y |=  (sig_80 & 0x01) << 1; // default output
  y |=  (sig_43 & 0x01) << 2; // default output
  y |=  (wa[10] & 0x01) << 3; // default output
  y |=  (wa[1] & 0x01) << 4; // default output
  y |=  (sig_32 & 0x01) << 5; // default output
  y |=  (sig_62 & 0x01) << 6; // default output
  y |=  (sig_67 & 0x01) << 7; // default output
  y |=  (sig_72 & 0x01) << 8; // default output
  y |=  (sig_77 & 0x01) << 9; // default output
  y |=  (sig_82 & 0x01) << 10; // default output
  y |=  (sig_87 & 0x01) << 11; // default output
  y |=  (sig_92 & 0x01) << 12; // default output
  y |=  (sig_97 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.05 %
// MAE = 65 
// WCE% = 0.13 %
// WCE = 175 
// WCRE% = 100.00 %
// EP% = 99.71 %
// MRE% = 0.14 %
// MSE = 5632 
// PDK45_PWR = 0.036 mW
// PDK45_AREA = 73.7 um2
// PDK45_DELAY = 0.68 ns



uint64_t evoapproxlib::evoapprox_t::add16u_09P(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_69 = wa[8] ^ wb[8];
  int sig_70 = wa[8] & wb[8];
  int sig_71 = sig_69 & wa[7];
  int sig_72 = sig_69 ^ wa[7];
  int sig_73 = sig_70 | sig_71;
  int sig_74 = wa[9] ^ wb[9];
  int sig_75 = wa[9] & wb[9];
  int sig_76 = sig_74 & sig_73;
  int sig_77 = sig_74 ^ sig_73;
  int sig_78 = sig_75 | sig_76;
  int sig_79 = wa[10] ^ wb[10];
  int sig_80 = wa[10] & wb[10];
  int sig_81 = sig_79 & sig_78;
  int sig_82 = sig_79 ^ sig_78;
  int sig_83 = sig_80 | sig_81;
  int sig_84 = wa[11] ^ wb[11];
  int sig_85 = wa[11] & wb[11];
  int sig_86 = sig_84 & sig_83;
  int sig_87 = sig_84 ^ sig_83;
  int sig_88 = sig_85 | sig_86;
  int sig_89 = wa[12] ^ wb[12];
  int sig_90 = wa[12] & wb[12];
  int sig_91 = sig_89 & sig_88;
  int sig_92 = sig_89 ^ sig_88;
  int sig_93 = sig_90 | sig_91;
  int sig_94 = wa[13] ^ wb[13];
  int sig_95 = wa[13] & wb[13];
  int sig_96 = sig_94 & sig_93;
  int sig_97 = sig_94 ^ sig_93;
  int sig_98 = sig_95 | sig_96;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & sig_98;
  int sig_102 = sig_99 ^ sig_98;
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (sig_75 & 0x01) << 0; // default output
  y |=  (wb[6] & 0x01) << 1; // default output
  y |=  (wb[7] & 0x01) << 2; // default output
  y |=  (wb[8] & 0x01) << 3; // default output
  y |=  (wa[6] & 0x01) << 4; // default output
  y |=  (wb[12] & 0x01) << 5; // default output
  y |=  (wb[6] & 0x01) << 6; // default output
  y |=  (wb[7] & 0x01) << 7; // default output
  y |=  (sig_72 & 0x01) << 8; // default output
  y |=  (sig_77 & 0x01) << 9; // default output
  y |=  (sig_82 & 0x01) << 10; // default output
  y |=  (sig_87 & 0x01) << 11; // default output
  y |=  (sig_92 & 0x01) << 12; // default output
  y |=  (sig_97 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.0015 %
// MAE = 2.0 
// WCE% = 0.0031 %
// WCE = 4.0 
// WCRE% = 100.00 %
// EP% = 93.75 %
// MRE% = 0.0042 %
// MSE = 5.0 
// PDK45_PWR = 0.060 mW
// PDK45_AREA = 115.9 um2
// PDK45_DELAY = 1.08 ns



uint64_t evoapproxlib::evoapprox_t::add16u_0RN(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_44 = wa[3] ^ wb[3];
  int sig_45 = wa[3] & wb[3];
  int sig_46 = sig_44 & wa[2];
  int sig_47 = sig_44 ^ wa[2];
  int sig_48 = sig_45 | sig_46;
  int sig_49 = wa[4] ^ wb[4];
  int sig_50 = wa[4] & wb[4];
  int sig_51 = sig_49 & sig_48;
  int sig_52 = sig_49 ^ sig_48;
  int sig_53 = sig_50 | sig_51;
  int sig_54 = wa[5] ^ wb[5];
  int sig_55 = wa[5] & wb[5];
  int sig_56 = sig_54 & sig_53;
  int sig_57 = sig_54 ^ sig_53;
  int sig_58 = sig_55 | sig_56;
  int sig_59 = wa[6] ^ wb[6];
  int sig_60 = wa[6] & wb[6];
  int sig_61 = sig_59 & sig_58;
  int sig_62 = sig_59 ^ sig_58;
  int sig_63 = sig_60 | sig_61;
  int sig_64 = wa[7] ^ wb[7];
  int sig_65 = wa[7] & wb[7];
  int sig_66 = sig_64 & sig_63;
  int sig_67 = sig_64 ^ sig_63;
  int sig_68 = sig_65 | sig_66;
  int sig_69 = wa[8] ^ wb[8];
  int sig_70 = wa[8] & wb[8];
  int sig_71 = sig_69 & sig_68;
  int sig_72 = sig_69 ^ sig_68;
  int sig_73 = sig_70 | sig_71;
  int sig_74 = wa[9] ^ wb[9];
  int sig_75 = wa[9] & wb[9];
  int sig_76 = sig_74 & sig_73;
  int sig_77 = sig_74 ^ sig_73;
  int sig_78 = sig_75 | sig_76;
  int sig_79 = wa[10] ^ wb[10];
  int sig_80 = wa[10] & wb[10];
  int sig_81 = sig_79 & sig_78;
  int sig_82 = sig_79 ^ sig_78;
  int sig_83 = sig_80 | sig_81;
  int sig_84 = wa[11] ^ wb[11];
  int sig_85 = wa[11] & wb[11];
  int sig_86 = sig_84 & sig_83;
  int sig_87 = sig_84 ^ sig_83;
  int sig_88 = sig_85 | sig_86;
  int sig_89 = wa[12] ^ wb[12];
  int sig_90 = wa[12] & wb[12];
  int sig_91 = sig_89 & sig_88;
  int sig_92 = sig_89 ^ sig_88;
  int sig_93 = sig_90 | sig_91;
  int sig_94 = wa[13] ^ wb[13];
  int sig_95 = wa[13] & wb[13];
  int sig_96 = sig_94 & sig_93;
  int sig_97 = sig_94 ^ sig_93;
  int sig_98 = sig_95 | sig_96;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & sig_98;
  int sig_102 = sig_99 ^ sig_98;
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (wb[1] & 0x01) << 0; // default output
  y |=  (wa[1] & 0x01) << 1; // default output
  y |=  (wb[2] & 0x01) << 2; // default output
  y |=  (sig_47 & 0x01) << 3; // default output
  y |=  (sig_52 & 0x01) << 4; // default output
  y |=  (sig_57 & 0x01) << 5; // default output
  y |=  (sig_62 & 0x01) << 6; // default output
  y |=  (sig_67 & 0x01) << 7; // default output
  y |=  (sig_72 & 0x01) << 8; // default output
  y |=  (sig_77 & 0x01) << 9; // default output
  y |=  (sig_82 & 0x01) << 10; // default output
  y |=  (sig_87 & 0x01) << 11; // default output
  y |=  (sig_92 & 0x01) << 12; // default output
  y |=  (sig_97 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 0.0071 %
// MAE = 9.3 
// WCE% = 0.021 %
// WCE = 27 
// WCRE% = 100.00 %
// EP% = 96.89 %
// MRE% = 0.02 %
// MSE = 125 
// PDK45_PWR = 0.050 mW
// PDK45_AREA = 98.1 um2
// PDK45_DELAY = 0.92 ns



uint64_t evoapproxlib::evoapprox_t::add16u_0FJ(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_43 = wb[2];
  int sig_54 = wa[5] ^ wb[5];
  int sig_55 = wa[5] & wb[5];
  int sig_56 = sig_54 & wa[4];
  int sig_57 = sig_54 ^ wa[4];
  int sig_58 = sig_55 | sig_56;
  int sig_59 = wa[6] ^ wb[6];
  int sig_60 = wa[6] & wb[6];
  int sig_61 = sig_59 & sig_58;
  int sig_62 = sig_59 ^ sig_58;
  int sig_63 = sig_60 | sig_61;
  int sig_64 = wa[7] ^ wb[7];
  int sig_65 = wa[7] & wb[7];
  int sig_66 = sig_64 & sig_63;
  int sig_67 = sig_64 ^ sig_63;
  int sig_68 = sig_65 | sig_66;
  int sig_69 = wa[8] ^ wb[8];
  int sig_70 = wa[8] & wb[8];
  int sig_71 = sig_69 & sig_68;
  int sig_72 = sig_69 ^ sig_68;
  int sig_73 = sig_70 | sig_71;
  int sig_74 = wa[9] ^ wb[9];
  int sig_75 = wa[9] & wb[9];
  int sig_76 = sig_74 & sig_73;
  int sig_77 = sig_74 ^ sig_73;
  int sig_78 = sig_75 | sig_76;
  int sig_79 = wa[10] ^ wb[10];
  int sig_80 = wa[10] & wb[10];
  int sig_81 = sig_79 & sig_78;
  int sig_82 = sig_79 ^ sig_78;
  int sig_83 = sig_80 | sig_81;
  int sig_84 = wa[11] ^ wb[11];
  int sig_85 = wa[11] & wb[11];
  int sig_86 = sig_84 & sig_83;
  int sig_87 = sig_84 ^ sig_83;
  int sig_88 = sig_85 | sig_86;
  int sig_89 = wa[12] ^ wb[12];
  int sig_90 = wa[12] & wb[12];
  int sig_91 = sig_89 & sig_88;
  int sig_92 = sig_89 ^ sig_88;
  int sig_93 = sig_90 | sig_91;
  int sig_94 = wa[13] ^ wb[13];
  int sig_95 = wa[13] & wb[13];
  int sig_96 = sig_94 & sig_93;
  int sig_97 = sig_94 ^ sig_93;
  int sig_98 = sig_95 | sig_96;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & sig_98;
  int sig_102 = sig_99 ^ sig_98;
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (sig_103 & 0x01) << 0; // default output
  y |=  (sig_93 & 0x01) << 1; // default output
  y |=  (sig_43 & 0x01) << 2; // default output
  y |=  (sig_88 & 0x01) << 3; // default output
  y |=  (wb[4] & 0x01) << 4; // default output
  y |=  (sig_57 & 0x01) << 5; // default output
  y |=  (sig_62 & 0x01) << 6; // default output
  y |=  (sig_67 & 0x01) << 7; // default output
  y |=  (sig_72 & 0x01) << 8; // default output
  y |=  (sig_77 & 0x01) << 9; // default output
  y |=  (sig_82 & 0x01) << 10; // default output
  y |=  (sig_87 & 0x01) << 11; // default output
  y |=  (sig_92 & 0x01) << 12; // default output
  y |=  (sig_97 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 0.0018 %
// MAE = 2.4 
// WCE% = 0.0053 %
// WCE = 7.0 
// WCRE% = 400.00 %
// EP% = 87.50 %
// MRE% = 0.005 %
// MSE = 8.5 
// PDK45_PWR = 0.057 mW
// PDK45_AREA = 115.0 um2
// PDK45_DELAY = 1.04 ns



uint64_t evoapproxlib::evoapprox_t::add16u_0EM(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_32 = ~((int)0);
  int sig_37 = ~((int)0);
  int sig_41 = wb[3] ^ wa[3];
  int sig_45 = wa[3] & wb[3];
  int sig_48 = sig_45;
  int sig_49 = wa[4] ^ wb[4];
  int sig_50 = wa[4] & wb[4];
  int sig_51 = sig_49 & sig_48;
  int sig_52 = sig_49 ^ sig_48;
  int sig_53 = sig_50 | sig_51;
  int sig_54 = wa[5] ^ wb[5];
  int sig_55 = wa[5] & wb[5];
  int sig_56 = sig_54 & sig_53;
  int sig_57 = sig_54 ^ sig_53;
  int sig_58 = sig_55 | sig_56;
  int sig_59 = wa[6] ^ wb[6];
  int sig_60 = wa[6] & wb[6];
  int sig_61 = sig_59 & sig_58;
  int sig_62 = sig_59 ^ sig_58;
  int sig_63 = sig_60 | sig_61;
  int sig_64 = wa[7] ^ wb[7];
  int sig_65 = wa[7] & wb[7];
  int sig_66 = sig_64 & sig_63;
  int sig_67 = sig_64 ^ sig_63;
  int sig_68 = sig_65 | sig_66;
  int sig_69 = wa[8] ^ wb[8];
  int sig_70 = wa[8] & wb[8];
  int sig_71 = sig_69 & sig_68;
  int sig_72 = sig_69 ^ sig_68;
  int sig_73 = sig_70 | sig_71;
  int sig_74 = wa[9] ^ wb[9];
  int sig_75 = wa[9] & wb[9];
  int sig_76 = sig_74 & sig_73;
  int sig_77 = sig_74 ^ sig_73;
  int sig_78 = sig_75 | sig_76;
  int sig_79 = wa[10] ^ wb[10];
  int sig_80 = wa[10] & wb[10];
  int sig_81 = sig_79 & sig_78;
  int sig_82 = sig_79 ^ sig_78;
  int sig_83 = sig_80 | sig_81;
  int sig_84 = wa[11] ^ wb[11];
  int sig_85 = wa[11] & wb[11];
  int sig_86 = sig_84 & sig_83;
  int sig_87 = sig_84 ^ sig_83;
  int sig_88 = sig_85 | sig_86;
  int sig_89 = wa[12] ^ wb[12];
  int sig_90 = wa[12] & wb[12];
  int sig_91 = sig_89 & sig_88;
  int sig_92 = sig_89 ^ sig_88;
  int sig_93 = sig_90 | sig_91;
  int sig_94 = wa[13] ^ wb[13];
  int sig_95 = wa[13] & wb[13];
  int sig_96 = sig_94 & sig_93;
  int sig_97 = sig_94 ^ sig_93;
  int sig_98 = sig_95 | sig_96;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & sig_98;
  int sig_102 = sig_99 ^ sig_98;
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (sig_32 & 0x01) << 0; // default output
  y |=  (wa[2] & 0x01) << 1; // default output
  y |=  (sig_37 & 0x01) << 2; // default output
  y |=  (sig_41 & 0x01) << 3; // default output
  y |=  (sig_52 & 0x01) << 4; // default output
  y |=  (sig_57 & 0x01) << 5; // default output
  y |=  (sig_62 & 0x01) << 6; // default output
  y |=  (sig_67 & 0x01) << 7; // default output
  y |=  (sig_72 & 0x01) << 8; // default output
  y |=  (sig_77 & 0x01) << 9; // default output
  y |=  (sig_82 & 0x01) << 10; // default output
  y |=  (sig_87 & 0x01) << 11; // default output
  y |=  (sig_92 & 0x01) << 12; // default output
  y |=  (sig_97 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 4.69 %
// MAE = 6144 
// WCE% = 9.49 %
// WCE = 12444 
// WCRE% = 9500.00 %
// EP% = 100.00 %
// MRE% = 12.64 %
// MSE = 43382.861e3 
// PDK45_PWR = 0.0079 mW
// PDK45_AREA = 20.2 um2
// PDK45_DELAY = 0.19 ns



uint64_t evoapproxlib::evoapprox_t::add16u_0KC(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_34 = wa[13];
  int sig_62 = 0;
  int sig_65 = ~((int)0);
  int sig_72 = wa[10];
  int sig_80 = ~((int)0);
  int sig_90 = wa[12];
  int sig_91 = wb[13];
  int sig_98 = 0;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & wb[12];
  int sig_102 = sig_99 ^ wb[12];
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (sig_62 & 0x01) << 0; // default output
  y |=  (sig_108 & 0x01) << 1; // default output
  y |=  (wb[1] & 0x01) << 2; // default output
  y |=  (sig_100 & 0x01) << 3; // default output
  y |=  (wb[1] & 0x01) << 4; // default output
  y |=  (sig_65 & 0x01) << 5; // default output
  y |=  (sig_80 & 0x01) << 6; // default output
  y |=  (sig_98 & 0x01) << 7; // default output
  y |=  (sig_72 & 0x01) << 8; // default output
  y |=  (sig_91 & 0x01) << 9; // default output
  y |=  (sig_90 & 0x01) << 10; // default output
  y |=  (wb[13] & 0x01) << 11; // default output
  y |=  (wb[13] & 0x01) << 12; // default output
  y |=  (sig_34 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 0.021 %
// MAE = 27 
// WCE% = 0.079 %
// WCE = 103 
// WCRE% = 6300.00 %
// EP% = 98.74 %
// MRE% = 0.056 %
// MSE = 1136 
// PDK45_PWR = 0.043 mW
// PDK45_AREA = 90.6 um2
// PDK45_DELAY = 0.80 ns



uint64_t evoapproxlib::evoapprox_t::add16u_073(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_35 = 0;
  int sig_57 = wa[11];
  int sig_59 = wa[6] ^ wb[6];
  int sig_60 = wa[6] | wb[6];
  int sig_62 = !sig_59;
  int sig_63 = sig_60;
  int sig_64 = wa[7] ^ wb[7];
  int sig_65 = wa[7] & wb[7];
  int sig_66 = sig_64 & sig_63;
  int sig_67 = sig_64 ^ sig_63;
  int sig_68 = sig_65 | sig_66;
  int sig_69 = wa[8] ^ wb[8];
  int sig_70 = wa[8] & wb[8];
  int sig_71 = sig_69 & sig_68;
  int sig_72 = sig_69 ^ sig_68;
  int sig_73 = sig_70 | sig_71;
  int sig_74 = wa[9] ^ wb[9];
  int sig_75 = wa[9] & wb[9];
  int sig_76 = sig_74 & sig_73;
  int sig_77 = sig_74 ^ sig_73;
  int sig_78 = sig_75 | sig_76;
  int sig_79 = wa[10] ^ wb[10];
  int sig_80 = wa[10] & wb[10];
  int sig_81 = sig_79 & sig_78;
  int sig_82 = sig_79 ^ sig_78;
  int sig_83 = sig_80 | sig_81;
  int sig_84 = wa[11] ^ wb[11];
  int sig_85 = wa[11] & wb[11];
  int sig_86 = sig_84 & sig_83;
  int sig_87 = sig_84 ^ sig_83;
  int sig_88 = sig_85 | sig_86;
  int sig_89 = wa[12] ^ wb[12];
  int sig_90 = wa[12] & wb[12];
  int sig_91 = sig_89 & sig_88;
  int sig_92 = sig_89 ^ sig_88;
  int sig_93 = sig_90 | sig_91;
  int sig_94 = wa[13] ^ wb[13];
  int sig_95 = wa[13] & wb[13];
  int sig_96 = sig_94 & sig_93;
  int sig_97 = sig_94 ^ sig_93;
  int sig_98 = sig_95 | sig_96;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & sig_98;
  int sig_102 = sig_99 ^ sig_98;
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (sig_102 & 0x01) << 0; // default output
  y |=  (wb[9] & 0x01) << 1; // default output
  y |=  (sig_57 & 0x01) << 2; // default output
  y |=  (wa[4] & 0x01) << 3; // default output
  y |=  (sig_35 & 0x01) << 4; // default output
  y |=  (sig_85 & 0x01) << 5; // default output
  y |=  (sig_62 & 0x01) << 6; // default output
  y |=  (sig_67 & 0x01) << 7; // default output
  y |=  (sig_72 & 0x01) << 8; // default output
  y |=  (sig_77 & 0x01) << 9; // default output
  y |=  (sig_82 & 0x01) << 10; // default output
  y |=  (sig_87 & 0x01) << 11; // default output
  y |=  (sig_92 & 0x01) << 12; // default output
  y |=  (sig_97 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 9.90 %
// MAE = 12976 
// WCE% = 34.18 %
// WCE = 44805 
// WCRE% = 6300.00 %
// EP% = 100.00 %
// MRE% = 22.35 %
// MSE = 25358.103e4 
// PDK45_PWR = 0.0041 mW
// PDK45_AREA = 18.3 um2
// PDK45_DELAY = 0.20 ns



uint64_t evoapproxlib::evoapprox_t::add16u_0MH(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_52 = wb[11];
  int sig_72 = 0;
  int sig_92 = ~((int)0);
  int sig_93 = 0;
  int sig_103 = wa[14];
  int sig_104 = wa[15] | wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (wb[2] & 0x01) << 0; // default output
  y |=  (sig_93 & 0x01) << 1; // default output
  y |=  (wa[8] & 0x01) << 2; // default output
  y |=  (wa[7] & 0x01) << 3; // default output
  y |=  (sig_52 & 0x01) << 4; // default output
  y |=  (sig_106 & 0x01) << 5; // default output
  y |=  (sig_92 & 0x01) << 6; // default output
  y |=  (sig_52 & 0x01) << 7; // default output
  y |=  (wb[11] & 0x01) << 8; // default output
  y |=  (wb[13] & 0x01) << 9; // default output
  y |=  (wa[8] & 0x01) << 10; // default output
  y |=  (wb[13] & 0x01) << 11; // default output
  y |=  (sig_72 & 0x01) << 12; // default output
  y |=  (wb[10] & 0x01) << 13; // default output
  y |=  (wb[14] & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 0.057 %
// MAE = 75 
// WCE% = 0.19 %
// WCE = 251 
// WCRE% = 6300.00 %
// EP% = 99.61 %
// MRE% = 0.16 %
// MSE = 8209 
// PDK45_PWR = 0.036 mW
// PDK45_AREA = 71.3 um2
// PDK45_DELAY = 0.68 ns



uint64_t evoapproxlib::evoapprox_t::add16u_0M0(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_40 = ~((int)0);
  int sig_69 = wa[8] ^ wb[8];
  int sig_70 = wa[8] & wb[8];
  int sig_71 = sig_69 & wb[7];
  int sig_72 = sig_69 ^ wb[7];
  int sig_73 = sig_70 | sig_71;
  int sig_74 = wa[9] ^ wb[9];
  int sig_75 = wa[9] & wb[9];
  int sig_76 = sig_74 & sig_73;
  int sig_77 = sig_74 ^ sig_73;
  int sig_78 = sig_75 | sig_76;
  int sig_79 = wa[10] ^ wb[10];
  int sig_80 = wa[10] & wb[10];
  int sig_81 = sig_79 & sig_78;
  int sig_82 = sig_79 ^ sig_78;
  int sig_83 = sig_80 | sig_81;
  int sig_84 = wa[11] ^ wb[11];
  int sig_85 = wa[11] & wb[11];
  int sig_86 = sig_84 & sig_83;
  int sig_87 = sig_84 ^ sig_83;
  int sig_88 = sig_85 | sig_86;
  int sig_89 = wa[12] ^ wb[12];
  int sig_90 = wa[12] & wb[12];
  int sig_91 = sig_89 & sig_88;
  int sig_92 = sig_89 ^ sig_88;
  int sig_93 = sig_90 | sig_91;
  int sig_94 = wa[13] ^ wb[13];
  int sig_95 = wa[13] & wb[13];
  int sig_96 = sig_94 & sig_93;
  int sig_97 = sig_94 ^ sig_93;
  int sig_98 = sig_95 | sig_96;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & sig_98;
  int sig_102 = sig_99 ^ sig_98;
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (wb[11] & 0x01) << 0; // default output
  y |=  (wa[13] & 0x01) << 1; // default output
  y |=  (sig_88 & 0x01) << 2; // default output
  y |=  (wb[13] & 0x01) << 3; // default output
  y |=  (wb[2] & 0x01) << 4; // default output
  y |=  (sig_107 & 0x01) << 5; // default output
  y |=  (sig_40 & 0x01) << 6; // default output
  y |=  (wa[7] & 0x01) << 7; // default output
  y |=  (sig_72 & 0x01) << 8; // default output
  y |=  (sig_77 & 0x01) << 9; // default output
  y |=  (sig_82 & 0x01) << 10; // default output
  y |=  (sig_87 & 0x01) << 11; // default output
  y |=  (sig_92 & 0x01) << 12; // default output
  y |=  (sig_97 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.46 %
// MAE = 601 
// WCE% = 1.54 %
// WCE = 2013 
// WCRE% = 3100.00 %
// EP% = 99.95 %
// MRE% = 1.28 %
// MSE = 531274 
// PDK45_PWR = 0.022 mW
// PDK45_AREA = 46.9 um2
// PDK45_DELAY = 0.43 ns



uint64_t evoapproxlib::evoapprox_t::add16u_0B4(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_84 = wa[11] ^ wb[11];
  int sig_85 = wa[11] & wb[11];
  int sig_86 = sig_84 & wa[10];
  int sig_87 = sig_84 ^ wa[10];
  int sig_88 = sig_85 | sig_86;
  int sig_89 = wa[12] ^ wb[12];
  int sig_90 = wa[12] & wb[12];
  int sig_91 = sig_89 & sig_88;
  int sig_92 = sig_89 ^ sig_88;
  int sig_93 = sig_90 | sig_91;
  int sig_94 = wa[13] ^ wb[13];
  int sig_95 = wa[13] & wb[13];
  int sig_96 = sig_94 & sig_93;
  int sig_97 = sig_94 ^ sig_93;
  int sig_98 = sig_95 | sig_96;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & sig_98;
  int sig_102 = sig_99 ^ sig_98;
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (wb[11] & 0x01) << 0; // default output
  y |=  (wb[15] & 0x01) << 1; // default output
  y |=  (wb[13] & 0x01) << 2; // default output
  y |=  (sig_108 & 0x01) << 3; // default output
  y |=  (wb[12] & 0x01) << 4; // default output
  y |=  (sig_90 & 0x01) << 5; // default output
  y |=  (wa[1] & 0x01) << 6; // default output
  y |=  (wb[5] & 0x01) << 7; // default output
  y |=  (wa[15] & 0x01) << 8; // default output
  y |=  (wb[12] & 0x01) << 9; // default output
  y |=  (wb[10] & 0x01) << 10; // default output
  y |=  (sig_87 & 0x01) << 11; // default output
  y |=  (sig_92 & 0x01) << 12; // default output
  y |=  (sig_97 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 2.01 %
// MAE = 2631 
// WCE% = 6.46 %
// WCE = 8465 
// WCRE% = 1600.00 %
// EP% = 89.45 %
// MRE% = 5.41 %
// MSE = 16774.987e3 
// PDK45_PWR = 0.052 mW
// PDK45_AREA = 122.0 um2
// PDK45_DELAY = 0.32 ns



uint64_t evoapproxlib::evoapprox_t::add16u_1X9(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_32 = wa[0] | wb[0];
  int sig_33 = ~((int)0);
  int sig_34 = wa[1] ^ wb[1];
  int sig_35 = wa[1] & wb[1];
  int sig_36 = 0;
  int sig_37 = sig_34;
  int sig_38 = sig_35;
  int sig_39 = wa[2] ^ wb[2];
  int sig_40 = wa[2] & wb[2];
  int sig_41 = sig_39 & sig_38;
  int sig_42 = sig_39 ^ sig_38;
  int sig_43 = sig_40 | sig_41;
  int sig_44 = wa[3] ^ wb[3];
  int sig_47 = sig_44 ^ sig_43;
  int sig_50 = wa[4] & wb[4];
  int sig_53 = sig_50;
  int sig_54 = wa[5] ^ wb[5];
  int sig_55 = wa[5] & wb[5];
  int sig_56 = sig_54 & sig_53;
  int sig_57 = sig_54 ^ sig_53;
  int sig_58 = sig_55 | sig_56;
  int sig_59 = wa[6] ^ wb[6];
  int sig_60 = wa[6] & wb[6];
  int sig_61 = sig_59 & sig_58;
  int sig_62 = sig_59 ^ sig_58;
  int sig_63 = sig_60 | sig_61;
  int sig_64 = wa[7] ^ wb[7];
  int sig_67 = sig_64 ^ sig_63;
  int sig_73 = wb[8] | wa[8];
  int sig_74 = wa[9] ^ wb[9];
  int sig_75 = wa[9] & wb[9];
  int sig_76 = sig_74 & sig_73;
  int sig_77 = sig_74 ^ sig_73;
  int sig_78 = sig_75 | sig_76;
  int sig_79 = wa[10] ^ wb[10];
  int sig_80 = wa[10] & wb[10];
  int sig_81 = sig_79 & sig_78;
  int sig_82 = sig_79 ^ sig_78;
  int sig_83 = sig_80 | sig_81;
  int sig_84 = wa[11] ^ wb[11];
  int sig_87 = sig_84 ^ sig_83;
  int sig_89 = wa[12] ^ wb[12];
  int sig_92 = sig_89 ^ wa[11];
  int sig_94 = wa[13] ^ wb[13];
  int sig_95 = wa[13] & wb[13];
  int sig_96 = sig_94 & wa[12];
  int sig_97 = sig_94 ^ wa[12];
  int sig_98 = sig_95 | sig_96;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & sig_98;
  int sig_102 = sig_99 ^ sig_98;
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (sig_32 & 0x01) << 0; // default output
  y |=  (sig_37 & 0x01) << 1; // default output
  y |=  (sig_42 & 0x01) << 2; // default output
  y |=  (sig_47 & 0x01) << 3; // default output
  y |=  (sig_33 & 0x01) << 4; // default output
  y |=  (sig_57 & 0x01) << 5; // default output
  y |=  (sig_62 & 0x01) << 6; // default output
  y |=  (sig_67 & 0x01) << 7; // default output
  y |=  (sig_36 & 0x01) << 8; // default output
  y |=  (sig_77 & 0x01) << 9; // default output
  y |=  (sig_82 & 0x01) << 10; // default output
  y |=  (sig_87 & 0x01) << 11; // default output
  y |=  (sig_92 & 0x01) << 12; // default output
  y |=  (sig_97 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 0.91 %
// MAE = 1187 
// WCE% = 2.90 %
// WCE = 3803 
// WCRE% = 1503.12 %
// EP% = 99.98 %
// MRE% = 2.49 %
// MSE = 20515.545e2 
// PDK45_PWR = 0.018 mW
// PDK45_AREA = 45.5 um2
// PDK45_DELAY = 0.35 ns



uint64_t evoapproxlib::evoapprox_t::add16u_0GK(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_89 = wa[12] ^ wb[12];
  int sig_90 = wa[12] & wb[12];
  int sig_91 = sig_89 & wb[11];
  int sig_92 = sig_89 ^ wb[11];
  int sig_93 = sig_90 | sig_91;
  int sig_94 = wa[13] ^ wb[13];
  int sig_95 = wa[13] & wb[13];
  int sig_96 = sig_94 & sig_93;
  int sig_97 = sig_94 ^ sig_93;
  int sig_98 = sig_95 | sig_96;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & sig_98;
  int sig_102 = sig_99 ^ sig_98;
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (wb[13] & 0x01) << 0; // default output
  y |=  (wa[6] & 0x01) << 1; // default output
  y |=  (wb[7] & 0x01) << 2; // default output
  y |=  (sig_106 & 0x01) << 3; // default output
  y |=  (wb[12] & 0x01) << 4; // default output
  y |=  (wa[10] & 0x01) << 5; // default output
  y |=  (sig_104 & 0x01) << 6; // default output
  y |=  (wb[9] & 0x01) << 7; // default output
  y |=  (wb[6] & 0x01) << 8; // default output
  y |=  (sig_106 & 0x01) << 9; // default output
  y |=  (wa[6] & 0x01) << 10; // default output
  y |=  (wa[11] & 0x01) << 11; // default output
  y |=  (sig_92 & 0x01) << 12; // default output
  y |=  (sig_97 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 3.52 %
// MAE = 4619 
// WCE% = 9.74 %
// WCE = 12763 
// WCRE% = 700.20 %
// EP% = 99.99 %
// MRE% = 9.54 %
// MSE = 30582.328e3 
// PDK45_PWR = 0.011 mW
// PDK45_AREA = 31.9 um2
// PDK45_DELAY = 0.27 ns



uint64_t evoapproxlib::evoapprox_t::add16u_02E(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_54 = wa[3];
  int sig_74 = 0;
  int sig_95 = wa[13] | wb[13];
  int sig_98 = sig_95;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & sig_98;
  int sig_102 = sig_99 ^ sig_98;
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (wa[9] & 0x01) << 0; // default output
  y |=  (sig_107 & 0x01) << 1; // default output
  y |=  (wa[7] & 0x01) << 2; // default output
  y |=  (wa[6] & 0x01) << 3; // default output
  y |=  (wb[12] & 0x01) << 4; // default output
  y |=  (sig_98 & 0x01) << 5; // default output
  y |=  (sig_54 & 0x01) << 6; // default output
  y |=  (sig_101 & 0x01) << 7; // default output
  y |=  (sig_98 & 0x01) << 8; // default output
  y |=  (wa[15] & 0x01) << 9; // default output
  y |=  (wb[10] & 0x01) << 10; // default output
  y |=  (wb[11] & 0x01) << 11; // default output
  y |=  (wa[9] & 0x01) << 12; // default output
  y |=  (sig_74 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.0048 %
// MAE = 6.3 
// WCE% = 0.014 %
// WCE = 19 
// WCRE% = 1500.00 %
// EP% = 95.70 %
// MRE% = 0.013 %
// MSE = 60 
// PDK45_PWR = 0.052 mW
// PDK45_AREA = 106.1 um2
// PDK45_DELAY = 0.96 ns



uint64_t evoapproxlib::evoapprox_t::add16u_08F(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_47 = 0;
  int sig_49 = wa[4] ^ wb[4];
  int sig_50 = wa[4] | wb[4];
  int sig_51 = wb[5] & wb[4];
  int sig_52 = !sig_49;
  int sig_53 = sig_50 | sig_51;
  int sig_54 = wa[5] ^ wb[5];
  int sig_55 = wa[5] & wb[5];
  int sig_56 = sig_54 & sig_53;
  int sig_57 = sig_54 ^ sig_53;
  int sig_58 = sig_55 | sig_56;
  int sig_59 = wa[6] ^ wb[6];
  int sig_60 = wa[6] & wb[6];
  int sig_61 = sig_59 & sig_58;
  int sig_62 = sig_59 ^ sig_58;
  int sig_63 = sig_60 | sig_61;
  int sig_64 = wa[7] ^ wb[7];
  int sig_65 = wa[7] & wb[7];
  int sig_66 = sig_64 & sig_63;
  int sig_67 = sig_64 ^ sig_63;
  int sig_68 = sig_65 | sig_66;
  int sig_69 = wa[8] ^ wb[8];
  int sig_70 = wa[8] & wb[8];
  int sig_71 = sig_69 & sig_68;
  int sig_72 = sig_69 ^ sig_68;
  int sig_73 = sig_70 | sig_71;
  int sig_74 = wa[9] ^ wb[9];
  int sig_75 = wa[9] & wb[9];
  int sig_76 = sig_74 & sig_73;
  int sig_77 = sig_74 ^ sig_73;
  int sig_78 = sig_75 | sig_76;
  int sig_79 = wa[10] ^ wb[10];
  int sig_80 = wa[10] & wb[10];
  int sig_81 = sig_79 & sig_78;
  int sig_82 = sig_79 ^ sig_78;
  int sig_83 = sig_80 | sig_81;
  int sig_84 = wa[11] ^ wb[11];
  int sig_85 = wa[11] & wb[11];
  int sig_86 = sig_84 & sig_83;
  int sig_87 = sig_84 ^ sig_83;
  int sig_88 = sig_85 | sig_86;
  int sig_89 = wa[12] ^ wb[12];
  int sig_90 = wa[12] & wb[12];
  int sig_91 = sig_89 & sig_88;
  int sig_92 = sig_89 ^ sig_88;
  int sig_93 = sig_90 | sig_91;
  int sig_94 = wa[13] ^ wb[13];
  int sig_95 = wa[13] & wb[13];
  int sig_96 = sig_94 & sig_93;
  int sig_97 = sig_94 ^ sig_93;
  int sig_98 = sig_95 | sig_96;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & sig_98;
  int sig_102 = sig_99 ^ sig_98;
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (sig_97 & 0x01) << 0; // default output
  y |=  (wb[15] & 0x01) << 1; // default output
  y |=  (wa[2] & 0x01) << 2; // default output
  y |=  (sig_47 & 0x01) << 3; // default output
  y |=  (sig_52 & 0x01) << 4; // default output
  y |=  (sig_57 & 0x01) << 5; // default output
  y |=  (sig_62 & 0x01) << 6; // default output
  y |=  (sig_67 & 0x01) << 7; // default output
  y |=  (sig_72 & 0x01) << 8; // default output
  y |=  (sig_77 & 0x01) << 9; // default output
  y |=  (sig_82 & 0x01) << 10; // default output
  y |=  (sig_87 & 0x01) << 11; // default output
  y |=  (sig_92 & 0x01) << 12; // default output
  y |=  (sig_97 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 0.002 %
// MAE = 2.6 
// WCE% = 0.0061 %
// WCE = 8.0 
// WCRE% = 300.00 %
// EP% = 88.28 %
// MRE% = 0.0054 %
// MSE = 10 
// PDK45_PWR = 0.057 mW
// PDK45_AREA = 115.0 um2
// PDK45_DELAY = 1.04 ns



uint64_t evoapproxlib::evoapprox_t::add16u_0NK(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_35 = wb[3] ^ wa[3];
  int sig_45 = wa[3] & wb[3];
  int sig_47 = ~((int)0);
  int sig_48 = sig_45;
  int sig_49 = wa[4] ^ wb[4];
  int sig_50 = wa[4] & wb[4];
  int sig_51 = sig_49 & sig_48;
  int sig_52 = sig_49 ^ sig_48;
  int sig_53 = sig_50 | sig_51;
  int sig_54 = wa[5] ^ wb[5];
  int sig_55 = wa[5] & wb[5];
  int sig_56 = sig_54 & sig_53;
  int sig_57 = sig_54 ^ sig_53;
  int sig_58 = sig_55 | sig_56;
  int sig_59 = wa[6] ^ wb[6];
  int sig_60 = wa[6] & wb[6];
  int sig_61 = sig_59 & sig_58;
  int sig_62 = sig_59 ^ sig_58;
  int sig_63 = sig_60 | sig_61;
  int sig_64 = wa[7] ^ wb[7];
  int sig_65 = wa[7] & wb[7];
  int sig_66 = sig_64 & sig_63;
  int sig_67 = sig_64 ^ sig_63;
  int sig_68 = sig_65 | sig_66;
  int sig_69 = wa[8] ^ wb[8];
  int sig_70 = wa[8] & wb[8];
  int sig_71 = sig_69 & sig_68;
  int sig_72 = sig_69 ^ sig_68;
  int sig_73 = sig_70 | sig_71;
  int sig_74 = wa[9] ^ wb[9];
  int sig_75 = wa[9] & wb[9];
  int sig_76 = sig_74 & sig_73;
  int sig_77 = sig_74 ^ sig_73;
  int sig_78 = sig_75 | sig_76;
  int sig_79 = wa[10] ^ wb[10];
  int sig_80 = wa[10] & wb[10];
  int sig_81 = sig_79 & sig_78;
  int sig_82 = sig_79 ^ sig_78;
  int sig_83 = sig_80 | sig_81;
  int sig_84 = wa[11] ^ wb[11];
  int sig_85 = wa[11] & wb[11];
  int sig_86 = sig_84 & sig_83;
  int sig_87 = sig_84 ^ sig_83;
  int sig_88 = sig_85 | sig_86;
  int sig_89 = wa[12] ^ wb[12];
  int sig_90 = wa[12] & wb[12];
  int sig_91 = sig_89 & sig_88;
  int sig_92 = sig_89 ^ sig_88;
  int sig_93 = sig_90 | sig_91;
  int sig_94 = wa[13] ^ wb[13];
  int sig_95 = wa[13] & wb[13];
  int sig_96 = sig_94 & sig_93;
  int sig_97 = sig_94 ^ sig_93;
  int sig_98 = sig_95 | sig_96;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & sig_98;
  int sig_102 = sig_99 ^ sig_98;
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (sig_82 & 0x01) << 0; // default output
  y |=  (wa[2] & 0x01) << 1; // default output
  y |=  (sig_47 & 0x01) << 2; // default output
  y |=  (sig_35 & 0x01) << 3; // default output
  y |=  (sig_52 & 0x01) << 4; // default output
  y |=  (sig_57 & 0x01) << 5; // default output
  y |=  (sig_62 & 0x01) << 6; // default output
  y |=  (sig_67 & 0x01) << 7; // default output
  y |=  (sig_72 & 0x01) << 8; // default output
  y |=  (sig_77 & 0x01) << 9; // default output
  y |=  (sig_82 & 0x01) << 10; // default output
  y |=  (sig_87 & 0x01) << 11; // default output
  y |=  (sig_92 & 0x01) << 12; // default output
  y |=  (sig_97 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 1.63 %
// MAE = 2134 
// WCE% = 4.63 %
// WCE = 6075 
// WCRE% = 1500.00 %
// EP% = 99.99 %
// MRE% = 4.52 %
// MSE = 62975.827e2 
// PDK45_PWR = 0.013 mW
// PDK45_AREA = 29.1 um2
// PDK45_DELAY = 0.30 ns



uint64_t evoapproxlib::evoapprox_t::add16u_0QG(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_32 = wa[11];
  int sig_49 = wb[6];
  int sig_62 = 0;
  int sig_87 = wb[5];
  int sig_88 = 0;
  int sig_93 = wa[12] | wb[12];
  int sig_94 = wa[13] ^ wb[13];
  int sig_95 = wa[13] & wb[13];
  int sig_96 = sig_94 & sig_93;
  int sig_97 = sig_94 ^ sig_93;
  int sig_98 = sig_95 | sig_96;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & sig_98;
  int sig_102 = sig_99 ^ sig_98;
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (wa[1] & 0x01) << 0; // default output
  y |=  (wb[5] & 0x01) << 1; // default output
  y |=  (sig_49 & 0x01) << 2; // default output
  y |=  (wb[8] & 0x01) << 3; // default output
  y |=  (sig_87 & 0x01) << 4; // default output
  y |=  (wb[9] & 0x01) << 5; // default output
  y |=  (wa[2] & 0x01) << 6; // default output
  y |=  (wb[13] & 0x01) << 7; // default output
  y |=  (wb[13] & 0x01) << 8; // default output
  y |=  (wb[12] & 0x01) << 9; // default output
  y |=  (sig_88 & 0x01) << 10; // default output
  y |=  (sig_32 & 0x01) << 11; // default output
  y |=  (sig_62 & 0x01) << 12; // default output
  y |=  (sig_97 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mse parameters
***/
// MAE% = 0.54 %
// MAE = 712 
// WCE% = 1.80 %
// WCE = 2365 
// WCRE% = 700.00 %
// EP% = 99.96 %
// MRE% = 1.50 %
// MSE = 761357 
// PDK45_PWR = 0.022 mW
// PDK45_AREA = 46.9 um2
// PDK45_DELAY = 0.43 ns



uint64_t evoapproxlib::evoapprox_t::add16u_0M6(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_35 = wa[11];
  int sig_37 = 0;
  int sig_42 = 0;
  int sig_48 = 0;
  int sig_67 = 0;
  int sig_80 = wa[10] & wa[10];
  int sig_83 = sig_80;
  int sig_84 = wa[11] ^ wb[11];
  int sig_85 = wa[11] & wb[11];
  int sig_86 = sig_84 & sig_83;
  int sig_87 = sig_84 ^ sig_83;
  int sig_88 = sig_85 | sig_86;
  int sig_89 = wa[12] ^ wb[12];
  int sig_90 = wa[12] & wb[12];
  int sig_91 = sig_89 & sig_88;
  int sig_92 = sig_89 ^ sig_88;
  int sig_93 = sig_90 | sig_91;
  int sig_94 = wa[13] ^ wb[13];
  int sig_95 = wa[13] & wb[13];
  int sig_96 = sig_94 & sig_93;
  int sig_97 = sig_94 ^ sig_93;
  int sig_98 = sig_95 | sig_96;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & sig_98;
  int sig_102 = sig_99 ^ sig_98;
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (wb[14] & 0x01) << 0; // default output
  y |=  (wa[0] & 0x01) << 1; // default output
  y |=  (sig_42 & 0x01) << 2; // default output
  y |=  (sig_35 & 0x01) << 3; // default output
  y |=  (sig_37 & 0x01) << 4; // default output
  y |=  (sig_85 & 0x01) << 5; // default output
  y |=  (sig_48 & 0x01) << 6; // default output
  y |=  (sig_67 & 0x01) << 7; // default output
  y |=  (wb[7] & 0x01) << 8; // default output
  y |=  (wb[6] & 0x01) << 9; // default output
  y |=  (wa[9] & 0x01) << 10; // default output
  y |=  (sig_87 & 0x01) << 11; // default output
  y |=  (sig_92 & 0x01) << 12; // default output
  y |=  (sig_97 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 0.29 %
// MAE = 386 
// WCE% = 0.92 %
// WCE = 1206 
// WCRE% = 7900.00 %
// EP% = 99.92 %
// MRE% = 0.82 %
// MSE = 222640 
// PDK45_PWR = 0.026 mW
// PDK45_AREA = 55.4 um2
// PDK45_DELAY = 0.51 ns



uint64_t evoapproxlib::evoapprox_t::add16u_00G(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_38 = ~(wb[4] & wa[9]);
  int sig_42 = 0;
  int sig_49 = 0;
  int sig_54 = 0;
  int sig_62 = ~((int)0);
  int sig_75 = wb[9];
  int sig_76 = 0;
  int sig_78 = sig_75 | sig_76;
  int sig_79 = wa[10] ^ wb[10];
  int sig_80 = wa[10] & wb[10];
  int sig_81 = sig_79 & sig_78;
  int sig_82 = sig_79 ^ sig_78;
  int sig_83 = sig_80 | sig_81;
  int sig_84 = wa[11] ^ wb[11];
  int sig_85 = wa[11] & wb[11];
  int sig_86 = sig_84 & sig_83;
  int sig_87 = sig_84 ^ sig_83;
  int sig_88 = sig_85 | sig_86;
  int sig_89 = wa[12] ^ wb[12];
  int sig_90 = wa[12] & wb[12];
  int sig_91 = sig_89 & sig_88;
  int sig_92 = sig_89 ^ sig_88;
  int sig_93 = sig_90 | sig_91;
  int sig_94 = wa[13] ^ wb[13];
  int sig_95 = wa[13] & wb[13];
  int sig_96 = sig_94 & sig_93;
  int sig_97 = sig_94 ^ sig_93;
  int sig_98 = sig_95 | sig_96;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & sig_98;
  int sig_102 = sig_99 ^ sig_98;
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (sig_54 & 0x01) << 0; // default output
  y |=  (sig_102 & 0x01) << 1; // default output
  y |=  (sig_42 & 0x01) << 2; // default output
  y |=  (wa[6] & 0x01) << 3; // default output
  y |=  (sig_38 & 0x01) << 4; // default output
  y |=  (sig_87 & 0x01) << 5; // default output
  y |=  (sig_62 & 0x01) << 6; // default output
  y |=  (sig_75 & 0x01) << 7; // default output
  y |=  (sig_49 & 0x01) << 8; // default output
  y |=  (wa[8] & 0x01) << 9; // default output
  y |=  (sig_82 & 0x01) << 10; // default output
  y |=  (sig_87 & 0x01) << 11; // default output
  y |=  (sig_92 & 0x01) << 12; // default output
  y |=  (sig_97 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.00 %
// MAE = 0 
// WCE% = 0.00 %
// WCE = 0 
// WCRE% = 0.00 %
// EP% = 0.00 %
// MRE% = 0.00 %
// MSE = 0 
// PDK45_PWR = 0.072 mW
// PDK45_AREA = 141.7 um2
// PDK45_DELAY = 1.28 ns



uint64_t evoapproxlib::evoapprox_t::add16u_1E2(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_32 = wa[0] ^ wb[0];
  int sig_33 = wa[0] & wb[0];
  int sig_34 = wa[1] ^ wb[1];
  int sig_35 = wa[1] & wb[1];
  int sig_36 = sig_34 & sig_33;
  int sig_37 = sig_34 ^ sig_33;
  int sig_38 = sig_35 | sig_36;
  int sig_39 = wa[2] ^ wb[2];
  int sig_40 = wa[2] & wb[2];
  int sig_41 = sig_39 & sig_38;
  int sig_42 = sig_39 ^ sig_38;
  int sig_43 = sig_40 | sig_41;
  int sig_44 = wa[3] ^ wb[3];
  int sig_45 = wa[3] & wb[3];
  int sig_46 = sig_44 & sig_43;
  int sig_47 = sig_44 ^ sig_43;
  int sig_48 = sig_45 | sig_46;
  int sig_49 = wa[4] ^ wb[4];
  int sig_50 = wa[4] & wb[4];
  int sig_51 = sig_49 & sig_48;
  int sig_52 = sig_49 ^ sig_48;
  int sig_53 = sig_50 | sig_51;
  int sig_54 = wa[5] ^ wb[5];
  int sig_55 = wa[5] & wb[5];
  int sig_56 = sig_54 & sig_53;
  int sig_57 = sig_54 ^ sig_53;
  int sig_58 = sig_55 | sig_56;
  int sig_59 = wa[6] ^ wb[6];
  int sig_60 = wa[6] & wb[6];
  int sig_61 = sig_59 & sig_58;
  int sig_62 = sig_59 ^ sig_58;
  int sig_63 = sig_60 | sig_61;
  int sig_64 = wa[7] ^ wb[7];
  int sig_65 = wa[7] & wb[7];
  int sig_66 = sig_64 & sig_63;
  int sig_67 = sig_64 ^ sig_63;
  int sig_68 = sig_65 | sig_66;
  int sig_69 = wa[8] ^ wb[8];
  int sig_70 = wa[8] & wb[8];
  int sig_71 = sig_69 & sig_68;
  int sig_72 = sig_69 ^ sig_68;
  int sig_73 = sig_70 | sig_71;
  int sig_74 = wa[9] ^ wb[9];
  int sig_75 = wa[9] & wb[9];
  int sig_76 = sig_74 & sig_73;
  int sig_77 = sig_74 ^ sig_73;
  int sig_78 = sig_75 | sig_76;
  int sig_79 = wa[10] ^ wb[10];
  int sig_80 = wa[10] & wb[10];
  int sig_81 = sig_79 & sig_78;
  int sig_82 = sig_79 ^ sig_78;
  int sig_83 = sig_80 | sig_81;
  int sig_84 = wa[11] ^ wb[11];
  int sig_85 = wa[11] & wb[11];
  int sig_86 = sig_84 & sig_83;
  int sig_87 = sig_84 ^ sig_83;
  int sig_88 = sig_85 | sig_86;
  int sig_89 = wa[12] ^ wb[12];
  int sig_90 = wa[12] & wb[12];
  int sig_91 = sig_89 & sig_88;
  int sig_92 = sig_89 ^ sig_88;
  int sig_93 = sig_90 | sig_91;
  int sig_94 = wa[13] ^ wb[13];
  int sig_95 = wa[13] & wb[13];
  int sig_96 = sig_94 & sig_93;
  int sig_97 = sig_94 ^ sig_93;
  int sig_98 = sig_95 | sig_96;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & sig_98;
  int sig_102 = sig_99 ^ sig_98;
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (sig_32 & 0x01) << 0; // default output
  y |=  (sig_37 & 0x01) << 1; // default output
  y |=  (sig_42 & 0x01) << 2; // default output
  y |=  (sig_47 & 0x01) << 3; // default output
  y |=  (sig_52 & 0x01) << 4; // default output
  y |=  (sig_57 & 0x01) << 5; // default output
  y |=  (sig_62 & 0x01) << 6; // default output
  y |=  (sig_67 & 0x01) << 7; // default output
  y |=  (sig_72 & 0x01) << 8; // default output
  y |=  (sig_77 & 0x01) << 9; // default output
  y |=  (sig_82 & 0x01) << 10; // default output
  y |=  (sig_87 & 0x01) << 11; // default output
  y |=  (sig_92 & 0x01) << 12; // default output
  y |=  (sig_97 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 0.0066 %
// MAE = 8.7 
// WCE% = 0.019 %
// WCE = 25 
// WCRE% = 1300.00 %
// EP% = 96.88 %
// MRE% = 0.018 %
// MSE = 109 
// PDK45_PWR = 0.051 mW
// PDK45_AREA = 100.4 um2
// PDK45_DELAY = 0.95 ns



uint64_t evoapproxlib::evoapprox_t::add16u_1JH(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_37 = ~((int)0);
  int sig_47 = ~((int)0);
  int sig_50 = wa[4] & wb[4];
  int sig_53 = sig_50;
  int sig_54 = wa[5] ^ wb[5];
  int sig_55 = wa[5] & wb[5];
  int sig_56 = sig_54 & sig_53;
  int sig_57 = sig_54 ^ sig_53;
  int sig_58 = sig_55 | sig_56;
  int sig_59 = wa[6] ^ wb[6];
  int sig_60 = wa[6] & wb[6];
  int sig_61 = sig_59 & sig_58;
  int sig_62 = sig_59 ^ sig_58;
  int sig_63 = sig_60 | sig_61;
  int sig_64 = wa[7] ^ wb[7];
  int sig_65 = wa[7] & wb[7];
  int sig_66 = sig_64 & sig_63;
  int sig_67 = sig_64 ^ sig_63;
  int sig_68 = sig_65 | sig_66;
  int sig_69 = wa[8] ^ wb[8];
  int sig_70 = wa[8] & wb[8];
  int sig_71 = sig_69 & sig_68;
  int sig_72 = sig_69 ^ sig_68;
  int sig_73 = sig_70 | sig_71;
  int sig_74 = wa[9] ^ wb[9];
  int sig_75 = wa[9] & wb[9];
  int sig_76 = sig_74 & sig_73;
  int sig_77 = sig_74 ^ sig_73;
  int sig_78 = sig_75 | sig_76;
  int sig_79 = wa[10] ^ wb[10];
  int sig_80 = wa[10] & wb[10];
  int sig_81 = sig_79 & sig_78;
  int sig_82 = sig_79 ^ sig_78;
  int sig_83 = sig_80 | sig_81;
  int sig_84 = wa[11] ^ wb[11];
  int sig_85 = wa[11] & wb[11];
  int sig_86 = sig_84 & sig_83;
  int sig_87 = sig_84 ^ sig_83;
  int sig_88 = sig_85 | sig_86;
  int sig_89 = wa[12] ^ wb[12];
  int sig_90 = wa[12] & wb[12];
  int sig_91 = sig_89 & sig_88;
  int sig_92 = sig_89 ^ sig_88;
  int sig_93 = sig_90 | sig_91;
  int sig_94 = wa[13] ^ wb[13];
  int sig_95 = wa[13] & wb[13];
  int sig_96 = sig_94 & sig_93;
  int sig_97 = sig_94 ^ sig_93;
  int sig_98 = sig_95 | sig_96;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & sig_98;
  int sig_102 = sig_99 ^ sig_98;
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (wa[8] & 0x01) << 0; // default output
  y |=  (wb[0] & 0x01) << 1; // default output
  y |=  (sig_37 & 0x01) << 2; // default output
  y |=  (sig_47 & 0x01) << 3; // default output
  y |=  (wa[3] & 0x01) << 4; // default output
  y |=  (sig_57 & 0x01) << 5; // default output
  y |=  (sig_62 & 0x01) << 6; // default output
  y |=  (sig_67 & 0x01) << 7; // default output
  y |=  (sig_72 & 0x01) << 8; // default output
  y |=  (sig_77 & 0x01) << 9; // default output
  y |=  (sig_82 & 0x01) << 10; // default output
  y |=  (sig_87 & 0x01) << 11; // default output
  y |=  (sig_92 & 0x01) << 12; // default output
  y |=  (sig_97 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.0014 %
// MAE = 1.8 
// WCE% = 0.0076 %
// WCE = 10 
// WCRE% = 50.00 %
// EP% = 29.69 %
// MRE% = 0.0037 %
// MSE = 13 
// PDK45_PWR = 0.066 mW
// PDK45_AREA = 144.5 um2
// PDK45_DELAY = 1.03 ns



uint64_t evoapproxlib::evoapprox_t::add16u_1HK(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_32 = wa[0] ^ wb[0];
  int sig_33 = wa[0] & wb[0];
  int sig_34 = wa[1] ^ wb[1];
  int sig_35 = wa[1] & wb[1];
  int sig_37 = sig_34 | sig_33;
  int sig_38 = sig_35;
  int sig_39 = wa[2] ^ wb[2];
  int sig_40 = wa[2] & wb[2];
  int sig_41 = sig_39 & sig_38;
  int sig_42 = sig_39 ^ sig_38;
  int sig_43 = sig_40 | sig_41;
  int sig_44 = wa[3] ^ wb[3];
  int sig_45 = wa[3] & wb[3];
  int sig_47 = sig_44 | sig_43;
  int sig_48 = sig_45;
  int sig_49 = wa[4] ^ wb[4];
  int sig_50 = wa[4] & wb[4];
  int sig_51 = sig_49 & sig_48;
  int sig_52 = sig_49 ^ sig_48;
  int sig_53 = sig_50 | sig_51;
  int sig_54 = wa[5] ^ wb[5];
  int sig_55 = wa[5] & wb[5];
  int sig_56 = sig_54 & sig_53;
  int sig_57 = sig_54 ^ sig_53;
  int sig_58 = sig_55 | sig_56;
  int sig_59 = wa[6] ^ wb[6];
  int sig_60 = wa[6] & wb[6];
  int sig_61 = sig_59 & sig_58;
  int sig_62 = sig_59 ^ sig_58;
  int sig_63 = sig_60 | sig_61;
  int sig_64 = wa[7] ^ wb[7];
  int sig_65 = wa[7] & wb[7];
  int sig_66 = sig_64 & sig_63;
  int sig_67 = sig_64 ^ sig_63;
  int sig_68 = sig_65 | sig_66;
  int sig_69 = wa[8] ^ wb[8];
  int sig_70 = wa[8] & wb[8];
  int sig_71 = sig_69 & sig_68;
  int sig_72 = sig_69 ^ sig_68;
  int sig_73 = sig_70 | sig_71;
  int sig_74 = wa[9] ^ wb[9];
  int sig_75 = wa[9] & wb[9];
  int sig_76 = sig_74 & sig_73;
  int sig_77 = sig_74 ^ sig_73;
  int sig_78 = sig_75 | sig_76;
  int sig_79 = wa[10] ^ wb[10];
  int sig_80 = wa[10] & wb[10];
  int sig_81 = sig_79 & sig_78;
  int sig_82 = sig_79 ^ sig_78;
  int sig_83 = sig_80 | sig_81;
  int sig_84 = wa[11] ^ wb[11];
  int sig_85 = wa[11] & wb[11];
  int sig_86 = sig_84 & sig_83;
  int sig_87 = sig_84 ^ sig_83;
  int sig_88 = sig_85 | sig_86;
  int sig_89 = wa[12] ^ wb[12];
  int sig_90 = wa[12] & wb[12];
  int sig_91 = sig_89 & sig_88;
  int sig_92 = sig_89 ^ sig_88;
  int sig_93 = sig_90 | sig_91;
  int sig_94 = wa[13] ^ wb[13];
  int sig_95 = wa[13] & wb[13];
  int sig_96 = sig_94 & sig_93;
  int sig_97 = sig_94 ^ sig_93;
  int sig_98 = sig_95 | sig_96;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & sig_98;
  int sig_102 = sig_99 ^ sig_98;
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (sig_32 & 0x01) << 0; // default output
  y |=  (sig_37 & 0x01) << 1; // default output
  y |=  (sig_42 & 0x01) << 2; // default output
  y |=  (sig_47 & 0x01) << 3; // default output
  y |=  (sig_52 & 0x01) << 4; // default output
  y |=  (sig_57 & 0x01) << 5; // default output
  y |=  (sig_62 & 0x01) << 6; // default output
  y |=  (sig_67 & 0x01) << 7; // default output
  y |=  (sig_72 & 0x01) << 8; // default output
  y |=  (sig_77 & 0x01) << 9; // default output
  y |=  (sig_82 & 0x01) << 10; // default output
  y |=  (sig_87 & 0x01) << 11; // default output
  y |=  (sig_92 & 0x01) << 12; // default output
  y |=  (sig_97 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s):  
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.024 %
// MAE = 32 
// WCE% = 0.05 %
// WCE = 65 
// WCRE% = 6300.00 %
// EP% = 99.61 %
// MRE% = 0.068 %
// MSE = 1238 
// PDK45_PWR = 0.041 mW
// PDK45_AREA = 82.6 um2
// PDK45_DELAY = 0.78 ns



uint64_t evoapproxlib::evoapprox_t::add16u_05T(uint64_t a, uint64_t b) {
  int wa[16];
  int wb[16];
  uint64_t y = 0;
  wa[0] = (a >> 0) & 0x01;
  wb[0] = (b >> 0) & 0x01;
  wa[1] = (a >> 1) & 0x01;
  wb[1] = (b >> 1) & 0x01;
  wa[2] = (a >> 2) & 0x01;
  wb[2] = (b >> 2) & 0x01;
  wa[3] = (a >> 3) & 0x01;
  wb[3] = (b >> 3) & 0x01;
  wa[4] = (a >> 4) & 0x01;
  wb[4] = (b >> 4) & 0x01;
  wa[5] = (a >> 5) & 0x01;
  wb[5] = (b >> 5) & 0x01;
  wa[6] = (a >> 6) & 0x01;
  wb[6] = (b >> 6) & 0x01;
  wa[7] = (a >> 7) & 0x01;
  wb[7] = (b >> 7) & 0x01;
  wa[8] = (a >> 8) & 0x01;
  wb[8] = (b >> 8) & 0x01;
  wa[9] = (a >> 9) & 0x01;
  wb[9] = (b >> 9) & 0x01;
  wa[10] = (a >> 10) & 0x01;
  wb[10] = (b >> 10) & 0x01;
  wa[11] = (a >> 11) & 0x01;
  wb[11] = (b >> 11) & 0x01;
  wa[12] = (a >> 12) & 0x01;
  wb[12] = (b >> 12) & 0x01;
  wa[13] = (a >> 13) & 0x01;
  wb[13] = (b >> 13) & 0x01;
  wa[14] = (a >> 14) & 0x01;
  wb[14] = (b >> 14) & 0x01;
  wa[15] = (a >> 15) & 0x01;
  wb[15] = (b >> 15) & 0x01;
  int sig_35 = ~((int)0);
  int sig_60 = wa[6] & wb[6];
  int sig_63 = sig_60;
  int sig_64 = wa[7] ^ wb[7];
  int sig_65 = wa[7] & wb[7];
  int sig_66 = sig_64 & sig_63;
  int sig_67 = sig_64 ^ sig_63;
  int sig_68 = sig_65 | sig_66;
  int sig_69 = wa[8] ^ wb[8];
  int sig_70 = wa[8] & wb[8];
  int sig_71 = sig_69 & sig_68;
  int sig_72 = sig_69 ^ sig_68;
  int sig_73 = sig_70 | sig_71;
  int sig_74 = wa[9] ^ wb[9];
  int sig_75 = wa[9] & wb[9];
  int sig_76 = sig_74 & sig_73;
  int sig_77 = sig_74 ^ sig_73;
  int sig_78 = sig_75 | sig_76;
  int sig_79 = wa[10] ^ wb[10];
  int sig_80 = wa[10] & wb[10];
  int sig_81 = sig_79 & sig_78;
  int sig_82 = sig_79 ^ sig_78;
  int sig_83 = sig_80 | sig_81;
  int sig_84 = wa[11] ^ wb[11];
  int sig_85 = wa[11] & wb[11];
  int sig_86 = sig_84 & sig_83;
  int sig_87 = sig_84 ^ sig_83;
  int sig_88 = sig_85 | sig_86;
  int sig_89 = wa[12] ^ wb[12];
  int sig_90 = wa[12] & wb[12];
  int sig_91 = sig_89 & sig_88;
  int sig_92 = sig_89 ^ sig_88;
  int sig_93 = sig_90 | sig_91;
  int sig_94 = wa[13] ^ wb[13];
  int sig_95 = wa[13] & wb[13];
  int sig_96 = sig_94 & sig_93;
  int sig_97 = sig_94 ^ sig_93;
  int sig_98 = sig_95 | sig_96;
  int sig_99 = wa[14] ^ wb[14];
  int sig_100 = wa[14] & wb[14];
  int sig_101 = sig_99 & sig_98;
  int sig_102 = sig_99 ^ sig_98;
  int sig_103 = sig_100 | sig_101;
  int sig_104 = wa[15] ^ wb[15];
  int sig_105 = wa[15] & wb[15];
  int sig_106 = sig_104 & sig_103;
  int sig_107 = sig_104 ^ sig_103;
  int sig_108 = sig_105 | sig_106;
  y |=  (sig_107 & 0x01) << 0; // default output
  y |=  (wb[1] & 0x01) << 1; // default output
  y |=  (wb[2] & 0x01) << 2; // default output
  y |=  (wb[3] & 0x01) << 3; // default output
  y |=  (wa[5] & 0x01) << 4; // default output
  y |=  (wb[5] & 0x01) << 5; // default output
  y |=  (sig_35 & 0x01) << 6; // default output
  y |=  (sig_67 & 0x01) << 7; // default output
  y |=  (sig_72 & 0x01) << 8; // default output
  y |=  (sig_77 & 0x01) << 9; // default output
  y |=  (sig_82 & 0x01) << 10; // default output
  y |=  (sig_87 & 0x01) << 11; // default output
  y |=  (sig_92 & 0x01) << 12; // default output
  y |=  (sig_97 & 0x01) << 13; // default output
  y |=  (sig_102 & 0x01) << 14; // default output
  y |=  (sig_107 & 0x01) << 15; // default output
  y |=  (sig_108 & 0x01) << 16; // default output
   return y;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.00019 %
// MAE = 8192 
// WCE% = 0.00076 %
// WCE = 32768 
// WCRE% = 100.00 %
// EP% = 50.00 %
// MRE% = 0.018 %
// MSE = 17895.697e4 
// PDK45_PWR = 2.326 mW
// PDK45_AREA = 2764.2 um2
// PDK45_DELAY = 3.09 ns



int32_t evoapproxlib::evoapprox_t::mul16s_G80(int16_t A, int16_t B)
{
  int32_t P, P_;
  uint16_t tmp, C_10_0,C_10_1,C_10_10,C_10_11,C_10_12,C_10_13,C_10_14,C_10_15,C_10_2,C_10_3,C_10_4,C_10_5,C_10_6,C_10_7,C_10_8,C_10_9,C_11_0,C_11_1,C_11_10,C_11_11,C_11_12,C_11_13,C_11_14,C_11_15,C_11_2,C_11_3,C_11_4,C_11_5,C_11_6,C_11_7,C_11_8,C_11_9,C_12_0,C_12_1,C_12_10,C_12_11,C_12_12,C_12_13,C_12_14,C_12_15,C_12_2,C_12_3,C_12_4,C_12_5,C_12_6,C_12_7,C_12_8,C_12_9,C_13_0,C_13_1,C_13_10,C_13_11,C_13_12,C_13_13,C_13_14,C_13_15,C_13_2,C_13_3,C_13_4,C_13_5,C_13_6,C_13_7,C_13_8,C_13_9,C_14_0,C_14_1,C_14_10,C_14_11,C_14_12,C_14_13,C_14_14,C_14_15,C_14_2,C_14_3,C_14_4,C_14_5,C_14_6,C_14_7,C_14_8,C_14_9,C_15_0,C_15_1,C_15_10,C_15_11,C_15_12,C_15_13,C_15_14,C_15_15,C_15_2,C_15_3,C_15_4,C_15_5,C_15_6,C_15_7,C_15_8,C_15_9,C_16_0,C_16_1,C_16_10,C_16_11,C_16_12,C_16_13,C_16_14,C_16_15,C_16_2,C_16_3,C_16_4,C_16_5,C_16_6,C_16_7,C_16_8,C_16_9,C_1_14,C_1_15,C_2_0,C_2_1,C_2_10,C_2_11,C_2_12,C_2_13,C_2_14,C_2_15,C_2_2,C_2_3,C_2_4,C_2_5,C_2_6,C_2_7,C_2_8,C_2_9,C_3_0,C_3_1,C_3_10,C_3_11,C_3_12,C_3_13,C_3_14,C_3_15,C_3_2,C_3_3,C_3_4,C_3_5,C_3_6,C_3_7,C_3_8,C_3_9,C_4_0,C_4_1,C_4_10,C_4_11,C_4_12,C_4_13,C_4_14,C_4_15,C_4_2,C_4_3,C_4_4,C_4_5,C_4_6,C_4_7,C_4_8,C_4_9,C_5_0,C_5_1,C_5_10,C_5_11,C_5_12,C_5_13,C_5_14,C_5_15,C_5_2,C_5_3,C_5_4,C_5_5,C_5_6,C_5_7,C_5_8,C_5_9,C_6_0,C_6_1,C_6_10,C_6_11,C_6_12,C_6_13,C_6_14,C_6_15,C_6_2,C_6_3,C_6_4,C_6_5,C_6_6,C_6_7,C_6_8,C_6_9,C_7_0,C_7_1,C_7_10,C_7_11,C_7_12,C_7_13,C_7_14,C_7_15,C_7_2,C_7_3,C_7_4,C_7_5,C_7_6,C_7_7,C_7_8,C_7_9,C_8_0,C_8_1,C_8_10,C_8_11,C_8_12,C_8_13,C_8_14,C_8_15,C_8_2,C_8_3,C_8_4,C_8_5,C_8_6,C_8_7,C_8_8,C_8_9,C_9_0,C_9_1,C_9_10,C_9_11,C_9_12,C_9_13,C_9_14,C_9_15,C_9_2,C_9_3,C_9_4,C_9_5,C_9_6,C_9_7,C_9_8,C_9_9,S_0_15,S_10_0,S_10_1,S_10_10,S_10_11,S_10_12,S_10_13,S_10_14,S_10_15,S_10_2,S_10_3,S_10_4,S_10_5,S_10_6,S_10_7,S_10_8,S_10_9,S_11_0,S_11_1,S_11_10,S_11_11,S_11_12,S_11_13,S_11_14,S_11_15,S_11_2,S_11_3,S_11_4,S_11_5,S_11_6,S_11_7,S_11_8,S_11_9,S_12_0,S_12_1,S_12_10,S_12_11,S_12_12,S_12_13,S_12_14,S_12_15,S_12_2,S_12_3,S_12_4,S_12_5,S_12_6,S_12_7,S_12_8,S_12_9,S_13_0,S_13_1,S_13_10,S_13_11,S_13_12,S_13_13,S_13_14,S_13_15,S_13_2,S_13_3,S_13_4,S_13_5,S_13_6,S_13_7,S_13_8,S_13_9,S_14_0,S_14_1,S_14_10,S_14_11,S_14_12,S_14_13,S_14_14,S_14_15,S_14_2,S_14_3,S_14_4,S_14_5,S_14_6,S_14_7,S_14_8,S_14_9,S_15_0,S_15_1,S_15_10,S_15_11,S_15_12,S_15_13,S_15_14,S_15_15,S_15_2,S_15_3,S_15_4,S_15_5,S_15_6,S_15_7,S_15_8,S_15_9,S_16_0,S_16_1,S_16_10,S_16_11,S_16_12,S_16_13,S_16_14,S_16_15,S_16_2,S_16_3,S_16_4,S_16_5,S_16_6,S_16_7,S_16_8,S_16_9,S_1_0,S_1_1,S_1_10,S_1_11,S_1_12,S_1_13,S_1_14,S_1_15,S_1_2,S_1_3,S_1_4,S_1_5,S_1_6,S_1_7,S_1_8,S_1_9,S_2_0,S_2_1,S_2_10,S_2_11,S_2_12,S_2_13,S_2_14,S_2_15,S_2_2,S_2_3,S_2_4,S_2_5,S_2_6,S_2_7,S_2_8,S_2_9,S_3_0,S_3_1,S_3_10,S_3_11,S_3_12,S_3_13,S_3_14,S_3_15,S_3_2,S_3_3,S_3_4,S_3_5,S_3_6,S_3_7,S_3_8,S_3_9,S_4_0,S_4_1,S_4_10,S_4_11,S_4_12,S_4_13,S_4_14,S_4_15,S_4_2,S_4_3,S_4_4,S_4_5,S_4_6,S_4_7,S_4_8,S_4_9,S_5_0,S_5_1,S_5_10,S_5_11,S_5_12,S_5_13,S_5_14,S_5_15,S_5_2,S_5_3,S_5_4,S_5_5,S_5_6,S_5_7,S_5_8,S_5_9,S_6_0,S_6_1,S_6_10,S_6_11,S_6_12,S_6_13,S_6_14,S_6_15,S_6_2,S_6_3,S_6_4,S_6_5,S_6_6,S_6_7,S_6_8,S_6_9,S_7_0,S_7_1,S_7_10,S_7_11,S_7_12,S_7_13,S_7_14,S_7_15,S_7_2,S_7_3,S_7_4,S_7_5,S_7_6,S_7_7,S_7_8,S_7_9,S_8_0,S_8_1,S_8_10,S_8_11,S_8_12,S_8_13,S_8_14,S_8_15,S_8_2,S_8_3,S_8_4,S_8_5,S_8_6,S_8_7,S_8_8,S_8_9,S_9_0,S_9_1,S_9_10,S_9_11,S_9_12,S_9_13,S_9_14,S_9_15,S_9_2,S_9_3,S_9_4,S_9_5,S_9_6,S_9_7,S_9_8,S_9_9;
  S_0_15 = 1;
  S_1_0 = (((A>>1)&1) & ((B>>0)&1));
  S_1_1 = (((A>>1)&1) & ((B>>1)&1));
  S_1_2 = (((A>>1)&1) & ((B>>2)&1));
  S_1_3 = (((A>>1)&1) & ((B>>3)&1));
  S_1_4 = (((A>>1)&1) & ((B>>4)&1));
  S_1_5 = (((A>>1)&1) & ((B>>5)&1));
  S_1_6 = (((A>>1)&1) & ((B>>6)&1));
  S_1_7 = (((A>>1)&1) & ((B>>7)&1));
  S_1_8 = (((A>>1)&1) & ((B>>8)&1));
  S_1_9 = (((A>>1)&1) & ((B>>9)&1));
  S_1_10 = (((A>>1)&1) & ((B>>10)&1));
  S_1_11 = (((A>>1)&1) & ((B>>11)&1));
  S_1_12 = (((A>>1)&1) & ((B>>12)&1));
  S_1_13 = (((A>>1)&1) & ((B>>13)&1));
  S_1_14 = S_0_15^(((A>>1)&1) & ((B>>14)&1));
  C_1_14 = S_0_15&(((A>>1)&1) & ((B>>14)&1));
  S_1_15 = 1^(((((A>>1)&1) & ((B>>15)&1)))^1);
  C_1_15 = 1&(((((A>>1)&1) & ((B>>15)&1)))^1);
  S_2_0 = S_1_1^(((A>>2)&1) & ((B>>0)&1));
  C_2_0 = S_1_1&(((A>>2)&1) & ((B>>0)&1));
  S_2_1 = S_1_2^(((A>>2)&1) & ((B>>1)&1));
  C_2_1 = S_1_2&(((A>>2)&1) & ((B>>1)&1));
  S_2_2 = S_1_3^(((A>>2)&1) & ((B>>2)&1));
  C_2_2 = S_1_3&(((A>>2)&1) & ((B>>2)&1));
  S_2_3 = S_1_4^(((A>>2)&1) & ((B>>3)&1));
  C_2_3 = S_1_4&(((A>>2)&1) & ((B>>3)&1));
  S_2_4 = S_1_5^(((A>>2)&1) & ((B>>4)&1));
  C_2_4 = S_1_5&(((A>>2)&1) & ((B>>4)&1));
  S_2_5 = S_1_6^(((A>>2)&1) & ((B>>5)&1));
  C_2_5 = S_1_6&(((A>>2)&1) & ((B>>5)&1));
  S_2_6 = S_1_7^(((A>>2)&1) & ((B>>6)&1));
  C_2_6 = S_1_7&(((A>>2)&1) & ((B>>6)&1));
  S_2_7 = S_1_8^(((A>>2)&1) & ((B>>7)&1));
  C_2_7 = S_1_8&(((A>>2)&1) & ((B>>7)&1));
  S_2_8 = S_1_9^(((A>>2)&1) & ((B>>8)&1));
  C_2_8 = S_1_9&(((A>>2)&1) & ((B>>8)&1));
  S_2_9 = S_1_10^(((A>>2)&1) & ((B>>9)&1));
  C_2_9 = S_1_10&(((A>>2)&1) & ((B>>9)&1));
  S_2_10 = S_1_11^(((A>>2)&1) & ((B>>10)&1));
  C_2_10 = S_1_11&(((A>>2)&1) & ((B>>10)&1));
  S_2_11 = S_1_12^(((A>>2)&1) & ((B>>11)&1));
  C_2_11 = S_1_12&(((A>>2)&1) & ((B>>11)&1));
  S_2_12 = S_1_13^(((A>>2)&1) & ((B>>12)&1));
  C_2_12 = S_1_13&(((A>>2)&1) & ((B>>12)&1));
  S_2_13 = S_1_14^(((A>>2)&1) & ((B>>13)&1));
  C_2_13 = S_1_14&(((A>>2)&1) & ((B>>13)&1));
  tmp = S_1_15^C_1_14;
  S_2_14 = tmp^(((A>>2)&1) & ((B>>14)&1));
  C_2_14 = (tmp&(((A>>2)&1) & ((B>>14)&1)))|(S_1_15&C_1_14);
  S_2_15 = C_1_15^(((((A>>2)&1) & ((B>>15)&1)))^1);
  C_2_15 = C_1_15&(((((A>>2)&1) & ((B>>15)&1)))^1);
  tmp = S_2_1^C_2_0;
  S_3_0 = tmp^(((A>>3)&1) & ((B>>0)&1));
  C_3_0 = (tmp&(((A>>3)&1) & ((B>>0)&1)))|(S_2_1&C_2_0);
  tmp = S_2_2^C_2_1;
  S_3_1 = tmp^(((A>>3)&1) & ((B>>1)&1));
  C_3_1 = (tmp&(((A>>3)&1) & ((B>>1)&1)))|(S_2_2&C_2_1);
  tmp = S_2_3^C_2_2;
  S_3_2 = tmp^(((A>>3)&1) & ((B>>2)&1));
  C_3_2 = (tmp&(((A>>3)&1) & ((B>>2)&1)))|(S_2_3&C_2_2);
  tmp = S_2_4^C_2_3;
  S_3_3 = tmp^(((A>>3)&1) & ((B>>3)&1));
  C_3_3 = (tmp&(((A>>3)&1) & ((B>>3)&1)))|(S_2_4&C_2_3);
  tmp = S_2_5^C_2_4;
  S_3_4 = tmp^(((A>>3)&1) & ((B>>4)&1));
  C_3_4 = (tmp&(((A>>3)&1) & ((B>>4)&1)))|(S_2_5&C_2_4);
  tmp = S_2_6^C_2_5;
  S_3_5 = tmp^(((A>>3)&1) & ((B>>5)&1));
  C_3_5 = (tmp&(((A>>3)&1) & ((B>>5)&1)))|(S_2_6&C_2_5);
  tmp = S_2_7^C_2_6;
  S_3_6 = tmp^(((A>>3)&1) & ((B>>6)&1));
  C_3_6 = (tmp&(((A>>3)&1) & ((B>>6)&1)))|(S_2_7&C_2_6);
  tmp = S_2_8^C_2_7;
  S_3_7 = tmp^(((A>>3)&1) & ((B>>7)&1));
  C_3_7 = (tmp&(((A>>3)&1) & ((B>>7)&1)))|(S_2_8&C_2_7);
  tmp = S_2_9^C_2_8;
  S_3_8 = tmp^(((A>>3)&1) & ((B>>8)&1));
  C_3_8 = (tmp&(((A>>3)&1) & ((B>>8)&1)))|(S_2_9&C_2_8);
  tmp = S_2_10^C_2_9;
  S_3_9 = tmp^(((A>>3)&1) & ((B>>9)&1));
  C_3_9 = (tmp&(((A>>3)&1) & ((B>>9)&1)))|(S_2_10&C_2_9);
  tmp = S_2_11^C_2_10;
  S_3_10 = tmp^(((A>>3)&1) & ((B>>10)&1));
  C_3_10 = (tmp&(((A>>3)&1) & ((B>>10)&1)))|(S_2_11&C_2_10);
  tmp = S_2_12^C_2_11;
  S_3_11 = tmp^(((A>>3)&1) & ((B>>11)&1));
  C_3_11 = (tmp&(((A>>3)&1) & ((B>>11)&1)))|(S_2_12&C_2_11);
  tmp = S_2_13^C_2_12;
  S_3_12 = tmp^(((A>>3)&1) & ((B>>12)&1));
  C_3_12 = (tmp&(((A>>3)&1) & ((B>>12)&1)))|(S_2_13&C_2_12);
  tmp = S_2_14^C_2_13;
  S_3_13 = tmp^(((A>>3)&1) & ((B>>13)&1));
  C_3_13 = (tmp&(((A>>3)&1) & ((B>>13)&1)))|(S_2_14&C_2_13);
  tmp = S_2_15^C_2_14;
  S_3_14 = tmp^(((A>>3)&1) & ((B>>14)&1));
  C_3_14 = (tmp&(((A>>3)&1) & ((B>>14)&1)))|(S_2_15&C_2_14);
  S_3_15 = C_2_15^(((((A>>3)&1) & ((B>>15)&1)))^1);
  C_3_15 = C_2_15&(((((A>>3)&1) & ((B>>15)&1)))^1);
  tmp = S_3_1^C_3_0;
  S_4_0 = tmp^(((A>>4)&1) & ((B>>0)&1));
  C_4_0 = (tmp&(((A>>4)&1) & ((B>>0)&1)))|(S_3_1&C_3_0);
  tmp = S_3_2^C_3_1;
  S_4_1 = tmp^(((A>>4)&1) & ((B>>1)&1));
  C_4_1 = (tmp&(((A>>4)&1) & ((B>>1)&1)))|(S_3_2&C_3_1);
  tmp = S_3_3^C_3_2;
  S_4_2 = tmp^(((A>>4)&1) & ((B>>2)&1));
  C_4_2 = (tmp&(((A>>4)&1) & ((B>>2)&1)))|(S_3_3&C_3_2);
  tmp = S_3_4^C_3_3;
  S_4_3 = tmp^(((A>>4)&1) & ((B>>3)&1));
  C_4_3 = (tmp&(((A>>4)&1) & ((B>>3)&1)))|(S_3_4&C_3_3);
  tmp = S_3_5^C_3_4;
  S_4_4 = tmp^(((A>>4)&1) & ((B>>4)&1));
  C_4_4 = (tmp&(((A>>4)&1) & ((B>>4)&1)))|(S_3_5&C_3_4);
  tmp = S_3_6^C_3_5;
  S_4_5 = tmp^(((A>>4)&1) & ((B>>5)&1));
  C_4_5 = (tmp&(((A>>4)&1) & ((B>>5)&1)))|(S_3_6&C_3_5);
  tmp = S_3_7^C_3_6;
  S_4_6 = tmp^(((A>>4)&1) & ((B>>6)&1));
  C_4_6 = (tmp&(((A>>4)&1) & ((B>>6)&1)))|(S_3_7&C_3_6);
  tmp = S_3_8^C_3_7;
  S_4_7 = tmp^(((A>>4)&1) & ((B>>7)&1));
  C_4_7 = (tmp&(((A>>4)&1) & ((B>>7)&1)))|(S_3_8&C_3_7);
  tmp = S_3_9^C_3_8;
  S_4_8 = tmp^(((A>>4)&1) & ((B>>8)&1));
  C_4_8 = (tmp&(((A>>4)&1) & ((B>>8)&1)))|(S_3_9&C_3_8);
  tmp = S_3_10^C_3_9;
  S_4_9 = tmp^(((A>>4)&1) & ((B>>9)&1));
  C_4_9 = (tmp&(((A>>4)&1) & ((B>>9)&1)))|(S_3_10&C_3_9);
  tmp = S_3_11^C_3_10;
  S_4_10 = tmp^(((A>>4)&1) & ((B>>10)&1));
  C_4_10 = (tmp&(((A>>4)&1) & ((B>>10)&1)))|(S_3_11&C_3_10);
  tmp = S_3_12^C_3_11;
  S_4_11 = tmp^(((A>>4)&1) & ((B>>11)&1));
  C_4_11 = (tmp&(((A>>4)&1) & ((B>>11)&1)))|(S_3_12&C_3_11);
  tmp = S_3_13^C_3_12;
  S_4_12 = tmp^(((A>>4)&1) & ((B>>12)&1));
  C_4_12 = (tmp&(((A>>4)&1) & ((B>>12)&1)))|(S_3_13&C_3_12);
  tmp = S_3_14^C_3_13;
  S_4_13 = tmp^(((A>>4)&1) & ((B>>13)&1));
  C_4_13 = (tmp&(((A>>4)&1) & ((B>>13)&1)))|(S_3_14&C_3_13);
  tmp = S_3_15^C_3_14;
  S_4_14 = tmp^(((A>>4)&1) & ((B>>14)&1));
  C_4_14 = (tmp&(((A>>4)&1) & ((B>>14)&1)))|(S_3_15&C_3_14);
  S_4_15 = C_3_15^(((((A>>4)&1) & ((B>>15)&1)))^1);
  C_4_15 = C_3_15&(((((A>>4)&1) & ((B>>15)&1)))^1);
  tmp = S_4_1^C_4_0;
  S_5_0 = tmp^(((A>>5)&1) & ((B>>0)&1));
  C_5_0 = (tmp&(((A>>5)&1) & ((B>>0)&1)))|(S_4_1&C_4_0);
  tmp = S_4_2^C_4_1;
  S_5_1 = tmp^(((A>>5)&1) & ((B>>1)&1));
  C_5_1 = (tmp&(((A>>5)&1) & ((B>>1)&1)))|(S_4_2&C_4_1);
  tmp = S_4_3^C_4_2;
  S_5_2 = tmp^(((A>>5)&1) & ((B>>2)&1));
  C_5_2 = (tmp&(((A>>5)&1) & ((B>>2)&1)))|(S_4_3&C_4_2);
  tmp = S_4_4^C_4_3;
  S_5_3 = tmp^(((A>>5)&1) & ((B>>3)&1));
  C_5_3 = (tmp&(((A>>5)&1) & ((B>>3)&1)))|(S_4_4&C_4_3);
  tmp = S_4_5^C_4_4;
  S_5_4 = tmp^(((A>>5)&1) & ((B>>4)&1));
  C_5_4 = (tmp&(((A>>5)&1) & ((B>>4)&1)))|(S_4_5&C_4_4);
  tmp = S_4_6^C_4_5;
  S_5_5 = tmp^(((A>>5)&1) & ((B>>5)&1));
  C_5_5 = (tmp&(((A>>5)&1) & ((B>>5)&1)))|(S_4_6&C_4_5);
  tmp = S_4_7^C_4_6;
  S_5_6 = tmp^(((A>>5)&1) & ((B>>6)&1));
  C_5_6 = (tmp&(((A>>5)&1) & ((B>>6)&1)))|(S_4_7&C_4_6);
  tmp = S_4_8^C_4_7;
  S_5_7 = tmp^(((A>>5)&1) & ((B>>7)&1));
  C_5_7 = (tmp&(((A>>5)&1) & ((B>>7)&1)))|(S_4_8&C_4_7);
  tmp = S_4_9^C_4_8;
  S_5_8 = tmp^(((A>>5)&1) & ((B>>8)&1));
  C_5_8 = (tmp&(((A>>5)&1) & ((B>>8)&1)))|(S_4_9&C_4_8);
  tmp = S_4_10^C_4_9;
  S_5_9 = tmp^(((A>>5)&1) & ((B>>9)&1));
  C_5_9 = (tmp&(((A>>5)&1) & ((B>>9)&1)))|(S_4_10&C_4_9);
  tmp = S_4_11^C_4_10;
  S_5_10 = tmp^(((A>>5)&1) & ((B>>10)&1));
  C_5_10 = (tmp&(((A>>5)&1) & ((B>>10)&1)))|(S_4_11&C_4_10);
  tmp = S_4_12^C_4_11;
  S_5_11 = tmp^(((A>>5)&1) & ((B>>11)&1));
  C_5_11 = (tmp&(((A>>5)&1) & ((B>>11)&1)))|(S_4_12&C_4_11);
  tmp = S_4_13^C_4_12;
  S_5_12 = tmp^(((A>>5)&1) & ((B>>12)&1));
  C_5_12 = (tmp&(((A>>5)&1) & ((B>>12)&1)))|(S_4_13&C_4_12);
  tmp = S_4_14^C_4_13;
  S_5_13 = tmp^(((A>>5)&1) & ((B>>13)&1));
  C_5_13 = (tmp&(((A>>5)&1) & ((B>>13)&1)))|(S_4_14&C_4_13);
  tmp = S_4_15^C_4_14;
  S_5_14 = tmp^(((A>>5)&1) & ((B>>14)&1));
  C_5_14 = (tmp&(((A>>5)&1) & ((B>>14)&1)))|(S_4_15&C_4_14);
  S_5_15 = C_4_15^(((((A>>5)&1) & ((B>>15)&1)))^1);
  C_5_15 = C_4_15&(((((A>>5)&1) & ((B>>15)&1)))^1);
  tmp = S_5_1^C_5_0;
  S_6_0 = tmp^(((A>>6)&1) & ((B>>0)&1));
  C_6_0 = (tmp&(((A>>6)&1) & ((B>>0)&1)))|(S_5_1&C_5_0);
  tmp = S_5_2^C_5_1;
  S_6_1 = tmp^(((A>>6)&1) & ((B>>1)&1));
  C_6_1 = (tmp&(((A>>6)&1) & ((B>>1)&1)))|(S_5_2&C_5_1);
  tmp = S_5_3^C_5_2;
  S_6_2 = tmp^(((A>>6)&1) & ((B>>2)&1));
  C_6_2 = (tmp&(((A>>6)&1) & ((B>>2)&1)))|(S_5_3&C_5_2);
  tmp = S_5_4^C_5_3;
  S_6_3 = tmp^(((A>>6)&1) & ((B>>3)&1));
  C_6_3 = (tmp&(((A>>6)&1) & ((B>>3)&1)))|(S_5_4&C_5_3);
  tmp = S_5_5^C_5_4;
  S_6_4 = tmp^(((A>>6)&1) & ((B>>4)&1));
  C_6_4 = (tmp&(((A>>6)&1) & ((B>>4)&1)))|(S_5_5&C_5_4);
  tmp = S_5_6^C_5_5;
  S_6_5 = tmp^(((A>>6)&1) & ((B>>5)&1));
  C_6_5 = (tmp&(((A>>6)&1) & ((B>>5)&1)))|(S_5_6&C_5_5);
  tmp = S_5_7^C_5_6;
  S_6_6 = tmp^(((A>>6)&1) & ((B>>6)&1));
  C_6_6 = (tmp&(((A>>6)&1) & ((B>>6)&1)))|(S_5_7&C_5_6);
  tmp = S_5_8^C_5_7;
  S_6_7 = tmp^(((A>>6)&1) & ((B>>7)&1));
  C_6_7 = (tmp&(((A>>6)&1) & ((B>>7)&1)))|(S_5_8&C_5_7);
  tmp = S_5_9^C_5_8;
  S_6_8 = tmp^(((A>>6)&1) & ((B>>8)&1));
  C_6_8 = (tmp&(((A>>6)&1) & ((B>>8)&1)))|(S_5_9&C_5_8);
  tmp = S_5_10^C_5_9;
  S_6_9 = tmp^(((A>>6)&1) & ((B>>9)&1));
  C_6_9 = (tmp&(((A>>6)&1) & ((B>>9)&1)))|(S_5_10&C_5_9);
  tmp = S_5_11^C_5_10;
  S_6_10 = tmp^(((A>>6)&1) & ((B>>10)&1));
  C_6_10 = (tmp&(((A>>6)&1) & ((B>>10)&1)))|(S_5_11&C_5_10);
  tmp = S_5_12^C_5_11;
  S_6_11 = tmp^(((A>>6)&1) & ((B>>11)&1));
  C_6_11 = (tmp&(((A>>6)&1) & ((B>>11)&1)))|(S_5_12&C_5_11);
  tmp = S_5_13^C_5_12;
  S_6_12 = tmp^(((A>>6)&1) & ((B>>12)&1));
  C_6_12 = (tmp&(((A>>6)&1) & ((B>>12)&1)))|(S_5_13&C_5_12);
  tmp = S_5_14^C_5_13;
  S_6_13 = tmp^(((A>>6)&1) & ((B>>13)&1));
  C_6_13 = (tmp&(((A>>6)&1) & ((B>>13)&1)))|(S_5_14&C_5_13);
  tmp = S_5_15^C_5_14;
  S_6_14 = tmp^(((A>>6)&1) & ((B>>14)&1));
  C_6_14 = (tmp&(((A>>6)&1) & ((B>>14)&1)))|(S_5_15&C_5_14);
  S_6_15 = C_5_15^(((((A>>6)&1) & ((B>>15)&1)))^1);
  C_6_15 = C_5_15&(((((A>>6)&1) & ((B>>15)&1)))^1);
  tmp = S_6_1^C_6_0;
  S_7_0 = tmp^(((A>>7)&1) & ((B>>0)&1));
  C_7_0 = (tmp&(((A>>7)&1) & ((B>>0)&1)))|(S_6_1&C_6_0);
  tmp = S_6_2^C_6_1;
  S_7_1 = tmp^(((A>>7)&1) & ((B>>1)&1));
  C_7_1 = (tmp&(((A>>7)&1) & ((B>>1)&1)))|(S_6_2&C_6_1);
  tmp = S_6_3^C_6_2;
  S_7_2 = tmp^(((A>>7)&1) & ((B>>2)&1));
  C_7_2 = (tmp&(((A>>7)&1) & ((B>>2)&1)))|(S_6_3&C_6_2);
  tmp = S_6_4^C_6_3;
  S_7_3 = tmp^(((A>>7)&1) & ((B>>3)&1));
  C_7_3 = (tmp&(((A>>7)&1) & ((B>>3)&1)))|(S_6_4&C_6_3);
  tmp = S_6_5^C_6_4;
  S_7_4 = tmp^(((A>>7)&1) & ((B>>4)&1));
  C_7_4 = (tmp&(((A>>7)&1) & ((B>>4)&1)))|(S_6_5&C_6_4);
  tmp = S_6_6^C_6_5;
  S_7_5 = tmp^(((A>>7)&1) & ((B>>5)&1));
  C_7_5 = (tmp&(((A>>7)&1) & ((B>>5)&1)))|(S_6_6&C_6_5);
  tmp = S_6_7^C_6_6;
  S_7_6 = tmp^(((A>>7)&1) & ((B>>6)&1));
  C_7_6 = (tmp&(((A>>7)&1) & ((B>>6)&1)))|(S_6_7&C_6_6);
  tmp = S_6_8^C_6_7;
  S_7_7 = tmp^(((A>>7)&1) & ((B>>7)&1));
  C_7_7 = (tmp&(((A>>7)&1) & ((B>>7)&1)))|(S_6_8&C_6_7);
  tmp = S_6_9^C_6_8;
  S_7_8 = tmp^(((A>>7)&1) & ((B>>8)&1));
  C_7_8 = (tmp&(((A>>7)&1) & ((B>>8)&1)))|(S_6_9&C_6_8);
  tmp = S_6_10^C_6_9;
  S_7_9 = tmp^(((A>>7)&1) & ((B>>9)&1));
  C_7_9 = (tmp&(((A>>7)&1) & ((B>>9)&1)))|(S_6_10&C_6_9);
  tmp = S_6_11^C_6_10;
  S_7_10 = tmp^(((A>>7)&1) & ((B>>10)&1));
  C_7_10 = (tmp&(((A>>7)&1) & ((B>>10)&1)))|(S_6_11&C_6_10);
  tmp = S_6_12^C_6_11;
  S_7_11 = tmp^(((A>>7)&1) & ((B>>11)&1));
  C_7_11 = (tmp&(((A>>7)&1) & ((B>>11)&1)))|(S_6_12&C_6_11);
  tmp = S_6_13^C_6_12;
  S_7_12 = tmp^(((A>>7)&1) & ((B>>12)&1));
  C_7_12 = (tmp&(((A>>7)&1) & ((B>>12)&1)))|(S_6_13&C_6_12);
  tmp = S_6_14^C_6_13;
  S_7_13 = tmp^(((A>>7)&1) & ((B>>13)&1));
  C_7_13 = (tmp&(((A>>7)&1) & ((B>>13)&1)))|(S_6_14&C_6_13);
  tmp = S_6_15^C_6_14;
  S_7_14 = tmp^(((A>>7)&1) & ((B>>14)&1));
  C_7_14 = (tmp&(((A>>7)&1) & ((B>>14)&1)))|(S_6_15&C_6_14);
  S_7_15 = C_6_15^(((((A>>7)&1) & ((B>>15)&1)))^1);
  C_7_15 = C_6_15&(((((A>>7)&1) & ((B>>15)&1)))^1);
  tmp = S_7_1^C_7_0;
  S_8_0 = tmp^(((A>>8)&1) & ((B>>0)&1));
  C_8_0 = (tmp&(((A>>8)&1) & ((B>>0)&1)))|(S_7_1&C_7_0);
  tmp = S_7_2^C_7_1;
  S_8_1 = tmp^(((A>>8)&1) & ((B>>1)&1));
  C_8_1 = (tmp&(((A>>8)&1) & ((B>>1)&1)))|(S_7_2&C_7_1);
  tmp = S_7_3^C_7_2;
  S_8_2 = tmp^(((A>>8)&1) & ((B>>2)&1));
  C_8_2 = (tmp&(((A>>8)&1) & ((B>>2)&1)))|(S_7_3&C_7_2);
  tmp = S_7_4^C_7_3;
  S_8_3 = tmp^(((A>>8)&1) & ((B>>3)&1));
  C_8_3 = (tmp&(((A>>8)&1) & ((B>>3)&1)))|(S_7_4&C_7_3);
  tmp = S_7_5^C_7_4;
  S_8_4 = tmp^(((A>>8)&1) & ((B>>4)&1));
  C_8_4 = (tmp&(((A>>8)&1) & ((B>>4)&1)))|(S_7_5&C_7_4);
  tmp = S_7_6^C_7_5;
  S_8_5 = tmp^(((A>>8)&1) & ((B>>5)&1));
  C_8_5 = (tmp&(((A>>8)&1) & ((B>>5)&1)))|(S_7_6&C_7_5);
  tmp = S_7_7^C_7_6;
  S_8_6 = tmp^(((A>>8)&1) & ((B>>6)&1));
  C_8_6 = (tmp&(((A>>8)&1) & ((B>>6)&1)))|(S_7_7&C_7_6);
  tmp = S_7_8^C_7_7;
  S_8_7 = tmp^(((A>>8)&1) & ((B>>7)&1));
  C_8_7 = (tmp&(((A>>8)&1) & ((B>>7)&1)))|(S_7_8&C_7_7);
  tmp = S_7_9^C_7_8;
  S_8_8 = tmp^(((A>>8)&1) & ((B>>8)&1));
  C_8_8 = (tmp&(((A>>8)&1) & ((B>>8)&1)))|(S_7_9&C_7_8);
  tmp = S_7_10^C_7_9;
  S_8_9 = tmp^(((A>>8)&1) & ((B>>9)&1));
  C_8_9 = (tmp&(((A>>8)&1) & ((B>>9)&1)))|(S_7_10&C_7_9);
  tmp = S_7_11^C_7_10;
  S_8_10 = tmp^(((A>>8)&1) & ((B>>10)&1));
  C_8_10 = (tmp&(((A>>8)&1) & ((B>>10)&1)))|(S_7_11&C_7_10);
  tmp = S_7_12^C_7_11;
  S_8_11 = tmp^(((A>>8)&1) & ((B>>11)&1));
  C_8_11 = (tmp&(((A>>8)&1) & ((B>>11)&1)))|(S_7_12&C_7_11);
  tmp = S_7_13^C_7_12;
  S_8_12 = tmp^(((A>>8)&1) & ((B>>12)&1));
  C_8_12 = (tmp&(((A>>8)&1) & ((B>>12)&1)))|(S_7_13&C_7_12);
  tmp = S_7_14^C_7_13;
  S_8_13 = tmp^(((A>>8)&1) & ((B>>13)&1));
  C_8_13 = (tmp&(((A>>8)&1) & ((B>>13)&1)))|(S_7_14&C_7_13);
  tmp = S_7_15^C_7_14;
  S_8_14 = tmp^(((A>>8)&1) & ((B>>14)&1));
  C_8_14 = (tmp&(((A>>8)&1) & ((B>>14)&1)))|(S_7_15&C_7_14);
  S_8_15 = C_7_15^(((((A>>8)&1) & ((B>>15)&1)))^1);
  C_8_15 = C_7_15&(((((A>>8)&1) & ((B>>15)&1)))^1);
  tmp = S_8_1^C_8_0;
  S_9_0 = tmp^(((A>>9)&1) & ((B>>0)&1));
  C_9_0 = (tmp&(((A>>9)&1) & ((B>>0)&1)))|(S_8_1&C_8_0);
  tmp = S_8_2^C_8_1;
  S_9_1 = tmp^(((A>>9)&1) & ((B>>1)&1));
  C_9_1 = (tmp&(((A>>9)&1) & ((B>>1)&1)))|(S_8_2&C_8_1);
  tmp = S_8_3^C_8_2;
  S_9_2 = tmp^(((A>>9)&1) & ((B>>2)&1));
  C_9_2 = (tmp&(((A>>9)&1) & ((B>>2)&1)))|(S_8_3&C_8_2);
  tmp = S_8_4^C_8_3;
  S_9_3 = tmp^(((A>>9)&1) & ((B>>3)&1));
  C_9_3 = (tmp&(((A>>9)&1) & ((B>>3)&1)))|(S_8_4&C_8_3);
  tmp = S_8_5^C_8_4;
  S_9_4 = tmp^(((A>>9)&1) & ((B>>4)&1));
  C_9_4 = (tmp&(((A>>9)&1) & ((B>>4)&1)))|(S_8_5&C_8_4);
  tmp = S_8_6^C_8_5;
  S_9_5 = tmp^(((A>>9)&1) & ((B>>5)&1));
  C_9_5 = (tmp&(((A>>9)&1) & ((B>>5)&1)))|(S_8_6&C_8_5);
  tmp = S_8_7^C_8_6;
  S_9_6 = tmp^(((A>>9)&1) & ((B>>6)&1));
  C_9_6 = (tmp&(((A>>9)&1) & ((B>>6)&1)))|(S_8_7&C_8_6);
  tmp = S_8_8^C_8_7;
  S_9_7 = tmp^(((A>>9)&1) & ((B>>7)&1));
  C_9_7 = (tmp&(((A>>9)&1) & ((B>>7)&1)))|(S_8_8&C_8_7);
  tmp = S_8_9^C_8_8;
  S_9_8 = tmp^(((A>>9)&1) & ((B>>8)&1));
  C_9_8 = (tmp&(((A>>9)&1) & ((B>>8)&1)))|(S_8_9&C_8_8);
  tmp = S_8_10^C_8_9;
  S_9_9 = tmp^(((A>>9)&1) & ((B>>9)&1));
  C_9_9 = (tmp&(((A>>9)&1) & ((B>>9)&1)))|(S_8_10&C_8_9);
  tmp = S_8_11^C_8_10;
  S_9_10 = tmp^(((A>>9)&1) & ((B>>10)&1));
  C_9_10 = (tmp&(((A>>9)&1) & ((B>>10)&1)))|(S_8_11&C_8_10);
  tmp = S_8_12^C_8_11;
  S_9_11 = tmp^(((A>>9)&1) & ((B>>11)&1));
  C_9_11 = (tmp&(((A>>9)&1) & ((B>>11)&1)))|(S_8_12&C_8_11);
  tmp = S_8_13^C_8_12;
  S_9_12 = tmp^(((A>>9)&1) & ((B>>12)&1));
  C_9_12 = (tmp&(((A>>9)&1) & ((B>>12)&1)))|(S_8_13&C_8_12);
  tmp = S_8_14^C_8_13;
  S_9_13 = tmp^(((A>>9)&1) & ((B>>13)&1));
  C_9_13 = (tmp&(((A>>9)&1) & ((B>>13)&1)))|(S_8_14&C_8_13);
  tmp = S_8_15^C_8_14;
  S_9_14 = tmp^(((A>>9)&1) & ((B>>14)&1));
  C_9_14 = (tmp&(((A>>9)&1) & ((B>>14)&1)))|(S_8_15&C_8_14);
  S_9_15 = C_8_15^(((((A>>9)&1) & ((B>>15)&1)))^1);
  C_9_15 = C_8_15&(((((A>>9)&1) & ((B>>15)&1)))^1);
  tmp = S_9_1^C_9_0;
  S_10_0 = tmp^(((A>>10)&1) & ((B>>0)&1));
  C_10_0 = (tmp&(((A>>10)&1) & ((B>>0)&1)))|(S_9_1&C_9_0);
  tmp = S_9_2^C_9_1;
  S_10_1 = tmp^(((A>>10)&1) & ((B>>1)&1));
  C_10_1 = (tmp&(((A>>10)&1) & ((B>>1)&1)))|(S_9_2&C_9_1);
  tmp = S_9_3^C_9_2;
  S_10_2 = tmp^(((A>>10)&1) & ((B>>2)&1));
  C_10_2 = (tmp&(((A>>10)&1) & ((B>>2)&1)))|(S_9_3&C_9_2);
  tmp = S_9_4^C_9_3;
  S_10_3 = tmp^(((A>>10)&1) & ((B>>3)&1));
  C_10_3 = (tmp&(((A>>10)&1) & ((B>>3)&1)))|(S_9_4&C_9_3);
  tmp = S_9_5^C_9_4;
  S_10_4 = tmp^(((A>>10)&1) & ((B>>4)&1));
  C_10_4 = (tmp&(((A>>10)&1) & ((B>>4)&1)))|(S_9_5&C_9_4);
  tmp = S_9_6^C_9_5;
  S_10_5 = tmp^(((A>>10)&1) & ((B>>5)&1));
  C_10_5 = (tmp&(((A>>10)&1) & ((B>>5)&1)))|(S_9_6&C_9_5);
  tmp = S_9_7^C_9_6;
  S_10_6 = tmp^(((A>>10)&1) & ((B>>6)&1));
  C_10_6 = (tmp&(((A>>10)&1) & ((B>>6)&1)))|(S_9_7&C_9_6);
  tmp = S_9_8^C_9_7;
  S_10_7 = tmp^(((A>>10)&1) & ((B>>7)&1));
  C_10_7 = (tmp&(((A>>10)&1) & ((B>>7)&1)))|(S_9_8&C_9_7);
  tmp = S_9_9^C_9_8;
  S_10_8 = tmp^(((A>>10)&1) & ((B>>8)&1));
  C_10_8 = (tmp&(((A>>10)&1) & ((B>>8)&1)))|(S_9_9&C_9_8);
  tmp = S_9_10^C_9_9;
  S_10_9 = tmp^(((A>>10)&1) & ((B>>9)&1));
  C_10_9 = (tmp&(((A>>10)&1) & ((B>>9)&1)))|(S_9_10&C_9_9);
  tmp = S_9_11^C_9_10;
  S_10_10 = tmp^(((A>>10)&1) & ((B>>10)&1));
  C_10_10 = (tmp&(((A>>10)&1) & ((B>>10)&1)))|(S_9_11&C_9_10);
  tmp = S_9_12^C_9_11;
  S_10_11 = tmp^(((A>>10)&1) & ((B>>11)&1));
  C_10_11 = (tmp&(((A>>10)&1) & ((B>>11)&1)))|(S_9_12&C_9_11);
  tmp = S_9_13^C_9_12;
  S_10_12 = tmp^(((A>>10)&1) & ((B>>12)&1));
  C_10_12 = (tmp&(((A>>10)&1) & ((B>>12)&1)))|(S_9_13&C_9_12);
  tmp = S_9_14^C_9_13;
  S_10_13 = tmp^(((A>>10)&1) & ((B>>13)&1));
  C_10_13 = (tmp&(((A>>10)&1) & ((B>>13)&1)))|(S_9_14&C_9_13);
  tmp = S_9_15^C_9_14;
  S_10_14 = tmp^(((A>>10)&1) & ((B>>14)&1));
  C_10_14 = (tmp&(((A>>10)&1) & ((B>>14)&1)))|(S_9_15&C_9_14);
  S_10_15 = C_9_15^(((((A>>10)&1) & ((B>>15)&1)))^1);
  C_10_15 = C_9_15&(((((A>>10)&1) & ((B>>15)&1)))^1);
  tmp = S_10_1^C_10_0;
  S_11_0 = tmp^(((A>>11)&1) & ((B>>0)&1));
  C_11_0 = (tmp&(((A>>11)&1) & ((B>>0)&1)))|(S_10_1&C_10_0);
  tmp = S_10_2^C_10_1;
  S_11_1 = tmp^(((A>>11)&1) & ((B>>1)&1));
  C_11_1 = (tmp&(((A>>11)&1) & ((B>>1)&1)))|(S_10_2&C_10_1);
  tmp = S_10_3^C_10_2;
  S_11_2 = tmp^(((A>>11)&1) & ((B>>2)&1));
  C_11_2 = (tmp&(((A>>11)&1) & ((B>>2)&1)))|(S_10_3&C_10_2);
  tmp = S_10_4^C_10_3;
  S_11_3 = tmp^(((A>>11)&1) & ((B>>3)&1));
  C_11_3 = (tmp&(((A>>11)&1) & ((B>>3)&1)))|(S_10_4&C_10_3);
  tmp = S_10_5^C_10_4;
  S_11_4 = tmp^(((A>>11)&1) & ((B>>4)&1));
  C_11_4 = (tmp&(((A>>11)&1) & ((B>>4)&1)))|(S_10_5&C_10_4);
  tmp = S_10_6^C_10_5;
  S_11_5 = tmp^(((A>>11)&1) & ((B>>5)&1));
  C_11_5 = (tmp&(((A>>11)&1) & ((B>>5)&1)))|(S_10_6&C_10_5);
  tmp = S_10_7^C_10_6;
  S_11_6 = tmp^(((A>>11)&1) & ((B>>6)&1));
  C_11_6 = (tmp&(((A>>11)&1) & ((B>>6)&1)))|(S_10_7&C_10_6);
  tmp = S_10_8^C_10_7;
  S_11_7 = tmp^(((A>>11)&1) & ((B>>7)&1));
  C_11_7 = (tmp&(((A>>11)&1) & ((B>>7)&1)))|(S_10_8&C_10_7);
  tmp = S_10_9^C_10_8;
  S_11_8 = tmp^(((A>>11)&1) & ((B>>8)&1));
  C_11_8 = (tmp&(((A>>11)&1) & ((B>>8)&1)))|(S_10_9&C_10_8);
  tmp = S_10_10^C_10_9;
  S_11_9 = tmp^(((A>>11)&1) & ((B>>9)&1));
  C_11_9 = (tmp&(((A>>11)&1) & ((B>>9)&1)))|(S_10_10&C_10_9);
  tmp = S_10_11^C_10_10;
  S_11_10 = tmp^(((A>>11)&1) & ((B>>10)&1));
  C_11_10 = (tmp&(((A>>11)&1) & ((B>>10)&1)))|(S_10_11&C_10_10);
  tmp = S_10_12^C_10_11;
  S_11_11 = tmp^(((A>>11)&1) & ((B>>11)&1));
  C_11_11 = (tmp&(((A>>11)&1) & ((B>>11)&1)))|(S_10_12&C_10_11);
  tmp = S_10_13^C_10_12;
  S_11_12 = tmp^(((A>>11)&1) & ((B>>12)&1));
  C_11_12 = (tmp&(((A>>11)&1) & ((B>>12)&1)))|(S_10_13&C_10_12);
  tmp = S_10_14^C_10_13;
  S_11_13 = tmp^(((A>>11)&1) & ((B>>13)&1));
  C_11_13 = (tmp&(((A>>11)&1) & ((B>>13)&1)))|(S_10_14&C_10_13);
  tmp = S_10_15^C_10_14;
  S_11_14 = tmp^(((A>>11)&1) & ((B>>14)&1));
  C_11_14 = (tmp&(((A>>11)&1) & ((B>>14)&1)))|(S_10_15&C_10_14);
  S_11_15 = C_10_15^(((((A>>11)&1) & ((B>>15)&1)))^1);
  C_11_15 = C_10_15&(((((A>>11)&1) & ((B>>15)&1)))^1);
  tmp = S_11_1^C_11_0;
  S_12_0 = tmp^(((A>>12)&1) & ((B>>0)&1));
  C_12_0 = (tmp&(((A>>12)&1) & ((B>>0)&1)))|(S_11_1&C_11_0);
  tmp = S_11_2^C_11_1;
  S_12_1 = tmp^(((A>>12)&1) & ((B>>1)&1));
  C_12_1 = (tmp&(((A>>12)&1) & ((B>>1)&1)))|(S_11_2&C_11_1);
  tmp = S_11_3^C_11_2;
  S_12_2 = tmp^(((A>>12)&1) & ((B>>2)&1));
  C_12_2 = (tmp&(((A>>12)&1) & ((B>>2)&1)))|(S_11_3&C_11_2);
  tmp = S_11_4^C_11_3;
  S_12_3 = tmp^(((A>>12)&1) & ((B>>3)&1));
  C_12_3 = (tmp&(((A>>12)&1) & ((B>>3)&1)))|(S_11_4&C_11_3);
  tmp = S_11_5^C_11_4;
  S_12_4 = tmp^(((A>>12)&1) & ((B>>4)&1));
  C_12_4 = (tmp&(((A>>12)&1) & ((B>>4)&1)))|(S_11_5&C_11_4);
  tmp = S_11_6^C_11_5;
  S_12_5 = tmp^(((A>>12)&1) & ((B>>5)&1));
  C_12_5 = (tmp&(((A>>12)&1) & ((B>>5)&1)))|(S_11_6&C_11_5);
  tmp = S_11_7^C_11_6;
  S_12_6 = tmp^(((A>>12)&1) & ((B>>6)&1));
  C_12_6 = (tmp&(((A>>12)&1) & ((B>>6)&1)))|(S_11_7&C_11_6);
  tmp = S_11_8^C_11_7;
  S_12_7 = tmp^(((A>>12)&1) & ((B>>7)&1));
  C_12_7 = (tmp&(((A>>12)&1) & ((B>>7)&1)))|(S_11_8&C_11_7);
  tmp = S_11_9^C_11_8;
  S_12_8 = tmp^(((A>>12)&1) & ((B>>8)&1));
  C_12_8 = (tmp&(((A>>12)&1) & ((B>>8)&1)))|(S_11_9&C_11_8);
  tmp = S_11_10^C_11_9;
  S_12_9 = tmp^(((A>>12)&1) & ((B>>9)&1));
  C_12_9 = (tmp&(((A>>12)&1) & ((B>>9)&1)))|(S_11_10&C_11_9);
  tmp = S_11_11^C_11_10;
  S_12_10 = tmp^(((A>>12)&1) & ((B>>10)&1));
  C_12_10 = (tmp&(((A>>12)&1) & ((B>>10)&1)))|(S_11_11&C_11_10);
  tmp = S_11_12^C_11_11;
  S_12_11 = tmp^(((A>>12)&1) & ((B>>11)&1));
  C_12_11 = (tmp&(((A>>12)&1) & ((B>>11)&1)))|(S_11_12&C_11_11);
  tmp = S_11_13^C_11_12;
  S_12_12 = tmp^(((A>>12)&1) & ((B>>12)&1));
  C_12_12 = (tmp&(((A>>12)&1) & ((B>>12)&1)))|(S_11_13&C_11_12);
  tmp = S_11_14^C_11_13;
  S_12_13 = tmp^(((A>>12)&1) & ((B>>13)&1));
  C_12_13 = (tmp&(((A>>12)&1) & ((B>>13)&1)))|(S_11_14&C_11_13);
  tmp = S_11_15^C_11_14;
  S_12_14 = tmp^(((A>>12)&1) & ((B>>14)&1));
  C_12_14 = (tmp&(((A>>12)&1) & ((B>>14)&1)))|(S_11_15&C_11_14);
  S_12_15 = C_11_15^(((((A>>12)&1) & ((B>>15)&1)))^1);
  C_12_15 = C_11_15&(((((A>>12)&1) & ((B>>15)&1)))^1);
  tmp = S_12_1^C_12_0;
  S_13_0 = tmp^(((A>>13)&1) & ((B>>0)&1));
  C_13_0 = (tmp&(((A>>13)&1) & ((B>>0)&1)))|(S_12_1&C_12_0);
  tmp = S_12_2^C_12_1;
  S_13_1 = tmp^(((A>>13)&1) & ((B>>1)&1));
  C_13_1 = (tmp&(((A>>13)&1) & ((B>>1)&1)))|(S_12_2&C_12_1);
  tmp = S_12_3^C_12_2;
  S_13_2 = tmp^(((A>>13)&1) & ((B>>2)&1));
  C_13_2 = (tmp&(((A>>13)&1) & ((B>>2)&1)))|(S_12_3&C_12_2);
  tmp = S_12_4^C_12_3;
  S_13_3 = tmp^(((A>>13)&1) & ((B>>3)&1));
  C_13_3 = (tmp&(((A>>13)&1) & ((B>>3)&1)))|(S_12_4&C_12_3);
  tmp = S_12_5^C_12_4;
  S_13_4 = tmp^(((A>>13)&1) & ((B>>4)&1));
  C_13_4 = (tmp&(((A>>13)&1) & ((B>>4)&1)))|(S_12_5&C_12_4);
  tmp = S_12_6^C_12_5;
  S_13_5 = tmp^(((A>>13)&1) & ((B>>5)&1));
  C_13_5 = (tmp&(((A>>13)&1) & ((B>>5)&1)))|(S_12_6&C_12_5);
  tmp = S_12_7^C_12_6;
  S_13_6 = tmp^(((A>>13)&1) & ((B>>6)&1));
  C_13_6 = (tmp&(((A>>13)&1) & ((B>>6)&1)))|(S_12_7&C_12_6);
  tmp = S_12_8^C_12_7;
  S_13_7 = tmp^(((A>>13)&1) & ((B>>7)&1));
  C_13_7 = (tmp&(((A>>13)&1) & ((B>>7)&1)))|(S_12_8&C_12_7);
  tmp = S_12_9^C_12_8;
  S_13_8 = tmp^(((A>>13)&1) & ((B>>8)&1));
  C_13_8 = (tmp&(((A>>13)&1) & ((B>>8)&1)))|(S_12_9&C_12_8);
  tmp = S_12_10^C_12_9;
  S_13_9 = tmp^(((A>>13)&1) & ((B>>9)&1));
  C_13_9 = (tmp&(((A>>13)&1) & ((B>>9)&1)))|(S_12_10&C_12_9);
  tmp = S_12_11^C_12_10;
  S_13_10 = tmp^(((A>>13)&1) & ((B>>10)&1));
  C_13_10 = (tmp&(((A>>13)&1) & ((B>>10)&1)))|(S_12_11&C_12_10);
  tmp = S_12_12^C_12_11;
  S_13_11 = tmp^(((A>>13)&1) & ((B>>11)&1));
  C_13_11 = (tmp&(((A>>13)&1) & ((B>>11)&1)))|(S_12_12&C_12_11);
  tmp = S_12_13^C_12_12;
  S_13_12 = tmp^(((A>>13)&1) & ((B>>12)&1));
  C_13_12 = (tmp&(((A>>13)&1) & ((B>>12)&1)))|(S_12_13&C_12_12);
  tmp = S_12_14^C_12_13;
  S_13_13 = tmp^(((A>>13)&1) & ((B>>13)&1));
  C_13_13 = (tmp&(((A>>13)&1) & ((B>>13)&1)))|(S_12_14&C_12_13);
  tmp = S_12_15^C_12_14;
  S_13_14 = tmp^(((A>>13)&1) & ((B>>14)&1));
  C_13_14 = (tmp&(((A>>13)&1) & ((B>>14)&1)))|(S_12_15&C_12_14);
  S_13_15 = C_12_15^(((((A>>13)&1) & ((B>>15)&1)))^1);
  C_13_15 = C_12_15&(((((A>>13)&1) & ((B>>15)&1)))^1);
  tmp = S_13_1^C_13_0;
  S_14_0 = tmp^(((A>>14)&1) & ((B>>0)&1));
  C_14_0 = (tmp&(((A>>14)&1) & ((B>>0)&1)))|(S_13_1&C_13_0);
  tmp = S_13_2^C_13_1;
  S_14_1 = tmp^(((A>>14)&1) & ((B>>1)&1));
  C_14_1 = (tmp&(((A>>14)&1) & ((B>>1)&1)))|(S_13_2&C_13_1);
  tmp = S_13_3^C_13_2;
  S_14_2 = tmp^(((A>>14)&1) & ((B>>2)&1));
  C_14_2 = (tmp&(((A>>14)&1) & ((B>>2)&1)))|(S_13_3&C_13_2);
  tmp = S_13_4^C_13_3;
  S_14_3 = tmp^(((A>>14)&1) & ((B>>3)&1));
  C_14_3 = (tmp&(((A>>14)&1) & ((B>>3)&1)))|(S_13_4&C_13_3);
  tmp = S_13_5^C_13_4;
  S_14_4 = tmp^(((A>>14)&1) & ((B>>4)&1));
  C_14_4 = (tmp&(((A>>14)&1) & ((B>>4)&1)))|(S_13_5&C_13_4);
  tmp = S_13_6^C_13_5;
  S_14_5 = tmp^(((A>>14)&1) & ((B>>5)&1));
  C_14_5 = (tmp&(((A>>14)&1) & ((B>>5)&1)))|(S_13_6&C_13_5);
  tmp = S_13_7^C_13_6;
  S_14_6 = tmp^(((A>>14)&1) & ((B>>6)&1));
  C_14_6 = (tmp&(((A>>14)&1) & ((B>>6)&1)))|(S_13_7&C_13_6);
  tmp = S_13_8^C_13_7;
  S_14_7 = tmp^(((A>>14)&1) & ((B>>7)&1));
  C_14_7 = (tmp&(((A>>14)&1) & ((B>>7)&1)))|(S_13_8&C_13_7);
  tmp = S_13_9^C_13_8;
  S_14_8 = tmp^(((A>>14)&1) & ((B>>8)&1));
  C_14_8 = (tmp&(((A>>14)&1) & ((B>>8)&1)))|(S_13_9&C_13_8);
  tmp = S_13_10^C_13_9;
  S_14_9 = tmp^(((A>>14)&1) & ((B>>9)&1));
  C_14_9 = (tmp&(((A>>14)&1) & ((B>>9)&1)))|(S_13_10&C_13_9);
  tmp = S_13_11^C_13_10;
  S_14_10 = tmp^(((A>>14)&1) & ((B>>10)&1));
  C_14_10 = (tmp&(((A>>14)&1) & ((B>>10)&1)))|(S_13_11&C_13_10);
  tmp = S_13_12^C_13_11;
  S_14_11 = tmp^(((A>>14)&1) & ((B>>11)&1));
  C_14_11 = (tmp&(((A>>14)&1) & ((B>>11)&1)))|(S_13_12&C_13_11);
  tmp = S_13_13^C_13_12;
  S_14_12 = tmp^(((A>>14)&1) & ((B>>12)&1));
  C_14_12 = (tmp&(((A>>14)&1) & ((B>>12)&1)))|(S_13_13&C_13_12);
  tmp = S_13_14^C_13_13;
  S_14_13 = tmp^(((A>>14)&1) & ((B>>13)&1));
  C_14_13 = (tmp&(((A>>14)&1) & ((B>>13)&1)))|(S_13_14&C_13_13);
  tmp = S_13_15^C_13_14;
  S_14_14 = tmp^(((A>>14)&1) & ((B>>14)&1));
  C_14_14 = (tmp&(((A>>14)&1) & ((B>>14)&1)))|(S_13_15&C_13_14);
  S_14_15 = C_13_15^(((((A>>14)&1) & ((B>>15)&1)))^1);
  C_14_15 = C_13_15&(((((A>>14)&1) & ((B>>15)&1)))^1);
  tmp = S_14_1^C_14_0;
  S_15_0 = tmp^(((((A>>15)&1) & ((B>>0)&1)))^1);
  C_15_0 = (tmp&(((((A>>15)&1) & ((B>>0)&1)))^1))|(S_14_1&C_14_0);
  tmp = S_14_2^C_14_1;
  S_15_1 = tmp^(((((A>>15)&1) & ((B>>1)&1)))^1);
  C_15_1 = (tmp&(((((A>>15)&1) & ((B>>1)&1)))^1))|(S_14_2&C_14_1);
  tmp = S_14_3^C_14_2;
  S_15_2 = tmp^(((((A>>15)&1) & ((B>>2)&1)))^1);
  C_15_2 = (tmp&(((((A>>15)&1) & ((B>>2)&1)))^1))|(S_14_3&C_14_2);
  tmp = S_14_4^C_14_3;
  S_15_3 = tmp^(((((A>>15)&1) & ((B>>3)&1)))^1);
  C_15_3 = (tmp&(((((A>>15)&1) & ((B>>3)&1)))^1))|(S_14_4&C_14_3);
  tmp = S_14_5^C_14_4;
  S_15_4 = tmp^(((((A>>15)&1) & ((B>>4)&1)))^1);
  C_15_4 = (tmp&(((((A>>15)&1) & ((B>>4)&1)))^1))|(S_14_5&C_14_4);
  tmp = S_14_6^C_14_5;
  S_15_5 = tmp^(((((A>>15)&1) & ((B>>5)&1)))^1);
  C_15_5 = (tmp&(((((A>>15)&1) & ((B>>5)&1)))^1))|(S_14_6&C_14_5);
  tmp = S_14_7^C_14_6;
  S_15_6 = tmp^(((((A>>15)&1) & ((B>>6)&1)))^1);
  C_15_6 = (tmp&(((((A>>15)&1) & ((B>>6)&1)))^1))|(S_14_7&C_14_6);
  tmp = S_14_8^C_14_7;
  S_15_7 = tmp^(((((A>>15)&1) & ((B>>7)&1)))^1);
  C_15_7 = (tmp&(((((A>>15)&1) & ((B>>7)&1)))^1))|(S_14_8&C_14_7);
  tmp = S_14_9^C_14_8;
  S_15_8 = tmp^(((((A>>15)&1) & ((B>>8)&1)))^1);
  C_15_8 = (tmp&(((((A>>15)&1) & ((B>>8)&1)))^1))|(S_14_9&C_14_8);
  tmp = S_14_10^C_14_9;
  S_15_9 = tmp^(((((A>>15)&1) & ((B>>9)&1)))^1);
  C_15_9 = (tmp&(((((A>>15)&1) & ((B>>9)&1)))^1))|(S_14_10&C_14_9);
  tmp = S_14_11^C_14_10;
  S_15_10 = tmp^(((((A>>15)&1) & ((B>>10)&1)))^1);
  C_15_10 = (tmp&(((((A>>15)&1) & ((B>>10)&1)))^1))|(S_14_11&C_14_10);
  tmp = S_14_12^C_14_11;
  S_15_11 = tmp^(((((A>>15)&1) & ((B>>11)&1)))^1);
  C_15_11 = (tmp&(((((A>>15)&1) & ((B>>11)&1)))^1))|(S_14_12&C_14_11);
  tmp = S_14_13^C_14_12;
  S_15_12 = tmp^(((((A>>15)&1) & ((B>>12)&1)))^1);
  C_15_12 = (tmp&(((((A>>15)&1) & ((B>>12)&1)))^1))|(S_14_13&C_14_12);
  tmp = S_14_14^C_14_13;
  S_15_13 = tmp^(((((A>>15)&1) & ((B>>13)&1)))^1);
  C_15_13 = (tmp&(((((A>>15)&1) & ((B>>13)&1)))^1))|(S_14_14&C_14_13);
  tmp = S_14_15^C_14_14;
  S_15_14 = tmp^(((((A>>15)&1) & ((B>>14)&1)))^1);
  C_15_14 = (tmp&(((((A>>15)&1) & ((B>>14)&1)))^1))|(S_14_15&C_14_14);
  S_15_15 = C_14_15^(((A>>15)&1) & ((B>>15)&1));
  C_15_15 = C_14_15&(((A>>15)&1) & ((B>>15)&1));
  S_16_0 = S_15_1^C_15_0;
  C_16_0 = S_15_1&C_15_0;
  tmp = S_15_2^C_16_0;
  S_16_1 = tmp^C_15_1;
  C_16_1 = (tmp&C_15_1)|(S_15_2&C_16_0);
  tmp = S_15_3^C_16_1;
  S_16_2 = tmp^C_15_2;
  C_16_2 = (tmp&C_15_2)|(S_15_3&C_16_1);
  tmp = S_15_4^C_16_2;
  S_16_3 = tmp^C_15_3;
  C_16_3 = (tmp&C_15_3)|(S_15_4&C_16_2);
  tmp = S_15_5^C_16_3;
  S_16_4 = tmp^C_15_4;
  C_16_4 = (tmp&C_15_4)|(S_15_5&C_16_3);
  tmp = S_15_6^C_16_4;
  S_16_5 = tmp^C_15_5;
  C_16_5 = (tmp&C_15_5)|(S_15_6&C_16_4);
  tmp = S_15_7^C_16_5;
  S_16_6 = tmp^C_15_6;
  C_16_6 = (tmp&C_15_6)|(S_15_7&C_16_5);
  tmp = S_15_8^C_16_6;
  S_16_7 = tmp^C_15_7;
  C_16_7 = (tmp&C_15_7)|(S_15_8&C_16_6);
  tmp = S_15_9^C_16_7;
  S_16_8 = tmp^C_15_8;
  C_16_8 = (tmp&C_15_8)|(S_15_9&C_16_7);
  tmp = S_15_10^C_16_8;
  S_16_9 = tmp^C_15_9;
  C_16_9 = (tmp&C_15_9)|(S_15_10&C_16_8);
  tmp = S_15_11^C_16_9;
  S_16_10 = tmp^C_15_10;
  C_16_10 = (tmp&C_15_10)|(S_15_11&C_16_9);
  tmp = S_15_12^C_16_10;
  S_16_11 = tmp^C_15_11;
  C_16_11 = (tmp&C_15_11)|(S_15_12&C_16_10);
  tmp = S_15_13^C_16_11;
  S_16_12 = tmp^C_15_12;
  C_16_12 = (tmp&C_15_12)|(S_15_13&C_16_11);
  tmp = S_15_14^C_16_12;
  S_16_13 = tmp^C_15_13;
  C_16_13 = (tmp&C_15_13)|(S_15_14&C_16_12);
  tmp = S_15_15^C_16_13;
  S_16_14 = tmp^C_15_14;
  C_16_14 = (tmp&C_15_14)|(S_15_15&C_16_13);
  tmp = 1^C_16_14;
  S_16_15 = tmp^C_15_15;
  C_16_15 = (tmp&C_15_15)|(1&C_16_14);
  P = 0;
  P |= (S_1_0 & 1) << 1;
  P |= (S_2_0 & 1) << 2;
  P |= (S_3_0 & 1) << 3;
  P |= (S_4_0 & 1) << 4;
  P |= (S_5_0 & 1) << 5;
  P |= (S_6_0 & 1) << 6;
  P |= (S_7_0 & 1) << 7;
  P |= (S_8_0 & 1) << 8;
  P |= (S_9_0 & 1) << 9;
  P |= (S_10_0 & 1) << 10;
  P |= (S_11_0 & 1) << 11;
  P |= (S_12_0 & 1) << 12;
  P |= (S_13_0 & 1) << 13;
  P |= (S_14_0 & 1) << 14;
  P |= (S_15_0 & 1) << 15;
  P |= (S_16_0 & 1) << 16;
  P |= (S_16_1 & 1) << 17;
  P |= (S_16_2 & 1) << 18;
  P |= (S_16_3 & 1) << 19;
  P |= (S_16_4 & 1) << 20;
  P |= (S_16_5 & 1) << 21;
  P |= (S_16_6 & 1) << 22;
  P |= (S_16_7 & 1) << 23;
  P |= (S_16_8 & 1) << 24;
  P |= (S_16_9 & 1) << 25;
  P |= (S_16_10 & 1) << 26;
  P |= (S_16_11 & 1) << 27;
  P |= (S_16_12 & 1) << 28;
  P |= (S_16_13 & 1) << 29;
  P |= (S_16_14 & 1) << 30;
  P |= (S_16_15 & 1) << 31;
  return P;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.00 %
// MAE = 0 
// WCE% = 0.00 %
// WCE = 0 
// WCRE% = 0.00 %
// EP% = 0.00 %
// MRE% = 0.00 %
// MSE = 0 
// PDK45_PWR = 2.400 mW
// PDK45_AREA = 2614.0 um2
// PDK45_DELAY = 3.05 ns



int32_t evoapproxlib::evoapprox_t::mul16s_HEB(int16_t A, int16_t B)
{
 uint32_t Z;
 uint8_t n1007,n96,n1001,n538,n539,n536,n537,n534,n535,n532,n533,n530,n531,n950,Z24,n408,n409,n402,n403,n400,n401,n406,n407,n404,n405,n392,n393,n390,n391,n397,n394,n395,n398,n399,n953,n240,n241,n242,n243,n244,n245,n246,n247,n248,n249,n765,n718,n719,n764,n763,n762,n761,n1279,n1278,n1277,n1276,n1275,n944,n1273,n1272,n1271,n1270,n1479,n1478,n1475,n1474,n1477,n1476,n1471,n1470,n1473,n662,n663,n660,n661,n666,n667,n664,n665,n886,n887,n884,n885,n882,n883,n880,n881,n864,n865,n866,n867,n860,n861,n862,n863,n1611,n1610,n1613,n1612,n1615,n1614,n1617,n1616,n1589,n1588,n1581,n1580,n1583,n1582,n1585,n1584,n1587,n1586,n1057,n1056,n1727,n1054,n1053,n1052,n1051,n1050,n1729,n1728,n1059,n1058,n1295,n1294,n1297,n1296,n1291,n1290,n1293,n1292,n1299,n1298,n355,n1123,n1122,n1121,n1120,n1127,n1126,n1125,n1124,n1129,n1128,Z2,n745,n744,Z12,Z23,n117,n528,n521,n520,n523,n522,n525,n524,n527,n526,n740,n415,n414,n417,n416,n411,n410,n413,n412,n419,n418,n742,n389,n388,n385,n384,n387,n386,n381,n380,n383,n382,n701,n700,n251,n250,n257,n256,n255,n254,n709,n708,n259,n258,n1268,n1269,n1416,n1260,n1261,n1262,n1263,n1264,n1266,n1267,n1468,n1469,n1466,n1467,n1464,n1465,n1462,n1463,n1460,n1461,n899,n898,n679,n678,n675,n890,n893,n676,n671,n670,n897,n896,n1403,n877,n876,n1608,n874,n873,n872,n871,n870,n1602,n1603,n1600,n1601,n1606,n1607,n1604,n878,n1598,n1599,n1592,n1593,n1590,n1591,n1596,n1597,n1594,n1595,n1040,n1737,n1042,n1043,n1044,n1045,n1046,n1047,n1048,n1049,n1411,n1738,n1739,n1286,n1287,n1284,n1285,n1282,n1283,n1280,n1281,n1288,n1289,n716,n717,n714,n715,n712,n713,n1138,n1139,n1134,n1135,n1136,n1137,n1130,n1131,n1132,n1133,n1736,n495,n494,n1735,n497,n496,n323,n322,Z1,n321,n320,n811,n810,n813,n812,n1733,n815,n814,n817,n816,n1274,n460,n461,n462,n463,n464,n465,n466,n468,n469,Z22,n268,n269,n266,n267,n264,n265,n262,n263,n260,n261,n284,n285,n286,n287,n280,n281,n282,n283,n288,n289,n1459,n1458,n1453,n1452,n1451,n1450,n1457,n1456,n1455,n1454,n608,n609,n600,n601,n602,n603,n604,n605,n606,n607,n1637,n1636,n1635,n1634,n1633,n1632,n1631,n1630,n1639,n1638,n842,n843,n840,n841,n846,n847,n844,n845,n848,n849,n927,n114,n115,n116,n148,n110,n111,n112,n113,n833,n118,n119,n888,n889,n1703,n1702,n1701,n1700,n1707,n1706,n1705,n1704,n1709,n1708,n668,n669,n929,n928,n1149,n1148,n1141,n1140,n1143,n1142,n1145,n1144,n1147,n1146,Z0,n1619,n1618,n835,Z26,n834,Z10,n868,n869,n1726,n473,n472,n471,n470,n477,n476,n475,n474,n479,n478,Z21,n279,n271,n270,n273,n272,n275,n274,n277,n276,n356,n357,n354,n297,n296,n295,n1447,n293,n292,n291,n290,n420,n1448,n1449,n299,n298,n350,n423,n619,n618,n613,n612,n611,n610,n617,n616,n615,n614,n1620,n1621,n1623,n1624,n1625,n1626,n1627,n1628,n1629,n859,n858,n855,n854,n857,n856,n851,n850,n853,n852,n1725,n1724,n1055,n107,n106,n105,n104,n103,n102,n101,n100,n1721,n109,n1720,n1723,n1722,n1718,n1719,n1714,n1715,n1716,n1717,n1710,n1711,n1713,n909,n820,n1191,n1428,n904,n821,n775,n1158,n1159,n1152,n1153,n1150,n1151,n1156,n1157,n1154,n1155,n770,n825,Z20,Z11,n222,n448,n449,n446,n447,n444,n445,n442,n732,n440,n441,n733,n734,n735,n736,n737,n598,n599,n590,n591,n592,n593,n594,n595,n596,n597,n1431,n1430,n1433,n1432,n1435,n1434,n1437,n1436,n1439,n1438,n916,n917,n910,n911,n912,n913,n626,n627,n625,n622,n623,n620,n621,n628,n629,n1389,n1388,n1387,n1386,n1385,n1384,n1383,n1382,n1381,n1380,n828,n829,n1549,n1548,n1557,n1545,n1544,n1547,n1546,n824,n1554,n1543,n827,n1555,n1552,n1553,n132,n133,n130,n131,n136,n137,n134,n135,n138,n139,n1099,n1098,n1093,n1092,n1091,n1090,n1097,n1096,n1095,n1167,n1166,n1165,n1164,n1163,n1162,n1161,n1160,n1169,n1168,n1365,n1364,n1367,n1366,n1361,n1360,n1363,n1362,n1369,n1368,Z16,n206,n459,n458,n223,n451,n450,n453,n452,n455,n454,n457,n456,Z30,n589,n588,n583,n582,n581,n580,n587,n586,n585,n584,n1422,n1423,n1420,n1421,n1426,n1427,n1424,n1425,n907,n905,n1429,n903,n902,n901,n900,n631,n630,n633,n632,n635,n634,n637,n636,n639,n638,n1398,n1399,n1390,n1391,n1392,n1393,n1394,n1395,n1396,n1397,n839,n838,n1558,n1559,n1556,n832,n831,n830,n837,n836,n1550,n1551,n129,n128,n125,n124,n127,n126,n121,n123,n122,n1084,n1085,n1086,n1087,n1080,n1081,n1082,n1083,n1088,n1089,n1170,n1171,n1172,n1173,n1174,n1175,n1176,n1177,n1178,n1179,n1376,n1377,n1374,n1375,n1372,n1373,n1370,n1371,n1378,n1379,n1444,n1445,n1446,n294,n1440,n1441,n1442,n1443,Z31,Z17,n529,n706,n215,n208,n214,n938,n939,n754,n1419,n1418,n932,n933,n930,n931,n936,n937,n934,n935,n204,n205,n213,n759,n972,n973,n482,n483,n480,n481,n486,n487,n484,n485,n334,n335,n488,n212,n330,n331,n332,n333,n806,n804,n805,n802,n803,n800,n801,n808,n809,n1569,n1568,n1563,n211,n1561,n1560,n1567,n1566,n1565,n1564,n158,n159,n150,n151,n153,n875,n155,n156,n157,n67,n1744,n1743,n1742,n1741,n69,n68,n1100,n996,n997,n1189,n1188,n1185,n1184,n1187,n1186,n1181,n1180,n1183,n1343,n1342,n1341,n1347,n1346,n1345,n1344,n1237,n1349,n1348,n1236,Z14,n1305,n209,n108,n1041,n1655,n1654,n1304,n1651,n1650,n1408,n1409,n1301,n1400,n1401,n1402,n1300,n1404,n1405,n1406,n1407,n207,n499,n498,n329,n328,n327,n326,n325,n324,n491,n490,n493,n492,n1574,n1575,n1576,n1577,n1570,n1571,n1572,n1573,n819,n818,n1579,n925,n924,n149,n926,n921,n920,n923,n922,n143,n142,n141,n140,n147,n146,n145,n144,n74,n75,n76,n77,n70,n71,n73,n78,n79,n253,n252,n703,n702,n1198,n1199,n1196,n1197,n1194,n1195,n1192,n1193,n1190,n704,n1358,n1359,n1354,n1355,n1356,n1357,n1350,n1351,n1352,n1353,n337,n1013,Z15,n1012,Z9,n1011,n1010,n1017,n1015,n1014,n798,n799,n796,n797,n794,n795,n792,n793,n790,n791,n558,n559,n554,n555,n556,n557,n550,n551,n552,n553,n502,n318,n319,n312,n313,n310,n311,n316,n317,n314,n315,n1501,n1500,n1503,n1502,n1505,n1504,n1507,n1506,n1509,n1508,n176,n177,n174,n175,n172,n173,n170,n171,n776,n178,n179,n774,n951,n952,n777,n954,n955,n772,n957,n958,n959,n778,n779,n771,n956,n773,n891,n1219,n1218,n674,n1215,n1214,n1217,n1216,n1211,n677,n1213,n1212,n892,n895,n894,n1691,n1690,n1693,n1692,n1695,n673,n1697,n1696,n1699,n1698,n672,n1329,n1328,n1321,n1320,n1323,n1322,n1325,n1324,n1327,n1326,n1035,n1034,n1037,n1036,n1031,n1030,n1033,n1032,n1039,n1038,n1609,Z8,n1210,n879,n1605,n1417,n1694,n789,n788,n781,n780,n783,n782,n785,n784,n787,n786,n549,n548,n547,n546,n545,n544,n543,n542,n541,n341,n340,n343,n342,n345,n344,n347,n346,n305,n304,n307,n306,n301,n300,n303,n302,n309,n308,n1512,n1513,n1510,n1511,n1516,n1517,n1514,n1515,n1518,n1519,n161,n160,n163,n162,n165,n164,n167,n166,n169,n168,n1734,n767,n766,n941,n940,n947,n946,n945,n760,n1732,n949,n948,n769,n768,n1731,n1208,n1209,n1206,n1207,n1204,n1205,n1202,n1203,n1200,n1201,n421,n1682,n1683,n1680,n1681,n1686,n1687,n1684,n1685,n1688,n1415,n1414,n1413,n1412,n705,n1338,n1339,n1332,n1333,n1330,n1331,n1336,n1337,n1334,n1335,n707,n1026,n1027,n1024,n1025,n1022,n1023,n1020,n1021,n1028,n1029,Z19,n338,n339,Z7,n489,n578,n579,n572,n573,n570,n571,n576,n577,n574,n575,n680,n681,n682,n683,n684,n685,n686,n687,n688,n689,n370,n371,n372,n373,n374,n375,n376,n377,n378,n379,n1528,n1527,n1526,n1525,n1524,n1523,n1522,n1521,n1520,n1562,n198,n199,n194,n195,n196,n197,n190,n191,n192,n193,n752,n753,n750,n751,n756,n757,n978,n755,n976,n977,n758,n975,n200,n201,n202,n203,n994,n995,n1239,n1238,n990,n991,n992,n993,n1233,n1232,n1231,n1230,n998,n999,n1235,n1234,n1307,n1306,n1657,n1656,n1303,n1302,n1653,n1652,n1659,n1309,n1308,n443,n85,n84,n87,n86,n81,n1016,n83,n82,n154,n1019,n1018,n89,n88,Z6,n711,Z27,Z29,n565,n564,n567,n566,n561,n560,n563,n562,n569,n568,n693,n692,n691,n690,n697,n696,n695,n694,n699,n698,n363,n362,n361,n360,n367,n366,n365,n364,n369,n368,n1538,n1539,n1530,n1531,n1532,n1533,n1534,n1535,n1536,n1537,n189,n188,n187,n185,n184,n183,n182,n181,n180,n969,n968,n749,n748,n219,n218,n217,n216,n963,n746,n741,n964,n743,n210,n1224,n1225,n1226,n1227,n1220,n1221,n1222,n1223,n1228,n1229,n987,n986,n985,n984,n983,n982,n981,n980,n989,n988,n1310,n1647,n1312,n1313,n1314,n1315,n1316,n1317,n1318,n1319,n965,n1648,n1649,n918,n919,n98,n1008,n1009,n92,n93,n90,n91,n1000,n97,n94,n95,n914,n915,Z28,n908,Z5,n510,n511,n512,n513,n514,n515,n516,n517,n518,n519,n961,n960,n747,n962,n428,n429,n358,n359,n424,n425,n426,n427,n352,n353,n422,n351,n967,n966,n738,n739,n228,n229,n979,n730,n731,n220,n221,n226,n227,n224,n225,n1251,n1250,n1253,n1252,n1255,n1254,n1257,n1256,n1259,n1258,n1497,n1496,n1495,n1494,n1493,n1492,n1491,n1490,n1499,n1498,n644,n645,n646,n647,n640,n641,n642,n643,n648,n649,n974,n1673,n1672,n1671,n1670,n1677,n1676,n1675,n1674,n1679,n1678,n822,n823,n1541,n1540,n826,n1542,n1006,n1079,n1078,n1071,n1070,n1073,n1072,n1075,n1074,n1077,n1076,Z13,n970,n1105,n1104,n1107,n1106,n1101,n971,n1103,n1102,n1109,n1108,Z4,n1003,Z18,Z25,n503,n943,n501,n500,n507,n506,n505,n504,n509,n508,n1646,n1311,n1644,n942,n1645,n1642,n1643,n1640,n1641,n349,n348,n439,n438,n437,n436,n435,n434,n433,n432,n431,n430,n235,n234,n237,n236,n230,n233,n232,n239,n238,n729,n728,n723,n722,n721,n720,n727,n726,n725,n724,n1242,n1243,n1240,n1241,n1246,n1247,n1244,n1245,n1248,n1249,n1480,n1481,n1482,n1483,n1484,n1485,n1486,n1487,n1488,n1489,n657,n656,n655,n654,n653,n652,n651,n650,n659,n658,n1668,n1669,n1664,n1665,n1666,n1667,n1660,n1661,n1662,n1663,n1068,n1069,n1062,n1063,n1060,n1061,n1066,n1067,n1064,n1065,n1116,n1117,n1114,n1115,n1112,n1113,n1110,n1111,n1118,n1119,n1004,n1005,Z3;
 n1001=~((B >> 15)&1)&((A >> 1)&1);
 n117=((B >> 3)&1)&((A >> 0)&1);
 n118=((B >> 2)&1)&~((A >> 0)&1);
 n138=((A >> 4)&1)&((A >> 3)&1);
 n140=((A >> 4)&1)^((A >> 3)&1);
 n143=~(((A >> 4)&1)|((A >> 3)&1));
 n148=((B >> 4)&1)&((A >> 0)&1);
 n149=((B >> 3)&1)&~((A >> 0)&1);
 n170=((B >> 5)&1)&((A >> 0)&1);
 n171=((B >> 4)&1)&~((A >> 0)&1);
 n206=((A >> 6)&1)&((A >> 5)&1);
 n208=((A >> 6)&1)^((A >> 5)&1);
 n211=~(((A >> 6)&1)|((A >> 5)&1));
 n216=((B >> 6)&1)&((A >> 0)&1);
 n217=((B >> 5)&1)&~((A >> 0)&1);
 n250=((B >> 7)&1)&((A >> 0)&1);
 n251=((B >> 6)&1)&~((A >> 0)&1);
 n308=((A >> 8)&1)&((A >> 7)&1);
 n310=((A >> 8)&1)^((A >> 7)&1);
 n313=~(((A >> 8)&1)|((A >> 7)&1));
 n318=((B >> 8)&1)&((A >> 0)&1);
 n319=((B >> 7)&1)&~((A >> 0)&1);
 n363=((B >> 9)&1)&((A >> 0)&1);
 n364=((B >> 8)&1)&~((A >> 0)&1);
 n428=((A >> 10)&1)&((A >> 9)&1);
 n430=((A >> 10)&1)^((A >> 9)&1);
 n433=~(((A >> 10)&1)|((A >> 9)&1));
 n438=((B >> 10)&1)&((A >> 0)&1);
 n439=((B >> 9)&1)&~((A >> 0)&1);
 n492=((B >> 11)&1)&((A >> 0)&1);
 n493=((B >> 10)&1)&~((A >> 0)&1);
 n591=((A >> 12)&1)&((A >> 11)&1);
 n593=((A >> 12)&1)^((A >> 11)&1);
 n596=~(((A >> 12)&1)|((A >> 11)&1));
 n601=((B >> 12)&1)&((A >> 0)&1);
 n602=((B >> 11)&1)&~((A >> 0)&1);
 n69=((B >> 0)&1)&((A >> 0)&1);
 n697=((B >> 13)&1)&((A >> 0)&1);
 n698=((B >> 12)&1)&~((A >> 0)&1);
 n71=~((A >> 1)&1)&((A >> 0)&1);
 n742=((A >> 14)&1)&((A >> 13)&1);
 n744=((A >> 14)&1)^((A >> 13)&1);
 n747=~(((A >> 14)&1)|((A >> 13)&1));
 n752=((B >> 14)&1)&((A >> 0)&1);
 n753=((B >> 13)&1)&~((A >> 0)&1);
 n77=((B >> 1)&1)&((A >> 0)&1);
 n78=((B >> 0)&1)&~((A >> 0)&1);
 n86=((B >> 2)&1)&((A >> 0)&1);
 n87=((B >> 1)&1)&~((A >> 0)&1);
 n898=((B >> 15)&1)&((A >> 0)&1);
 n899=((B >> 14)&1)&~((A >> 0)&1);
 n90=((A >> 2)&1)&((A >> 1)&1);
 n94=((A >> 2)&1)^((A >> 1)&1);
 n97=~(((A >> 2)&1)|((A >> 1)&1));
 n1000=((B >> 15)&1)&n71;
 n1033=((B >> 13)&1)&n140;
 n1034=((B >> 12)&1)&~n140;
 n1039=((B >> 7)&1)&n430;
 n1040=((B >> 6)&1)&~n430;
 n1045=((B >> 15)&1)&n94;
 n1046=((B >> 14)&1)&~n94;
 n1053=((B >> 9)&1)&n310;
 n1054=((B >> 8)&1)&~n310;
 n1059=((B >> 3)&1)&n744;
 n1060=((B >> 2)&1)&~n744;
 n1065=((B >> 11)&1)&n208;
 n1066=((B >> 10)&1)&~n208;
 n109=((B >> 1)&1)&n94;
 n1091=((B >> 5)&1)&n593;
 n1092=((B >> 4)&1)&~n593;
 n110=((B >> 0)&1)&~n94;
 n1125=((B >> 14)&1)&n140;
 n1126=((B >> 13)&1)&~n140;
 n1131=((B >> 4)&1)&n744;
 n1132=((B >> 3)&1)&~n744;
 n1142=((B >> 10)&1)&n310;
 n1143=((B >> 9)&1)&~n310;
 n1148=((B >> 12)&1)&n208;
 n1149=((B >> 11)&1)&~n208;
 n116=~(n118|n117);
 n1168=((B >> 6)&1)&n593;
 n1169=((B >> 5)&1)&~n593;
 n1174=((B >> 8)&1)&n430;
 n1175=((B >> 7)&1)&~n430;
 n1213=((B >> 13)&1)&n208;
 n1214=((B >> 12)&1)&~n208;
 n1219=((B >> 7)&1)&n593;
 n1220=((B >> 6)&1)&~n593;
 n1225=((B >> 15)&1)&n140;
 n1226=((B >> 14)&1)&~n140;
 n1250=((B >> 11)&1)&n310;
 n1251=((B >> 10)&1)&~n310;
 n1256=((B >> 9)&1)&n430;
 n1257=((B >> 8)&1)&~n430;
 n1262=((B >> 5)&1)&n744;
 n1263=((B >> 4)&1)&~n744;
 n1296=((B >> 14)&1)&n208;
 n1297=((B >> 13)&1)&~n208;
 n1302=((B >> 6)&1)&n744;
 n1303=((B >> 5)&1)&~n744;
 n1313=((B >> 8)&1)&n593;
 n1314=((B >> 7)&1)&~n593;
 n1319=((B >> 12)&1)&n310;
 n132=((B >> 2)&1)&n94;
 n1320=((B >> 11)&1)&~n310;
 n133=((B >> 1)&1)&~n94;
 n1332=((B >> 10)&1)&n430;
 n1333=((B >> 9)&1)&~n430;
 n137=((A >> 5)&1)&~n138;
 n1375=((B >> 7)&1)&n744;
 n1376=((B >> 6)&1)&~n744;
 n1381=((B >> 11)&1)&n430;
 n1382=((B >> 10)&1)&~n430;
 n139=((B >> 0)&1)&n140;
 n1395=((B >> 13)&1)&n310;
 n1396=((B >> 12)&1)&~n310;
 n1401=((B >> 9)&1)&n593;
 n1402=((B >> 8)&1)&~n593;
 n1407=((B >> 15)&1)&n208;
 n1408=((B >> 14)&1)&~n208;
 n142=~(((A >> 5)&1)|n143);
 n1446=((B >> 14)&1)&n310;
 n1447=((B >> 13)&1)&~n310;
 n1452=((B >> 8)&1)&n744;
 n1453=((B >> 7)&1)&~n744;
 n1463=((B >> 12)&1)&n430;
 n1464=((B >> 11)&1)&~n430;
 n1469=((B >> 10)&1)&n593;
 n147=~(n149|n148);
 n1470=((B >> 9)&1)&~n593;
 n1496=((B >> 11)&1)&n593;
 n1497=((B >> 10)&1)&~n593;
 n1502=((B >> 9)&1)&n744;
 n1503=((B >> 8)&1)&~n744;
 n1508=((B >> 15)&1)&n310;
 n1509=((B >> 14)&1)&~n310;
 n1521=((B >> 13)&1)&n430;
 n1522=((B >> 12)&1)&~n430;
 n1553=((B >> 14)&1)&n430;
 n1554=((B >> 13)&1)&~n430;
 n1559=((B >> 10)&1)&n744;
 n1560=((B >> 9)&1)&~n744;
 n1575=((B >> 12)&1)&n593;
 n1576=((B >> 11)&1)&~n593;
 n1607=((B >> 11)&1)&n744;
 n1608=((B >> 10)&1)&~n744;
 n1613=((B >> 13)&1)&n593;
 n1614=((B >> 12)&1)&~n593;
 n1619=((B >> 15)&1)&n430;
 n1620=((B >> 14)&1)&~n430;
 n1646=((B >> 12)&1)&n744;
 n1647=((B >> 11)&1)&~n744;
 n1652=((B >> 14)&1)&n593;
 n1653=((B >> 13)&1)&~n593;
 n1680=((B >> 13)&1)&n744;
 n1681=((B >> 12)&1)&~n744;
 n1686=((B >> 15)&1)&n593;
 n1687=((B >> 14)&1)&~n593;
 n169=~(n171|n170);
 n1706=((B >> 14)&1)&n744;
 n1707=((B >> 13)&1)&~n744;
 n1727=((B >> 15)&1)&n744;
 n1728=((B >> 14)&1)&~n744;
 n177=((B >> 1)&1)&n140;
 n178=((B >> 0)&1)&~n140;
 n183=((B >> 3)&1)&n94;
 n184=((B >> 2)&1)&~n94;
 n200=((B >> 2)&1)&n140;
 n201=((B >> 1)&1)&~n140;
 n205=((A >> 7)&1)&~n206;
 n207=((B >> 0)&1)&n208;
 n210=~(((A >> 7)&1)|n211);
 n215=~(n217|n216);
 n222=((B >> 4)&1)&n94;
 n223=((B >> 3)&1)&~n94;
 n249=~(n251|n250);
 n258=((B >> 3)&1)&n140;
 n259=((B >> 2)&1)&~n140;
 n264=((B >> 1)&1)&n208;
 n265=((B >> 0)&1)&~n208;
 n270=((B >> 5)&1)&n94;
 n271=((B >> 4)&1)&~n94;
 n302=((B >> 2)&1)&n208;
 n303=((B >> 1)&1)&~n208;
 n307=((A >> 9)&1)&~n308;
 n309=((B >> 0)&1)&n310;
 n312=~(((A >> 9)&1)|n313);
 n317=~(n319|n318);
 n327=((B >> 4)&1)&n140;
 n328=((B >> 3)&1)&~n140;
 n333=((B >> 6)&1)&n94;
 n334=((B >> 5)&1)&~n94;
 n355=((B >> 7)&1)&n94;
 n356=((B >> 6)&1)&~n94;
 n362=~(n364|n363);
 n376=((B >> 5)&1)&n140;
 n377=((B >> 4)&1)&~n140;
 n382=((B >> 1)&1)&n310;
 n383=((B >> 0)&1)&~n310;
 n388=((B >> 3)&1)&n208;
 n389=((B >> 2)&1)&~n208;
 n422=((B >> 2)&1)&n310;
 n423=((B >> 1)&1)&~n310;
 n427=((A >> 11)&1)&~n428;
 n429=((B >> 0)&1)&n430;
 n432=~(((A >> 11)&1)|n433);
 n437=~(n439|n438);
 n447=((B >> 6)&1)&n140;
 n448=((B >> 5)&1)&~n140;
 n453=((B >> 4)&1)&n208;
 n454=((B >> 3)&1)&~n208;
 n459=((B >> 8)&1)&n94;
 n460=((B >> 7)&1)&~n94;
 n491=~(n493|n492);
 n499=((B >> 3)&1)&n310;
 n500=((B >> 2)&1)&~n310;
 n505=((B >> 7)&1)&n140;
 n506=((B >> 6)&1)&~n140;
 n525=((B >> 9)&1)&n94;
 n526=((B >> 8)&1)&~n94;
 n531=((B >> 1)&1)&n430;
 n532=((B >> 0)&1)&~n430;
 n537=((B >> 5)&1)&n208;
 n538=((B >> 4)&1)&~n208;
 n569=((B >> 6)&1)&n208;
 n570=((B >> 5)&1)&~n208;
 n585=((B >> 10)&1)&n94;
 n586=((B >> 9)&1)&~n94;
 n590=((A >> 13)&1)&~n591;
 n592=((B >> 0)&1)&n593;
 n595=~(((A >> 13)&1)|n596);
 n600=~(n602|n601);
 n609=((B >> 4)&1)&n310;
 n610=((B >> 3)&1)&~n310;
 n615=((B >> 2)&1)&n430;
 n616=((B >> 1)&1)&~n430;
 n621=((B >> 8)&1)&n140;
 n622=((B >> 7)&1)&~n140;
 n644=((B >> 3)&1)&n430;
 n645=((B >> 2)&1)&~n430;
 n650=((B >> 1)&1)&n593;
 n651=((B >> 0)&1)&~n593;
 n656=((B >> 7)&1)&n208;
 n657=((B >> 6)&1)&~n208;
 n664=((B >> 9)&1)&n140;
 n665=((B >> 8)&1)&~n140;
 n670=((B >> 11)&1)&n94;
 n671=((B >> 10)&1)&~n94;
 n676=((B >> 5)&1)&n310;
 n677=((B >> 4)&1)&~n310;
 n68=~(((A >> 1)&1)|n69);
 n696=~(n698|n697);
 n70=~n71&n69;
 n736=((B >> 2)&1)&n593;
 n737=((B >> 1)&1)&~n593;
 n741=((A >> 15)&1)&~n742;
 n743=((B >> 0)&1)&n744;
 n746=~(((A >> 15)&1)|n747);
 n751=~(n753|n752);
 n76=~(n78|n77);
 n760=((B >> 6)&1)&n310;
 n761=((B >> 5)&1)&~n310;
 n766=((B >> 4)&1)&n430;
 n767=((B >> 3)&1)&~n430;
 n772=((B >> 12)&1)&n94;
 n773=((B >> 11)&1)&~n94;
 n793=((B >> 8)&1)&n208;
 n794=((B >> 7)&1)&~n208;
 n799=((B >> 10)&1)&n140;
 n800=((B >> 9)&1)&~n140;
 n838=((B >> 9)&1)&n208;
 n839=((B >> 8)&1)&~n208;
 n844=((B >> 5)&1)&n430;
 n845=((B >> 4)&1)&~n430;
 n85=~(n87|n86);
 n850=((B >> 13)&1)&n94;
 n851=((B >> 12)&1)&~n94;
 n858=((B >> 3)&1)&n593;
 n859=((B >> 2)&1)&~n593;
 n864=((B >> 1)&1)&n744;
 n865=((B >> 0)&1)&~n744;
 n870=((B >> 7)&1)&n310;
 n871=((B >> 6)&1)&~n310;
 n89=((A >> 3)&1)&~n90;
 n890=((B >> 11)&1)&n140;
 n891=((B >> 10)&1)&~n140;
 n897=~(n899|n898);
 n93=((B >> 0)&1)&n94;
 n937=((B >> 8)&1)&n310;
 n938=((B >> 7)&1)&~n310;
 n943=((B >> 4)&1)&n593;
 n944=((B >> 3)&1)&~n593;
 n949=((B >> 10)&1)&n208;
 n950=((B >> 9)&1)&~n208;
 n957=((B >> 2)&1)&n744;
 n958=((B >> 1)&1)&~n744;
 n96=~(((A >> 3)&1)|n97);
 n963=((B >> 12)&1)&n140;
 n964=((B >> 11)&1)&~n140;
 n969=((B >> 6)&1)&n430;
 n970=((B >> 5)&1)&~n430;
 n996=((B >> 14)&1)&n94;
 n997=((B >> 13)&1)&~n94;
 n1032=~(n1034|n1033);
 n1038=~(n1040|n1039);
 n1044=~(n1046|n1045);
 n1052=~(n1054|n1053);
 n1058=~(n1060|n1059);
 n1064=~(n1066|n1065);
 n108=~(n110|n109);
 n1090=~(n1092|n1091);
 n1124=~(n1126|n1125);
 n1130=~(n1132|n1131);
 n1135=((B >> 15)&1)&n96;
 n1136=~((B >> 15)&1)&n89;
 n1141=~(n1143|n1142);
 n1147=~(n1149|n1148);
 n115=~((A >> 1)&1)&n116;
 n1167=~(n1169|n1168);
 n1173=~(n1175|n1174);
 n119=~(n71|n116);
 n1212=~(n1214|n1213);
 n1218=~(n1220|n1219);
 n1224=~(n1226|n1225);
 n1249=~(n1251|n1250);
 n1255=~(n1257|n1256);
 n1261=~(n1263|n1262);
 n1295=~(n1297|n1296);
 n1301=~(n1303|n1302);
 n1306=((B >> 15)&1)&n142;
 n1307=~((B >> 15)&1)&n137;
 n131=~(n133|n132);
 n1312=~(n1314|n1313);
 n1318=~(n1320|n1319);
 n1331=~(n1333|n1332);
 n136=~(n139|n137);
 n1374=~(n1376|n1375);
 n1380=~(n1382|n1381);
 n1394=~(n1396|n1395);
 n1400=~(n1402|n1401);
 n1406=~(n1408|n1407);
 n141=~n142&n139;
 n1445=~(n1447|n1446);
 n1451=~(n1453|n1452);
 n1456=((B >> 15)&1)&n210;
 n1457=~((B >> 15)&1)&n205;
 n146=~((A >> 1)&1)&n147;
 n1462=~(n1464|n1463);
 n1468=~(n1470|n1469);
 n1495=~(n1497|n1496);
 n150=~(n71|n147);
 n1501=~(n1503|n1502);
 n1507=~(n1509|n1508);
 n1520=~(n1522|n1521);
 n1552=~(n1554|n1553);
 n1558=~(n1560|n1559);
 n1563=((B >> 15)&1)&n312;
 n1564=~((B >> 15)&1)&n307;
 n1574=~(n1576|n1575);
 n1606=~(n1608|n1607);
 n1612=~(n1614|n1613);
 n1618=~(n1620|n1619);
 n1645=~(n1647|n1646);
 n1651=~(n1653|n1652);
 n1656=((B >> 15)&1)&n432;
 n1657=~((B >> 15)&1)&n427;
 n1679=~(n1681|n1680);
 n168=~((A >> 1)&1)&n169;
 n1685=~(n1687|n1686);
 n1705=~(n1707|n1706);
 n1710=((B >> 15)&1)&n595;
 n1711=~((B >> 15)&1)&n590;
 n172=~(n71|n169);
 n1726=~(n1728|n1727);
 n1738=((B >> 15)&1)&n746;
 n1739=~((B >> 15)&1)&n741;
 n176=~(n178|n177);
 n182=~(n184|n183);
 n199=~(n201|n200);
 n204=~(n207|n205);
 n209=~n210&n207;
 n214=~((A >> 1)&1)&n215;
 n218=~(n71|n215);
 n221=~(n223|n222);
 n248=~((A >> 1)&1)&n249;
 n252=~(n71|n249);
 n257=~(n259|n258);
 n263=~(n265|n264);
 n269=~(n271|n270);
 n301=~(n303|n302);
 n306=~(n309|n307);
 n311=~n312&n309;
 n316=~((A >> 1)&1)&n317;
 n320=~(n71|n317);
 n326=~(n328|n327);
 n332=~(n334|n333);
 n354=~(n356|n355);
 n361=~((A >> 1)&1)&n362;
 n365=~(n71|n362);
 n375=~(n377|n376);
 n381=~(n383|n382);
 n387=~(n389|n388);
 n421=~(n423|n422);
 n426=~(n429|n427);
 n431=~n432&n429;
 n436=~((A >> 1)&1)&n437;
 n440=~(n71|n437);
 n446=~(n448|n447);
 n452=~(n454|n453);
 n458=~(n460|n459);
 n490=~((A >> 1)&1)&n491;
 n494=~(n71|n491);
 n498=~(n500|n499);
 n504=~(n506|n505);
 n524=~(n526|n525);
 n530=~(n532|n531);
 n536=~(n538|n537);
 n568=~(n570|n569);
 n584=~(n586|n585);
 n589=~(n592|n590);
 n594=~n595&n592;
 n599=~((A >> 1)&1)&n600;
 n603=~(n71|n600);
 n608=~(n610|n609);
 n614=~(n616|n615);
 n620=~(n622|n621);
 n643=~(n645|n644);
 n649=~(n651|n650);
 n655=~(n657|n656);
 n663=~(n665|n664);
 n669=~(n671|n670);
 n67=~(n70|n68);
 n675=~(n677|n676);
 n695=~((A >> 1)&1)&n696;
 n699=~(n71|n696);
 n735=~(n737|n736);
 n740=~(n743|n741);
 n745=~n746&n743;
 n75=~((A >> 1)&1)&n76;
 n750=~((A >> 1)&1)&n751;
 n754=~(n71|n751);
 n759=~(n761|n760);
 n765=~(n767|n766);
 n771=~(n773|n772);
 n79=~(n71|n76);
 n792=~(n794|n793);
 n798=~(n800|n799);
 n837=~(n839|n838);
 n84=~((A >> 1)&1)&n85;
 n843=~(n845|n844);
 n849=~(n851|n850);
 n857=~(n859|n858);
 n863=~(n865|n864);
 n869=~(n871|n870);
 n88=~(n71|n85);
 n889=~(n891|n890);
 n896=~((A >> 1)&1)&n897;
 n900=~(n71|n897);
 n92=~(n89|n93);
 n936=~(n938|n937);
 n942=~(n944|n943);
 n948=~(n950|n949);
 n95=~n96&n93;
 n956=~(n958|n957);
 n962=~(n964|n963);
 n968=~(n970|n969);
 n995=~(n997|n996);
 n999=~(n1001|n1000);
 Z0=((A >> 1)&1)^n67;
 n1031=~n137&n1032;
 n1035=~(n142|n1032);
 n1037=~n427&n1038;
 n1041=~(n432|n1038);
 n1043=~n89&n1044;
 n1047=~(n96|n1044);
 n1051=~n307&n1052;
 n1055=~(n312|n1052);
 n1057=~n741&n1058;
 n1061=~(n746|n1058);
 n1063=~n205&n1064;
 n1067=~(n210|n1064);
 n107=~n89&n108;
 n1089=~n590&n1090;
 n1093=~(n595|n1090);
 n111=~(n96|n108);
 n1123=~n137&n1124;
 n1127=~(n142|n1124);
 n1129=~n741&n1130;
 n1133=~(n746|n1130);
 n1134=~(n1136|n1135);
 n114=~(n119|n115);
 n1140=~n307&n1141;
 n1144=~(n312|n1141);
 n1146=~n205&n1147;
 n1150=~(n210|n1147);
 n1166=~n590&n1167;
 n1170=~(n595|n1167);
 n1172=~n427&n1173;
 n1176=~(n432|n1173);
 n1211=~n205&n1212;
 n1215=~(n210|n1212);
 n1217=~n590&n1218;
 n1221=~(n595|n1218);
 n1223=~n137&n1224;
 n1227=~(n142|n1224);
 n1248=~n307&n1249;
 n1252=~(n312|n1249);
 n1254=~n427&n1255;
 n1258=~(n432|n1255);
 n1260=~n741&n1261;
 n1264=~(n746|n1261);
 n1294=~n205&n1295;
 n1298=~(n210|n1295);
 n130=~n89&n131;
 n1300=~n741&n1301;
 n1304=~(n746|n1301);
 n1305=~(n1307|n1306);
 n1311=~n590&n1312;
 n1315=~(n595|n1312);
 n1317=~n307&n1318;
 n1321=~(n312|n1318);
 n1330=~n427&n1331;
 n1334=~(n432|n1331);
 n134=~(n96|n131);
 n135=~(n141|n136);
 n1373=~n741&n1374;
 n1377=~(n746|n1374);
 n1379=~n427&n1380;
 n1383=~(n432|n1380);
 n1393=~n307&n1394;
 n1397=~(n312|n1394);
 n1399=~n590&n1400;
 n1403=~(n595|n1400);
 n1405=~n205&n1406;
 n1409=~(n210|n1406);
 n1444=~n307&n1445;
 n1448=~(n312|n1445);
 n145=~(n150|n146);
 n1450=~n741&n1451;
 n1454=~(n746|n1451);
 n1455=~(n1457|n1456);
 n1461=~n427&n1462;
 n1465=~(n432|n1462);
 n1467=~n590&n1468;
 n1471=~(n595|n1468);
 n1494=~n590&n1495;
 n1498=~(n595|n1495);
 n1500=~n741&n1501;
 n1504=~(n746|n1501);
 n1506=~n307&n1507;
 n1510=~(n312|n1507);
 n1519=~n427&n1520;
 n1523=~(n432|n1520);
 n1551=~n427&n1552;
 n1555=~(n432|n1552);
 n1557=~n741&n1558;
 n1561=~(n746|n1558);
 n1562=~(n1564|n1563);
 n1573=~n590&n1574;
 n1577=~(n595|n1574);
 n1605=~n741&n1606;
 n1609=~(n746|n1606);
 n1611=~n590&n1612;
 n1615=~(n595|n1612);
 n1617=~n427&n1618;
 n1621=~(n432|n1618);
 n1644=~n741&n1645;
 n1648=~(n746|n1645);
 n1650=~n590&n1651;
 n1654=~(n595|n1651);
 n1655=~(n1657|n1656);
 n167=~(n172|n168);
 n1678=~n741&n1679;
 n1682=~(n746|n1679);
 n1684=~n590&n1685;
 n1688=~(n595|n1685);
 n1704=~n741&n1705;
 n1708=~(n746|n1705);
 n1709=~(n1711|n1710);
 n1725=~n741&n1726;
 n1729=~(n746|n1726);
 n1737=~(n1739|n1738);
 n175=~n137&n176;
 n179=~(n142|n176);
 n181=~n89&n182;
 n185=~(n96|n182);
 n198=~n137&n199;
 n202=~(n142|n199);
 n203=~(n209|n204);
 n213=~(n218|n214);
 n220=~n89&n221;
 n224=~(n96|n221);
 n247=~(n252|n248);
 n256=~n137&n257;
 n260=~(n142|n257);
 n262=~n205&n263;
 n266=~(n210|n263);
 n268=~n89&n269;
 n272=~(n96|n269);
 n300=~n205&n301;
 n304=~(n210|n301);
 n305=~(n311|n306);
 n315=~(n320|n316);
 n325=~n137&n326;
 n329=~(n142|n326);
 n331=~n89&n332;
 n335=~(n96|n332);
 n353=~n89&n354;
 n357=~(n96|n354);
 n360=~(n365|n361);
 n374=~n137&n375;
 n378=~(n142|n375);
 n380=~n307&n381;
 n384=~(n312|n381);
 n386=~n205&n387;
 n390=~(n210|n387);
 n420=~n307&n421;
 n424=~(n312|n421);
 n425=~(n431|n426);
 n435=~(n440|n436);
 n445=~n137&n446;
 n449=~(n142|n446);
 n451=~n205&n452;
 n455=~(n210|n452);
 n457=~n89&n458;
 n461=~(n96|n458);
 n489=~(n494|n490);
 n497=~n307&n498;
 n501=~(n312|n498);
 n503=~n137&n504;
 n507=~(n142|n504);
 n523=~n89&n524;
 n527=~(n96|n524);
 n529=~n427&n530;
 n533=~(n432|n530);
 n535=~n205&n536;
 n539=~(n210|n536);
 n567=~n205&n568;
 n571=~(n210|n568);
 n583=~n89&n584;
 n587=~(n96|n584);
 n588=~(n594|n589);
 n598=~(n603|n599);
 n607=~n307&n608;
 n611=~(n312|n608);
 n613=~n427&n614;
 n617=~(n432|n614);
 n619=~n137&n620;
 n623=~(n142|n620);
 n642=~n427&n643;
 n646=~(n432|n643);
 n648=~n590&n649;
 n652=~(n595|n649);
 n654=~n205&n655;
 n658=~(n210|n655);
 n662=~n137&n663;
 n666=~(n142|n663);
 n668=~n89&n669;
 n672=~(n96|n669);
 n674=~n307&n675;
 n678=~(n312|n675);
 n694=~(n699|n695);
 n73=((A >> 1)&1)&n67;
 n734=~n590&n735;
 n738=~(n595|n735);
 n739=~(n745|n740);
 n74=~(n79|n75);
 n749=~(n754|n750);
 n758=~n307&n759;
 n762=~(n312|n759);
 n764=~n427&n765;
 n768=~(n432|n765);
 n770=~n89&n771;
 n774=~(n96|n771);
 n791=~n205&n792;
 n795=~(n210|n792);
 n797=~n137&n798;
 n801=~(n142|n798);
 n83=~(n88|n84);
 n836=~n205&n837;
 n840=~(n210|n837);
 n842=~n427&n843;
 n846=~(n432|n843);
 n848=~n89&n849;
 n852=~(n96|n849);
 n856=~n590&n857;
 n860=~(n595|n857);
 n862=~n741&n863;
 n866=~(n746|n863);
 n868=~n307&n869;
 n872=~(n312|n869);
 n888=~n137&n889;
 n892=~(n142|n889);
 n895=~(n900|n896);
 n91=~(n95|n92);
 n935=~n307&n936;
 n939=~(n312|n936);
 n941=~n590&n942;
 n945=~(n595|n942);
 n947=~n205&n948;
 n951=~(n210|n948);
 n955=~n741&n956;
 n959=~(n746|n956);
 n961=~n137&n962;
 n965=~(n142|n962);
 n967=~n427&n968;
 n971=~(n432|n968);
 n994=~n89&n995;
 n998=~(n96|n995);
 Z1=n74^n73;
 n1030=~(n1035|n1031);
 n1036=~(n1041|n1037);
 n1042=~(n1047|n1043);
 n1050=~(n1055|n1051);
 n1056=~(n1061|n1057);
 n106=~(n111|n107);
 n1062=~(n1067|n1063);
 n1088=~(n1093|n1089);
 n1122=~(n1127|n1123);
 n1128=~(n1133|n1129);
 n113=n89&n83;
 n1139=~(n1144|n1140);
 n1145=~(n1150|n1146);
 n1165=~(n1170|n1166);
 n1171=~(n1176|n1172);
 n1210=~(n1215|n1211);
 n1216=~(n1221|n1217);
 n1222=~(n1227|n1223);
 n1247=~(n1252|n1248);
 n1253=~(n1258|n1254);
 n1259=~(n1264|n1260);
 n129=~(n134|n130);
 n1293=~(n1298|n1294);
 n1299=~(n1304|n1300);
 n1310=~(n1315|n1311);
 n1316=~(n1321|n1317);
 n1329=~(n1334|n1330);
 n1372=~(n1377|n1373);
 n1378=~(n1383|n1379);
 n1392=~(n1397|n1393);
 n1398=~(n1403|n1399);
 n1404=~(n1409|n1405);
 n144=n137^n145;
 n1443=~(n1448|n1444);
 n1449=~(n1454|n1450);
 n1460=~(n1465|n1461);
 n1466=~(n1471|n1467);
 n1493=~(n1498|n1494);
 n1499=~(n1504|n1500);
 n1505=~(n1510|n1506);
 n1518=~(n1523|n1519);
 n1550=~(n1555|n1551);
 n1556=~(n1561|n1557);
 n1572=~(n1577|n1573);
 n1604=~(n1609|n1605);
 n1610=~(n1615|n1611);
 n1616=~(n1621|n1617);
 n1643=~(n1648|n1644);
 n1649=~(n1654|n1650);
 n166=n137&n145;
 n1677=~(n1682|n1678);
 n1683=~(n1688|n1684);
 n1703=~(n1708|n1704);
 n1724=~(n1729|n1725);
 n174=~(n179|n175);
 n180=~(n185|n181);
 n197=~(n202|n198);
 n212=n205^n213;
 n219=~(n224|n220);
 n246=n205&n213;
 n255=~(n260|n256);
 n261=~(n266|n262);
 n267=~(n272|n268);
 n299=~(n304|n300);
 n314=n307^n315;
 n324=~(n329|n325);
 n330=~(n335|n331);
 n352=~(n357|n353);
 n359=n307&n315;
 n373=~(n378|n374);
 n379=~(n384|n380);
 n385=~(n390|n386);
 n419=~(n424|n420);
 n434=n427^n435;
 n444=~(n449|n445);
 n450=~(n455|n451);
 n456=~(n461|n457);
 n488=n427&n435;
 n496=~(n501|n497);
 n502=~(n507|n503);
 n522=~(n527|n523);
 n528=~(n533|n529);
 n534=~(n539|n535);
 n566=~(n571|n567);
 n582=~(n587|n583);
 n597=n590^n598;
 n606=~(n611|n607);
 n612=~(n617|n613);
 n618=~(n623|n619);
 n641=~(n646|n642);
 n647=~(n652|n648);
 n653=~(n658|n654);
 n661=~(n666|n662);
 n667=~(n672|n668);
 n673=~(n678|n674);
 n693=n590&n598;
 n733=~(n738|n734);
 n748=n741^n749;
 n757=~(n762|n758);
 n763=~(n768|n764);
 n769=~(n774|n770);
 n790=~(n795|n791);
 n796=~(n801|n797);
 n82=n89^n83;
 n835=~(n840|n836);
 n841=~(n846|n842);
 n847=~(n852|n848);
 n855=~(n860|n856);
 n861=~(n866|n862);
 n867=~(n872|n868);
 n887=~(n892|n888);
 n894=n741&n749;
 n934=~(n939|n935);
 n940=~(n945|n941);
 n946=~(n951|n947);
 n954=~(n959|n955);
 n960=~(n965|n961);
 n966=~(n971|n967);
 n98=n74&n73;
 n993=~(n998|n994);
 n1025=n940&n934;
 n1026=n940&n946;
 n1027=n934&n946;
 n1029=~(n1036^n1030);
 n103=n91&n82;
 n104=n91&n98;
 n1049=~(n1056^n1050);
 n105=n82&n98;
 n1083=n960&n954;
 n1084=n960&n966;
 n1085=n954&n966;
 n1087=~(n999|n993);
 n1117=n1056&n1050;
 n1118=n1056&n1062;
 n1119=n1050&n1062;
 n112=n114^n113;
 n1121=~(n1128^n1122);
 n1138=~(n1139^n1042);
 n1161=n1036&n1030;
 n1162=n1036&~n1042;
 n1163=n1030&~n1042;
 n1164=~(n1171^n1165);
 n1205=n1128&n1122;
 n1206=n1134&n1128;
 n1207=n1134&n1122;
 n1209=~(n1216^n1210);
 n1230=n1139&n1042;
 n1231=n1145&n1042;
 n1232=n1139&n1145;
 n1238=n1171&n1165;
 n1246=~(n1253^n1247);
 n128=~(n135^n129);
 n1292=~(n1299^n1293);
 n1309=~(n1310^n1222);
 n1326=n1216&n1210;
 n1327=n1216&~n1222;
 n1328=n1210&~n1222;
 n1337=n1253&n1247;
 n1338=n1253&n1259;
 n1339=n1247&n1259;
 n1368=n1299&n1293;
 n1369=n1305&n1299;
 n1370=n1305&n1293;
 n1371=~(n1378^n1372);
 n1387=n1310&n1222;
 n1388=n1316&n1222;
 n1389=n1310&n1316;
 n1391=~(n1398^n1392);
 n1432=n1378&n1372;
 n1438=n1398&n1392;
 n1439=n1398&~n1404;
 n1440=n1392&~n1404;
 n1442=~(n1449^n1443);
 n1459=~(n1466^n1460);
 n1492=~(n1499^n1493);
 n151=n114&n113;
 n1515=n1449&n1443;
 n1516=n1455&n1449;
 n1517=n1455&n1443;
 n1526=n1466&n1460;
 n1527=n1466&n1404;
 n1528=n1460&n1404;
 n1549=~(n1556^n1550);
 n1568=n1499&n1493;
 n1569=n1499&~n1505;
 n1570=n1493&~n1505;
 n1571=~(n1572^n1505);
 n1594=n1572&n1505;
 n1599=n1556&n1550;
 n1600=n1562&n1556;
 n1601=n1562&n1550;
 n1603=~(n1610^n1604);
 n161=n135&n129;
 n162=n135&n144;
 n163=n129&n144;
 n1638=n1610&n1604;
 n1639=n1610&~n1616;
 n1640=n1604&~n1616;
 n1642=~(n1649^n1643);
 n165=n167^n166;
 n1673=n1649&n1643;
 n1674=n1655&n1649;
 n1675=n1655&n1643;
 n1676=n1683^n1677;
 n1699=~n1683&n1677;
 n1702=~(n1703^n1683);
 n1721=n1703&n1683;
 n1722=n1709&n1703;
 n1723=n1709&n1683;
 n173=~(n180^n174);
 n1743=n1737&n1724;
 n196=~(n203^n197);
 n225=n167&n166;
 n229=n180&n174;
 n242=n203&n197;
 n243=n203&n212;
 n244=n197&n212;
 n245=n247^n246;
 n254=~(n261^n255);
 n294=n261&n255;
 n295=n261&n267;
 n296=n255&n267;
 n298=~(n305^n299);
 n322=n247&n246;
 n323=~(n330^n324);
 n349=n305&n299;
 n350=n305&n314;
 n351=n299&n314;
 n358=n360^n359;
 n369=n330&n324;
 n372=~(n379^n373);
 n414=n379&n373;
 n415=n379&n385;
 n416=n373&n385;
 n418=~(n425^n419);
 n441=n360&n359;
 n443=~(n450^n444);
 n487=n489^n488;
 n495=~(n502^n496);
 n512=n425&n419;
 n513=n425&n434;
 n514=n419&n434;
 n517=n450&n444;
 n518=n450&n456;
 n519=n444&n456;
 n521=~(n528^n522);
 n563=n528&n522;
 n564=n528&n534;
 n565=n522&n534;
 n572=n489&n488;
 n578=n502&n496;
 n581=~(n588^n582);
 n605=~(n612^n606);
 n640=~(n647^n641);
 n660=~(n667^n661);
 n689=n588&n582;
 n690=n588&n597;
 n691=n582&n597;
 n692=n694^n693;
 n702=n612&n606;
 n703=n612&n618;
 n704=n606&n618;
 n728=n667&n661;
 n729=n667&n673;
 n730=n661&n673;
 n732=~(n739^n733);
 n756=~(n763^n757);
 n784=n647&n641;
 n785=n647&n653;
 n786=n641&n653;
 n788=n694&n693;
 n789=~(n796^n790);
 n81=~(n91^n82);
 n830=n763&n757;
 n831=n763&n769;
 n832=n757&n769;
 n834=~(n841^n835);
 n854=~(n861^n855);
 n884=n739&n733;
 n885=n739&n748;
 n886=n733&n748;
 n893=n895^n894;
 n904=n796&n790;
 n929=n841&n835;
 n930=n841&n847;
 n931=n835&n847;
 n933=~(n940^n934);
 n953=~(n960^n954);
 n987=n861&n855;
 n988=n861&n867;
 n989=n855&n867;
 n991=n895&n894;
 n992=n999^n993;
 Z2=~(n98^n81);
 n102=~(n104|n103);
 n1024=~(n1026|n1025);
 n1028=~(n1042^n1029);
 n1048=n1062^n1049;
 n1073=~n992&n991;
 n1082=~(n1084|n1083);
 n1086=n1088^n1087;
 n1116=~(n1118|n1117);
 n1120=n1134^n1121;
 n1137=n1145^n1138;
 n1156=n1088&~n1087;
 n1160=~(n1162|n1161);
 n1204=~(n1206|n1205);
 n1208=~(n1222^n1209);
 n1229=~(n1231|n1230);
 n1245=n1259^n1246;
 n125=n106&n112;
 n127=n144^n128;
 n1291=n1305^n1292;
 n1308=n1316^n1309;
 n1325=~(n1327|n1326);
 n1336=~(n1338|n1337);
 n1367=~(n1369|n1368);
 n1386=~(n1388|n1387);
 n1390=~(n1404^n1391);
 n1437=~(n1439|n1438);
 n1441=n1455^n1442;
 n1458=n1404^n1459;
 n1491=~(n1505^n1492);
 n1514=~(n1516|n1515);
 n1525=~(n1527|n1526);
 n1548=n1562^n1549;
 n1567=~(n1569|n1568);
 n1598=~(n1600|n1599);
 n160=~(n162|n161);
 n1602=~(n1616^n1603);
 n1637=~(n1639|n1638);
 n164=n173^n165;
 n1641=n1655^n1642;
 n1672=~(n1674|n1673);
 n1701=n1709^n1702;
 n1720=~(n1722|n1721);
 n195=n212^n196;
 n228=n180&n165;
 n230=n174&n165;
 n241=~(n243|n242);
 n253=n267^n254;
 n276=n219&n225;
 n293=~(n295|n294);
 n297=n314^n298;
 n321=n323^n322;
 n348=~(n350|n349);
 n368=n330&n322;
 n370=n324&n322;
 n371=n385^n372;
 n408=n352&n358;
 n413=~(n415|n414);
 n417=n434^n418;
 n442=n456^n443;
 n486=n495^n487;
 n511=~(n513|n512);
 n516=~(n518|n517);
 n520=n534^n521;
 n562=~(n564|n563);
 n577=n502&n487;
 n579=n496&n487;
 n580=n597^n581;
 n604=n618^n605;
 n637=n566&n572;
 n639=n653^n640;
 n659=n673^n660;
 n688=~(n690|n689);
 n701=~(n703|n702);
 n727=~(n729|n728);
 n731=n748^n732;
 n755=n769^n756;
 n783=~(n785|n784);
 n787=n789^n788;
 n829=~(n831|n830);
 n833=n847^n834;
 n853=n867^n854;
 n883=~(n885|n884);
 n903=n796&n788;
 n905=n790&n788;
 n928=~(n930|n929);
 n932=n946^n933;
 n952=n966^n953;
 n977=n887&n893;
 n986=~(n988|n987);
 n990=n992^n991;
 n101=~n105&n102;
 n1023=~n1027&n1024;
 n1078=~(n932|n952);
 n1081=~n1085&n1082;
 n1115=~n1119&n1116;
 n1159=~n1163&n1160;
 n1181=~(n1028|n1048);
 n1203=~n1207&n1204;
 n1228=~n1232&n1229;
 n1244=~(n1120|n1137);
 n1324=~n1328&n1325;
 n1335=~n1339&n1336;
 n1356=~(n1291|n1308);
 n1366=~n1370&n1367;
 n1385=~n1389&n1386;
 n1436=~n1440&n1437;
 n1490=~(n1441|n1458);
 n1513=~n1517&n1514;
 n1524=~n1528&n1525;
 n156=n151&~n127;
 n1566=~n1570&n1567;
 n159=~n163&n160;
 n1597=~n1601&n1598;
 n1636=~n1640&n1637;
 n1669=n1616&~n1641;
 n1671=~n1675&n1672;
 n1719=~n1723&n1720;
 n194=n219^n195;
 n227=~(n229|n228);
 n240=~n244&n241;
 n275=n219&~n195;
 n277=n225&~n195;
 n289=n245&~n253;
 n292=~n296&n293;
 n347=~n351&n348;
 n367=~(n369|n368);
 n395=~(n297|n321);
 n412=~n416&n413;
 n485=n441&~n417;
 n510=~n514&n511;
 n515=~n519&n516;
 n561=~n565&n562;
 n576=~(n578|n577);
 n684=~(n580|n604);
 n687=~n691&n688;
 n700=~n704&n701;
 n722=~(n639|n659);
 n726=~n730&n727;
 n782=~n786&n783;
 n828=~n832&n829;
 n878=~(n731|n755);
 n882=~n886&n883;
 n902=~(n904|n903);
 n927=~n931&n928;
 n982=~(n833|n853);
 n985=~n989&n986;
 n100=n106^n101;
 n1022=~(n1028^n1023);
 n1072=~(n992|n985);
 n1074=n991&~n985;
 n1077=~(n932|n927);
 n1079=~(n952|n927);
 n1080=~(n1086^n1081);
 n1114=~(n1120^n1115);
 n1155=~(n1087|n1081);
 n1157=n1088&~n1081;
 n1158=~(n1164^n1159);
 n1179=~(n1028|n1023);
 n1180=~(n1048|n1023);
 n1202=~(n1208^n1203);
 n1237=n1171&~n1159;
 n1239=n1165&~n1159;
 n124=n106&~n101;
 n1242=~(n1120|n1115);
 n1243=~(n1137|n1115);
 n126=n112&~n101;
 n1288=~(n1208|n1203);
 n1289=~(n1203|n1228);
 n1290=~(n1208|n1228);
 n1323=n1329^n1324;
 n1361=n1329&~n1324;
 n1362=~(n1324|n1335);
 n1363=n1329&~n1335;
 n1365=~(n1371^n1366);
 n1384=~(n1390^n1385);
 n1426=~(n1390|n1385);
 n1431=n1378&~n1366;
 n1433=n1372&~n1366;
 n1435=~(n1441^n1436);
 n1488=~(n1441|n1436);
 n1489=~(n1458|n1436);
 n1512=n1518^n1513;
 n1545=n1518&~n1513;
 n1546=~(n1513|n1524);
 n1547=n1518&~n1524;
 n1565=~(n1571^n1566);
 n158=~(n164^n159);
 n1593=n1572&~n1566;
 n1595=n1505&~n1566;
 n1596=~(n1602^n1597);
 n1632=~(n1602|n1597);
 n1635=n1616^n1636;
 n1667=n1616&~n1636;
 n1668=~(n1641|n1636);
 n1670=~(n1676^n1671);
 n1698=~(n1683|n1671);
 n1700=n1677&~n1671;
 n1718=~(n1724^n1719);
 n1735=~(n1724|n1719);
 n190=~(n164|n159);
 n193=n225^n194;
 n226=~n230&n227;
 n239=n245^n240;
 n274=~(n276|n275);
 n287=n245&~n240;
 n288=~(n253|n240);
 n291=~(n297^n292);
 n346=n352^n347;
 n366=~n370&n367;
 n393=~(n297|n292);
 n394=~(n321|n292);
 n407=n352&~n347;
 n409=n358&~n347;
 n411=~(n417^n412);
 n483=~(n417|n412);
 n484=n441&~n412;
 n509=~(n515^n510);
 n556=~(n515|n510);
 n557=~(n520|n515);
 n558=~(n520|n510);
 n560=n566^n561;
 n575=~n579&n576;
 n636=n566&~n561;
 n638=n572&~n561;
 n686=n692^n687;
 n725=~(n731^n726);
 n779=n692&~n687;
 n780=~(n687|n700);
 n781=n692&~n700;
 n824=~(n787|n782);
 n827=~(n833^n828);
 n876=~(n731|n726);
 n877=~(n755|n726);
 n881=n887^n882;
 n901=~n905&n902;
 n926=~(n932^n927);
 n976=n887&~n882;
 n978=n893&~n882;
 n981=~(n833|n828);
 n983=~(n853|n828);
 n984=~(n990^n985);
 Z3=~(n112^n100);
 n1021=~(n1048^n1022);
 n1071=~(n1073|n1072);
 n1076=~(n1078|n1077);
 n1113=~(n1137^n1114);
 n1154=~(n1156|n1155);
 n1178=~(n1180|n1179);
 n1201=~(n1228^n1202);
 n123=~(n125|n124);
 n1236=~(n1238|n1237);
 n1241=~(n1243|n1242);
 n1287=~(n1289|n1288);
 n1322=~(n1335^n1323);
 n1360=~(n1362|n1361);
 n1364=~(n1384^n1365);
 n1425=~(n1385|n1365);
 n1427=~(n1390|n1365);
 n1430=~(n1432|n1431);
 n1434=~(n1458^n1435);
 n1487=~(n1489|n1488);
 n1511=~(n1524^n1512);
 n1544=~(n1546|n1545);
 n1588=~(n1548|n1565);
 n1592=~(n1594|n1593);
 n1634=~(n1641^n1635);
 n1666=~(n1668|n1667);
 n1697=~(n1699|n1698);
 n192=~(n226^n193);
 n235=~(n226|n193);
 n238=~(n253^n239);
 n273=~n277&n274;
 n286=~(n288|n287);
 n290=~(n321^n291);
 n345=n358^n346;
 n392=~(n394|n393);
 n406=~(n408|n407);
 n410=n441^n411;
 n465=~(n371|n366);
 n482=~(n484|n483);
 n508=~(n520^n509);
 n555=~(n557|n556);
 n559=n572^n560;
 n574=~(n580^n575);
 n635=~(n637|n636);
 n682=~(n580|n575);
 n683=~(n604|n575);
 n685=~(n700^n686);
 n724=~(n755^n725);
 n778=~(n780|n779);
 n826=~(n853^n827);
 n875=~(n877|n876);
 n880=n893^n881;
 n925=~(n952^n926);
 n975=~(n977|n976);
 n980=~(n982|n981);
 n1070=~n1074&n1071;
 n1075=~n1079&n1076;
 n1153=~n1157&n1154;
 n1177=~n1181&n1178;
 n122=~n126&n123;
 n1235=~n1239&n1236;
 n1240=~n1244&n1241;
 n1286=~n1290&n1287;
 n1359=~n1363&n1360;
 n1424=~(n1426|n1425);
 n1429=~n1433&n1430;
 n1486=~n1490&n1487;
 n1540=~(n1491|n1511);
 n1543=~n1547&n1544;
 n1591=~n1595&n1592;
 n1665=~n1669&n1666;
 n1696=~n1700&n1697;
 n237=~(n273^n238);
 n282=~(n273|n238);
 n285=~n289&n286;
 n344=~(n366^n345);
 n391=~n395&n392;
 n405=~n409&n406;
 n464=~(n366|n345);
 n466=~(n371|n345);
 n478=~(n442|n410);
 n481=~n485&n482;
 n551=~(n486|n508);
 n554=~n558&n555;
 n573=~(n604^n574);
 n634=~n638&n635;
 n681=~(n683|n682);
 n777=~n781&n778;
 n874=~n878&n875;
 n879=~(n901^n880);
 n923=~(n901|n880);
 n974=~n978&n975;
 n979=~n983&n980;
 n1018=~(n979|n974);
 n1019=~(n984|n974);
 n1020=~(n984|n979);
 n1069=~(n1075^n1070);
 n1110=~(n1075|n1070);
 n1111=~(n1080|n1070);
 n1112=~(n1080|n1075);
 n1152=~(n1158^n1153);
 n1198=~(n1158|n1153);
 n1199=~(n1153|n1177);
 n1200=~(n1158|n1177);
 n121=~(n127^n122);
 n1234=~(n1240^n1235);
 n1281=~(n1240|n1235);
 n1282=~(n1245|n1235);
 n1283=~(n1245|n1240);
 n1285=~(n1291^n1286);
 n1355=~(n1291|n1286);
 n1357=~(n1308|n1286);
 n1358=~(n1364^n1359);
 n1420=~(n1364|n1359);
 n1423=~n1427&n1424;
 n1428=~(n1434^n1429);
 n1482=~(n1434|n1429);
 n1485=~(n1491^n1486);
 n1538=~(n1491|n1486);
 n1539=~(n1511|n1486);
 n1542=~(n1548^n1543);
 n155=~(n127|n122);
 n157=n151&~n122;
 n1587=~(n1548|n1543);
 n1589=~(n1565|n1543);
 n1590=~(n1596^n1591);
 n1631=~(n1597|n1591);
 n1633=~(n1602|n1591);
 n1693=~(n1670|n1665);
 n1695=~(n1701^n1696);
 n1716=~(n1701|n1696);
 n284=~(n290^n285);
 n340=~(n290|n285);
 n343=~(n371^n344);
 n404=~(n410^n405);
 n463=~(n465|n464);
 n476=~(n410|n405);
 n477=~(n442|n405);
 n480=~(n486^n481);
 n549=~(n486|n481);
 n550=~(n508|n481);
 n553=~(n559^n554);
 n633=~(n639^n634);
 n680=~n684&n681;
 n707=~(n559|n554);
 n708=~(n554|n573);
 n709=~(n559|n573);
 n721=~(n639|n634);
 n723=~(n659|n634);
 n776=~(n782^n777);
 n823=~(n782|n777);
 n825=~(n787|n777);
 n873=~(n879^n874);
 n922=~(n901|n874);
 n924=~(n880|n874);
 n973=~(n979^n974);
 Z4=~(n151^n121);
 n1017=~(n1019|n1018);
 n1068=~(n1080^n1069);
 n1109=~(n1111|n1110);
 n1151=~(n1177^n1152);
 n1197=~(n1199|n1198);
 n1233=~(n1245^n1234);
 n1280=~(n1282|n1281);
 n1284=~(n1308^n1285);
 n1354=~(n1356|n1355);
 n1422=~(n1428^n1423);
 n1481=~(n1429|n1423);
 n1483=~(n1434|n1423);
 n1484=~(n1511^n1485);
 n1537=~(n1539|n1538);
 n154=~(n156|n155);
 n1541=~(n1565^n1542);
 n1586=~(n1588|n1587);
 n1630=~(n1632|n1631);
 n342=~(n391^n343);
 n400=~(n391|n343);
 n403=~(n442^n404);
 n462=~n466&n463;
 n475=~(n477|n476);
 n479=~(n508^n480);
 n548=~(n550|n549);
 n552=~(n573^n553);
 n632=~(n659^n633);
 n679=~(n685^n680);
 n706=~(n708|n707);
 n720=~(n722|n721);
 n775=~(n787^n776);
 n805=~(n685|n680);
 n822=~(n824|n823);
 n917=~(n826|n873);
 n921=~(n923|n922);
 n972=~(n984^n973);
 n1013=~(n925|n972);
 n1016=~n1020&n1017;
 n1105=~(n1021|n1068);
 n1108=~n1112&n1109;
 n1193=~(n1113|n1151);
 n1196=~n1200&n1197;
 n1276=~(n1201|n1233);
 n1279=~n1283&n1280;
 n1351=~(n1322|n1284);
 n1353=~n1357&n1354;
 n1480=~(n1482|n1481);
 n153=~n157&n154;
 n1536=~n1540&n1537;
 n1585=~n1589&n1586;
 n1629=~n1633&n1630;
 n402=~(n462^n403);
 n471=~(n462|n403);
 n474=~n478&n475;
 n547=~n551&n548;
 n631=~(n679^n632);
 n705=~n709&n706;
 n719=~n723&n720;
 n804=~(n680|n632);
 n806=~(n685|n632);
 n818=~(n724|n775);
 n821=~n825&n822;
 n920=~n924&n921;
 Z5=n158^n153;
 n1011=~(n925|n920);
 n1012=~(n972|n920);
 n1015=~(n1021^n1016);
 n1103=~(n1021|n1016);
 n1104=~(n1068|n1016);
 n1107=~(n1113^n1108);
 n1191=~(n1113|n1108);
 n1192=~(n1151|n1108);
 n1195=~(n1201^n1196);
 n1274=~(n1201|n1196);
 n1275=~(n1233|n1196);
 n1278=~(n1284^n1279);
 n1349=~(n1284|n1279);
 n1350=~(n1322|n1279);
 n1352=~(n1358^n1353);
 n1419=~(n1359|n1353);
 n1421=~(n1364|n1353);
 n1479=~n1483&n1480;
 n1535=~(n1541^n1536);
 n1582=~(n1541|n1536);
 n1584=~(n1590^n1585);
 n1626=~(n1590|n1585);
 n1628=~(n1634^n1629);
 n1663=~(n1634|n1629);
 n189=~(n159|n153);
 n191=~(n164|n153);
 n473=~(n479^n474);
 n544=~(n479|n474);
 n546=~(n552^n547);
 n628=~(n552|n547);
 n630=~(n705^n631);
 n714=~(n705|n631);
 n718=~(n724^n719);
 n803=~(n805|n804);
 n816=~(n724|n719);
 n817=~(n775|n719);
 n820=~(n826^n821);
 n915=~(n826|n821);
 n916=~(n873|n821);
 n919=~(n925^n920);
 n1010=~(n1012|n1011);
 n1014=~(n1068^n1015);
 n1102=~(n1104|n1103);
 n1106=~(n1151^n1107);
 n1190=~(n1192|n1191);
 n1194=~(n1233^n1195);
 n1273=~(n1275|n1274);
 n1277=~(n1322^n1278);
 n1348=~(n1350|n1349);
 n1418=~(n1420|n1419);
 n1478=~(n1484^n1479);
 n1533=~(n1484|n1479);
 n188=~(n190|n189);
 n717=~(n775^n718);
 n802=~n806&n803;
 n815=~(n817|n816);
 n819=~(n873^n820);
 n914=~(n916|n915);
 n918=~(n972^n919);
 n1009=~n1013&n1010;
 n1101=~n1105&n1102;
 n1189=~n1193&n1190;
 n1272=~n1276&n1273;
 n1347=~n1351&n1348;
 n1417=~n1421&n1418;
 n187=~n191&n188;
 n716=~(n802^n717);
 n811=~(n802|n717);
 n814=~n818&n815;
 n913=~n917&n914;
 Z6=n192^n187;
 n1006=~(n918|n913);
 n1008=~(n1014^n1009);
 n1098=~(n1014|n1009);
 n1100=~(n1106^n1101);
 n1186=~(n1106|n1101);
 n1188=~(n1194^n1189);
 n1269=~(n1194|n1189);
 n1271=~(n1277^n1272);
 n1344=~(n1277|n1272);
 n1346=~(n1352^n1347);
 n1414=~(n1352|n1347);
 n1416=~(n1422^n1417);
 n1476=~(n1422|n1417);
 n234=~(n226|n187);
 n236=~(n193|n187);
 n813=~(n819^n814);
 n910=~(n819|n814);
 n912=~(n918^n913);
 n233=~(n235|n234);
 n232=~n236&n233;
 Z7=n237^n232;
 n281=~(n273|n232);
 n283=~(n238|n232);
 n280=~(n282|n281);
 n279=~n283&n280;
 Z8=n284^n279;
 n339=~(n285|n279);
 n341=~(n290|n279);
 n338=~(n340|n339);
 n337=~n341&n338;
 Z9=n342^n337;
 n399=~(n391|n337);
 n401=~(n343|n337);
 n398=~(n400|n399);
 n397=~n401&n398;
 Z10=n402^n397;
 n470=~(n462|n397);
 n472=~(n403|n397);
 n469=~(n471|n470);
 n468=~n472&n469;
 Z11=n473^n468;
 n543=~(n474|n468);
 n545=~(n479|n468);
 n542=~(n544|n543);
 n541=~n545&n542;
 Z12=n546^n541;
 n627=~(n547|n541);
 n629=~(n552|n541);
 n626=~(n628|n627);
 n625=~n629&n626;
 Z13=n630^n625;
 n713=~(n705|n625);
 n715=~(n631|n625);
 n712=~(n714|n713);
 n711=~n715&n712;
 Z14=n716^n711;
 n810=~(n802|n711);
 n812=~(n717|n711);
 n809=~(n811|n810);
 n808=~n812&n809;
 Z15=n813^n808;
 n909=~(n814|n808);
 n911=~(n819|n808);
 n908=~(n910|n909);
 n907=~n911&n908;
 Z16=n912^n907;
 n1005=~(n913|n907);
 n1007=~(n918|n907);
 n1004=~(n1006|n1005);
 n1003=~n1007&n1004;
 Z17=n1008^n1003;
 n1097=~(n1009|n1003);
 n1099=~(n1014|n1003);
 n1096=~(n1098|n1097);
 n1095=~n1099&n1096;
 Z18=n1100^n1095;
 n1185=~(n1101|n1095);
 n1187=~(n1106|n1095);
 n1184=~(n1186|n1185);
 n1183=~n1187&n1184;
 Z19=n1188^n1183;
 n1268=~(n1189|n1183);
 n1270=~(n1194|n1183);
 n1267=~(n1269|n1268);
 n1266=~n1270&n1267;
 Z20=n1271^n1266;
 n1343=~(n1272|n1266);
 n1345=~(n1277|n1266);
 n1342=~(n1344|n1343);
 n1341=~n1345&n1342;
 Z21=n1346^n1341;
 n1413=~(n1347|n1341);
 n1415=~(n1352|n1341);
 n1412=~(n1414|n1413);
 n1411=~n1415&n1412;
 Z22=n1416^n1411;
 n1475=~(n1417|n1411);
 n1477=~(n1422|n1411);
 n1474=~(n1476|n1475);
 n1473=~n1477&n1474;
 Z23=n1478^n1473;
 n1532=~(n1479|n1473);
 n1534=~(n1484|n1473);
 n1531=~(n1533|n1532);
 n1530=~n1534&n1531;
 Z24=n1535^n1530;
 n1581=~(n1536|n1530);
 n1583=~(n1541|n1530);
 n1580=~(n1582|n1581);
 n1579=~n1583&n1580;
 Z25=n1584^n1579;
 n1625=~(n1585|n1579);
 n1627=~(n1590|n1579);
 n1624=~(n1626|n1625);
 n1623=~n1627&n1624;
 Z26=n1628^n1623;
 n1662=~(n1629|n1623);
 n1664=~(n1634|n1623);
 n1661=~(n1663|n1662);
 n1660=~n1664&n1661;
 n1659=~(n1665^n1660);
 n1692=~(n1665|n1660);
 n1694=~(n1670|n1660);
 Z27=n1670^n1659;
 n1691=~(n1693|n1692);
 n1690=~n1694&n1691;
 Z28=n1695^n1690;
 n1715=~(n1696|n1690);
 n1717=~(n1701|n1690);
 n1714=~(n1716|n1715);
 n1713=~n1717&n1714;
 Z29=n1718^n1713;
 n1734=~(n1719|n1713);
 n1736=~(n1724|n1713);
 n1733=~(n1735|n1734);
 n1732=~n1736&n1733;
 n1731=n1724^n1732;
 n1742=n1724&~n1732;
 n1744=n1737&~n1732;
 Z30=~(n1737^n1731);
 n1741=~(n1743|n1742);
 Z31=~n1744&n1741;
 Z = (Z0 << 0)|(Z1 << 1)|(Z2 << 2)|(Z3 << 3)|(Z4 << 4)|(Z5 << 5)|(Z6 << 6)|(Z7 << 7)|(Z8 << 8)|(Z9 << 9)|(Z10 << 10)|(Z11 << 11)|(Z12 << 12)|(Z13 << 13)|(Z14 << 14)|(Z15 << 15)|(Z16 << 16)|(Z17 << 17)|(Z18 << 18)|(Z19 << 19)|(Z20 << 20)|(Z21 << 21)|(Z22 << 22)|(Z23 << 23)|(Z24 << 24)|(Z25 << 25)|(Z26 << 26)|(Z27 << 27)|(Z28 << 28)|(Z29 << 29)|(Z30 << 30)|(Z31 << 31);
 return Z;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.0013 %
// MAE = 57344 
// WCE% = 0.0053 %
// WCE = 229376 
// WCRE% = 700.00 %
// EP% = 87.50 %
// MRE% = 0.12 %
// MSE = 62634.94e5 
// PDK45_PWR = 1.961 mW
// PDK45_AREA = 2495.7 um2
// PDK45_DELAY = 2.87 ns



int32_t evoapproxlib::evoapprox_t::mul16s_G7F(int16_t A, int16_t B)
{
  int32_t P, P_;
  uint16_t tmp, C_10_0,C_10_1,C_10_10,C_10_11,C_10_12,C_10_13,C_10_14,C_10_15,C_10_2,C_10_3,C_10_4,C_10_5,C_10_6,C_10_7,C_10_8,C_10_9,C_11_0,C_11_1,C_11_10,C_11_11,C_11_12,C_11_13,C_11_14,C_11_15,C_11_2,C_11_3,C_11_4,C_11_5,C_11_6,C_11_7,C_11_8,C_11_9,C_12_0,C_12_1,C_12_10,C_12_11,C_12_12,C_12_13,C_12_14,C_12_15,C_12_2,C_12_3,C_12_4,C_12_5,C_12_6,C_12_7,C_12_8,C_12_9,C_13_0,C_13_1,C_13_10,C_13_11,C_13_12,C_13_13,C_13_14,C_13_15,C_13_2,C_13_3,C_13_4,C_13_5,C_13_6,C_13_7,C_13_8,C_13_9,C_14_0,C_14_1,C_14_10,C_14_11,C_14_12,C_14_13,C_14_14,C_14_15,C_14_2,C_14_3,C_14_4,C_14_5,C_14_6,C_14_7,C_14_8,C_14_9,C_15_0,C_15_1,C_15_10,C_15_11,C_15_12,C_15_13,C_15_14,C_15_15,C_15_2,C_15_3,C_15_4,C_15_5,C_15_6,C_15_7,C_15_8,C_15_9,C_16_0,C_16_1,C_16_10,C_16_11,C_16_12,C_16_13,C_16_14,C_16_15,C_16_2,C_16_3,C_16_4,C_16_5,C_16_6,C_16_7,C_16_8,C_16_9,C_3_12,C_3_15,C_4_0,C_4_1,C_4_10,C_4_11,C_4_12,C_4_13,C_4_14,C_4_15,C_4_2,C_4_3,C_4_4,C_4_5,C_4_6,C_4_7,C_4_8,C_4_9,C_5_0,C_5_1,C_5_10,C_5_11,C_5_12,C_5_13,C_5_14,C_5_15,C_5_2,C_5_3,C_5_4,C_5_5,C_5_6,C_5_7,C_5_8,C_5_9,C_6_0,C_6_1,C_6_10,C_6_11,C_6_12,C_6_13,C_6_14,C_6_15,C_6_2,C_6_3,C_6_4,C_6_5,C_6_6,C_6_7,C_6_8,C_6_9,C_7_0,C_7_1,C_7_10,C_7_11,C_7_12,C_7_13,C_7_14,C_7_15,C_7_2,C_7_3,C_7_4,C_7_5,C_7_6,C_7_7,C_7_8,C_7_9,C_8_0,C_8_1,C_8_10,C_8_11,C_8_12,C_8_13,C_8_14,C_8_15,C_8_2,C_8_3,C_8_4,C_8_5,C_8_6,C_8_7,C_8_8,C_8_9,C_9_0,C_9_1,C_9_10,C_9_11,C_9_12,C_9_13,C_9_14,C_9_15,C_9_2,C_9_3,C_9_4,C_9_5,C_9_6,C_9_7,C_9_8,C_9_9,S_0_15,S_10_0,S_10_1,S_10_10,S_10_11,S_10_12,S_10_13,S_10_14,S_10_15,S_10_2,S_10_3,S_10_4,S_10_5,S_10_6,S_10_7,S_10_8,S_10_9,S_11_0,S_11_1,S_11_10,S_11_11,S_11_12,S_11_13,S_11_14,S_11_15,S_11_2,S_11_3,S_11_4,S_11_5,S_11_6,S_11_7,S_11_8,S_11_9,S_12_0,S_12_1,S_12_10,S_12_11,S_12_12,S_12_13,S_12_14,S_12_15,S_12_2,S_12_3,S_12_4,S_12_5,S_12_6,S_12_7,S_12_8,S_12_9,S_13_0,S_13_1,S_13_10,S_13_11,S_13_12,S_13_13,S_13_14,S_13_15,S_13_2,S_13_3,S_13_4,S_13_5,S_13_6,S_13_7,S_13_8,S_13_9,S_14_0,S_14_1,S_14_10,S_14_11,S_14_12,S_14_13,S_14_14,S_14_15,S_14_2,S_14_3,S_14_4,S_14_5,S_14_6,S_14_7,S_14_8,S_14_9,S_15_0,S_15_1,S_15_10,S_15_11,S_15_12,S_15_13,S_15_14,S_15_15,S_15_2,S_15_3,S_15_4,S_15_5,S_15_6,S_15_7,S_15_8,S_15_9,S_16_0,S_16_1,S_16_10,S_16_11,S_16_12,S_16_13,S_16_14,S_16_15,S_16_2,S_16_3,S_16_4,S_16_5,S_16_6,S_16_7,S_16_8,S_16_9,S_1_14,S_2_13,S_3_0,S_3_1,S_3_10,S_3_11,S_3_12,S_3_13,S_3_14,S_3_15,S_3_2,S_3_3,S_3_4,S_3_5,S_3_6,S_3_7,S_3_8,S_3_9,S_4_0,S_4_1,S_4_10,S_4_11,S_4_12,S_4_13,S_4_14,S_4_15,S_4_2,S_4_3,S_4_4,S_4_5,S_4_6,S_4_7,S_4_8,S_4_9,S_5_0,S_5_1,S_5_10,S_5_11,S_5_12,S_5_13,S_5_14,S_5_15,S_5_2,S_5_3,S_5_4,S_5_5,S_5_6,S_5_7,S_5_8,S_5_9,S_6_0,S_6_1,S_6_10,S_6_11,S_6_12,S_6_13,S_6_14,S_6_15,S_6_2,S_6_3,S_6_4,S_6_5,S_6_6,S_6_7,S_6_8,S_6_9,S_7_0,S_7_1,S_7_10,S_7_11,S_7_12,S_7_13,S_7_14,S_7_15,S_7_2,S_7_3,S_7_4,S_7_5,S_7_6,S_7_7,S_7_8,S_7_9,S_8_0,S_8_1,S_8_10,S_8_11,S_8_12,S_8_13,S_8_14,S_8_15,S_8_2,S_8_3,S_8_4,S_8_5,S_8_6,S_8_7,S_8_8,S_8_9,S_9_0,S_9_1,S_9_10,S_9_11,S_9_12,S_9_13,S_9_14,S_9_15,S_9_2,S_9_3,S_9_4,S_9_5,S_9_6,S_9_7,S_9_8,S_9_9;
  S_0_15 = 1;
  S_1_14 = 1;
  S_2_13 = 1;
  S_3_0 = (((A>>3)&1) & ((B>>0)&1));
  S_3_1 = (((A>>3)&1) & ((B>>1)&1));
  S_3_2 = (((A>>3)&1) & ((B>>2)&1));
  S_3_3 = (((A>>3)&1) & ((B>>3)&1));
  S_3_4 = (((A>>3)&1) & ((B>>4)&1));
  S_3_5 = (((A>>3)&1) & ((B>>5)&1));
  S_3_6 = (((A>>3)&1) & ((B>>6)&1));
  S_3_7 = (((A>>3)&1) & ((B>>7)&1));
  S_3_8 = (((A>>3)&1) & ((B>>8)&1));
  S_3_9 = (((A>>3)&1) & ((B>>9)&1));
  S_3_10 = (((A>>3)&1) & ((B>>10)&1));
  S_3_11 = (((A>>3)&1) & ((B>>11)&1));
  S_3_12 = S_2_13^(((A>>3)&1) & ((B>>12)&1));
  C_3_12 = S_2_13&(((A>>3)&1) & ((B>>12)&1));
  S_3_13 = (((A>>3)&1) & ((B>>13)&1));
  S_3_14 = (((A>>3)&1) & ((B>>14)&1));
  S_3_15 = 1^(((((A>>3)&1) & ((B>>15)&1)))^1);
  C_3_15 = 1&(((((A>>3)&1) & ((B>>15)&1)))^1);
  S_4_0 = S_3_1^(((A>>4)&1) & ((B>>0)&1));
  C_4_0 = S_3_1&(((A>>4)&1) & ((B>>0)&1));
  S_4_1 = S_3_2^(((A>>4)&1) & ((B>>1)&1));
  C_4_1 = S_3_2&(((A>>4)&1) & ((B>>1)&1));
  S_4_2 = S_3_3^(((A>>4)&1) & ((B>>2)&1));
  C_4_2 = S_3_3&(((A>>4)&1) & ((B>>2)&1));
  S_4_3 = S_3_4^(((A>>4)&1) & ((B>>3)&1));
  C_4_3 = S_3_4&(((A>>4)&1) & ((B>>3)&1));
  S_4_4 = S_3_5^(((A>>4)&1) & ((B>>4)&1));
  C_4_4 = S_3_5&(((A>>4)&1) & ((B>>4)&1));
  S_4_5 = S_3_6^(((A>>4)&1) & ((B>>5)&1));
  C_4_5 = S_3_6&(((A>>4)&1) & ((B>>5)&1));
  S_4_6 = S_3_7^(((A>>4)&1) & ((B>>6)&1));
  C_4_6 = S_3_7&(((A>>4)&1) & ((B>>6)&1));
  S_4_7 = S_3_8^(((A>>4)&1) & ((B>>7)&1));
  C_4_7 = S_3_8&(((A>>4)&1) & ((B>>7)&1));
  S_4_8 = S_3_9^(((A>>4)&1) & ((B>>8)&1));
  C_4_8 = S_3_9&(((A>>4)&1) & ((B>>8)&1));
  S_4_9 = S_3_10^(((A>>4)&1) & ((B>>9)&1));
  C_4_9 = S_3_10&(((A>>4)&1) & ((B>>9)&1));
  S_4_10 = S_3_11^(((A>>4)&1) & ((B>>10)&1));
  C_4_10 = S_3_11&(((A>>4)&1) & ((B>>10)&1));
  S_4_11 = S_3_12^(((A>>4)&1) & ((B>>11)&1));
  C_4_11 = S_3_12&(((A>>4)&1) & ((B>>11)&1));
  tmp = S_3_13^C_3_12;
  S_4_12 = tmp^(((A>>4)&1) & ((B>>12)&1));
  C_4_12 = (tmp&(((A>>4)&1) & ((B>>12)&1)))|(S_3_13&C_3_12);
  S_4_13 = S_3_14^(((A>>4)&1) & ((B>>13)&1));
  C_4_13 = S_3_14&(((A>>4)&1) & ((B>>13)&1));
  S_4_14 = S_3_15^(((A>>4)&1) & ((B>>14)&1));
  C_4_14 = S_3_15&(((A>>4)&1) & ((B>>14)&1));
  S_4_15 = C_3_15^(((((A>>4)&1) & ((B>>15)&1)))^1);
  C_4_15 = C_3_15&(((((A>>4)&1) & ((B>>15)&1)))^1);
  tmp = S_4_1^C_4_0;
  S_5_0 = tmp^(((A>>5)&1) & ((B>>0)&1));
  C_5_0 = (tmp&(((A>>5)&1) & ((B>>0)&1)))|(S_4_1&C_4_0);
  tmp = S_4_2^C_4_1;
  S_5_1 = tmp^(((A>>5)&1) & ((B>>1)&1));
  C_5_1 = (tmp&(((A>>5)&1) & ((B>>1)&1)))|(S_4_2&C_4_1);
  tmp = S_4_3^C_4_2;
  S_5_2 = tmp^(((A>>5)&1) & ((B>>2)&1));
  C_5_2 = (tmp&(((A>>5)&1) & ((B>>2)&1)))|(S_4_3&C_4_2);
  tmp = S_4_4^C_4_3;
  S_5_3 = tmp^(((A>>5)&1) & ((B>>3)&1));
  C_5_3 = (tmp&(((A>>5)&1) & ((B>>3)&1)))|(S_4_4&C_4_3);
  tmp = S_4_5^C_4_4;
  S_5_4 = tmp^(((A>>5)&1) & ((B>>4)&1));
  C_5_4 = (tmp&(((A>>5)&1) & ((B>>4)&1)))|(S_4_5&C_4_4);
  tmp = S_4_6^C_4_5;
  S_5_5 = tmp^(((A>>5)&1) & ((B>>5)&1));
  C_5_5 = (tmp&(((A>>5)&1) & ((B>>5)&1)))|(S_4_6&C_4_5);
  tmp = S_4_7^C_4_6;
  S_5_6 = tmp^(((A>>5)&1) & ((B>>6)&1));
  C_5_6 = (tmp&(((A>>5)&1) & ((B>>6)&1)))|(S_4_7&C_4_6);
  tmp = S_4_8^C_4_7;
  S_5_7 = tmp^(((A>>5)&1) & ((B>>7)&1));
  C_5_7 = (tmp&(((A>>5)&1) & ((B>>7)&1)))|(S_4_8&C_4_7);
  tmp = S_4_9^C_4_8;
  S_5_8 = tmp^(((A>>5)&1) & ((B>>8)&1));
  C_5_8 = (tmp&(((A>>5)&1) & ((B>>8)&1)))|(S_4_9&C_4_8);
  tmp = S_4_10^C_4_9;
  S_5_9 = tmp^(((A>>5)&1) & ((B>>9)&1));
  C_5_9 = (tmp&(((A>>5)&1) & ((B>>9)&1)))|(S_4_10&C_4_9);
  tmp = S_4_11^C_4_10;
  S_5_10 = tmp^(((A>>5)&1) & ((B>>10)&1));
  C_5_10 = (tmp&(((A>>5)&1) & ((B>>10)&1)))|(S_4_11&C_4_10);
  tmp = S_4_12^C_4_11;
  S_5_11 = tmp^(((A>>5)&1) & ((B>>11)&1));
  C_5_11 = (tmp&(((A>>5)&1) & ((B>>11)&1)))|(S_4_12&C_4_11);
  tmp = S_4_13^C_4_12;
  S_5_12 = tmp^(((A>>5)&1) & ((B>>12)&1));
  C_5_12 = (tmp&(((A>>5)&1) & ((B>>12)&1)))|(S_4_13&C_4_12);
  tmp = S_4_14^C_4_13;
  S_5_13 = tmp^(((A>>5)&1) & ((B>>13)&1));
  C_5_13 = (tmp&(((A>>5)&1) & ((B>>13)&1)))|(S_4_14&C_4_13);
  tmp = S_4_15^C_4_14;
  S_5_14 = tmp^(((A>>5)&1) & ((B>>14)&1));
  C_5_14 = (tmp&(((A>>5)&1) & ((B>>14)&1)))|(S_4_15&C_4_14);
  S_5_15 = C_4_15^(((((A>>5)&1) & ((B>>15)&1)))^1);
  C_5_15 = C_4_15&(((((A>>5)&1) & ((B>>15)&1)))^1);
  tmp = S_5_1^C_5_0;
  S_6_0 = tmp^(((A>>6)&1) & ((B>>0)&1));
  C_6_0 = (tmp&(((A>>6)&1) & ((B>>0)&1)))|(S_5_1&C_5_0);
  tmp = S_5_2^C_5_1;
  S_6_1 = tmp^(((A>>6)&1) & ((B>>1)&1));
  C_6_1 = (tmp&(((A>>6)&1) & ((B>>1)&1)))|(S_5_2&C_5_1);
  tmp = S_5_3^C_5_2;
  S_6_2 = tmp^(((A>>6)&1) & ((B>>2)&1));
  C_6_2 = (tmp&(((A>>6)&1) & ((B>>2)&1)))|(S_5_3&C_5_2);
  tmp = S_5_4^C_5_3;
  S_6_3 = tmp^(((A>>6)&1) & ((B>>3)&1));
  C_6_3 = (tmp&(((A>>6)&1) & ((B>>3)&1)))|(S_5_4&C_5_3);
  tmp = S_5_5^C_5_4;
  S_6_4 = tmp^(((A>>6)&1) & ((B>>4)&1));
  C_6_4 = (tmp&(((A>>6)&1) & ((B>>4)&1)))|(S_5_5&C_5_4);
  tmp = S_5_6^C_5_5;
  S_6_5 = tmp^(((A>>6)&1) & ((B>>5)&1));
  C_6_5 = (tmp&(((A>>6)&1) & ((B>>5)&1)))|(S_5_6&C_5_5);
  tmp = S_5_7^C_5_6;
  S_6_6 = tmp^(((A>>6)&1) & ((B>>6)&1));
  C_6_6 = (tmp&(((A>>6)&1) & ((B>>6)&1)))|(S_5_7&C_5_6);
  tmp = S_5_8^C_5_7;
  S_6_7 = tmp^(((A>>6)&1) & ((B>>7)&1));
  C_6_7 = (tmp&(((A>>6)&1) & ((B>>7)&1)))|(S_5_8&C_5_7);
  tmp = S_5_9^C_5_8;
  S_6_8 = tmp^(((A>>6)&1) & ((B>>8)&1));
  C_6_8 = (tmp&(((A>>6)&1) & ((B>>8)&1)))|(S_5_9&C_5_8);
  tmp = S_5_10^C_5_9;
  S_6_9 = tmp^(((A>>6)&1) & ((B>>9)&1));
  C_6_9 = (tmp&(((A>>6)&1) & ((B>>9)&1)))|(S_5_10&C_5_9);
  tmp = S_5_11^C_5_10;
  S_6_10 = tmp^(((A>>6)&1) & ((B>>10)&1));
  C_6_10 = (tmp&(((A>>6)&1) & ((B>>10)&1)))|(S_5_11&C_5_10);
  tmp = S_5_12^C_5_11;
  S_6_11 = tmp^(((A>>6)&1) & ((B>>11)&1));
  C_6_11 = (tmp&(((A>>6)&1) & ((B>>11)&1)))|(S_5_12&C_5_11);
  tmp = S_5_13^C_5_12;
  S_6_12 = tmp^(((A>>6)&1) & ((B>>12)&1));
  C_6_12 = (tmp&(((A>>6)&1) & ((B>>12)&1)))|(S_5_13&C_5_12);
  tmp = S_5_14^C_5_13;
  S_6_13 = tmp^(((A>>6)&1) & ((B>>13)&1));
  C_6_13 = (tmp&(((A>>6)&1) & ((B>>13)&1)))|(S_5_14&C_5_13);
  tmp = S_5_15^C_5_14;
  S_6_14 = tmp^(((A>>6)&1) & ((B>>14)&1));
  C_6_14 = (tmp&(((A>>6)&1) & ((B>>14)&1)))|(S_5_15&C_5_14);
  S_6_15 = C_5_15^(((((A>>6)&1) & ((B>>15)&1)))^1);
  C_6_15 = C_5_15&(((((A>>6)&1) & ((B>>15)&1)))^1);
  tmp = S_6_1^C_6_0;
  S_7_0 = tmp^(((A>>7)&1) & ((B>>0)&1));
  C_7_0 = (tmp&(((A>>7)&1) & ((B>>0)&1)))|(S_6_1&C_6_0);
  tmp = S_6_2^C_6_1;
  S_7_1 = tmp^(((A>>7)&1) & ((B>>1)&1));
  C_7_1 = (tmp&(((A>>7)&1) & ((B>>1)&1)))|(S_6_2&C_6_1);
  tmp = S_6_3^C_6_2;
  S_7_2 = tmp^(((A>>7)&1) & ((B>>2)&1));
  C_7_2 = (tmp&(((A>>7)&1) & ((B>>2)&1)))|(S_6_3&C_6_2);
  tmp = S_6_4^C_6_3;
  S_7_3 = tmp^(((A>>7)&1) & ((B>>3)&1));
  C_7_3 = (tmp&(((A>>7)&1) & ((B>>3)&1)))|(S_6_4&C_6_3);
  tmp = S_6_5^C_6_4;
  S_7_4 = tmp^(((A>>7)&1) & ((B>>4)&1));
  C_7_4 = (tmp&(((A>>7)&1) & ((B>>4)&1)))|(S_6_5&C_6_4);
  tmp = S_6_6^C_6_5;
  S_7_5 = tmp^(((A>>7)&1) & ((B>>5)&1));
  C_7_5 = (tmp&(((A>>7)&1) & ((B>>5)&1)))|(S_6_6&C_6_5);
  tmp = S_6_7^C_6_6;
  S_7_6 = tmp^(((A>>7)&1) & ((B>>6)&1));
  C_7_6 = (tmp&(((A>>7)&1) & ((B>>6)&1)))|(S_6_7&C_6_6);
  tmp = S_6_8^C_6_7;
  S_7_7 = tmp^(((A>>7)&1) & ((B>>7)&1));
  C_7_7 = (tmp&(((A>>7)&1) & ((B>>7)&1)))|(S_6_8&C_6_7);
  tmp = S_6_9^C_6_8;
  S_7_8 = tmp^(((A>>7)&1) & ((B>>8)&1));
  C_7_8 = (tmp&(((A>>7)&1) & ((B>>8)&1)))|(S_6_9&C_6_8);
  tmp = S_6_10^C_6_9;
  S_7_9 = tmp^(((A>>7)&1) & ((B>>9)&1));
  C_7_9 = (tmp&(((A>>7)&1) & ((B>>9)&1)))|(S_6_10&C_6_9);
  tmp = S_6_11^C_6_10;
  S_7_10 = tmp^(((A>>7)&1) & ((B>>10)&1));
  C_7_10 = (tmp&(((A>>7)&1) & ((B>>10)&1)))|(S_6_11&C_6_10);
  tmp = S_6_12^C_6_11;
  S_7_11 = tmp^(((A>>7)&1) & ((B>>11)&1));
  C_7_11 = (tmp&(((A>>7)&1) & ((B>>11)&1)))|(S_6_12&C_6_11);
  tmp = S_6_13^C_6_12;
  S_7_12 = tmp^(((A>>7)&1) & ((B>>12)&1));
  C_7_12 = (tmp&(((A>>7)&1) & ((B>>12)&1)))|(S_6_13&C_6_12);
  tmp = S_6_14^C_6_13;
  S_7_13 = tmp^(((A>>7)&1) & ((B>>13)&1));
  C_7_13 = (tmp&(((A>>7)&1) & ((B>>13)&1)))|(S_6_14&C_6_13);
  tmp = S_6_15^C_6_14;
  S_7_14 = tmp^(((A>>7)&1) & ((B>>14)&1));
  C_7_14 = (tmp&(((A>>7)&1) & ((B>>14)&1)))|(S_6_15&C_6_14);
  S_7_15 = C_6_15^(((((A>>7)&1) & ((B>>15)&1)))^1);
  C_7_15 = C_6_15&(((((A>>7)&1) & ((B>>15)&1)))^1);
  tmp = S_7_1^C_7_0;
  S_8_0 = tmp^(((A>>8)&1) & ((B>>0)&1));
  C_8_0 = (tmp&(((A>>8)&1) & ((B>>0)&1)))|(S_7_1&C_7_0);
  tmp = S_7_2^C_7_1;
  S_8_1 = tmp^(((A>>8)&1) & ((B>>1)&1));
  C_8_1 = (tmp&(((A>>8)&1) & ((B>>1)&1)))|(S_7_2&C_7_1);
  tmp = S_7_3^C_7_2;
  S_8_2 = tmp^(((A>>8)&1) & ((B>>2)&1));
  C_8_2 = (tmp&(((A>>8)&1) & ((B>>2)&1)))|(S_7_3&C_7_2);
  tmp = S_7_4^C_7_3;
  S_8_3 = tmp^(((A>>8)&1) & ((B>>3)&1));
  C_8_3 = (tmp&(((A>>8)&1) & ((B>>3)&1)))|(S_7_4&C_7_3);
  tmp = S_7_5^C_7_4;
  S_8_4 = tmp^(((A>>8)&1) & ((B>>4)&1));
  C_8_4 = (tmp&(((A>>8)&1) & ((B>>4)&1)))|(S_7_5&C_7_4);
  tmp = S_7_6^C_7_5;
  S_8_5 = tmp^(((A>>8)&1) & ((B>>5)&1));
  C_8_5 = (tmp&(((A>>8)&1) & ((B>>5)&1)))|(S_7_6&C_7_5);
  tmp = S_7_7^C_7_6;
  S_8_6 = tmp^(((A>>8)&1) & ((B>>6)&1));
  C_8_6 = (tmp&(((A>>8)&1) & ((B>>6)&1)))|(S_7_7&C_7_6);
  tmp = S_7_8^C_7_7;
  S_8_7 = tmp^(((A>>8)&1) & ((B>>7)&1));
  C_8_7 = (tmp&(((A>>8)&1) & ((B>>7)&1)))|(S_7_8&C_7_7);
  tmp = S_7_9^C_7_8;
  S_8_8 = tmp^(((A>>8)&1) & ((B>>8)&1));
  C_8_8 = (tmp&(((A>>8)&1) & ((B>>8)&1)))|(S_7_9&C_7_8);
  tmp = S_7_10^C_7_9;
  S_8_9 = tmp^(((A>>8)&1) & ((B>>9)&1));
  C_8_9 = (tmp&(((A>>8)&1) & ((B>>9)&1)))|(S_7_10&C_7_9);
  tmp = S_7_11^C_7_10;
  S_8_10 = tmp^(((A>>8)&1) & ((B>>10)&1));
  C_8_10 = (tmp&(((A>>8)&1) & ((B>>10)&1)))|(S_7_11&C_7_10);
  tmp = S_7_12^C_7_11;
  S_8_11 = tmp^(((A>>8)&1) & ((B>>11)&1));
  C_8_11 = (tmp&(((A>>8)&1) & ((B>>11)&1)))|(S_7_12&C_7_11);
  tmp = S_7_13^C_7_12;
  S_8_12 = tmp^(((A>>8)&1) & ((B>>12)&1));
  C_8_12 = (tmp&(((A>>8)&1) & ((B>>12)&1)))|(S_7_13&C_7_12);
  tmp = S_7_14^C_7_13;
  S_8_13 = tmp^(((A>>8)&1) & ((B>>13)&1));
  C_8_13 = (tmp&(((A>>8)&1) & ((B>>13)&1)))|(S_7_14&C_7_13);
  tmp = S_7_15^C_7_14;
  S_8_14 = tmp^(((A>>8)&1) & ((B>>14)&1));
  C_8_14 = (tmp&(((A>>8)&1) & ((B>>14)&1)))|(S_7_15&C_7_14);
  S_8_15 = C_7_15^(((((A>>8)&1) & ((B>>15)&1)))^1);
  C_8_15 = C_7_15&(((((A>>8)&1) & ((B>>15)&1)))^1);
  tmp = S_8_1^C_8_0;
  S_9_0 = tmp^(((A>>9)&1) & ((B>>0)&1));
  C_9_0 = (tmp&(((A>>9)&1) & ((B>>0)&1)))|(S_8_1&C_8_0);
  tmp = S_8_2^C_8_1;
  S_9_1 = tmp^(((A>>9)&1) & ((B>>1)&1));
  C_9_1 = (tmp&(((A>>9)&1) & ((B>>1)&1)))|(S_8_2&C_8_1);
  tmp = S_8_3^C_8_2;
  S_9_2 = tmp^(((A>>9)&1) & ((B>>2)&1));
  C_9_2 = (tmp&(((A>>9)&1) & ((B>>2)&1)))|(S_8_3&C_8_2);
  tmp = S_8_4^C_8_3;
  S_9_3 = tmp^(((A>>9)&1) & ((B>>3)&1));
  C_9_3 = (tmp&(((A>>9)&1) & ((B>>3)&1)))|(S_8_4&C_8_3);
  tmp = S_8_5^C_8_4;
  S_9_4 = tmp^(((A>>9)&1) & ((B>>4)&1));
  C_9_4 = (tmp&(((A>>9)&1) & ((B>>4)&1)))|(S_8_5&C_8_4);
  tmp = S_8_6^C_8_5;
  S_9_5 = tmp^(((A>>9)&1) & ((B>>5)&1));
  C_9_5 = (tmp&(((A>>9)&1) & ((B>>5)&1)))|(S_8_6&C_8_5);
  tmp = S_8_7^C_8_6;
  S_9_6 = tmp^(((A>>9)&1) & ((B>>6)&1));
  C_9_6 = (tmp&(((A>>9)&1) & ((B>>6)&1)))|(S_8_7&C_8_6);
  tmp = S_8_8^C_8_7;
  S_9_7 = tmp^(((A>>9)&1) & ((B>>7)&1));
  C_9_7 = (tmp&(((A>>9)&1) & ((B>>7)&1)))|(S_8_8&C_8_7);
  tmp = S_8_9^C_8_8;
  S_9_8 = tmp^(((A>>9)&1) & ((B>>8)&1));
  C_9_8 = (tmp&(((A>>9)&1) & ((B>>8)&1)))|(S_8_9&C_8_8);
  tmp = S_8_10^C_8_9;
  S_9_9 = tmp^(((A>>9)&1) & ((B>>9)&1));
  C_9_9 = (tmp&(((A>>9)&1) & ((B>>9)&1)))|(S_8_10&C_8_9);
  tmp = S_8_11^C_8_10;
  S_9_10 = tmp^(((A>>9)&1) & ((B>>10)&1));
  C_9_10 = (tmp&(((A>>9)&1) & ((B>>10)&1)))|(S_8_11&C_8_10);
  tmp = S_8_12^C_8_11;
  S_9_11 = tmp^(((A>>9)&1) & ((B>>11)&1));
  C_9_11 = (tmp&(((A>>9)&1) & ((B>>11)&1)))|(S_8_12&C_8_11);
  tmp = S_8_13^C_8_12;
  S_9_12 = tmp^(((A>>9)&1) & ((B>>12)&1));
  C_9_12 = (tmp&(((A>>9)&1) & ((B>>12)&1)))|(S_8_13&C_8_12);
  tmp = S_8_14^C_8_13;
  S_9_13 = tmp^(((A>>9)&1) & ((B>>13)&1));
  C_9_13 = (tmp&(((A>>9)&1) & ((B>>13)&1)))|(S_8_14&C_8_13);
  tmp = S_8_15^C_8_14;
  S_9_14 = tmp^(((A>>9)&1) & ((B>>14)&1));
  C_9_14 = (tmp&(((A>>9)&1) & ((B>>14)&1)))|(S_8_15&C_8_14);
  S_9_15 = C_8_15^(((((A>>9)&1) & ((B>>15)&1)))^1);
  C_9_15 = C_8_15&(((((A>>9)&1) & ((B>>15)&1)))^1);
  tmp = S_9_1^C_9_0;
  S_10_0 = tmp^(((A>>10)&1) & ((B>>0)&1));
  C_10_0 = (tmp&(((A>>10)&1) & ((B>>0)&1)))|(S_9_1&C_9_0);
  tmp = S_9_2^C_9_1;
  S_10_1 = tmp^(((A>>10)&1) & ((B>>1)&1));
  C_10_1 = (tmp&(((A>>10)&1) & ((B>>1)&1)))|(S_9_2&C_9_1);
  tmp = S_9_3^C_9_2;
  S_10_2 = tmp^(((A>>10)&1) & ((B>>2)&1));
  C_10_2 = (tmp&(((A>>10)&1) & ((B>>2)&1)))|(S_9_3&C_9_2);
  tmp = S_9_4^C_9_3;
  S_10_3 = tmp^(((A>>10)&1) & ((B>>3)&1));
  C_10_3 = (tmp&(((A>>10)&1) & ((B>>3)&1)))|(S_9_4&C_9_3);
  tmp = S_9_5^C_9_4;
  S_10_4 = tmp^(((A>>10)&1) & ((B>>4)&1));
  C_10_4 = (tmp&(((A>>10)&1) & ((B>>4)&1)))|(S_9_5&C_9_4);
  tmp = S_9_6^C_9_5;
  S_10_5 = tmp^(((A>>10)&1) & ((B>>5)&1));
  C_10_5 = (tmp&(((A>>10)&1) & ((B>>5)&1)))|(S_9_6&C_9_5);
  tmp = S_9_7^C_9_6;
  S_10_6 = tmp^(((A>>10)&1) & ((B>>6)&1));
  C_10_6 = (tmp&(((A>>10)&1) & ((B>>6)&1)))|(S_9_7&C_9_6);
  tmp = S_9_8^C_9_7;
  S_10_7 = tmp^(((A>>10)&1) & ((B>>7)&1));
  C_10_7 = (tmp&(((A>>10)&1) & ((B>>7)&1)))|(S_9_8&C_9_7);
  tmp = S_9_9^C_9_8;
  S_10_8 = tmp^(((A>>10)&1) & ((B>>8)&1));
  C_10_8 = (tmp&(((A>>10)&1) & ((B>>8)&1)))|(S_9_9&C_9_8);
  tmp = S_9_10^C_9_9;
  S_10_9 = tmp^(((A>>10)&1) & ((B>>9)&1));
  C_10_9 = (tmp&(((A>>10)&1) & ((B>>9)&1)))|(S_9_10&C_9_9);
  tmp = S_9_11^C_9_10;
  S_10_10 = tmp^(((A>>10)&1) & ((B>>10)&1));
  C_10_10 = (tmp&(((A>>10)&1) & ((B>>10)&1)))|(S_9_11&C_9_10);
  tmp = S_9_12^C_9_11;
  S_10_11 = tmp^(((A>>10)&1) & ((B>>11)&1));
  C_10_11 = (tmp&(((A>>10)&1) & ((B>>11)&1)))|(S_9_12&C_9_11);
  tmp = S_9_13^C_9_12;
  S_10_12 = tmp^(((A>>10)&1) & ((B>>12)&1));
  C_10_12 = (tmp&(((A>>10)&1) & ((B>>12)&1)))|(S_9_13&C_9_12);
  tmp = S_9_14^C_9_13;
  S_10_13 = tmp^(((A>>10)&1) & ((B>>13)&1));
  C_10_13 = (tmp&(((A>>10)&1) & ((B>>13)&1)))|(S_9_14&C_9_13);
  tmp = S_9_15^C_9_14;
  S_10_14 = tmp^(((A>>10)&1) & ((B>>14)&1));
  C_10_14 = (tmp&(((A>>10)&1) & ((B>>14)&1)))|(S_9_15&C_9_14);
  S_10_15 = C_9_15^(((((A>>10)&1) & ((B>>15)&1)))^1);
  C_10_15 = C_9_15&(((((A>>10)&1) & ((B>>15)&1)))^1);
  tmp = S_10_1^C_10_0;
  S_11_0 = tmp^(((A>>11)&1) & ((B>>0)&1));
  C_11_0 = (tmp&(((A>>11)&1) & ((B>>0)&1)))|(S_10_1&C_10_0);
  tmp = S_10_2^C_10_1;
  S_11_1 = tmp^(((A>>11)&1) & ((B>>1)&1));
  C_11_1 = (tmp&(((A>>11)&1) & ((B>>1)&1)))|(S_10_2&C_10_1);
  tmp = S_10_3^C_10_2;
  S_11_2 = tmp^(((A>>11)&1) & ((B>>2)&1));
  C_11_2 = (tmp&(((A>>11)&1) & ((B>>2)&1)))|(S_10_3&C_10_2);
  tmp = S_10_4^C_10_3;
  S_11_3 = tmp^(((A>>11)&1) & ((B>>3)&1));
  C_11_3 = (tmp&(((A>>11)&1) & ((B>>3)&1)))|(S_10_4&C_10_3);
  tmp = S_10_5^C_10_4;
  S_11_4 = tmp^(((A>>11)&1) & ((B>>4)&1));
  C_11_4 = (tmp&(((A>>11)&1) & ((B>>4)&1)))|(S_10_5&C_10_4);
  tmp = S_10_6^C_10_5;
  S_11_5 = tmp^(((A>>11)&1) & ((B>>5)&1));
  C_11_5 = (tmp&(((A>>11)&1) & ((B>>5)&1)))|(S_10_6&C_10_5);
  tmp = S_10_7^C_10_6;
  S_11_6 = tmp^(((A>>11)&1) & ((B>>6)&1));
  C_11_6 = (tmp&(((A>>11)&1) & ((B>>6)&1)))|(S_10_7&C_10_6);
  tmp = S_10_8^C_10_7;
  S_11_7 = tmp^(((A>>11)&1) & ((B>>7)&1));
  C_11_7 = (tmp&(((A>>11)&1) & ((B>>7)&1)))|(S_10_8&C_10_7);
  tmp = S_10_9^C_10_8;
  S_11_8 = tmp^(((A>>11)&1) & ((B>>8)&1));
  C_11_8 = (tmp&(((A>>11)&1) & ((B>>8)&1)))|(S_10_9&C_10_8);
  tmp = S_10_10^C_10_9;
  S_11_9 = tmp^(((A>>11)&1) & ((B>>9)&1));
  C_11_9 = (tmp&(((A>>11)&1) & ((B>>9)&1)))|(S_10_10&C_10_9);
  tmp = S_10_11^C_10_10;
  S_11_10 = tmp^(((A>>11)&1) & ((B>>10)&1));
  C_11_10 = (tmp&(((A>>11)&1) & ((B>>10)&1)))|(S_10_11&C_10_10);
  tmp = S_10_12^C_10_11;
  S_11_11 = tmp^(((A>>11)&1) & ((B>>11)&1));
  C_11_11 = (tmp&(((A>>11)&1) & ((B>>11)&1)))|(S_10_12&C_10_11);
  tmp = S_10_13^C_10_12;
  S_11_12 = tmp^(((A>>11)&1) & ((B>>12)&1));
  C_11_12 = (tmp&(((A>>11)&1) & ((B>>12)&1)))|(S_10_13&C_10_12);
  tmp = S_10_14^C_10_13;
  S_11_13 = tmp^(((A>>11)&1) & ((B>>13)&1));
  C_11_13 = (tmp&(((A>>11)&1) & ((B>>13)&1)))|(S_10_14&C_10_13);
  tmp = S_10_15^C_10_14;
  S_11_14 = tmp^(((A>>11)&1) & ((B>>14)&1));
  C_11_14 = (tmp&(((A>>11)&1) & ((B>>14)&1)))|(S_10_15&C_10_14);
  S_11_15 = C_10_15^(((((A>>11)&1) & ((B>>15)&1)))^1);
  C_11_15 = C_10_15&(((((A>>11)&1) & ((B>>15)&1)))^1);
  tmp = S_11_1^C_11_0;
  S_12_0 = tmp^(((A>>12)&1) & ((B>>0)&1));
  C_12_0 = (tmp&(((A>>12)&1) & ((B>>0)&1)))|(S_11_1&C_11_0);
  tmp = S_11_2^C_11_1;
  S_12_1 = tmp^(((A>>12)&1) & ((B>>1)&1));
  C_12_1 = (tmp&(((A>>12)&1) & ((B>>1)&1)))|(S_11_2&C_11_1);
  tmp = S_11_3^C_11_2;
  S_12_2 = tmp^(((A>>12)&1) & ((B>>2)&1));
  C_12_2 = (tmp&(((A>>12)&1) & ((B>>2)&1)))|(S_11_3&C_11_2);
  tmp = S_11_4^C_11_3;
  S_12_3 = tmp^(((A>>12)&1) & ((B>>3)&1));
  C_12_3 = (tmp&(((A>>12)&1) & ((B>>3)&1)))|(S_11_4&C_11_3);
  tmp = S_11_5^C_11_4;
  S_12_4 = tmp^(((A>>12)&1) & ((B>>4)&1));
  C_12_4 = (tmp&(((A>>12)&1) & ((B>>4)&1)))|(S_11_5&C_11_4);
  tmp = S_11_6^C_11_5;
  S_12_5 = tmp^(((A>>12)&1) & ((B>>5)&1));
  C_12_5 = (tmp&(((A>>12)&1) & ((B>>5)&1)))|(S_11_6&C_11_5);
  tmp = S_11_7^C_11_6;
  S_12_6 = tmp^(((A>>12)&1) & ((B>>6)&1));
  C_12_6 = (tmp&(((A>>12)&1) & ((B>>6)&1)))|(S_11_7&C_11_6);
  tmp = S_11_8^C_11_7;
  S_12_7 = tmp^(((A>>12)&1) & ((B>>7)&1));
  C_12_7 = (tmp&(((A>>12)&1) & ((B>>7)&1)))|(S_11_8&C_11_7);
  tmp = S_11_9^C_11_8;
  S_12_8 = tmp^(((A>>12)&1) & ((B>>8)&1));
  C_12_8 = (tmp&(((A>>12)&1) & ((B>>8)&1)))|(S_11_9&C_11_8);
  tmp = S_11_10^C_11_9;
  S_12_9 = tmp^(((A>>12)&1) & ((B>>9)&1));
  C_12_9 = (tmp&(((A>>12)&1) & ((B>>9)&1)))|(S_11_10&C_11_9);
  tmp = S_11_11^C_11_10;
  S_12_10 = tmp^(((A>>12)&1) & ((B>>10)&1));
  C_12_10 = (tmp&(((A>>12)&1) & ((B>>10)&1)))|(S_11_11&C_11_10);
  tmp = S_11_12^C_11_11;
  S_12_11 = tmp^(((A>>12)&1) & ((B>>11)&1));
  C_12_11 = (tmp&(((A>>12)&1) & ((B>>11)&1)))|(S_11_12&C_11_11);
  tmp = S_11_13^C_11_12;
  S_12_12 = tmp^(((A>>12)&1) & ((B>>12)&1));
  C_12_12 = (tmp&(((A>>12)&1) & ((B>>12)&1)))|(S_11_13&C_11_12);
  tmp = S_11_14^C_11_13;
  S_12_13 = tmp^(((A>>12)&1) & ((B>>13)&1));
  C_12_13 = (tmp&(((A>>12)&1) & ((B>>13)&1)))|(S_11_14&C_11_13);
  tmp = S_11_15^C_11_14;
  S_12_14 = tmp^(((A>>12)&1) & ((B>>14)&1));
  C_12_14 = (tmp&(((A>>12)&1) & ((B>>14)&1)))|(S_11_15&C_11_14);
  S_12_15 = C_11_15^(((((A>>12)&1) & ((B>>15)&1)))^1);
  C_12_15 = C_11_15&(((((A>>12)&1) & ((B>>15)&1)))^1);
  tmp = S_12_1^C_12_0;
  S_13_0 = tmp^(((A>>13)&1) & ((B>>0)&1));
  C_13_0 = (tmp&(((A>>13)&1) & ((B>>0)&1)))|(S_12_1&C_12_0);
  tmp = S_12_2^C_12_1;
  S_13_1 = tmp^(((A>>13)&1) & ((B>>1)&1));
  C_13_1 = (tmp&(((A>>13)&1) & ((B>>1)&1)))|(S_12_2&C_12_1);
  tmp = S_12_3^C_12_2;
  S_13_2 = tmp^(((A>>13)&1) & ((B>>2)&1));
  C_13_2 = (tmp&(((A>>13)&1) & ((B>>2)&1)))|(S_12_3&C_12_2);
  tmp = S_12_4^C_12_3;
  S_13_3 = tmp^(((A>>13)&1) & ((B>>3)&1));
  C_13_3 = (tmp&(((A>>13)&1) & ((B>>3)&1)))|(S_12_4&C_12_3);
  tmp = S_12_5^C_12_4;
  S_13_4 = tmp^(((A>>13)&1) & ((B>>4)&1));
  C_13_4 = (tmp&(((A>>13)&1) & ((B>>4)&1)))|(S_12_5&C_12_4);
  tmp = S_12_6^C_12_5;
  S_13_5 = tmp^(((A>>13)&1) & ((B>>5)&1));
  C_13_5 = (tmp&(((A>>13)&1) & ((B>>5)&1)))|(S_12_6&C_12_5);
  tmp = S_12_7^C_12_6;
  S_13_6 = tmp^(((A>>13)&1) & ((B>>6)&1));
  C_13_6 = (tmp&(((A>>13)&1) & ((B>>6)&1)))|(S_12_7&C_12_6);
  tmp = S_12_8^C_12_7;
  S_13_7 = tmp^(((A>>13)&1) & ((B>>7)&1));
  C_13_7 = (tmp&(((A>>13)&1) & ((B>>7)&1)))|(S_12_8&C_12_7);
  tmp = S_12_9^C_12_8;
  S_13_8 = tmp^(((A>>13)&1) & ((B>>8)&1));
  C_13_8 = (tmp&(((A>>13)&1) & ((B>>8)&1)))|(S_12_9&C_12_8);
  tmp = S_12_10^C_12_9;
  S_13_9 = tmp^(((A>>13)&1) & ((B>>9)&1));
  C_13_9 = (tmp&(((A>>13)&1) & ((B>>9)&1)))|(S_12_10&C_12_9);
  tmp = S_12_11^C_12_10;
  S_13_10 = tmp^(((A>>13)&1) & ((B>>10)&1));
  C_13_10 = (tmp&(((A>>13)&1) & ((B>>10)&1)))|(S_12_11&C_12_10);
  tmp = S_12_12^C_12_11;
  S_13_11 = tmp^(((A>>13)&1) & ((B>>11)&1));
  C_13_11 = (tmp&(((A>>13)&1) & ((B>>11)&1)))|(S_12_12&C_12_11);
  tmp = S_12_13^C_12_12;
  S_13_12 = tmp^(((A>>13)&1) & ((B>>12)&1));
  C_13_12 = (tmp&(((A>>13)&1) & ((B>>12)&1)))|(S_12_13&C_12_12);
  tmp = S_12_14^C_12_13;
  S_13_13 = tmp^(((A>>13)&1) & ((B>>13)&1));
  C_13_13 = (tmp&(((A>>13)&1) & ((B>>13)&1)))|(S_12_14&C_12_13);
  tmp = S_12_15^C_12_14;
  S_13_14 = tmp^(((A>>13)&1) & ((B>>14)&1));
  C_13_14 = (tmp&(((A>>13)&1) & ((B>>14)&1)))|(S_12_15&C_12_14);
  S_13_15 = C_12_15^(((((A>>13)&1) & ((B>>15)&1)))^1);
  C_13_15 = C_12_15&(((((A>>13)&1) & ((B>>15)&1)))^1);
  tmp = S_13_1^C_13_0;
  S_14_0 = tmp^(((A>>14)&1) & ((B>>0)&1));
  C_14_0 = (tmp&(((A>>14)&1) & ((B>>0)&1)))|(S_13_1&C_13_0);
  tmp = S_13_2^C_13_1;
  S_14_1 = tmp^(((A>>14)&1) & ((B>>1)&1));
  C_14_1 = (tmp&(((A>>14)&1) & ((B>>1)&1)))|(S_13_2&C_13_1);
  tmp = S_13_3^C_13_2;
  S_14_2 = tmp^(((A>>14)&1) & ((B>>2)&1));
  C_14_2 = (tmp&(((A>>14)&1) & ((B>>2)&1)))|(S_13_3&C_13_2);
  tmp = S_13_4^C_13_3;
  S_14_3 = tmp^(((A>>14)&1) & ((B>>3)&1));
  C_14_3 = (tmp&(((A>>14)&1) & ((B>>3)&1)))|(S_13_4&C_13_3);
  tmp = S_13_5^C_13_4;
  S_14_4 = tmp^(((A>>14)&1) & ((B>>4)&1));
  C_14_4 = (tmp&(((A>>14)&1) & ((B>>4)&1)))|(S_13_5&C_13_4);
  tmp = S_13_6^C_13_5;
  S_14_5 = tmp^(((A>>14)&1) & ((B>>5)&1));
  C_14_5 = (tmp&(((A>>14)&1) & ((B>>5)&1)))|(S_13_6&C_13_5);
  tmp = S_13_7^C_13_6;
  S_14_6 = tmp^(((A>>14)&1) & ((B>>6)&1));
  C_14_6 = (tmp&(((A>>14)&1) & ((B>>6)&1)))|(S_13_7&C_13_6);
  tmp = S_13_8^C_13_7;
  S_14_7 = tmp^(((A>>14)&1) & ((B>>7)&1));
  C_14_7 = (tmp&(((A>>14)&1) & ((B>>7)&1)))|(S_13_8&C_13_7);
  tmp = S_13_9^C_13_8;
  S_14_8 = tmp^(((A>>14)&1) & ((B>>8)&1));
  C_14_8 = (tmp&(((A>>14)&1) & ((B>>8)&1)))|(S_13_9&C_13_8);
  tmp = S_13_10^C_13_9;
  S_14_9 = tmp^(((A>>14)&1) & ((B>>9)&1));
  C_14_9 = (tmp&(((A>>14)&1) & ((B>>9)&1)))|(S_13_10&C_13_9);
  tmp = S_13_11^C_13_10;
  S_14_10 = tmp^(((A>>14)&1) & ((B>>10)&1));
  C_14_10 = (tmp&(((A>>14)&1) & ((B>>10)&1)))|(S_13_11&C_13_10);
  tmp = S_13_12^C_13_11;
  S_14_11 = tmp^(((A>>14)&1) & ((B>>11)&1));
  C_14_11 = (tmp&(((A>>14)&1) & ((B>>11)&1)))|(S_13_12&C_13_11);
  tmp = S_13_13^C_13_12;
  S_14_12 = tmp^(((A>>14)&1) & ((B>>12)&1));
  C_14_12 = (tmp&(((A>>14)&1) & ((B>>12)&1)))|(S_13_13&C_13_12);
  tmp = S_13_14^C_13_13;
  S_14_13 = tmp^(((A>>14)&1) & ((B>>13)&1));
  C_14_13 = (tmp&(((A>>14)&1) & ((B>>13)&1)))|(S_13_14&C_13_13);
  tmp = S_13_15^C_13_14;
  S_14_14 = tmp^(((A>>14)&1) & ((B>>14)&1));
  C_14_14 = (tmp&(((A>>14)&1) & ((B>>14)&1)))|(S_13_15&C_13_14);
  S_14_15 = C_13_15^(((((A>>14)&1) & ((B>>15)&1)))^1);
  C_14_15 = C_13_15&(((((A>>14)&1) & ((B>>15)&1)))^1);
  tmp = S_14_1^C_14_0;
  S_15_0 = tmp^(((((A>>15)&1) & ((B>>0)&1)))^1);
  C_15_0 = (tmp&(((((A>>15)&1) & ((B>>0)&1)))^1))|(S_14_1&C_14_0);
  tmp = S_14_2^C_14_1;
  S_15_1 = tmp^(((((A>>15)&1) & ((B>>1)&1)))^1);
  C_15_1 = (tmp&(((((A>>15)&1) & ((B>>1)&1)))^1))|(S_14_2&C_14_1);
  tmp = S_14_3^C_14_2;
  S_15_2 = tmp^(((((A>>15)&1) & ((B>>2)&1)))^1);
  C_15_2 = (tmp&(((((A>>15)&1) & ((B>>2)&1)))^1))|(S_14_3&C_14_2);
  tmp = S_14_4^C_14_3;
  S_15_3 = tmp^(((((A>>15)&1) & ((B>>3)&1)))^1);
  C_15_3 = (tmp&(((((A>>15)&1) & ((B>>3)&1)))^1))|(S_14_4&C_14_3);
  tmp = S_14_5^C_14_4;
  S_15_4 = tmp^(((((A>>15)&1) & ((B>>4)&1)))^1);
  C_15_4 = (tmp&(((((A>>15)&1) & ((B>>4)&1)))^1))|(S_14_5&C_14_4);
  tmp = S_14_6^C_14_5;
  S_15_5 = tmp^(((((A>>15)&1) & ((B>>5)&1)))^1);
  C_15_5 = (tmp&(((((A>>15)&1) & ((B>>5)&1)))^1))|(S_14_6&C_14_5);
  tmp = S_14_7^C_14_6;
  S_15_6 = tmp^(((((A>>15)&1) & ((B>>6)&1)))^1);
  C_15_6 = (tmp&(((((A>>15)&1) & ((B>>6)&1)))^1))|(S_14_7&C_14_6);
  tmp = S_14_8^C_14_7;
  S_15_7 = tmp^(((((A>>15)&1) & ((B>>7)&1)))^1);
  C_15_7 = (tmp&(((((A>>15)&1) & ((B>>7)&1)))^1))|(S_14_8&C_14_7);
  tmp = S_14_9^C_14_8;
  S_15_8 = tmp^(((((A>>15)&1) & ((B>>8)&1)))^1);
  C_15_8 = (tmp&(((((A>>15)&1) & ((B>>8)&1)))^1))|(S_14_9&C_14_8);
  tmp = S_14_10^C_14_9;
  S_15_9 = tmp^(((((A>>15)&1) & ((B>>9)&1)))^1);
  C_15_9 = (tmp&(((((A>>15)&1) & ((B>>9)&1)))^1))|(S_14_10&C_14_9);
  tmp = S_14_11^C_14_10;
  S_15_10 = tmp^(((((A>>15)&1) & ((B>>10)&1)))^1);
  C_15_10 = (tmp&(((((A>>15)&1) & ((B>>10)&1)))^1))|(S_14_11&C_14_10);
  tmp = S_14_12^C_14_11;
  S_15_11 = tmp^(((((A>>15)&1) & ((B>>11)&1)))^1);
  C_15_11 = (tmp&(((((A>>15)&1) & ((B>>11)&1)))^1))|(S_14_12&C_14_11);
  tmp = S_14_13^C_14_12;
  S_15_12 = tmp^(((((A>>15)&1) & ((B>>12)&1)))^1);
  C_15_12 = (tmp&(((((A>>15)&1) & ((B>>12)&1)))^1))|(S_14_13&C_14_12);
  tmp = S_14_14^C_14_13;
  S_15_13 = tmp^(((((A>>15)&1) & ((B>>13)&1)))^1);
  C_15_13 = (tmp&(((((A>>15)&1) & ((B>>13)&1)))^1))|(S_14_14&C_14_13);
  tmp = S_14_15^C_14_14;
  S_15_14 = tmp^(((((A>>15)&1) & ((B>>14)&1)))^1);
  C_15_14 = (tmp&(((((A>>15)&1) & ((B>>14)&1)))^1))|(S_14_15&C_14_14);
  S_15_15 = C_14_15^(((A>>15)&1) & ((B>>15)&1));
  C_15_15 = C_14_15&(((A>>15)&1) & ((B>>15)&1));
  S_16_0 = S_15_1^C_15_0;
  C_16_0 = S_15_1&C_15_0;
  tmp = S_15_2^C_16_0;
  S_16_1 = tmp^C_15_1;
  C_16_1 = (tmp&C_15_1)|(S_15_2&C_16_0);
  tmp = S_15_3^C_16_1;
  S_16_2 = tmp^C_15_2;
  C_16_2 = (tmp&C_15_2)|(S_15_3&C_16_1);
  tmp = S_15_4^C_16_2;
  S_16_3 = tmp^C_15_3;
  C_16_3 = (tmp&C_15_3)|(S_15_4&C_16_2);
  tmp = S_15_5^C_16_3;
  S_16_4 = tmp^C_15_4;
  C_16_4 = (tmp&C_15_4)|(S_15_5&C_16_3);
  tmp = S_15_6^C_16_4;
  S_16_5 = tmp^C_15_5;
  C_16_5 = (tmp&C_15_5)|(S_15_6&C_16_4);
  tmp = S_15_7^C_16_5;
  S_16_6 = tmp^C_15_6;
  C_16_6 = (tmp&C_15_6)|(S_15_7&C_16_5);
  tmp = S_15_8^C_16_6;
  S_16_7 = tmp^C_15_7;
  C_16_7 = (tmp&C_15_7)|(S_15_8&C_16_6);
  tmp = S_15_9^C_16_7;
  S_16_8 = tmp^C_15_8;
  C_16_8 = (tmp&C_15_8)|(S_15_9&C_16_7);
  tmp = S_15_10^C_16_8;
  S_16_9 = tmp^C_15_9;
  C_16_9 = (tmp&C_15_9)|(S_15_10&C_16_8);
  tmp = S_15_11^C_16_9;
  S_16_10 = tmp^C_15_10;
  C_16_10 = (tmp&C_15_10)|(S_15_11&C_16_9);
  tmp = S_15_12^C_16_10;
  S_16_11 = tmp^C_15_11;
  C_16_11 = (tmp&C_15_11)|(S_15_12&C_16_10);
  tmp = S_15_13^C_16_11;
  S_16_12 = tmp^C_15_12;
  C_16_12 = (tmp&C_15_12)|(S_15_13&C_16_11);
  tmp = S_15_14^C_16_12;
  S_16_13 = tmp^C_15_13;
  C_16_13 = (tmp&C_15_13)|(S_15_14&C_16_12);
  tmp = S_15_15^C_16_13;
  S_16_14 = tmp^C_15_14;
  C_16_14 = (tmp&C_15_14)|(S_15_15&C_16_13);
  tmp = 1^C_16_14;
  S_16_15 = tmp^C_15_15;
  C_16_15 = (tmp&C_15_15)|(1&C_16_14);
  P = 0;
  P |= (S_3_0 & 1) << 3;
  P |= (S_4_0 & 1) << 4;
  P |= (S_5_0 & 1) << 5;
  P |= (S_6_0 & 1) << 6;
  P |= (S_7_0 & 1) << 7;
  P |= (S_8_0 & 1) << 8;
  P |= (S_9_0 & 1) << 9;
  P |= (S_10_0 & 1) << 10;
  P |= (S_11_0 & 1) << 11;
  P |= (S_12_0 & 1) << 12;
  P |= (S_13_0 & 1) << 13;
  P |= (S_14_0 & 1) << 14;
  P |= (S_15_0 & 1) << 15;
  P |= (S_16_0 & 1) << 16;
  P |= (S_16_1 & 1) << 17;
  P |= (S_16_2 & 1) << 18;
  P |= (S_16_3 & 1) << 19;
  P |= (S_16_4 & 1) << 20;
  P |= (S_16_5 & 1) << 21;
  P |= (S_16_6 & 1) << 22;
  P |= (S_16_7 & 1) << 23;
  P |= (S_16_8 & 1) << 24;
  P |= (S_16_9 & 1) << 25;
  P |= (S_16_10 & 1) << 26;
  P |= (S_16_11 & 1) << 27;
  P |= (S_16_12 & 1) << 28;
  P |= (S_16_13 & 1) << 29;
  P |= (S_16_14 & 1) << 30;
  P |= (S_16_15 & 1) << 31;
  return P;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.00032 %
// MAE = 13653 
// WCE% = 0.0015 %
// WCE = 65535 
// WCRE% = 300.00 %
// EP% = 75.00 %
// MRE% = 0.034 %
// MSE = 35791.394e4 
// PDK45_PWR = 2.130 mW
// PDK45_AREA = 2576.5 um2
// PDK45_DELAY = 2.98 ns



int32_t evoapproxlib::evoapprox_t::mul16s_HDG(int16_t A, int16_t B)
{
 uint32_t O;
 uint8_t n1007,n1000,n1002,n538,n539,n536,n537,n534,n535,n532,n533,n530,n531,O14,n408,n409,n402,n403,n400,n401,n406,n407,n404,n405,n392,n393,n390,n391,n396,n397,n394,n395,n398,n399,n240,n241,n242,n715,n244,n245,n246,n711,n248,n249,n941,n718,n719,n764,n947,n762,n761,n1279,n1278,n1277,n1276,n1275,n1274,n1273,n1272,n1271,n1270,n1479,n1478,n1475,n1474,n1477,n1476,n1471,n1470,n1473,n1472,n662,n663,n660,n661,n666,n667,n664,n889,n886,n887,n884,n885,n882,n883,n880,n881,n864,n865,n866,n867,n860,n861,n862,n863,n1611,n1610,n1613,n1612,n868,n869,n1617,n1616,n1589,n1588,n1581,n1580,n1583,n1582,n1585,n1584,n1587,n1586,n1057,n1056,n1055,n1054,n1053,n1052,n1051,n1050,O21,n1059,n1058,O1,n1294,n1297,n1296,n1291,n1290,n1293,n1292,n1299,n1298,n1123,n1122,n1121,n1120,n1127,n1126,n1125,n1124,n1129,n1128,n1702,n745,n744,n1683,n117,n746,n1685,n528,n521,n520,n523,n522,n525,n524,n527,n526,n415,n414,n417,n416,n411,n410,n413,n412,n419,n418,n742,n389,n388,n385,n384,n387,n386,n381,n380,n383,n382,n253,n700,n251,n250,n257,n256,n255,n254,n709,n708,n259,n258,O17,n1268,n1269,n1260,n1261,n1262,n1263,n1264,n1265,n1266,n1267,n1468,n1469,n1466,n1467,n1464,n1465,n1462,n1463,n1460,n1461,O6,n899,n898,n679,n678,n891,n674,n677,n676,n671,n670,n673,n672,n877,n876,n875,n874,n873,n872,n871,n870,n1602,n1603,n1600,n1601,n1606,n1607,n879,n878,n1598,n1599,n1592,n1593,n1590,n1591,n1596,n1597,n1594,n1595,n1040,n1041,n1042,n1043,n1044,n1045,n1046,n1047,n1048,n1049,n1286,n1287,n1284,n1285,n1282,n1283,n1280,n1281,n1289,n716,n717,n714,n243,n712,n713,n1138,n1139,n1134,n1135,n1136,n247,n1130,n1131,n1132,n1133,n327,n326,n325,n324,n323,n322,n321,n320,n1574,n1575,n1576,n758,n812,n1570,n943,n1571,n1572,n1573,n759,O16,n460,n461,n462,n463,n464,n465,n466,n467,n468,n469,O18,n268,n269,n266,n267,n264,n265,n262,n263,n260,n261,n1425,n284,n285,n286,n287,n280,n281,n282,n283,n289,n1459,n1458,n1453,n1452,n1451,n1450,n1457,n1456,n1455,n1454,n608,n609,n600,n601,n602,n603,n604,n605,n606,n607,n1637,n1636,n1635,n1634,n1633,n1632,n1631,n1630,n1639,n1638,n842,n843,n840,n841,n846,n847,n844,n845,n848,n849,n149,n114,n115,n148,n110,n111,n112,n113,n833,n118,n119,n888,n665,n1703,O23,n1701,n1707,n1706,n1705,n1704,n1709,n1708,n668,n669,O7,n928,n831,n1149,n1148,n1141,n1140,n1143,n1142,n1145,n1144,n1147,n1146,n1619,n1618,n834,n1615,n1614,n1720,n473,n472,n471,n470,n477,n476,n475,n474,n479,n478,n279,n278,n271,n270,n273,n272,n275,n274,n277,n276,n356,n425,n426,n297,n296,n295,n427,n293,n292,n291,n290,n420,n1448,n1449,n299,n353,O24,n423,n619,n618,n613,n612,n611,n610,n617,n616,n615,n614,n1620,n1621,n1622,n1623,n1624,n1625,n1626,n1627,n1628,n1629,n859,n858,n855,n854,n857,n856,n851,n850,n853,n852,n1657,n107,n106,n105,n104,n103,n102,n101,n100,n109,n108,n1718,n1719,n1715,n1716,n1717,n1710,n1711,n1712,n1713,n909,n905,n774,n1295,n904,O4,n775,n1158,n1159,n1152,n1153,n1150,n1151,n1156,n1157,n1154,n1155,n1652,n777,n770,n730,n448,n449,n446,n447,n444,n445,n442,n732,n440,n441,n733,n734,n227,n224,n225,n1447,n598,n599,n590,n591,n592,n593,n594,n595,n596,n597,n1431,n1430,n1433,n1432,n1435,n1434,n1437,n1436,n914,n1438,n916,n917,n910,n911,n912,n913,n626,n627,n624,n625,n622,n623,n620,n621,n628,n629,n1389,n1388,n1387,n1386,n1385,n1384,n1383,n1382,n1381,n1380,n828,n829,n1549,n1548,n832,n820,n821,n1547,n1546,O5,n1540,n1543,n827,n1555,n1552,n1553,n132,n133,n130,n131,n136,n835,n134,n135,n138,n139,n1099,n1098,O25,n1093,n1092,n1091,n1090,n1097,n1096,n1095,n1094,n1167,n1166,n1165,n1164,n1163,n1162,n1161,n1160,n1169,n1168,n1365,n1364,n1367,n1361,n1360,n1363,n1362,n1369,n1368,n1672,n1677,n1674,n459,n458,n451,n450,n453,n452,n455,n454,n457,n456,n589,n583,n582,n581,n580,n587,n586,n585,n584,n1422,n1423,n1420,n1421,n1426,n1427,n1424,n908,n907,n906,n1428,n1429,n903,n902,n901,n900,n631,n630,n633,n632,n635,n634,n637,n636,n639,n638,n1398,n1399,n1390,n1391,n1392,n1393,n1394,n1395,n1396,n1397,n839,n838,n1559,n1556,n1557,n1554,n830,n837,n836,n1550,n1551,n129,n128,n125,n124,n127,n126,n121,n120,n123,n122,n1084,n1085,n1086,n1087,n1080,n1081,n1082,n1083,n1088,n1089,n1170,n1171,n1172,n1173,n1174,n1175,n1176,n1177,n1178,n1179,n1376,n1377,n1374,n1375,n1372,n1373,n1370,n1371,n1378,n1379,n1444,n1445,n1446,n294,n1440,n1441,n1442,n1443,n298,n1073,n529,n706,n756,n757,n938,n939,n978,n1419,n1418,n932,n933,n930,n931,n1413,n937,n934,n1410,n976,n977,n206,n975,n972,n973,n482,n483,n480,n481,n338,n339,n484,n485,n334,n335,n488,n489,n330,n331,n332,n333,n806,n807,n804,n805,n802,n803,n800,n801,n808,n809,n1569,n1568,n1563,n1562,n1561,n1560,n1567,n1566,n1565,n1564,n158,n159,n150,n151,n152,n153,n154,n155,n156,n157,O27,n69,n68,n996,n997,n1189,n1188,n1185,n1184,n1187,n1186,n1181,n1180,n1183,n1182,n1343,n1342,n1341,n1340,n1347,n1346,n1345,n1344,n998,n1349,n1348,n999,n705,n790,n1655,n1654,n1656,n1651,n1650,n1408,n1409,n1653,n1400,n1401,n1402,n1403,n1404,n1405,n1406,n1407,n499,n498,n329,n328,n495,n494,n497,n496,n491,n490,n493,n492,n811,n810,n813,n1577,n815,n814,n817,n816,n819,n818,n1578,n1579,n925,n924,n927,n926,n921,n920,n923,n922,n143,n142,n141,n140,n929,n146,n145,n144,n74,n75,n76,n77,n70,n71,n72,n79,n701,n252,n703,n702,n1198,O8,n1196,n1197,n1194,n1195,n1192,n1193,n1190,n1191,n1358,n1359,n1354,n1355,n1356,n1357,n1350,n1351,n1352,n1353,O28,n1509,n1013,n1012,n1011,n1010,n1017,n1016,n1015,n1014,n798,n799,n796,n797,n794,n795,n792,n793,n1541,n791,n558,n559,n554,n555,n556,n557,n550,n551,n552,n553,O22,n318,n319,n312,n313,n310,n311,n316,n317,n314,n315,n1500,n1503,n1502,n1505,n1504,n1507,n1506,O9,n1508,n176,n177,n174,n175,n172,n173,n170,n171,n776,n178,n179,n950,n951,n952,n953,n954,n955,n772,n773,n958,n959,n778,n779,n771,O29,n956,n957,n675,n1219,n1218,n890,n1215,n1214,n1217,n1216,n1211,n1210,n1213,n1212,n892,n895,n894,n1691,n1690,n1693,n1692,n1695,n1694,n1697,n1696,n1699,n1698,n896,n1329,n1328,n1321,n1320,n1323,n1322,n1325,n1324,n1327,n1326,n1035,n1034,n1037,n1036,n1031,n1030,n1033,n1032,n1039,n1038,n1609,O19,n1605,n789,n788,n781,n780,n783,n782,n785,n784,n787,n549,n548,n547,n546,n545,n544,n543,n542,n541,n540,n341,n340,n343,n342,n345,n344,n347,n346,n305,n304,n307,n306,n301,n300,n303,n302,n309,n308,O11,n1513,n1510,n1511,n1516,n1517,n1514,n1515,n1518,n1519,n161,n160,n163,n162,n165,n164,n167,n166,n169,n168,n767,n766,n765,n940,n763,n946,n945,n760,n949,n948,n769,n768,n1208,n1209,n1206,n1207,n1204,n1205,n1202,n1203,n1200,n1201,n1682,n1417,n1680,n1681,n1686,n1687,n1684,n1416,n1688,n1689,n1415,n1414,n936,n1412,n1411,n935,n1338,n1339,n1332,n1333,n1330,n1331,n1336,n1337,n1334,n1335,n704,n707,n1026,n1027,n1024,n1025,n1022,n1023,n1020,n1021,n1028,n1029,n971,n486,n487,n336,n337,O15,O10,n578,n579,n572,n573,n570,n571,n576,n577,n574,n575,n680,n681,n682,n684,n685,n686,n687,n688,n689,n370,n371,n372,n373,n374,n375,n376,n377,n378,n379,n1137,n1529,n1528,n1527,n1526,n1525,n1524,n1523,n1522,n1521,n1520,O20,O26,n198,n199,n194,n195,n196,n197,n190,n191,n192,n193,n752,n753,n750,n751,n208,n209,n754,n755,n204,n205,n974,n207,n200,n201,n202,n203,n994,n995,n1239,n1238,n990,n991,n992,n993,n1233,n1232,n1231,n1230,n1237,n1236,n1235,n1234,n1307,n1306,n1305,n1304,n1303,n1302,n1301,n1300,n1659,n1658,n1309,n1308,n443,n85,n84,n87,n86,n81,n80,n83,n82,n1019,n1018,n89,n88,n710,n565,n564,n567,n566,n561,n560,n563,n562,n569,n568,n897,n693,n692,n691,n690,n697,n696,n695,n694,n699,n698,n363,n362,n361,n360,n367,n366,n365,n364,n369,n368,n1538,n1539,O13,n1530,n1531,n1532,n1533,n1534,n1535,n1536,n1537,n189,n188,n187,n185,n184,n183,n182,n181,n180,n969,n968,n749,n748,n219,n218,n961,n216,n215,n214,n213,n212,n211,n210,n1224,n1225,n1226,n1227,n1220,n1221,n1222,n1223,n1228,n1229,n987,n986,n985,n984,n983,n982,n981,n980,n989,n988,n963,O2,n1310,n1311,n1312,n1313,n1642,n1643,n1640,n1641,n1318,n1319,n965,n1648,n1649,n964,n967,n919,n98,n99,n1008,n1009,n92,n1005,n90,n91,n96,n97,n94,n95,n915,n741,n510,n511,n512,n513,n514,n515,n516,n517,n518,n519,O12,n1608,n217,n960,n747,n962,n428,n429,n358,n359,n424,n357,n354,n355,n352,n421,n350,n740,n743,n966,O30,n738,n739,n228,n229,n979,n222,n223,n220,n221,n226,n735,n736,n737,n1251,n1250,n1253,n1252,n1255,n1254,n1257,n1256,n1259,n1258,n1497,n1496,n1495,n1494,n1493,n1492,n1491,n1490,n1499,n1498,n644,n645,n646,n647,n640,n641,n642,n643,n648,n649,n1673,n1545,n1671,n1670,n1676,n1544,n1679,n1678,n822,n823,n824,n825,n826,n1542,n1079,n1078,n1071,n1070,O3,n1072,n1075,n1074,n1077,n1076,n970,n1104,n1107,n1106,n1101,n1100,n1103,n1102,n1109,n1108,n137,n918,n1003,n503,n502,n500,n507,n506,n505,n504,n509,n508,n1646,n1647,n1644,n942,n1314,n1315,n1316,n1317,n349,n348,n439,n438,n437,n436,n435,n434,n433,n432,n431,n430,O31,n235,n234,n237,n236,n231,n230,n232,n239,n238,n729,n728,n723,n722,n721,n720,n727,n726,n725,n724,n1242,n1243,n1240,n1241,n1246,n1247,n1244,n1245,n1248,n1249,n1480,n1481,n1482,n1483,n1484,n1485,n1486,n1487,n1488,n1489,n944,O0,n657,n656,n655,n654,n653,n652,n651,n650,n659,n658,n1668,n1669,n1664,n1665,n1666,n1667,n1660,n1661,n1662,n1663,n1068,n1069,n1062,n1063,n1060,n1061,n1066,n1067,n1064,n1065,n1116,n1117,n1114,n1115,n1112,n1113,n1110,n1111,n1118,n1119,n1512,n731,n1004,n1006;
 O0=0;
 O1=0;
 O2=((B >> 1)&1)&((A >> 1)&1);
 n1000=((B >> 4)&1)&((A >> 14)&1);
 n1020=((B >> 4)&1)&((A >> 15)&1);
 n1084=((B >> 13)&1)&((A >> 6)&1);
 n1092=((B >> 14)&1)&((A >> 5)&1);
 n1095=((B >> 15)&1)&((A >> 4)&1);
 n1097=((B >> 12)&1)&((A >> 7)&1);
 n1098=((B >> 11)&1)&((A >> 8)&1);
 n1099=((B >> 10)&1)&((A >> 9)&1);
 n110=((B >> 3)&1)&((A >> 3)&1);
 n1100=((B >> 9)&1)&((A >> 10)&1);
 n1101=((B >> 8)&1)&((A >> 11)&1);
 n1102=((B >> 7)&1)&((A >> 12)&1);
 n1103=((B >> 6)&1)&((A >> 13)&1);
 n1104=((B >> 5)&1)&((A >> 14)&1);
 n112=((B >> 5)&1)&((A >> 1)&1);
 n1124=((B >> 5)&1)&((A >> 15)&1);
 n113=((B >> 4)&1)&((A >> 2)&1);
 n114=((B >> 2)&1)&((A >> 4)&1);
 n115=((B >> 1)&1)&((A >> 5)&1);
 n1189=((B >> 15)&1)&((A >> 5)&1);
 n1190=((B >> 14)&1)&((A >> 6)&1);
 n1191=((B >> 13)&1)&((A >> 7)&1);
 n1192=((B >> 12)&1)&((A >> 8)&1);
 n1193=((B >> 11)&1)&((A >> 9)&1);
 n1194=((B >> 10)&1)&((A >> 10)&1);
 n1195=((B >> 9)&1)&((A >> 11)&1);
 n1196=((B >> 8)&1)&((A >> 12)&1);
 n1197=((B >> 7)&1)&((A >> 13)&1);
 n1198=((B >> 6)&1)&((A >> 14)&1);
 n1218=((B >> 6)&1)&((A >> 15)&1);
 n1268=((B >> 13)&1)&((A >> 8)&1);
 n1276=((B >> 14)&1)&((A >> 7)&1);
 n1280=((B >> 15)&1)&((A >> 6)&1);
 n1282=((B >> 12)&1)&((A >> 9)&1);
 n1283=((B >> 11)&1)&((A >> 10)&1);
 n1284=((B >> 10)&1)&((A >> 11)&1);
 n1285=((B >> 9)&1)&((A >> 12)&1);
 n1286=((B >> 8)&1)&((A >> 13)&1);
 n1287=((B >> 7)&1)&((A >> 14)&1);
 n1307=((B >> 7)&1)&((A >> 15)&1);
 n1358=((B >> 15)&1)&((A >> 7)&1);
 n1359=((B >> 14)&1)&((A >> 8)&1);
 n1360=((B >> 13)&1)&((A >> 9)&1);
 n1361=((B >> 12)&1)&((A >> 10)&1);
 n1362=((B >> 11)&1)&((A >> 11)&1);
 n1363=((B >> 10)&1)&((A >> 12)&1);
 n1364=((B >> 9)&1)&((A >> 13)&1);
 n1365=((B >> 8)&1)&((A >> 14)&1);
 n1385=((B >> 8)&1)&((A >> 15)&1);
 n140=((B >> 4)&1)&((A >> 3)&1);
 n142=((B >> 6)&1)&((A >> 1)&1);
 n1421=((B >> 13)&1)&((A >> 10)&1);
 n1429=((B >> 14)&1)&((A >> 9)&1);
 n143=((B >> 5)&1)&((A >> 2)&1);
 n1433=((B >> 15)&1)&((A >> 8)&1);
 n1435=((B >> 12)&1)&((A >> 11)&1);
 n1436=((B >> 11)&1)&((A >> 12)&1);
 n1437=((B >> 10)&1)&((A >> 13)&1);
 n1438=((B >> 9)&1)&((A >> 14)&1);
 n144=((B >> 3)&1)&((A >> 4)&1);
 n145=((B >> 2)&1)&((A >> 5)&1);
 n1458=((B >> 9)&1)&((A >> 15)&1);
 n146=((B >> 1)&1)&((A >> 6)&1);
 n1495=((B >> 15)&1)&((A >> 9)&1);
 n1496=((B >> 14)&1)&((A >> 10)&1);
 n1497=((B >> 13)&1)&((A >> 11)&1);
 n1498=((B >> 12)&1)&((A >> 12)&1);
 n1499=((B >> 11)&1)&((A >> 13)&1);
 n1500=((B >> 10)&1)&((A >> 14)&1);
 n1520=((B >> 10)&1)&((A >> 15)&1);
 n1542=((B >> 13)&1)&((A >> 12)&1);
 n1550=((B >> 14)&1)&((A >> 11)&1);
 n1554=((B >> 15)&1)&((A >> 10)&1);
 n1556=((B >> 12)&1)&((A >> 13)&1);
 n1557=((B >> 11)&1)&((A >> 14)&1);
 n1577=((B >> 11)&1)&((A >> 15)&1);
 n1600=((B >> 15)&1)&((A >> 11)&1);
 n1601=((B >> 14)&1)&((A >> 12)&1);
 n1602=((B >> 13)&1)&((A >> 13)&1);
 n1603=((B >> 12)&1)&((A >> 14)&1);
 n1623=((B >> 12)&1)&((A >> 15)&1);
 n1631=((B >> 13)&1)&((A >> 14)&1);
 n1639=((B >> 14)&1)&((A >> 13)&1);
 n1643=((B >> 15)&1)&((A >> 12)&1);
 n1664=((B >> 13)&1)&((A >> 15)&1);
 n1673=((B >> 15)&1)&((A >> 13)&1);
 n1674=((B >> 14)&1)&((A >> 14)&1);
 n1694=((B >> 14)&1)&((A >> 15)&1);
 n1698=((B >> 15)&1)&((A >> 14)&1);
 n1713=((B >> 15)&1)&((A >> 15)&1);
 n178=((B >> 5)&1)&((A >> 3)&1);
 n180=((B >> 7)&1)&((A >> 1)&1);
 n181=((B >> 6)&1)&((A >> 2)&1);
 n182=((B >> 4)&1)&((A >> 4)&1);
 n183=((B >> 3)&1)&((A >> 5)&1);
 n184=((B >> 2)&1)&((A >> 6)&1);
 n185=((B >> 1)&1)&((A >> 7)&1);
 n224=((B >> 6)&1)&((A >> 3)&1);
 n226=((B >> 8)&1)&((A >> 1)&1);
 n227=((B >> 7)&1)&((A >> 2)&1);
 n228=((B >> 5)&1)&((A >> 4)&1);
 n229=((B >> 4)&1)&((A >> 5)&1);
 n230=((B >> 3)&1)&((A >> 6)&1);
 n231=((B >> 2)&1)&((A >> 7)&1);
 n232=((B >> 1)&1)&((A >> 8)&1);
 n278=((B >> 7)&1)&((A >> 3)&1);
 n280=((B >> 9)&1)&((A >> 1)&1);
 n281=((B >> 8)&1)&((A >> 2)&1);
 n282=((B >> 6)&1)&((A >> 4)&1);
 n283=((B >> 5)&1)&((A >> 5)&1);
 n284=((B >> 4)&1)&((A >> 6)&1);
 n285=((B >> 3)&1)&((A >> 7)&1);
 n286=((B >> 2)&1)&((A >> 8)&1);
 n287=((B >> 1)&1)&((A >> 9)&1);
 n340=((B >> 8)&1)&((A >> 3)&1);
 n342=((B >> 10)&1)&((A >> 1)&1);
 n343=((B >> 9)&1)&((A >> 2)&1);
 n344=((B >> 7)&1)&((A >> 4)&1);
 n345=((B >> 6)&1)&((A >> 5)&1);
 n346=((B >> 5)&1)&((A >> 6)&1);
 n347=((B >> 4)&1)&((A >> 7)&1);
 n348=((B >> 3)&1)&((A >> 8)&1);
 n349=((B >> 2)&1)&((A >> 9)&1);
 n350=((B >> 1)&1)&((A >> 10)&1);
 n410=((B >> 9)&1)&((A >> 3)&1);
 n412=((B >> 11)&1)&((A >> 1)&1);
 n413=((B >> 10)&1)&((A >> 2)&1);
 n414=((B >> 8)&1)&((A >> 4)&1);
 n415=((B >> 7)&1)&((A >> 5)&1);
 n416=((B >> 6)&1)&((A >> 6)&1);
 n417=((B >> 5)&1)&((A >> 7)&1);
 n418=((B >> 4)&1)&((A >> 8)&1);
 n419=((B >> 3)&1)&((A >> 9)&1);
 n420=((B >> 2)&1)&((A >> 10)&1);
 n421=((B >> 1)&1)&((A >> 11)&1);
 n488=((B >> 10)&1)&((A >> 3)&1);
 n490=((B >> 12)&1)&((A >> 1)&1);
 n491=((B >> 11)&1)&((A >> 2)&1);
 n492=((B >> 9)&1)&((A >> 4)&1);
 n493=((B >> 8)&1)&((A >> 5)&1);
 n494=((B >> 7)&1)&((A >> 6)&1);
 n495=((B >> 6)&1)&((A >> 7)&1);
 n496=((B >> 5)&1)&((A >> 8)&1);
 n497=((B >> 4)&1)&((A >> 9)&1);
 n498=((B >> 3)&1)&((A >> 10)&1);
 n499=((B >> 2)&1)&((A >> 11)&1);
 n500=((B >> 1)&1)&((A >> 12)&1);
 n574=((B >> 11)&1)&((A >> 3)&1);
 n576=((B >> 13)&1)&((A >> 1)&1);
 n577=((B >> 12)&1)&((A >> 2)&1);
 n578=((B >> 10)&1)&((A >> 4)&1);
 n579=((B >> 9)&1)&((A >> 5)&1);
 n580=((B >> 8)&1)&((A >> 6)&1);
 n581=((B >> 7)&1)&((A >> 7)&1);
 n582=((B >> 6)&1)&((A >> 8)&1);
 n583=((B >> 5)&1)&((A >> 9)&1);
 n584=((B >> 4)&1)&((A >> 10)&1);
 n585=((B >> 3)&1)&((A >> 11)&1);
 n586=((B >> 2)&1)&((A >> 12)&1);
 n587=((B >> 1)&1)&((A >> 13)&1);
 n668=((B >> 12)&1)&((A >> 3)&1);
 n670=((B >> 14)&1)&((A >> 1)&1);
 n671=((B >> 13)&1)&((A >> 2)&1);
 n672=((B >> 11)&1)&((A >> 4)&1);
 n673=((B >> 10)&1)&((A >> 5)&1);
 n674=((B >> 9)&1)&((A >> 6)&1);
 n675=((B >> 8)&1)&((A >> 7)&1);
 n676=((B >> 7)&1)&((A >> 8)&1);
 n677=((B >> 6)&1)&((A >> 9)&1);
 n678=((B >> 5)&1)&((A >> 10)&1);
 n679=((B >> 4)&1)&((A >> 11)&1);
 n680=((B >> 3)&1)&((A >> 12)&1);
 n681=((B >> 2)&1)&((A >> 13)&1);
 n682=((B >> 1)&1)&((A >> 14)&1);
 n69=((B >> 2)&1)&((A >> 2)&1);
 n690=((B >> 1)&1)&((A >> 15)&1);
 n71=((B >> 1)&1)&((A >> 2)&1);
 n72=((B >> 2)&1)&((A >> 1)&1);
 n75=((B >> 1)&1)&((A >> 3)&1);
 n77=((B >> 3)&1)&((A >> 1)&1);
 n771=((B >> 13)&1)&((A >> 3)&1);
 n773=((B >> 15)&1)&((A >> 1)&1);
 n774=((B >> 14)&1)&((A >> 2)&1);
 n775=((B >> 12)&1)&((A >> 4)&1);
 n776=((B >> 11)&1)&((A >> 5)&1);
 n777=((B >> 10)&1)&((A >> 6)&1);
 n778=((B >> 9)&1)&((A >> 7)&1);
 n779=((B >> 8)&1)&((A >> 8)&1);
 n780=((B >> 7)&1)&((A >> 9)&1);
 n781=((B >> 6)&1)&((A >> 10)&1);
 n782=((B >> 5)&1)&((A >> 11)&1);
 n783=((B >> 4)&1)&((A >> 12)&1);
 n784=((B >> 3)&1)&((A >> 13)&1);
 n785=((B >> 2)&1)&((A >> 14)&1);
 n799=((B >> 2)&1)&((A >> 15)&1);
 n88=((B >> 2)&1)&((A >> 3)&1);
 n880=((B >> 14)&1)&((A >> 3)&1);
 n881=((B >> 15)&1)&((A >> 2)&1);
 n882=((B >> 13)&1)&((A >> 4)&1);
 n883=((B >> 12)&1)&((A >> 5)&1);
 n884=((B >> 11)&1)&((A >> 6)&1);
 n885=((B >> 10)&1)&((A >> 7)&1);
 n886=((B >> 9)&1)&((A >> 8)&1);
 n887=((B >> 8)&1)&((A >> 9)&1);
 n888=((B >> 7)&1)&((A >> 10)&1);
 n889=((B >> 6)&1)&((A >> 11)&1);
 n890=((B >> 5)&1)&((A >> 12)&1);
 n891=((B >> 4)&1)&((A >> 13)&1);
 n892=((B >> 3)&1)&((A >> 14)&1);
 n90=((B >> 4)&1)&((A >> 1)&1);
 n908=((B >> 3)&1)&((A >> 15)&1);
 n91=((B >> 3)&1)&((A >> 2)&1);
 n92=((B >> 1)&1)&((A >> 4)&1);
 n979=((B >> 13)&1)&((A >> 5)&1);
 n987=((B >> 14)&1)&((A >> 4)&1);
 n990=~(((A >> 3)&1)|((A >> 2)&1));
 n992=((B >> 12)&1)&((A >> 6)&1);
 n993=((B >> 11)&1)&((A >> 7)&1);
 n994=((B >> 10)&1)&((A >> 8)&1);
 n995=((B >> 9)&1)&((A >> 9)&1);
 n996=((B >> 8)&1)&((A >> 10)&1);
 n997=((B >> 7)&1)&((A >> 11)&1);
 n998=((B >> 6)&1)&((A >> 12)&1);
 n999=((B >> 5)&1)&((A >> 13)&1);
 n109=n91&n90;
 n111=n113^n112;
 n139=n113&n112;
 n141=n143^n142;
 n177=n143&n142;
 n179=n181^n180;
 n223=n181&n180;
 n225=n227^n226;
 n277=n227&n226;
 n279=n281^n280;
 n339=n281&n280;
 n341=n343^n342;
 n409=n343&n342;
 n411=n413^n412;
 n487=n413&n412;
 n489=n491^n490;
 n573=n491&n490;
 n575=n577^n576;
 n667=n577&n576;
 n669=n671^n670;
 n68=n69&O2;
 n70=~(n72|n71);
 n76=n77^n69;
 n770=n671&n670;
 n772=~(n774^n773);
 n87=n77&n69;
 n879=n774&~n773;
 n89=n91^n90;
 n985=n880&n881;
 n989=((B >> 15)&1)&~n990;
 n991=((A >> 3)&1)&n881;
 O3=~(n70|n68);
 n104=n88&n87;
 n105=n88&n89;
 n106=n89&n87;
 n108=~(n110^n109);
 n1094=~(n1095|n989);
 n1096=((A >> 4)&1)&n989;
 n134=n110&n109;
 n135=n110&n111;
 n136=n111&n109;
 n138=~(n140^n139);
 n172=n140&n139;
 n173=n140&n141;
 n174=n141&n139;
 n176=~(n178^n177);
 n218=n178&n177;
 n219=n178&n179;
 n220=n179&n177;
 n222=~(n224^n223);
 n272=n224&n223;
 n273=n224&n225;
 n274=n225&n223;
 n276=~(n278^n277);
 n334=n278&n277;
 n335=n278&n279;
 n336=n279&n277;
 n338=~(n340^n339);
 n404=n340&n339;
 n405=n340&n341;
 n406=n341&n339;
 n408=~(n410^n409);
 n482=n410&n409;
 n483=n410&n411;
 n484=n411&n409;
 n486=~(n488^n487);
 n568=n488&n487;
 n569=n488&n489;
 n570=n489&n487;
 n572=~(n574^n573);
 n662=n574&n573;
 n663=n574&n575;
 n664=n575&n573;
 n666=~(n668^n667);
 n74=~(n75^n68);
 n765=n668&n667;
 n766=n668&n669;
 n767=n669&n667;
 n769=~(n771^n770);
 n82=n75&n68;
 n83=n75&n76;
 n84=n76&n68;
 n86=~(n88^n87);
 n874=n771&n770;
 n875=n771&n772;
 n876=n772&n770;
 n878=~(n880^n879);
 n984=n880&n879;
 n986=n881&n879;
 n988=~n991&n989;
 O4=~(n76^n74);
 n103=~(n105|n104);
 n107=n111^n108;
 n1090=n987&n988;
 n1093=~(n1096|n1094);
 n1188=~(n1189^n1094);
 n1279=~n1189&n1094;
 n133=~(n135|n134);
 n137=n141^n138;
 n171=~(n173|n172);
 n175=n179^n176;
 n217=~(n219|n218);
 n221=n225^n222;
 n271=~(n273|n272);
 n275=n279^n276;
 n333=~(n335|n334);
 n337=n341^n338;
 n403=~(n405|n404);
 n407=n411^n408;
 n481=~(n483|n482);
 n485=n489^n486;
 n567=~(n569|n568);
 n571=n575^n572;
 n661=~(n663|n662);
 n665=n669^n666;
 n764=~(n766|n765);
 n768=n772^n769;
 n81=~(n83|n82);
 n85=n89^n86;
 n873=~(n875|n874);
 n877=n881^n878;
 n983=~(n985|n984);
 n102=~n106&n103;
 n1186=n1092&n1093;
 n1274=n1190&n1188;
 n1278=~n1280&n1279;
 n128=n114&~n107;
 n1281=((A >> 6)&1)&~n1279;
 n132=~n136&n133;
 n166=n144&~n137;
 n170=~n174&n171;
 n212=n182&~n175;
 n216=~n220&n217;
 n266=n228&~n221;
 n270=~n274&n271;
 n328=n282&~n275;
 n332=~n336&n333;
 n398=n344&~n337;
 n402=~n406&n403;
 n476=n414&~n407;
 n480=~n484&n481;
 n562=n492&~n485;
 n566=~n570&n567;
 n656=n578&~n571;
 n660=~n664&n661;
 n759=n672&~n665;
 n763=~n767&n764;
 n80=~n84&n81;
 n868=n775&~n768;
 n872=~n876&n873;
 n977=n882&~n877;
 n98=n92&~n85;
 n982=~n986&n983;
 n101=~(n107^n102);
 n1089=n987&~n982;
 n1091=n988&~n982;
 n127=~(n107|n102);
 n1277=~(n1281|n1278);
 n129=n114&~n102;
 n131=~(n137^n132);
 n1357=~(n1358^n1278);
 n1432=~n1358&n1278;
 n165=~(n137|n132);
 n167=n144&~n132;
 n169=~(n175^n170);
 n211=~(n175|n170);
 n213=n182&~n170;
 n215=~(n221^n216);
 n265=~(n221|n216);
 n267=n228&~n216;
 n269=~(n275^n270);
 n327=~(n275|n270);
 n329=n282&~n270;
 n331=~(n337^n332);
 n397=~(n337|n332);
 n399=n344&~n332;
 n401=~(n407^n402);
 n475=~(n407|n402);
 n477=n414&~n402;
 n479=~(n485^n480);
 n561=~(n485|n480);
 n563=n492&~n480;
 n565=~(n571^n566);
 n655=~(n571|n566);
 n657=n578&~n566;
 n659=~(n665^n660);
 n758=~(n665|n660);
 n760=n672&~n660;
 n762=~(n768^n763);
 n79=~(n85^n80);
 n867=~(n768|n763);
 n869=n775&~n763;
 n871=~(n877^n872);
 n97=~(n85|n80);
 n976=~(n877|n872);
 n978=n882&~n872;
 n981=n987^n982;
 n99=n92&~n80;
 O5=~(n92^n79);
 n100=n114^n101;
 n1088=~(n1090|n1089);
 n126=~(n128|n127);
 n130=n144^n131;
 n1355=n1276&n1277;
 n1427=n1359&n1357;
 n1431=~n1433&n1432;
 n1434=((A >> 8)&1)&~n1432;
 n164=~(n166|n165);
 n168=n182^n169;
 n210=~(n212|n211);
 n214=n228^n215;
 n264=~(n266|n265);
 n268=n282^n269;
 n326=~(n328|n327);
 n330=n344^n331;
 n396=~(n398|n397);
 n400=n414^n401;
 n474=~(n476|n475);
 n478=n492^n479;
 n560=~(n562|n561);
 n564=n578^n565;
 n654=~(n656|n655);
 n658=n672^n659;
 n757=~(n759|n758);
 n761=n775^n762;
 n866=~(n868|n867);
 n870=n882^n871;
 n96=~(n98|n97);
 n975=~(n977|n976);
 n980=n988^n981;
 n1082=n979&~n980;
 n1087=~n1091&n1088;
 n122=n115&~n100;
 n125=~n129&n126;
 n1430=~(n1434|n1431);
 n1494=~(n1495^n1431);
 n1553=~n1495&n1431;
 n160=n145&~n130;
 n163=~n167&n164;
 n206=n183&~n168;
 n209=~n213&n210;
 n260=n229&~n214;
 n263=~n267&n264;
 n322=n283&~n268;
 n325=~n329&n326;
 n392=n345&~n330;
 n395=~n399&n396;
 n470=n415&~n400;
 n473=~n477&n474;
 n556=n493&~n478;
 n559=~n563&n560;
 n650=n579&~n564;
 n653=~n657&n654;
 n753=n673&~n658;
 n756=~n760&n757;
 n862=n776&~n761;
 n865=~n869&n866;
 n95=~n99&n96;
 n971=n883&~n870;
 n974=~n978&n975;
 n1081=n979&~n974;
 n1083=~(n980|n974);
 n1086=n1092^n1087;
 n1185=n1092&~n1087;
 n1187=n1093&~n1087;
 n120=~(n100|n95);
 n121=n115&~n95;
 n124=~(n130^n125);
 n1492=n1429&n1430;
 n1548=n1496&n1494;
 n1552=~n1554&n1553;
 n1555=((A >> 10)&1)&~n1553;
 n158=~(n130|n125);
 n159=n145&~n125;
 n162=~(n168^n163);
 n204=~(n168|n163);
 n205=n183&~n163;
 n208=~(n214^n209);
 n258=~(n214|n209);
 n259=n229&~n209;
 n262=~(n268^n263);
 n320=~(n268|n263);
 n321=n283&~n263;
 n324=~(n330^n325);
 n390=~(n330|n325);
 n391=n345&~n325;
 n394=~(n400^n395);
 n468=~(n400|n395);
 n469=n415&~n395;
 n472=~(n478^n473);
 n554=~(n478|n473);
 n555=n493&~n473;
 n558=~(n564^n559);
 n648=~(n564|n559);
 n649=n579&~n559;
 n652=~(n658^n653);
 n751=~(n658|n653);
 n752=n673&~n653;
 n755=~(n761^n756);
 n860=~(n761|n756);
 n861=n776&~n756;
 n864=~(n870^n865);
 n94=~(n100^n95);
 n969=~(n870|n865);
 n970=n883&~n865;
 n973=n979^n974;
 O6=~(n115^n94);
 n1080=~(n1082|n1081);
 n1085=n1093^n1086;
 n1184=~(n1186|n1185);
 n119=~(n121|n120);
 n123=n145^n124;
 n1551=~(n1555|n1552);
 n157=~(n159|n158);
 n1599=~(n1600^n1552);
 n161=n183^n162;
 n1642=~n1600&n1552;
 n203=~(n205|n204);
 n207=n229^n208;
 n257=~(n259|n258);
 n261=n283^n262;
 n319=~(n321|n320);
 n323=n345^n324;
 n389=~(n391|n390);
 n393=n415^n394;
 n467=~(n469|n468);
 n471=n493^n472;
 n553=~(n555|n554);
 n557=n579^n558;
 n647=~(n649|n648);
 n651=n673^n652;
 n750=~(n752|n751);
 n754=n776^n755;
 n859=~(n861|n860);
 n863=n883^n864;
 n968=~(n970|n969);
 n972=~(n980^n973);
 n1075=n992&~n972;
 n1079=~n1083&n1080;
 n1179=n1084&~n1085;
 n118=~n122&n119;
 n1183=~n1187&n1184;
 n153=n146&~n123;
 n156=~n160&n157;
 n1597=n1550&n1551;
 n1637=n1601&n1599;
 n1641=~n1643&n1642;
 n1644=((A >> 12)&1)&~n1642;
 n199=n184&~n161;
 n202=~n206&n203;
 n253=n230&~n207;
 n256=~n260&n257;
 n315=n284&~n261;
 n318=~n322&n319;
 n385=n346&~n323;
 n388=~n392&n389;
 n463=n416&~n393;
 n466=~n470&n467;
 n549=n494&~n471;
 n552=~n556&n553;
 n643=n580&~n557;
 n646=~n650&n647;
 n746=n674&~n651;
 n749=~n753&n750;
 n855=n777&~n754;
 n858=~n862&n859;
 n964=n884&~n863;
 n967=~n971&n968;
 n1074=~(n972|n967);
 n1076=n992&~n967;
 n1078=n1084^n1079;
 n117=~(n123^n118);
 n1178=n1084&~n1079;
 n1180=~(n1085|n1079);
 n1182=n1188^n1183;
 n1273=n1188&~n1183;
 n1275=n1190&~n1183;
 n151=~(n123|n118);
 n152=n146&~n118;
 n155=~(n161^n156);
 n1640=~(n1644|n1641);
 n1672=~(n1673^n1641);
 n1697=~n1673&n1641;
 n197=~(n161|n156);
 n198=n184&~n156;
 n201=~(n207^n202);
 n251=~(n207|n202);
 n252=n230&~n202;
 n255=~(n261^n256);
 n313=~(n261|n256);
 n314=n284&~n256;
 n317=~(n323^n318);
 n383=~(n323|n318);
 n384=n346&~n318;
 n387=~(n393^n388);
 n461=~(n393|n388);
 n462=n416&~n388;
 n465=~(n471^n466);
 n547=~(n471|n466);
 n548=n494&~n466;
 n551=~(n557^n552);
 n641=~(n557|n552);
 n642=n580&~n552;
 n645=~(n651^n646);
 n744=~(n651|n646);
 n745=n674&~n646;
 n748=~(n754^n749);
 n853=~(n754|n749);
 n854=n777&~n749;
 n857=~(n863^n858);
 n962=~(n863|n858);
 n963=n884&~n858;
 n966=~(n972^n967);
 O7=~(n146^n117);
 n1073=~(n1075|n1074);
 n1077=~(n1085^n1078);
 n1177=~(n1179|n1178);
 n1181=n1190^n1182;
 n1272=~(n1274|n1273);
 n150=~(n152|n151);
 n154=n184^n155;
 n1670=n1639&n1640;
 n1692=n1674&n1672;
 n1696=~n1698&n1697;
 n1699=((A >> 14)&1)&~n1697;
 n196=~(n198|n197);
 n200=n230^n201;
 n250=~(n252|n251);
 n254=n284^n255;
 n312=~(n314|n313);
 n316=n346^n317;
 n382=~(n384|n383);
 n386=n416^n387;
 n460=~(n462|n461);
 n464=n494^n465;
 n546=~(n548|n547);
 n550=n580^n551;
 n640=~(n642|n641);
 n644=n674^n645;
 n743=~(n745|n744);
 n747=n777^n748;
 n852=~(n854|n853);
 n856=n884^n857;
 n961=~(n963|n962);
 n965=n992^n966;
 n1068=n993&~n965;
 n1072=~n1076&n1073;
 n1172=n1097&~n1077;
 n1176=~n1180&n1177;
 n1266=n1191&~n1181;
 n1271=~n1275&n1272;
 n149=~n153&n150;
 n1695=~(n1699|n1696);
 n1712=~(n1713^n1696);
 n1719=n1713&n1696;
 n192=n185&~n154;
 n195=~n199&n196;
 n246=n231&~n200;
 n249=~n253&n250;
 n308=n285&~n254;
 n311=~n315&n312;
 n378=n347&~n316;
 n381=~n385&n382;
 n456=n417&~n386;
 n459=~n463&n460;
 n542=n495&~n464;
 n545=~n549&n546;
 n636=n581&~n550;
 n639=~n643&n640;
 n739=n675&~n644;
 n742=~n746&n743;
 n848=n778&~n747;
 n851=~n855&n852;
 n957=n885&~n856;
 n960=~n964&n961;
 n1067=~(n965|n960);
 n1069=n993&~n960;
 n1071=~(n1077^n1072);
 n1171=~(n1077|n1072);
 n1173=n1097&~n1072;
 n1175=~(n1181^n1176);
 n1265=~(n1181|n1176);
 n1267=n1191&~n1176;
 n1270=n1276^n1271;
 n1354=n1276&~n1271;
 n1356=n1277&~n1271;
 n148=~(n154^n149);
 n1710=~n1694&n1695;
 n190=~(n154|n149);
 n191=n185&~n149;
 n194=~(n200^n195);
 n244=~(n200|n195);
 n245=n231&~n195;
 n248=~(n254^n249);
 n306=~(n254|n249);
 n307=n285&~n249;
 n310=~(n316^n311);
 n376=~(n316|n311);
 n377=n347&~n311;
 n380=~(n386^n381);
 n454=~(n386|n381);
 n455=n417&~n381;
 n458=~(n464^n459);
 n540=~(n464|n459);
 n541=n495&~n459;
 n544=~(n550^n545);
 n634=~(n550|n545);
 n635=n581&~n545;
 n638=~(n644^n639);
 n737=~(n644|n639);
 n738=n675&~n639;
 n741=~(n747^n742);
 n846=~(n747|n742);
 n847=n778&~n742;
 n850=~(n856^n851);
 n955=~(n856|n851);
 n956=n885&~n851;
 n959=~(n965^n960);
 O8=~(n185^n148);
 n1066=~(n1068|n1067);
 n1070=n1097^n1071;
 n1170=~(n1172|n1171);
 n1174=n1191^n1175;
 n1264=~(n1266|n1265);
 n1269=n1277^n1270;
 n1353=~(n1355|n1354);
 n189=~(n191|n190);
 n193=n231^n194;
 n243=~(n245|n244);
 n247=n285^n248;
 n305=~(n307|n306);
 n309=n347^n310;
 n375=~(n377|n376);
 n379=n417^n380;
 n453=~(n455|n454);
 n457=n495^n458;
 n539=~(n541|n540);
 n543=n581^n544;
 n633=~(n635|n634);
 n637=n675^n638;
 n736=~(n738|n737);
 n740=n778^n741;
 n845=~(n847|n846);
 n849=n885^n850;
 n954=~(n956|n955);
 n958=n993^n959;
 n1061=n994&~n958;
 n1065=~n1069&n1066;
 n1165=n1098&~n1070;
 n1169=~n1173&n1170;
 n1259=n1192&~n1174;
 n1263=~n1267&n1264;
 n1348=n1268&~n1269;
 n1352=~n1356&n1353;
 n188=~n192&n189;
 n239=n232&~n193;
 n242=~n246&n243;
 n301=n286&~n247;
 n304=~n308&n305;
 n371=n348&~n309;
 n374=~n378&n375;
 n449=n418&~n379;
 n452=~n456&n453;
 n535=n496&~n457;
 n538=~n542&n539;
 n629=n582&~n543;
 n632=~n636&n633;
 n732=n676&~n637;
 n735=~n739&n736;
 n841=n779&~n740;
 n844=~n848&n845;
 n950=n886&~n849;
 n953=~n957&n954;
 n1060=~(n958|n953);
 n1062=n994&~n953;
 n1064=~(n1070^n1065);
 n1164=~(n1070|n1065);
 n1166=n1098&~n1065;
 n1168=~(n1174^n1169);
 n1258=~(n1174|n1169);
 n1260=n1192&~n1169;
 n1262=n1268^n1263;
 n1347=n1268&~n1263;
 n1349=~(n1269|n1263);
 n1351=n1357^n1352;
 n1426=n1357&~n1352;
 n1428=n1359&~n1352;
 n187=~(n193^n188);
 n237=~(n193|n188);
 n238=n232&~n188;
 n241=~(n247^n242);
 n299=~(n247|n242);
 n300=n286&~n242;
 n303=~(n309^n304);
 n369=~(n309|n304);
 n370=n348&~n304;
 n373=~(n379^n374);
 n447=~(n379|n374);
 n448=n418&~n374;
 n451=~(n457^n452);
 n533=~(n457|n452);
 n534=n496&~n452;
 n537=~(n543^n538);
 n627=~(n543|n538);
 n628=n582&~n538;
 n631=~(n637^n632);
 n730=~(n637|n632);
 n731=n676&~n632;
 n734=~(n740^n735);
 n839=~(n740|n735);
 n840=n779&~n735;
 n843=~(n849^n844);
 n948=~(n849|n844);
 n949=n886&~n844;
 n952=~(n958^n953);
 O9=~(n232^n187);
 n1059=~(n1061|n1060);
 n1063=n1098^n1064;
 n1163=~(n1165|n1164);
 n1167=n1192^n1168;
 n1257=~(n1259|n1258);
 n1261=~(n1269^n1262);
 n1346=~(n1348|n1347);
 n1350=n1359^n1351;
 n1425=~(n1427|n1426);
 n236=~(n238|n237);
 n240=n286^n241;
 n298=~(n300|n299);
 n302=n348^n303;
 n368=~(n370|n369);
 n372=n418^n373;
 n446=~(n448|n447);
 n450=n496^n451;
 n532=~(n534|n533);
 n536=n582^n537;
 n626=~(n628|n627);
 n630=n676^n631;
 n729=~(n731|n730);
 n733=n779^n734;
 n838=~(n840|n839);
 n842=n886^n843;
 n947=~(n949|n948);
 n951=n994^n952;
 n1054=n995&~n951;
 n1058=~n1062&n1059;
 n1158=n1099&~n1063;
 n1162=~n1166&n1163;
 n1252=n1193&~n1167;
 n1256=~n1260&n1257;
 n1341=n1282&~n1261;
 n1345=~n1349&n1346;
 n1419=n1360&~n1350;
 n1424=~n1428&n1425;
 n235=~n239&n236;
 n294=n287&~n240;
 n297=~n301&n298;
 n364=n349&~n302;
 n367=~n371&n368;
 n442=n419&~n372;
 n445=~n449&n446;
 n528=n497&~n450;
 n531=~n535&n532;
 n622=n583&~n536;
 n625=~n629&n626;
 n725=n677&~n630;
 n728=~n732&n729;
 n834=n780&~n733;
 n837=~n841&n838;
 n943=n887&~n842;
 n946=~n950&n947;
 n1053=~(n951|n946);
 n1055=n995&~n946;
 n1057=~(n1063^n1058);
 n1157=~(n1063|n1058);
 n1159=n1099&~n1058;
 n1161=~(n1167^n1162);
 n1251=~(n1167|n1162);
 n1253=n1193&~n1162;
 n1255=~(n1261^n1256);
 n1340=~(n1261|n1256);
 n1342=n1282&~n1256;
 n1344=~(n1350^n1345);
 n1418=~(n1350|n1345);
 n1420=n1360&~n1345;
 n1423=n1429^n1424;
 n1491=n1429&~n1424;
 n1493=n1430&~n1424;
 n234=~(n240^n235);
 n292=~(n240|n235);
 n293=n287&~n235;
 n296=~(n302^n297);
 n362=~(n302|n297);
 n363=n349&~n297;
 n366=~(n372^n367);
 n440=~(n372|n367);
 n441=n419&~n367;
 n444=~(n450^n445);
 n526=~(n450|n445);
 n527=n497&~n445;
 n530=~(n536^n531);
 n620=~(n536|n531);
 n621=n583&~n531;
 n624=~(n630^n625);
 n723=~(n630|n625);
 n724=n677&~n625;
 n727=~(n733^n728);
 n832=~(n733|n728);
 n833=n780&~n728;
 n836=~(n842^n837);
 n941=~(n842|n837);
 n942=n887&~n837;
 n945=~(n951^n946);
 O10=~(n287^n234);
 n1052=~(n1054|n1053);
 n1056=n1099^n1057;
 n1156=~(n1158|n1157);
 n1160=n1193^n1161;
 n1250=~(n1252|n1251);
 n1254=n1282^n1255;
 n1339=~(n1341|n1340);
 n1343=n1360^n1344;
 n1417=~(n1419|n1418);
 n1422=n1430^n1423;
 n1490=~(n1492|n1491);
 n291=~(n293|n292);
 n295=n349^n296;
 n361=~(n363|n362);
 n365=n419^n366;
 n439=~(n441|n440);
 n443=n497^n444;
 n525=~(n527|n526);
 n529=n583^n530;
 n619=~(n621|n620);
 n623=n677^n624;
 n722=~(n724|n723);
 n726=n780^n727;
 n831=~(n833|n832);
 n835=n887^n836;
 n940=~(n942|n941);
 n944=n995^n945;
 n1047=n996&~n944;
 n1051=~n1055&n1052;
 n1151=n1100&~n1056;
 n1155=~n1159&n1156;
 n1245=n1194&~n1160;
 n1249=~n1253&n1250;
 n1334=n1283&~n1254;
 n1338=~n1342&n1339;
 n1412=n1361&~n1343;
 n1416=~n1420&n1417;
 n1485=n1421&~n1422;
 n1489=~n1493&n1490;
 n290=~n294&n291;
 n357=n350&~n295;
 n360=~n364&n361;
 n435=n420&~n365;
 n438=~n442&n439;
 n521=n498&~n443;
 n524=~n528&n525;
 n615=n584&~n529;
 n618=~n622&n619;
 n718=n678&~n623;
 n721=~n725&n722;
 n827=n781&~n726;
 n830=~n834&n831;
 n936=n888&~n835;
 n939=~n943&n940;
 n1046=~(n944|n939);
 n1048=n996&~n939;
 n1050=~(n1056^n1051);
 n1150=~(n1056|n1051);
 n1152=n1100&~n1051;
 n1154=~(n1160^n1155);
 n1244=~(n1160|n1155);
 n1246=n1194&~n1155;
 n1248=~(n1254^n1249);
 n1333=~(n1254|n1249);
 n1335=n1283&~n1249;
 n1337=~(n1343^n1338);
 n1411=~(n1343|n1338);
 n1413=n1361&~n1338;
 n1415=n1421^n1416;
 n1484=n1421&~n1416;
 n1486=~(n1422|n1416);
 n1488=n1494^n1489;
 n1547=n1494&~n1489;
 n1549=n1496&~n1489;
 n289=~(n295^n290);
 n355=~(n295|n290);
 n356=n350&~n290;
 n359=~(n365^n360);
 n433=~(n365|n360);
 n434=n420&~n360;
 n437=~(n443^n438);
 n519=~(n443|n438);
 n520=n498&~n438;
 n523=~(n529^n524);
 n613=~(n529|n524);
 n614=n584&~n524;
 n617=~(n623^n618);
 n716=~(n623|n618);
 n717=n678&~n618;
 n720=~(n726^n721);
 n825=~(n726|n721);
 n826=n781&~n721;
 n829=~(n835^n830);
 n934=~(n835|n830);
 n935=n888&~n830;
 n938=~(n944^n939);
 O11=~(n350^n289);
 n1045=~(n1047|n1046);
 n1049=n1100^n1050;
 n1149=~(n1151|n1150);
 n1153=n1194^n1154;
 n1243=~(n1245|n1244);
 n1247=n1283^n1248;
 n1332=~(n1334|n1333);
 n1336=n1361^n1337;
 n1410=~(n1412|n1411);
 n1414=~(n1422^n1415);
 n1483=~(n1485|n1484);
 n1487=n1496^n1488;
 n1546=~(n1548|n1547);
 n354=~(n356|n355);
 n358=n420^n359;
 n432=~(n434|n433);
 n436=n498^n437;
 n518=~(n520|n519);
 n522=n584^n523;
 n612=~(n614|n613);
 n616=n678^n617;
 n715=~(n717|n716);
 n719=n781^n720;
 n824=~(n826|n825);
 n828=n888^n829;
 n933=~(n935|n934);
 n937=n996^n938;
 n1040=n997&~n937;
 n1044=~n1048&n1045;
 n1144=n1101&~n1049;
 n1148=~n1152&n1149;
 n1238=n1195&~n1153;
 n1242=~n1246&n1243;
 n1327=n1284&~n1247;
 n1331=~n1335&n1332;
 n1405=n1362&~n1336;
 n1409=~n1413&n1410;
 n1478=n1435&~n1414;
 n1482=~n1486&n1483;
 n1540=n1497&~n1487;
 n1545=~n1549&n1546;
 n353=~n357&n354;
 n428=n421&~n358;
 n431=~n435&n432;
 n514=n499&~n436;
 n517=~n521&n518;
 n608=n585&~n522;
 n611=~n615&n612;
 n711=n679&~n616;
 n714=~n718&n715;
 n820=n782&~n719;
 n823=~n827&n824;
 n929=n889&~n828;
 n932=~n936&n933;
 n1039=~(n937|n932);
 n1041=n997&~n932;
 n1043=~(n1049^n1044);
 n1143=~(n1049|n1044);
 n1145=n1101&~n1044;
 n1147=~(n1153^n1148);
 n1237=~(n1153|n1148);
 n1239=n1195&~n1148;
 n1241=~(n1247^n1242);
 n1326=~(n1247|n1242);
 n1328=n1284&~n1242;
 n1330=~(n1336^n1331);
 n1404=~(n1336|n1331);
 n1406=n1362&~n1331;
 n1408=~(n1414^n1409);
 n1477=~(n1414|n1409);
 n1479=n1435&~n1409;
 n1481=~(n1487^n1482);
 n1539=~(n1487|n1482);
 n1541=n1497&~n1482;
 n1544=n1550^n1545;
 n1596=n1550&~n1545;
 n1598=n1551&~n1545;
 n352=~(n358^n353);
 n426=~(n358|n353);
 n427=n421&~n353;
 n430=~(n436^n431);
 n512=~(n436|n431);
 n513=n499&~n431;
 n516=~(n522^n517);
 n606=~(n522|n517);
 n607=n585&~n517;
 n610=~(n616^n611);
 n709=~(n616|n611);
 n710=n679&~n611;
 n713=~(n719^n714);
 n818=~(n719|n714);
 n819=n782&~n714;
 n822=~(n828^n823);
 n927=~(n828|n823);
 n928=n889&~n823;
 n931=~(n937^n932);
 O12=~(n421^n352);
 n1038=~(n1040|n1039);
 n1042=n1101^n1043;
 n1142=~(n1144|n1143);
 n1146=n1195^n1147;
 n1236=~(n1238|n1237);
 n1240=n1284^n1241;
 n1325=~(n1327|n1326);
 n1329=n1362^n1330;
 n1403=~(n1405|n1404);
 n1407=n1435^n1408;
 n1476=~(n1478|n1477);
 n1480=n1497^n1481;
 n1538=~(n1540|n1539);
 n1543=n1551^n1544;
 n1595=~(n1597|n1596);
 n425=~(n427|n426);
 n429=n499^n430;
 n511=~(n513|n512);
 n515=n585^n516;
 n605=~(n607|n606);
 n609=n679^n610;
 n708=~(n710|n709);
 n712=n782^n713;
 n817=~(n819|n818);
 n821=n889^n822;
 n926=~(n928|n927);
 n930=n997^n931;
 n1033=n998&~n930;
 n1037=~n1041&n1038;
 n1137=n1102&~n1042;
 n1141=~n1145&n1142;
 n1231=n1196&~n1146;
 n1235=~n1239&n1236;
 n1320=n1285&~n1240;
 n1324=~n1328&n1325;
 n1398=n1363&~n1329;
 n1402=~n1406&n1403;
 n1471=n1436&~n1407;
 n1475=~n1479&n1476;
 n1533=n1498&~n1480;
 n1537=~n1541&n1538;
 n1590=n1542&~n1543;
 n1594=~n1598&n1595;
 n424=~n428&n425;
 n507=n500&~n429;
 n510=~n514&n511;
 n601=n586&~n515;
 n604=~n608&n605;
 n704=n680&~n609;
 n707=~n711&n708;
 n813=n783&~n712;
 n816=~n820&n817;
 n922=n890&~n821;
 n925=~n929&n926;
 n1032=~(n930|n925);
 n1034=n998&~n925;
 n1036=~(n1042^n1037);
 n1136=~(n1042|n1037);
 n1138=n1102&~n1037;
 n1140=~(n1146^n1141);
 n1230=~(n1146|n1141);
 n1232=n1196&~n1141;
 n1234=~(n1240^n1235);
 n1319=~(n1240|n1235);
 n1321=n1285&~n1235;
 n1323=~(n1329^n1324);
 n1397=~(n1329|n1324);
 n1399=n1363&~n1324;
 n1401=~(n1407^n1402);
 n1470=~(n1407|n1402);
 n1472=n1436&~n1402;
 n1474=~(n1480^n1475);
 n1532=~(n1480|n1475);
 n1534=n1498&~n1475;
 n1536=n1542^n1537;
 n1589=n1542&~n1537;
 n1591=~(n1543|n1537);
 n1593=n1599^n1594;
 n1636=n1599&~n1594;
 n1638=n1601&~n1594;
 n423=~(n429^n424);
 n505=~(n429|n424);
 n506=n500&~n424;
 n509=~(n515^n510);
 n599=~(n515|n510);
 n600=n586&~n510;
 n603=~(n609^n604);
 n702=~(n609|n604);
 n703=n680&~n604;
 n706=~(n712^n707);
 n811=~(n712|n707);
 n812=n783&~n707;
 n815=~(n821^n816);
 n920=~(n821|n816);
 n921=n890&~n816;
 n924=~(n930^n925);
 O13=~(n500^n423);
 n1031=~(n1033|n1032);
 n1035=n1102^n1036;
 n1135=~(n1137|n1136);
 n1139=n1196^n1140;
 n1229=~(n1231|n1230);
 n1233=n1285^n1234;
 n1318=~(n1320|n1319);
 n1322=n1363^n1323;
 n1396=~(n1398|n1397);
 n1400=n1436^n1401;
 n1469=~(n1471|n1470);
 n1473=n1498^n1474;
 n1531=~(n1533|n1532);
 n1535=~(n1543^n1536);
 n1588=~(n1590|n1589);
 n1592=n1601^n1593;
 n1635=~(n1637|n1636);
 n504=~(n506|n505);
 n508=n586^n509;
 n598=~(n600|n599);
 n602=n680^n603;
 n701=~(n703|n702);
 n705=n783^n706;
 n810=~(n812|n811);
 n814=n890^n815;
 n919=~(n921|n920);
 n923=n998^n924;
 n1026=n999&~n923;
 n1030=~n1034&n1031;
 n1130=n1103&~n1035;
 n1134=~n1138&n1135;
 n1224=n1197&~n1139;
 n1228=~n1232&n1229;
 n1313=n1286&~n1233;
 n1317=~n1321&n1318;
 n1391=n1364&~n1322;
 n1395=~n1399&n1396;
 n1464=n1437&~n1400;
 n1468=~n1472&n1469;
 n1526=n1499&~n1473;
 n1530=~n1534&n1531;
 n1583=n1556&~n1535;
 n1587=~n1591&n1588;
 n1629=n1602&~n1592;
 n1634=~n1638&n1635;
 n503=~n507&n504;
 n594=n587&~n508;
 n597=~n601&n598;
 n697=n681&~n602;
 n700=~n704&n701;
 n806=n784&~n705;
 n809=~n813&n810;
 n915=n891&~n814;
 n918=~n922&n919;
 n1025=~(n923|n918);
 n1027=n999&~n918;
 n1029=~(n1035^n1030);
 n1129=~(n1035|n1030);
 n1131=n1103&~n1030;
 n1133=~(n1139^n1134);
 n1223=~(n1139|n1134);
 n1225=n1197&~n1134;
 n1227=~(n1233^n1228);
 n1312=~(n1233|n1228);
 n1314=n1286&~n1228;
 n1316=~(n1322^n1317);
 n1390=~(n1322|n1317);
 n1392=n1364&~n1317;
 n1394=~(n1400^n1395);
 n1463=~(n1400|n1395);
 n1465=n1437&~n1395;
 n1467=~(n1473^n1468);
 n1525=~(n1473|n1468);
 n1527=n1499&~n1468;
 n1529=~(n1535^n1530);
 n1582=~(n1535|n1530);
 n1584=n1556&~n1530;
 n1586=~(n1592^n1587);
 n1628=~(n1592|n1587);
 n1630=n1602&~n1587;
 n1633=n1639^n1634;
 n1669=n1639&~n1634;
 n1671=n1640&~n1634;
 n502=~(n508^n503);
 n592=~(n508|n503);
 n593=n587&~n503;
 n596=~(n602^n597);
 n695=~(n602|n597);
 n696=n681&~n597;
 n699=~(n705^n700);
 n804=~(n705|n700);
 n805=n784&~n700;
 n808=~(n814^n809);
 n913=~(n814|n809);
 n914=n891&~n809;
 n917=~(n923^n918);
 O14=~(n587^n502);
 n1024=~(n1026|n1025);
 n1028=n1103^n1029;
 n1128=~(n1130|n1129);
 n1132=n1197^n1133;
 n1222=~(n1224|n1223);
 n1226=n1286^n1227;
 n1311=~(n1313|n1312);
 n1315=n1364^n1316;
 n1389=~(n1391|n1390);
 n1393=n1437^n1394;
 n1462=~(n1464|n1463);
 n1466=n1499^n1467;
 n1524=~(n1526|n1525);
 n1528=n1556^n1529;
 n1581=~(n1583|n1582);
 n1585=n1602^n1586;
 n1627=~(n1629|n1628);
 n1632=n1640^n1633;
 n1668=~(n1670|n1669);
 n591=~(n593|n592);
 n595=n681^n596;
 n694=~(n696|n695);
 n698=n784^n699;
 n803=~(n805|n804);
 n807=n891^n808;
 n912=~(n914|n913);
 n916=n999^n917;
 n1018=n1000&~n916;
 n1023=~n1027&n1024;
 n1122=n1104&~n1028;
 n1127=~n1131&n1128;
 n1216=n1198&~n1132;
 n1221=~n1225&n1222;
 n1305=n1287&~n1226;
 n1310=~n1314&n1311;
 n1383=n1365&~n1315;
 n1388=~n1392&n1389;
 n1456=n1438&~n1393;
 n1461=~n1465&n1462;
 n1518=n1500&~n1466;
 n1523=~n1527&n1524;
 n1575=n1557&~n1528;
 n1580=~n1584&n1581;
 n1621=n1603&~n1585;
 n1626=~n1630&n1627;
 n1662=n1631&~n1632;
 n1667=~n1671&n1668;
 n590=~n594&n591;
 n689=n682&~n595;
 n693=~n697&n694;
 n798=n785&~n698;
 n802=~n806&n803;
 n907=n892&~n807;
 n911=~n915&n912;
 n1017=~(n916|n911);
 n1019=n1000&~n911;
 n1022=~(n1028^n1023);
 n1121=~(n1028|n1023);
 n1123=n1104&~n1023;
 n1126=~(n1132^n1127);
 n1215=~(n1132|n1127);
 n1217=n1198&~n1127;
 n1220=~(n1226^n1221);
 n1304=~(n1226|n1221);
 n1306=n1287&~n1221;
 n1309=~(n1315^n1310);
 n1382=~(n1315|n1310);
 n1384=n1365&~n1310;
 n1387=~(n1393^n1388);
 n1455=~(n1393|n1388);
 n1457=n1438&~n1388;
 n1460=~(n1466^n1461);
 n1517=~(n1466|n1461);
 n1519=n1500&~n1461;
 n1522=~(n1528^n1523);
 n1574=~(n1528|n1523);
 n1576=n1557&~n1523;
 n1579=~(n1585^n1580);
 n1620=~(n1585|n1580);
 n1622=n1603&~n1580;
 n1625=n1631^n1626;
 n1661=n1631&~n1626;
 n1663=~(n1632|n1626);
 n1666=n1672^n1667;
 n1691=n1672&~n1667;
 n1693=n1674&~n1667;
 n589=~(n595^n590);
 n687=~(n595|n590);
 n688=n682&~n590;
 n692=~(n698^n693);
 n796=~(n698|n693);
 n797=n785&~n693;
 n801=~(n807^n802);
 n905=~(n807|n802);
 n906=n892&~n802;
 n910=~(n916^n911);
 O15=~(n682^n589);
 n1016=~(n1018|n1017);
 n1021=n1104^n1022;
 n1120=~(n1122|n1121);
 n1125=n1198^n1126;
 n1214=~(n1216|n1215);
 n1219=n1287^n1220;
 n1303=~(n1305|n1304);
 n1308=n1365^n1309;
 n1381=~(n1383|n1382);
 n1386=n1438^n1387;
 n1454=~(n1456|n1455);
 n1459=n1500^n1460;
 n1516=~(n1518|n1517);
 n1521=n1557^n1522;
 n1573=~(n1575|n1574);
 n1578=n1603^n1579;
 n1619=~(n1621|n1620);
 n1624=~(n1632^n1625);
 n1660=~(n1662|n1661);
 n1665=n1674^n1666;
 n1690=~(n1692|n1691);
 n686=~(n688|n687);
 n691=n785^n692;
 n795=~(n797|n796);
 n800=n892^n801;
 n904=~(n906|n905);
 n909=n1000^n910;
 n1011=~(n908|n909);
 n1015=~n1019&n1016;
 n1115=~(n1020|n1021);
 n1119=~n1123&n1120;
 n1209=~(n1124|n1125);
 n1213=~n1217&n1214;
 n1298=~(n1218|n1219);
 n1302=~n1306&n1303;
 n1376=~(n1307|n1308);
 n1380=~n1384&n1381;
 n1449=~(n1385|n1386);
 n1453=~n1457&n1454;
 n1511=~(n1458|n1459);
 n1515=~n1519&n1516;
 n1568=~(n1520|n1521);
 n1572=~n1576&n1573;
 n1614=~(n1577|n1578);
 n1618=~n1622&n1619;
 n1655=~(n1623|n1624);
 n1659=~n1663&n1660;
 n1685=~(n1664|n1665);
 n1689=~n1693&n1690;
 n685=~n689&n686;
 n790=~(n690|n691);
 n794=~n798&n795;
 n899=~(n799|n800);
 n903=~n907&n904;
 n1010=~(n908|n903);
 n1012=~(n909|n903);
 n1014=~(n1020^n1015);
 n1114=~(n1020|n1015);
 n1116=~(n1021|n1015);
 n1118=~(n1124^n1119);
 n1208=~(n1124|n1119);
 n1210=~(n1125|n1119);
 n1212=~(n1218^n1213);
 n1297=~(n1218|n1213);
 n1299=~(n1219|n1213);
 n1301=~(n1307^n1302);
 n1375=~(n1307|n1302);
 n1377=~(n1308|n1302);
 n1379=~(n1385^n1380);
 n1448=~(n1385|n1380);
 n1450=~(n1386|n1380);
 n1452=~(n1458^n1453);
 n1510=~(n1458|n1453);
 n1512=~(n1459|n1453);
 n1514=~(n1520^n1515);
 n1567=~(n1520|n1515);
 n1569=~(n1521|n1515);
 n1571=~(n1577^n1572);
 n1613=~(n1577|n1572);
 n1615=~(n1578|n1572);
 n1617=~(n1623^n1618);
 n1654=~(n1623|n1618);
 n1656=~(n1624|n1618);
 n1658=~(n1664^n1659);
 n1684=~(n1664|n1659);
 n1686=~(n1665|n1659);
 n1688=~(n1694^n1689);
 n1709=~(n1694|n1689);
 n1711=n1695&~n1689;
 n684=~(n690^n685);
 n789=~(n690|n685);
 n791=~(n691|n685);
 n793=~(n799^n794);
 n898=~(n799|n794);
 n900=~(n800|n794);
 n902=~(n908^n903);
 O16=n691^n684;
 n1009=~(n1011|n1010);
 n1013=~(n1021^n1014);
 n1113=~(n1115|n1114);
 n1117=~(n1125^n1118);
 n1207=~(n1209|n1208);
 n1211=~(n1219^n1212);
 n1296=~(n1298|n1297);
 n1300=~(n1308^n1301);
 n1374=~(n1376|n1375);
 n1378=~(n1386^n1379);
 n1447=~(n1449|n1448);
 n1451=~(n1459^n1452);
 n1509=~(n1511|n1510);
 n1513=~(n1521^n1514);
 n1566=~(n1568|n1567);
 n1570=~(n1578^n1571);
 n1612=~(n1614|n1613);
 n1616=~(n1624^n1617);
 n1653=~(n1655|n1654);
 n1657=~(n1665^n1658);
 n1683=~(n1685|n1684);
 n1687=n1695^n1688;
 n1708=~(n1710|n1709);
 n788=~(n790|n789);
 n792=~(n800^n793);
 n897=~(n899|n898);
 n901=~(n909^n902);
 n1008=~n1012&n1009;
 n1112=~n1116&n1113;
 n1206=~n1210&n1207;
 n1295=~n1299&n1296;
 n1373=~n1377&n1374;
 n1446=~n1450&n1447;
 n1508=~n1512&n1509;
 n1565=~n1569&n1566;
 n1611=~n1615&n1612;
 n1652=~n1656&n1653;
 n1682=~n1686&n1683;
 n1707=~n1711&n1708;
 n787=~n791&n788;
 n896=~n900&n897;
 O17=n792^n787;
 n1006=~(n901|n896);
 n1110=~(n1013|n1008);
 n1204=~(n1117|n1112);
 n1293=~(n1211|n1206);
 n1371=~(n1300|n1295);
 n1444=~(n1378|n1373);
 n1506=~(n1451|n1446);
 n1563=~(n1513|n1508);
 n1609=~(n1570|n1565);
 n1650=~(n1616|n1611);
 n1680=~(n1657|n1652);
 n1705=~(n1687|n1682);
 n1718=~(n1712|n1707);
 n894=~(n792|n787);
 n895=~(n901^n896);
 O18=~(n895^n894);
 n1005=~n901&n894;
 n1007=~n896&n894;
 n1717=~(n1719|n1718);
 n1004=~(n1006|n1005);
 n1003=~n1007&n1004;
 n1002=~(n1008^n1003);
 n1109=~(n1008|n1003);
 n1111=~(n1013|n1003);
 O19=n1013^n1002;
 n1108=~(n1110|n1109);
 n1107=~n1111&n1108;
 n1106=~(n1112^n1107);
 n1203=~(n1112|n1107);
 n1205=~(n1117|n1107);
 O20=n1117^n1106;
 n1202=~(n1204|n1203);
 n1201=~n1205&n1202;
 n1200=~(n1206^n1201);
 n1292=~(n1206|n1201);
 n1294=~(n1211|n1201);
 O21=n1211^n1200;
 n1291=~(n1293|n1292);
 n1290=~n1294&n1291;
 n1289=~(n1295^n1290);
 n1370=~(n1295|n1290);
 n1372=~(n1300|n1290);
 O22=n1300^n1289;
 n1369=~(n1371|n1370);
 n1368=~n1372&n1369;
 n1367=~(n1373^n1368);
 n1443=~(n1373|n1368);
 n1445=~(n1378|n1368);
 O23=n1378^n1367;
 n1442=~(n1444|n1443);
 n1441=~n1445&n1442;
 n1440=~(n1446^n1441);
 n1505=~(n1446|n1441);
 n1507=~(n1451|n1441);
 O24=n1451^n1440;
 n1504=~(n1506|n1505);
 n1503=~n1507&n1504;
 n1502=~(n1508^n1503);
 n1562=~(n1508|n1503);
 n1564=~(n1513|n1503);
 O25=n1513^n1502;
 n1561=~(n1563|n1562);
 n1560=~n1564&n1561;
 n1559=~(n1565^n1560);
 n1608=~(n1565|n1560);
 n1610=~(n1570|n1560);
 O26=n1570^n1559;
 n1607=~(n1609|n1608);
 n1606=~n1610&n1607;
 n1605=~(n1611^n1606);
 n1649=~(n1611|n1606);
 n1651=~(n1616|n1606);
 O27=n1616^n1605;
 n1648=~(n1650|n1649);
 n1647=~n1651&n1648;
 n1646=~(n1652^n1647);
 n1679=~(n1652|n1647);
 n1681=~(n1657|n1647);
 O28=n1657^n1646;
 n1678=~(n1680|n1679);
 n1677=~n1681&n1678;
 n1676=~(n1682^n1677);
 n1704=~(n1682|n1677);
 n1706=~(n1687|n1677);
 O29=n1687^n1676;
 n1703=~(n1705|n1704);
 n1702=~n1706&n1703;
 n1701=~(n1707^n1702);
 n1716=~(n1707|n1702);
 n1720=~(n1712|n1702);
 O30=n1712^n1701;
 n1715=n1717&~n1716;
 O31=~n1720&n1715;
 O = (O0 << 0)|(O1 << 1)|(O2 << 2)|(O3 << 3)|(O4 << 4)|(O5 << 5)|(O6 << 6)|(O7 << 7)|(O8 << 8)|(O9 << 9)|(O10 << 10)|(O11 << 11)|(O12 << 12)|(O13 << 13)|(O14 << 14)|(O15 << 15)|(O16 << 16)|(O17 << 17)|(O18 << 18)|(O19 << 19)|(O20 << 20)|(O21 << 21)|(O22 << 22)|(O23 << 23)|(O24 << 24)|(O25 << 25)|(O26 << 26)|(O27 << 27)|(O28 << 28)|(O29 << 29)|(O30 << 30)|(O31 << 31);
 return O;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 0.00057 %
// MAE = 24580 
// WCE% = 0.0023 %
// WCE = 98369 
// WCRE% = 6500.00 %
// EP% = 92.19 %
// MRE% = 0.052 %
// MSE = 12526.994e5 
// PDK45_PWR = 2.124 mW
// PDK45_AREA = 2640.3 um2
// PDK45_DELAY = 2.95 ns



int32_t evoapproxlib::evoapprox_t::mul16s_GK2(int16_t A, int16_t B)
{
  int32_t P, P_;
  uint16_t tmp, C_10_0,C_10_1,C_10_10,C_10_11,C_10_12,C_10_13,C_10_14,C_10_15,C_10_2,C_10_3,C_10_4,C_10_5,C_10_6,C_10_7,C_10_8,C_10_9,C_11_0,C_11_1,C_11_10,C_11_11,C_11_12,C_11_13,C_11_14,C_11_15,C_11_2,C_11_3,C_11_4,C_11_5,C_11_6,C_11_7,C_11_8,C_11_9,C_12_0,C_12_1,C_12_10,C_12_11,C_12_12,C_12_13,C_12_14,C_12_15,C_12_2,C_12_3,C_12_4,C_12_5,C_12_6,C_12_7,C_12_8,C_12_9,C_13_0,C_13_1,C_13_10,C_13_11,C_13_12,C_13_13,C_13_14,C_13_15,C_13_2,C_13_3,C_13_4,C_13_5,C_13_6,C_13_7,C_13_8,C_13_9,C_14_0,C_14_1,C_14_10,C_14_11,C_14_12,C_14_13,C_14_14,C_14_15,C_14_2,C_14_3,C_14_4,C_14_5,C_14_6,C_14_7,C_14_8,C_14_9,C_15_0,C_15_1,C_15_10,C_15_11,C_15_12,C_15_13,C_15_14,C_15_15,C_15_2,C_15_3,C_15_4,C_15_5,C_15_6,C_15_7,C_15_8,C_15_9,C_16_0,C_16_1,C_16_10,C_16_11,C_16_12,C_16_13,C_16_14,C_16_15,C_16_2,C_16_3,C_16_4,C_16_5,C_16_6,C_16_7,C_16_8,C_16_9,C_2_13,C_2_15,C_3_10,C_3_11,C_3_12,C_3_13,C_3_14,C_3_15,C_3_2,C_3_3,C_3_4,C_3_5,C_3_6,C_3_7,C_3_8,C_3_9,C_4_1,C_4_10,C_4_11,C_4_12,C_4_13,C_4_14,C_4_15,C_4_2,C_4_3,C_4_4,C_4_5,C_4_6,C_4_7,C_4_8,C_4_9,C_5_0,C_5_1,C_5_10,C_5_11,C_5_12,C_5_13,C_5_14,C_5_15,C_5_2,C_5_3,C_5_4,C_5_5,C_5_6,C_5_7,C_5_8,C_5_9,C_6_0,C_6_1,C_6_10,C_6_11,C_6_12,C_6_13,C_6_14,C_6_15,C_6_2,C_6_3,C_6_4,C_6_5,C_6_6,C_6_7,C_6_8,C_6_9,C_7_0,C_7_1,C_7_10,C_7_11,C_7_12,C_7_13,C_7_14,C_7_15,C_7_2,C_7_3,C_7_4,C_7_5,C_7_6,C_7_7,C_7_8,C_7_9,C_8_0,C_8_1,C_8_10,C_8_11,C_8_12,C_8_13,C_8_14,C_8_15,C_8_2,C_8_3,C_8_4,C_8_5,C_8_6,C_8_7,C_8_8,C_8_9,C_9_0,C_9_1,C_9_10,C_9_11,C_9_12,C_9_13,C_9_14,C_9_15,C_9_2,C_9_3,C_9_4,C_9_5,C_9_6,C_9_7,C_9_8,C_9_9,S_0_15,S_10_0,S_10_1,S_10_10,S_10_11,S_10_12,S_10_13,S_10_14,S_10_15,S_10_2,S_10_3,S_10_4,S_10_5,S_10_6,S_10_7,S_10_8,S_10_9,S_11_0,S_11_1,S_11_10,S_11_11,S_11_12,S_11_13,S_11_14,S_11_15,S_11_2,S_11_3,S_11_4,S_11_5,S_11_6,S_11_7,S_11_8,S_11_9,S_12_0,S_12_1,S_12_10,S_12_11,S_12_12,S_12_13,S_12_14,S_12_15,S_12_2,S_12_3,S_12_4,S_12_5,S_12_6,S_12_7,S_12_8,S_12_9,S_13_0,S_13_1,S_13_10,S_13_11,S_13_12,S_13_13,S_13_14,S_13_15,S_13_2,S_13_3,S_13_4,S_13_5,S_13_6,S_13_7,S_13_8,S_13_9,S_14_0,S_14_1,S_14_10,S_14_11,S_14_12,S_14_13,S_14_14,S_14_15,S_14_2,S_14_3,S_14_4,S_14_5,S_14_6,S_14_7,S_14_8,S_14_9,S_15_0,S_15_1,S_15_10,S_15_11,S_15_12,S_15_13,S_15_14,S_15_15,S_15_2,S_15_3,S_15_4,S_15_5,S_15_6,S_15_7,S_15_8,S_15_9,S_16_0,S_16_1,S_16_10,S_16_11,S_16_12,S_16_13,S_16_14,S_16_15,S_16_2,S_16_3,S_16_4,S_16_5,S_16_6,S_16_7,S_16_8,S_16_9,S_1_14,S_2_10,S_2_11,S_2_12,S_2_13,S_2_14,S_2_15,S_2_3,S_2_4,S_2_5,S_2_6,S_2_7,S_2_8,S_2_9,S_3_10,S_3_11,S_3_12,S_3_13,S_3_14,S_3_15,S_3_2,S_3_3,S_3_4,S_3_5,S_3_6,S_3_7,S_3_8,S_3_9,S_4_1,S_4_10,S_4_11,S_4_12,S_4_13,S_4_14,S_4_15,S_4_2,S_4_3,S_4_4,S_4_5,S_4_6,S_4_7,S_4_8,S_4_9,S_5_0,S_5_1,S_5_10,S_5_11,S_5_12,S_5_13,S_5_14,S_5_15,S_5_2,S_5_3,S_5_4,S_5_5,S_5_6,S_5_7,S_5_8,S_5_9,S_6_0,S_6_1,S_6_10,S_6_11,S_6_12,S_6_13,S_6_14,S_6_15,S_6_2,S_6_3,S_6_4,S_6_5,S_6_6,S_6_7,S_6_8,S_6_9,S_7_0,S_7_1,S_7_10,S_7_11,S_7_12,S_7_13,S_7_14,S_7_15,S_7_2,S_7_3,S_7_4,S_7_5,S_7_6,S_7_7,S_7_8,S_7_9,S_8_0,S_8_1,S_8_10,S_8_11,S_8_12,S_8_13,S_8_14,S_8_15,S_8_2,S_8_3,S_8_4,S_8_5,S_8_6,S_8_7,S_8_8,S_8_9,S_9_0,S_9_1,S_9_10,S_9_11,S_9_12,S_9_13,S_9_14,S_9_15,S_9_2,S_9_3,S_9_4,S_9_5,S_9_6,S_9_7,S_9_8,S_9_9;
  S_0_15 = 1;
  S_1_14 = 1;
  S_2_3 = (((A>>2)&1) & ((B>>3)&1));
  S_2_4 = (((A>>2)&1) & ((B>>4)&1));
  S_2_5 = (((A>>2)&1) & ((B>>5)&1));
  S_2_6 = (((A>>2)&1) & ((B>>6)&1));
  S_2_7 = (((A>>2)&1) & ((B>>7)&1));
  S_2_8 = (((A>>2)&1) & ((B>>8)&1));
  S_2_9 = (((A>>2)&1) & ((B>>9)&1));
  S_2_10 = (((A>>2)&1) & ((B>>10)&1));
  S_2_11 = (((A>>2)&1) & ((B>>11)&1));
  S_2_12 = (((A>>2)&1) & ((B>>12)&1));
  S_2_13 = S_1_14^(((A>>2)&1) & ((B>>13)&1));
  C_2_13 = S_1_14&(((A>>2)&1) & ((B>>13)&1));
  S_2_14 = (((A>>2)&1) & ((B>>14)&1));
  S_2_15 = 1^(((((A>>2)&1) & ((B>>15)&1)))^1);
  C_2_15 = 1&(((((A>>2)&1) & ((B>>15)&1)))^1);
  S_3_2 = S_2_3^(((A>>3)&1) & ((B>>2)&1));
  C_3_2 = S_2_3&(((A>>3)&1) & ((B>>2)&1));
  S_3_3 = S_2_4^(((A>>3)&1) & ((B>>3)&1));
  C_3_3 = S_2_4&(((A>>3)&1) & ((B>>3)&1));
  S_3_4 = S_2_5^(((A>>3)&1) & ((B>>4)&1));
  C_3_4 = S_2_5&(((A>>3)&1) & ((B>>4)&1));
  S_3_5 = S_2_6^(((A>>3)&1) & ((B>>5)&1));
  C_3_5 = S_2_6&(((A>>3)&1) & ((B>>5)&1));
  S_3_6 = S_2_7^(((A>>3)&1) & ((B>>6)&1));
  C_3_6 = S_2_7&(((A>>3)&1) & ((B>>6)&1));
  S_3_7 = S_2_8^(((A>>3)&1) & ((B>>7)&1));
  C_3_7 = S_2_8&(((A>>3)&1) & ((B>>7)&1));
  S_3_8 = S_2_9^(((A>>3)&1) & ((B>>8)&1));
  C_3_8 = S_2_9&(((A>>3)&1) & ((B>>8)&1));
  S_3_9 = S_2_10^(((A>>3)&1) & ((B>>9)&1));
  C_3_9 = S_2_10&(((A>>3)&1) & ((B>>9)&1));
  S_3_10 = S_2_11^(((A>>3)&1) & ((B>>10)&1));
  C_3_10 = S_2_11&(((A>>3)&1) & ((B>>10)&1));
  S_3_11 = S_2_12^(((A>>3)&1) & ((B>>11)&1));
  C_3_11 = S_2_12&(((A>>3)&1) & ((B>>11)&1));
  S_3_12 = S_2_13^(((A>>3)&1) & ((B>>12)&1));
  C_3_12 = S_2_13&(((A>>3)&1) & ((B>>12)&1));
  tmp = S_2_14^C_2_13;
  S_3_13 = tmp^(((A>>3)&1) & ((B>>13)&1));
  C_3_13 = (tmp&(((A>>3)&1) & ((B>>13)&1)))|(S_2_14&C_2_13);
  S_3_14 = S_2_15^(((A>>3)&1) & ((B>>14)&1));
  C_3_14 = S_2_15&(((A>>3)&1) & ((B>>14)&1));
  S_3_15 = C_2_15^(((((A>>3)&1) & ((B>>15)&1)))^1);
  C_3_15 = C_2_15&(((((A>>3)&1) & ((B>>15)&1)))^1);
  S_4_1 = S_3_2^(((A>>4)&1) & ((B>>1)&1));
  C_4_1 = S_3_2&(((A>>4)&1) & ((B>>1)&1));
  tmp = S_3_3^C_3_2;
  S_4_2 = tmp^(((A>>4)&1) & ((B>>2)&1));
  C_4_2 = (tmp&(((A>>4)&1) & ((B>>2)&1)))|(S_3_3&C_3_2);
  tmp = S_3_4^C_3_3;
  S_4_3 = tmp^(((A>>4)&1) & ((B>>3)&1));
  C_4_3 = (tmp&(((A>>4)&1) & ((B>>3)&1)))|(S_3_4&C_3_3);
  tmp = S_3_5^C_3_4;
  S_4_4 = tmp^(((A>>4)&1) & ((B>>4)&1));
  C_4_4 = (tmp&(((A>>4)&1) & ((B>>4)&1)))|(S_3_5&C_3_4);
  tmp = S_3_6^C_3_5;
  S_4_5 = tmp^(((A>>4)&1) & ((B>>5)&1));
  C_4_5 = (tmp&(((A>>4)&1) & ((B>>5)&1)))|(S_3_6&C_3_5);
  tmp = S_3_7^C_3_6;
  S_4_6 = tmp^(((A>>4)&1) & ((B>>6)&1));
  C_4_6 = (tmp&(((A>>4)&1) & ((B>>6)&1)))|(S_3_7&C_3_6);
  tmp = S_3_8^C_3_7;
  S_4_7 = tmp^(((A>>4)&1) & ((B>>7)&1));
  C_4_7 = (tmp&(((A>>4)&1) & ((B>>7)&1)))|(S_3_8&C_3_7);
  tmp = S_3_9^C_3_8;
  S_4_8 = tmp^(((A>>4)&1) & ((B>>8)&1));
  C_4_8 = (tmp&(((A>>4)&1) & ((B>>8)&1)))|(S_3_9&C_3_8);
  tmp = S_3_10^C_3_9;
  S_4_9 = tmp^(((A>>4)&1) & ((B>>9)&1));
  C_4_9 = (tmp&(((A>>4)&1) & ((B>>9)&1)))|(S_3_10&C_3_9);
  tmp = S_3_11^C_3_10;
  S_4_10 = tmp^(((A>>4)&1) & ((B>>10)&1));
  C_4_10 = (tmp&(((A>>4)&1) & ((B>>10)&1)))|(S_3_11&C_3_10);
  tmp = S_3_12^C_3_11;
  S_4_11 = tmp^(((A>>4)&1) & ((B>>11)&1));
  C_4_11 = (tmp&(((A>>4)&1) & ((B>>11)&1)))|(S_3_12&C_3_11);
  tmp = S_3_13^C_3_12;
  S_4_12 = tmp^(((A>>4)&1) & ((B>>12)&1));
  C_4_12 = (tmp&(((A>>4)&1) & ((B>>12)&1)))|(S_3_13&C_3_12);
  tmp = S_3_14^C_3_13;
  S_4_13 = tmp^(((A>>4)&1) & ((B>>13)&1));
  C_4_13 = (tmp&(((A>>4)&1) & ((B>>13)&1)))|(S_3_14&C_3_13);
  tmp = S_3_15^C_3_14;
  S_4_14 = tmp^(((A>>4)&1) & ((B>>14)&1));
  C_4_14 = (tmp&(((A>>4)&1) & ((B>>14)&1)))|(S_3_15&C_3_14);
  S_4_15 = C_3_15^(((((A>>4)&1) & ((B>>15)&1)))^1);
  C_4_15 = C_3_15&(((((A>>4)&1) & ((B>>15)&1)))^1);
  S_5_0 = S_4_1^(((A>>5)&1) & ((B>>0)&1));
  C_5_0 = S_4_1&(((A>>5)&1) & ((B>>0)&1));
  tmp = S_4_2^C_4_1;
  S_5_1 = tmp^(((A>>5)&1) & ((B>>1)&1));
  C_5_1 = (tmp&(((A>>5)&1) & ((B>>1)&1)))|(S_4_2&C_4_1);
  tmp = S_4_3^C_4_2;
  S_5_2 = tmp^(((A>>5)&1) & ((B>>2)&1));
  C_5_2 = (tmp&(((A>>5)&1) & ((B>>2)&1)))|(S_4_3&C_4_2);
  tmp = S_4_4^C_4_3;
  S_5_3 = tmp^(((A>>5)&1) & ((B>>3)&1));
  C_5_3 = (tmp&(((A>>5)&1) & ((B>>3)&1)))|(S_4_4&C_4_3);
  tmp = S_4_5^C_4_4;
  S_5_4 = tmp^(((A>>5)&1) & ((B>>4)&1));
  C_5_4 = (tmp&(((A>>5)&1) & ((B>>4)&1)))|(S_4_5&C_4_4);
  tmp = S_4_6^C_4_5;
  S_5_5 = tmp^(((A>>5)&1) & ((B>>5)&1));
  C_5_5 = (tmp&(((A>>5)&1) & ((B>>5)&1)))|(S_4_6&C_4_5);
  tmp = S_4_7^C_4_6;
  S_5_6 = tmp^(((A>>5)&1) & ((B>>6)&1));
  C_5_6 = (tmp&(((A>>5)&1) & ((B>>6)&1)))|(S_4_7&C_4_6);
  tmp = S_4_8^C_4_7;
  S_5_7 = tmp^(((A>>5)&1) & ((B>>7)&1));
  C_5_7 = (tmp&(((A>>5)&1) & ((B>>7)&1)))|(S_4_8&C_4_7);
  tmp = S_4_9^C_4_8;
  S_5_8 = tmp^(((A>>5)&1) & ((B>>8)&1));
  C_5_8 = (tmp&(((A>>5)&1) & ((B>>8)&1)))|(S_4_9&C_4_8);
  tmp = S_4_10^C_4_9;
  S_5_9 = tmp^(((A>>5)&1) & ((B>>9)&1));
  C_5_9 = (tmp&(((A>>5)&1) & ((B>>9)&1)))|(S_4_10&C_4_9);
  tmp = S_4_11^C_4_10;
  S_5_10 = tmp^(((A>>5)&1) & ((B>>10)&1));
  C_5_10 = (tmp&(((A>>5)&1) & ((B>>10)&1)))|(S_4_11&C_4_10);
  tmp = S_4_12^C_4_11;
  S_5_11 = tmp^(((A>>5)&1) & ((B>>11)&1));
  C_5_11 = (tmp&(((A>>5)&1) & ((B>>11)&1)))|(S_4_12&C_4_11);
  tmp = S_4_13^C_4_12;
  S_5_12 = tmp^(((A>>5)&1) & ((B>>12)&1));
  C_5_12 = (tmp&(((A>>5)&1) & ((B>>12)&1)))|(S_4_13&C_4_12);
  tmp = S_4_14^C_4_13;
  S_5_13 = tmp^(((A>>5)&1) & ((B>>13)&1));
  C_5_13 = (tmp&(((A>>5)&1) & ((B>>13)&1)))|(S_4_14&C_4_13);
  tmp = S_4_15^C_4_14;
  S_5_14 = tmp^(((A>>5)&1) & ((B>>14)&1));
  C_5_14 = (tmp&(((A>>5)&1) & ((B>>14)&1)))|(S_4_15&C_4_14);
  S_5_15 = C_4_15^(((((A>>5)&1) & ((B>>15)&1)))^1);
  C_5_15 = C_4_15&(((((A>>5)&1) & ((B>>15)&1)))^1);
  tmp = S_5_1^C_5_0;
  S_6_0 = tmp^(((A>>6)&1) & ((B>>0)&1));
  C_6_0 = (tmp&(((A>>6)&1) & ((B>>0)&1)))|(S_5_1&C_5_0);
  tmp = S_5_2^C_5_1;
  S_6_1 = tmp^(((A>>6)&1) & ((B>>1)&1));
  C_6_1 = (tmp&(((A>>6)&1) & ((B>>1)&1)))|(S_5_2&C_5_1);
  tmp = S_5_3^C_5_2;
  S_6_2 = tmp^(((A>>6)&1) & ((B>>2)&1));
  C_6_2 = (tmp&(((A>>6)&1) & ((B>>2)&1)))|(S_5_3&C_5_2);
  tmp = S_5_4^C_5_3;
  S_6_3 = tmp^(((A>>6)&1) & ((B>>3)&1));
  C_6_3 = (tmp&(((A>>6)&1) & ((B>>3)&1)))|(S_5_4&C_5_3);
  tmp = S_5_5^C_5_4;
  S_6_4 = tmp^(((A>>6)&1) & ((B>>4)&1));
  C_6_4 = (tmp&(((A>>6)&1) & ((B>>4)&1)))|(S_5_5&C_5_4);
  tmp = S_5_6^C_5_5;
  S_6_5 = tmp^(((A>>6)&1) & ((B>>5)&1));
  C_6_5 = (tmp&(((A>>6)&1) & ((B>>5)&1)))|(S_5_6&C_5_5);
  tmp = S_5_7^C_5_6;
  S_6_6 = tmp^(((A>>6)&1) & ((B>>6)&1));
  C_6_6 = (tmp&(((A>>6)&1) & ((B>>6)&1)))|(S_5_7&C_5_6);
  tmp = S_5_8^C_5_7;
  S_6_7 = tmp^(((A>>6)&1) & ((B>>7)&1));
  C_6_7 = (tmp&(((A>>6)&1) & ((B>>7)&1)))|(S_5_8&C_5_7);
  tmp = S_5_9^C_5_8;
  S_6_8 = tmp^(((A>>6)&1) & ((B>>8)&1));
  C_6_8 = (tmp&(((A>>6)&1) & ((B>>8)&1)))|(S_5_9&C_5_8);
  tmp = S_5_10^C_5_9;
  S_6_9 = tmp^(((A>>6)&1) & ((B>>9)&1));
  C_6_9 = (tmp&(((A>>6)&1) & ((B>>9)&1)))|(S_5_10&C_5_9);
  tmp = S_5_11^C_5_10;
  S_6_10 = tmp^(((A>>6)&1) & ((B>>10)&1));
  C_6_10 = (tmp&(((A>>6)&1) & ((B>>10)&1)))|(S_5_11&C_5_10);
  tmp = S_5_12^C_5_11;
  S_6_11 = tmp^(((A>>6)&1) & ((B>>11)&1));
  C_6_11 = (tmp&(((A>>6)&1) & ((B>>11)&1)))|(S_5_12&C_5_11);
  tmp = S_5_13^C_5_12;
  S_6_12 = tmp^(((A>>6)&1) & ((B>>12)&1));
  C_6_12 = (tmp&(((A>>6)&1) & ((B>>12)&1)))|(S_5_13&C_5_12);
  tmp = S_5_14^C_5_13;
  S_6_13 = tmp^(((A>>6)&1) & ((B>>13)&1));
  C_6_13 = (tmp&(((A>>6)&1) & ((B>>13)&1)))|(S_5_14&C_5_13);
  tmp = S_5_15^C_5_14;
  S_6_14 = tmp^(((A>>6)&1) & ((B>>14)&1));
  C_6_14 = (tmp&(((A>>6)&1) & ((B>>14)&1)))|(S_5_15&C_5_14);
  S_6_15 = C_5_15^(((((A>>6)&1) & ((B>>15)&1)))^1);
  C_6_15 = C_5_15&(((((A>>6)&1) & ((B>>15)&1)))^1);
  tmp = S_6_1^C_6_0;
  S_7_0 = tmp^(((A>>7)&1) & ((B>>0)&1));
  C_7_0 = (tmp&(((A>>7)&1) & ((B>>0)&1)))|(S_6_1&C_6_0);
  tmp = S_6_2^C_6_1;
  S_7_1 = tmp^(((A>>7)&1) & ((B>>1)&1));
  C_7_1 = (tmp&(((A>>7)&1) & ((B>>1)&1)))|(S_6_2&C_6_1);
  tmp = S_6_3^C_6_2;
  S_7_2 = tmp^(((A>>7)&1) & ((B>>2)&1));
  C_7_2 = (tmp&(((A>>7)&1) & ((B>>2)&1)))|(S_6_3&C_6_2);
  tmp = S_6_4^C_6_3;
  S_7_3 = tmp^(((A>>7)&1) & ((B>>3)&1));
  C_7_3 = (tmp&(((A>>7)&1) & ((B>>3)&1)))|(S_6_4&C_6_3);
  tmp = S_6_5^C_6_4;
  S_7_4 = tmp^(((A>>7)&1) & ((B>>4)&1));
  C_7_4 = (tmp&(((A>>7)&1) & ((B>>4)&1)))|(S_6_5&C_6_4);
  tmp = S_6_6^C_6_5;
  S_7_5 = tmp^(((A>>7)&1) & ((B>>5)&1));
  C_7_5 = (tmp&(((A>>7)&1) & ((B>>5)&1)))|(S_6_6&C_6_5);
  tmp = S_6_7^C_6_6;
  S_7_6 = tmp^(((A>>7)&1) & ((B>>6)&1));
  C_7_6 = (tmp&(((A>>7)&1) & ((B>>6)&1)))|(S_6_7&C_6_6);
  tmp = S_6_8^C_6_7;
  S_7_7 = tmp^(((A>>7)&1) & ((B>>7)&1));
  C_7_7 = (tmp&(((A>>7)&1) & ((B>>7)&1)))|(S_6_8&C_6_7);
  tmp = S_6_9^C_6_8;
  S_7_8 = tmp^(((A>>7)&1) & ((B>>8)&1));
  C_7_8 = (tmp&(((A>>7)&1) & ((B>>8)&1)))|(S_6_9&C_6_8);
  tmp = S_6_10^C_6_9;
  S_7_9 = tmp^(((A>>7)&1) & ((B>>9)&1));
  C_7_9 = (tmp&(((A>>7)&1) & ((B>>9)&1)))|(S_6_10&C_6_9);
  tmp = S_6_11^C_6_10;
  S_7_10 = tmp^(((A>>7)&1) & ((B>>10)&1));
  C_7_10 = (tmp&(((A>>7)&1) & ((B>>10)&1)))|(S_6_11&C_6_10);
  tmp = S_6_12^C_6_11;
  S_7_11 = tmp^(((A>>7)&1) & ((B>>11)&1));
  C_7_11 = (tmp&(((A>>7)&1) & ((B>>11)&1)))|(S_6_12&C_6_11);
  tmp = S_6_13^C_6_12;
  S_7_12 = tmp^(((A>>7)&1) & ((B>>12)&1));
  C_7_12 = (tmp&(((A>>7)&1) & ((B>>12)&1)))|(S_6_13&C_6_12);
  tmp = S_6_14^C_6_13;
  S_7_13 = tmp^(((A>>7)&1) & ((B>>13)&1));
  C_7_13 = (tmp&(((A>>7)&1) & ((B>>13)&1)))|(S_6_14&C_6_13);
  tmp = S_6_15^C_6_14;
  S_7_14 = tmp^(((A>>7)&1) & ((B>>14)&1));
  C_7_14 = (tmp&(((A>>7)&1) & ((B>>14)&1)))|(S_6_15&C_6_14);
  S_7_15 = C_6_15^(((((A>>7)&1) & ((B>>15)&1)))^1);
  C_7_15 = C_6_15&(((((A>>7)&1) & ((B>>15)&1)))^1);
  tmp = S_7_1^C_7_0;
  S_8_0 = tmp^(((A>>8)&1) & ((B>>0)&1));
  C_8_0 = (tmp&(((A>>8)&1) & ((B>>0)&1)))|(S_7_1&C_7_0);
  tmp = S_7_2^C_7_1;
  S_8_1 = tmp^(((A>>8)&1) & ((B>>1)&1));
  C_8_1 = (tmp&(((A>>8)&1) & ((B>>1)&1)))|(S_7_2&C_7_1);
  tmp = S_7_3^C_7_2;
  S_8_2 = tmp^(((A>>8)&1) & ((B>>2)&1));
  C_8_2 = (tmp&(((A>>8)&1) & ((B>>2)&1)))|(S_7_3&C_7_2);
  tmp = S_7_4^C_7_3;
  S_8_3 = tmp^(((A>>8)&1) & ((B>>3)&1));
  C_8_3 = (tmp&(((A>>8)&1) & ((B>>3)&1)))|(S_7_4&C_7_3);
  tmp = S_7_5^C_7_4;
  S_8_4 = tmp^(((A>>8)&1) & ((B>>4)&1));
  C_8_4 = (tmp&(((A>>8)&1) & ((B>>4)&1)))|(S_7_5&C_7_4);
  tmp = S_7_6^C_7_5;
  S_8_5 = tmp^(((A>>8)&1) & ((B>>5)&1));
  C_8_5 = (tmp&(((A>>8)&1) & ((B>>5)&1)))|(S_7_6&C_7_5);
  tmp = S_7_7^C_7_6;
  S_8_6 = tmp^(((A>>8)&1) & ((B>>6)&1));
  C_8_6 = (tmp&(((A>>8)&1) & ((B>>6)&1)))|(S_7_7&C_7_6);
  tmp = S_7_8^C_7_7;
  S_8_7 = tmp^(((A>>8)&1) & ((B>>7)&1));
  C_8_7 = (tmp&(((A>>8)&1) & ((B>>7)&1)))|(S_7_8&C_7_7);
  tmp = S_7_9^C_7_8;
  S_8_8 = tmp^(((A>>8)&1) & ((B>>8)&1));
  C_8_8 = (tmp&(((A>>8)&1) & ((B>>8)&1)))|(S_7_9&C_7_8);
  tmp = S_7_10^C_7_9;
  S_8_9 = tmp^(((A>>8)&1) & ((B>>9)&1));
  C_8_9 = (tmp&(((A>>8)&1) & ((B>>9)&1)))|(S_7_10&C_7_9);
  tmp = S_7_11^C_7_10;
  S_8_10 = tmp^(((A>>8)&1) & ((B>>10)&1));
  C_8_10 = (tmp&(((A>>8)&1) & ((B>>10)&1)))|(S_7_11&C_7_10);
  tmp = S_7_12^C_7_11;
  S_8_11 = tmp^(((A>>8)&1) & ((B>>11)&1));
  C_8_11 = (tmp&(((A>>8)&1) & ((B>>11)&1)))|(S_7_12&C_7_11);
  tmp = S_7_13^C_7_12;
  S_8_12 = tmp^(((A>>8)&1) & ((B>>12)&1));
  C_8_12 = (tmp&(((A>>8)&1) & ((B>>12)&1)))|(S_7_13&C_7_12);
  tmp = S_7_14^C_7_13;
  S_8_13 = tmp^(((A>>8)&1) & ((B>>13)&1));
  C_8_13 = (tmp&(((A>>8)&1) & ((B>>13)&1)))|(S_7_14&C_7_13);
  tmp = S_7_15^C_7_14;
  S_8_14 = tmp^(((A>>8)&1) & ((B>>14)&1));
  C_8_14 = (tmp&(((A>>8)&1) & ((B>>14)&1)))|(S_7_15&C_7_14);
  S_8_15 = C_7_15^(((((A>>8)&1) & ((B>>15)&1)))^1);
  C_8_15 = C_7_15&(((((A>>8)&1) & ((B>>15)&1)))^1);
  tmp = S_8_1^C_8_0;
  S_9_0 = tmp^(((A>>9)&1) & ((B>>0)&1));
  C_9_0 = (tmp&(((A>>9)&1) & ((B>>0)&1)))|(S_8_1&C_8_0);
  tmp = S_8_2^C_8_1;
  S_9_1 = tmp^(((A>>9)&1) & ((B>>1)&1));
  C_9_1 = (tmp&(((A>>9)&1) & ((B>>1)&1)))|(S_8_2&C_8_1);
  tmp = S_8_3^C_8_2;
  S_9_2 = tmp^(((A>>9)&1) & ((B>>2)&1));
  C_9_2 = (tmp&(((A>>9)&1) & ((B>>2)&1)))|(S_8_3&C_8_2);
  tmp = S_8_4^C_8_3;
  S_9_3 = tmp^(((A>>9)&1) & ((B>>3)&1));
  C_9_3 = (tmp&(((A>>9)&1) & ((B>>3)&1)))|(S_8_4&C_8_3);
  tmp = S_8_5^C_8_4;
  S_9_4 = tmp^(((A>>9)&1) & ((B>>4)&1));
  C_9_4 = (tmp&(((A>>9)&1) & ((B>>4)&1)))|(S_8_5&C_8_4);
  tmp = S_8_6^C_8_5;
  S_9_5 = tmp^(((A>>9)&1) & ((B>>5)&1));
  C_9_5 = (tmp&(((A>>9)&1) & ((B>>5)&1)))|(S_8_6&C_8_5);
  tmp = S_8_7^C_8_6;
  S_9_6 = tmp^(((A>>9)&1) & ((B>>6)&1));
  C_9_6 = (tmp&(((A>>9)&1) & ((B>>6)&1)))|(S_8_7&C_8_6);
  tmp = S_8_8^C_8_7;
  S_9_7 = tmp^(((A>>9)&1) & ((B>>7)&1));
  C_9_7 = (tmp&(((A>>9)&1) & ((B>>7)&1)))|(S_8_8&C_8_7);
  tmp = S_8_9^C_8_8;
  S_9_8 = tmp^(((A>>9)&1) & ((B>>8)&1));
  C_9_8 = (tmp&(((A>>9)&1) & ((B>>8)&1)))|(S_8_9&C_8_8);
  tmp = S_8_10^C_8_9;
  S_9_9 = tmp^(((A>>9)&1) & ((B>>9)&1));
  C_9_9 = (tmp&(((A>>9)&1) & ((B>>9)&1)))|(S_8_10&C_8_9);
  tmp = S_8_11^C_8_10;
  S_9_10 = tmp^(((A>>9)&1) & ((B>>10)&1));
  C_9_10 = (tmp&(((A>>9)&1) & ((B>>10)&1)))|(S_8_11&C_8_10);
  tmp = S_8_12^C_8_11;
  S_9_11 = tmp^(((A>>9)&1) & ((B>>11)&1));
  C_9_11 = (tmp&(((A>>9)&1) & ((B>>11)&1)))|(S_8_12&C_8_11);
  tmp = S_8_13^C_8_12;
  S_9_12 = tmp^(((A>>9)&1) & ((B>>12)&1));
  C_9_12 = (tmp&(((A>>9)&1) & ((B>>12)&1)))|(S_8_13&C_8_12);
  tmp = S_8_14^C_8_13;
  S_9_13 = tmp^(((A>>9)&1) & ((B>>13)&1));
  C_9_13 = (tmp&(((A>>9)&1) & ((B>>13)&1)))|(S_8_14&C_8_13);
  tmp = S_8_15^C_8_14;
  S_9_14 = tmp^(((A>>9)&1) & ((B>>14)&1));
  C_9_14 = (tmp&(((A>>9)&1) & ((B>>14)&1)))|(S_8_15&C_8_14);
  S_9_15 = C_8_15^(((((A>>9)&1) & ((B>>15)&1)))^1);
  C_9_15 = C_8_15&(((((A>>9)&1) & ((B>>15)&1)))^1);
  tmp = S_9_1^C_9_0;
  S_10_0 = tmp^(((A>>10)&1) & ((B>>0)&1));
  C_10_0 = (tmp&(((A>>10)&1) & ((B>>0)&1)))|(S_9_1&C_9_0);
  tmp = S_9_2^C_9_1;
  S_10_1 = tmp^(((A>>10)&1) & ((B>>1)&1));
  C_10_1 = (tmp&(((A>>10)&1) & ((B>>1)&1)))|(S_9_2&C_9_1);
  tmp = S_9_3^C_9_2;
  S_10_2 = tmp^(((A>>10)&1) & ((B>>2)&1));
  C_10_2 = (tmp&(((A>>10)&1) & ((B>>2)&1)))|(S_9_3&C_9_2);
  tmp = S_9_4^C_9_3;
  S_10_3 = tmp^(((A>>10)&1) & ((B>>3)&1));
  C_10_3 = (tmp&(((A>>10)&1) & ((B>>3)&1)))|(S_9_4&C_9_3);
  tmp = S_9_5^C_9_4;
  S_10_4 = tmp^(((A>>10)&1) & ((B>>4)&1));
  C_10_4 = (tmp&(((A>>10)&1) & ((B>>4)&1)))|(S_9_5&C_9_4);
  tmp = S_9_6^C_9_5;
  S_10_5 = tmp^(((A>>10)&1) & ((B>>5)&1));
  C_10_5 = (tmp&(((A>>10)&1) & ((B>>5)&1)))|(S_9_6&C_9_5);
  tmp = S_9_7^C_9_6;
  S_10_6 = tmp^(((A>>10)&1) & ((B>>6)&1));
  C_10_6 = (tmp&(((A>>10)&1) & ((B>>6)&1)))|(S_9_7&C_9_6);
  tmp = S_9_8^C_9_7;
  S_10_7 = tmp^(((A>>10)&1) & ((B>>7)&1));
  C_10_7 = (tmp&(((A>>10)&1) & ((B>>7)&1)))|(S_9_8&C_9_7);
  tmp = S_9_9^C_9_8;
  S_10_8 = tmp^(((A>>10)&1) & ((B>>8)&1));
  C_10_8 = (tmp&(((A>>10)&1) & ((B>>8)&1)))|(S_9_9&C_9_8);
  tmp = S_9_10^C_9_9;
  S_10_9 = tmp^(((A>>10)&1) & ((B>>9)&1));
  C_10_9 = (tmp&(((A>>10)&1) & ((B>>9)&1)))|(S_9_10&C_9_9);
  tmp = S_9_11^C_9_10;
  S_10_10 = tmp^(((A>>10)&1) & ((B>>10)&1));
  C_10_10 = (tmp&(((A>>10)&1) & ((B>>10)&1)))|(S_9_11&C_9_10);
  tmp = S_9_12^C_9_11;
  S_10_11 = tmp^(((A>>10)&1) & ((B>>11)&1));
  C_10_11 = (tmp&(((A>>10)&1) & ((B>>11)&1)))|(S_9_12&C_9_11);
  tmp = S_9_13^C_9_12;
  S_10_12 = tmp^(((A>>10)&1) & ((B>>12)&1));
  C_10_12 = (tmp&(((A>>10)&1) & ((B>>12)&1)))|(S_9_13&C_9_12);
  tmp = S_9_14^C_9_13;
  S_10_13 = tmp^(((A>>10)&1) & ((B>>13)&1));
  C_10_13 = (tmp&(((A>>10)&1) & ((B>>13)&1)))|(S_9_14&C_9_13);
  tmp = S_9_15^C_9_14;
  S_10_14 = tmp^(((A>>10)&1) & ((B>>14)&1));
  C_10_14 = (tmp&(((A>>10)&1) & ((B>>14)&1)))|(S_9_15&C_9_14);
  S_10_15 = C_9_15^(((((A>>10)&1) & ((B>>15)&1)))^1);
  C_10_15 = C_9_15&(((((A>>10)&1) & ((B>>15)&1)))^1);
  tmp = S_10_1^C_10_0;
  S_11_0 = tmp^(((A>>11)&1) & ((B>>0)&1));
  C_11_0 = (tmp&(((A>>11)&1) & ((B>>0)&1)))|(S_10_1&C_10_0);
  tmp = S_10_2^C_10_1;
  S_11_1 = tmp^(((A>>11)&1) & ((B>>1)&1));
  C_11_1 = (tmp&(((A>>11)&1) & ((B>>1)&1)))|(S_10_2&C_10_1);
  tmp = S_10_3^C_10_2;
  S_11_2 = tmp^(((A>>11)&1) & ((B>>2)&1));
  C_11_2 = (tmp&(((A>>11)&1) & ((B>>2)&1)))|(S_10_3&C_10_2);
  tmp = S_10_4^C_10_3;
  S_11_3 = tmp^(((A>>11)&1) & ((B>>3)&1));
  C_11_3 = (tmp&(((A>>11)&1) & ((B>>3)&1)))|(S_10_4&C_10_3);
  tmp = S_10_5^C_10_4;
  S_11_4 = tmp^(((A>>11)&1) & ((B>>4)&1));
  C_11_4 = (tmp&(((A>>11)&1) & ((B>>4)&1)))|(S_10_5&C_10_4);
  tmp = S_10_6^C_10_5;
  S_11_5 = tmp^(((A>>11)&1) & ((B>>5)&1));
  C_11_5 = (tmp&(((A>>11)&1) & ((B>>5)&1)))|(S_10_6&C_10_5);
  tmp = S_10_7^C_10_6;
  S_11_6 = tmp^(((A>>11)&1) & ((B>>6)&1));
  C_11_6 = (tmp&(((A>>11)&1) & ((B>>6)&1)))|(S_10_7&C_10_6);
  tmp = S_10_8^C_10_7;
  S_11_7 = tmp^(((A>>11)&1) & ((B>>7)&1));
  C_11_7 = (tmp&(((A>>11)&1) & ((B>>7)&1)))|(S_10_8&C_10_7);
  tmp = S_10_9^C_10_8;
  S_11_8 = tmp^(((A>>11)&1) & ((B>>8)&1));
  C_11_8 = (tmp&(((A>>11)&1) & ((B>>8)&1)))|(S_10_9&C_10_8);
  tmp = S_10_10^C_10_9;
  S_11_9 = tmp^(((A>>11)&1) & ((B>>9)&1));
  C_11_9 = (tmp&(((A>>11)&1) & ((B>>9)&1)))|(S_10_10&C_10_9);
  tmp = S_10_11^C_10_10;
  S_11_10 = tmp^(((A>>11)&1) & ((B>>10)&1));
  C_11_10 = (tmp&(((A>>11)&1) & ((B>>10)&1)))|(S_10_11&C_10_10);
  tmp = S_10_12^C_10_11;
  S_11_11 = tmp^(((A>>11)&1) & ((B>>11)&1));
  C_11_11 = (tmp&(((A>>11)&1) & ((B>>11)&1)))|(S_10_12&C_10_11);
  tmp = S_10_13^C_10_12;
  S_11_12 = tmp^(((A>>11)&1) & ((B>>12)&1));
  C_11_12 = (tmp&(((A>>11)&1) & ((B>>12)&1)))|(S_10_13&C_10_12);
  tmp = S_10_14^C_10_13;
  S_11_13 = tmp^(((A>>11)&1) & ((B>>13)&1));
  C_11_13 = (tmp&(((A>>11)&1) & ((B>>13)&1)))|(S_10_14&C_10_13);
  tmp = S_10_15^C_10_14;
  S_11_14 = tmp^(((A>>11)&1) & ((B>>14)&1));
  C_11_14 = (tmp&(((A>>11)&1) & ((B>>14)&1)))|(S_10_15&C_10_14);
  S_11_15 = C_10_15^(((((A>>11)&1) & ((B>>15)&1)))^1);
  C_11_15 = C_10_15&(((((A>>11)&1) & ((B>>15)&1)))^1);
  tmp = S_11_1^C_11_0;
  S_12_0 = tmp^(((A>>12)&1) & ((B>>0)&1));
  C_12_0 = (tmp&(((A>>12)&1) & ((B>>0)&1)))|(S_11_1&C_11_0);
  tmp = S_11_2^C_11_1;
  S_12_1 = tmp^(((A>>12)&1) & ((B>>1)&1));
  C_12_1 = (tmp&(((A>>12)&1) & ((B>>1)&1)))|(S_11_2&C_11_1);
  tmp = S_11_3^C_11_2;
  S_12_2 = tmp^(((A>>12)&1) & ((B>>2)&1));
  C_12_2 = (tmp&(((A>>12)&1) & ((B>>2)&1)))|(S_11_3&C_11_2);
  tmp = S_11_4^C_11_3;
  S_12_3 = tmp^(((A>>12)&1) & ((B>>3)&1));
  C_12_3 = (tmp&(((A>>12)&1) & ((B>>3)&1)))|(S_11_4&C_11_3);
  tmp = S_11_5^C_11_4;
  S_12_4 = tmp^(((A>>12)&1) & ((B>>4)&1));
  C_12_4 = (tmp&(((A>>12)&1) & ((B>>4)&1)))|(S_11_5&C_11_4);
  tmp = S_11_6^C_11_5;
  S_12_5 = tmp^(((A>>12)&1) & ((B>>5)&1));
  C_12_5 = (tmp&(((A>>12)&1) & ((B>>5)&1)))|(S_11_6&C_11_5);
  tmp = S_11_7^C_11_6;
  S_12_6 = tmp^(((A>>12)&1) & ((B>>6)&1));
  C_12_6 = (tmp&(((A>>12)&1) & ((B>>6)&1)))|(S_11_7&C_11_6);
  tmp = S_11_8^C_11_7;
  S_12_7 = tmp^(((A>>12)&1) & ((B>>7)&1));
  C_12_7 = (tmp&(((A>>12)&1) & ((B>>7)&1)))|(S_11_8&C_11_7);
  tmp = S_11_9^C_11_8;
  S_12_8 = tmp^(((A>>12)&1) & ((B>>8)&1));
  C_12_8 = (tmp&(((A>>12)&1) & ((B>>8)&1)))|(S_11_9&C_11_8);
  tmp = S_11_10^C_11_9;
  S_12_9 = tmp^(((A>>12)&1) & ((B>>9)&1));
  C_12_9 = (tmp&(((A>>12)&1) & ((B>>9)&1)))|(S_11_10&C_11_9);
  tmp = S_11_11^C_11_10;
  S_12_10 = tmp^(((A>>12)&1) & ((B>>10)&1));
  C_12_10 = (tmp&(((A>>12)&1) & ((B>>10)&1)))|(S_11_11&C_11_10);
  tmp = S_11_12^C_11_11;
  S_12_11 = tmp^(((A>>12)&1) & ((B>>11)&1));
  C_12_11 = (tmp&(((A>>12)&1) & ((B>>11)&1)))|(S_11_12&C_11_11);
  tmp = S_11_13^C_11_12;
  S_12_12 = tmp^(((A>>12)&1) & ((B>>12)&1));
  C_12_12 = (tmp&(((A>>12)&1) & ((B>>12)&1)))|(S_11_13&C_11_12);
  tmp = S_11_14^C_11_13;
  S_12_13 = tmp^(((A>>12)&1) & ((B>>13)&1));
  C_12_13 = (tmp&(((A>>12)&1) & ((B>>13)&1)))|(S_11_14&C_11_13);
  tmp = S_11_15^C_11_14;
  S_12_14 = tmp^(((A>>12)&1) & ((B>>14)&1));
  C_12_14 = (tmp&(((A>>12)&1) & ((B>>14)&1)))|(S_11_15&C_11_14);
  S_12_15 = C_11_15^(((((A>>12)&1) & ((B>>15)&1)))^1);
  C_12_15 = C_11_15&(((((A>>12)&1) & ((B>>15)&1)))^1);
  tmp = S_12_1^C_12_0;
  S_13_0 = tmp^(((A>>13)&1) & ((B>>0)&1));
  C_13_0 = (tmp&(((A>>13)&1) & ((B>>0)&1)))|(S_12_1&C_12_0);
  tmp = S_12_2^C_12_1;
  S_13_1 = tmp^(((A>>13)&1) & ((B>>1)&1));
  C_13_1 = (tmp&(((A>>13)&1) & ((B>>1)&1)))|(S_12_2&C_12_1);
  tmp = S_12_3^C_12_2;
  S_13_2 = tmp^(((A>>13)&1) & ((B>>2)&1));
  C_13_2 = (tmp&(((A>>13)&1) & ((B>>2)&1)))|(S_12_3&C_12_2);
  tmp = S_12_4^C_12_3;
  S_13_3 = tmp^(((A>>13)&1) & ((B>>3)&1));
  C_13_3 = (tmp&(((A>>13)&1) & ((B>>3)&1)))|(S_12_4&C_12_3);
  tmp = S_12_5^C_12_4;
  S_13_4 = tmp^(((A>>13)&1) & ((B>>4)&1));
  C_13_4 = (tmp&(((A>>13)&1) & ((B>>4)&1)))|(S_12_5&C_12_4);
  tmp = S_12_6^C_12_5;
  S_13_5 = tmp^(((A>>13)&1) & ((B>>5)&1));
  C_13_5 = (tmp&(((A>>13)&1) & ((B>>5)&1)))|(S_12_6&C_12_5);
  tmp = S_12_7^C_12_6;
  S_13_6 = tmp^(((A>>13)&1) & ((B>>6)&1));
  C_13_6 = (tmp&(((A>>13)&1) & ((B>>6)&1)))|(S_12_7&C_12_6);
  tmp = S_12_8^C_12_7;
  S_13_7 = tmp^(((A>>13)&1) & ((B>>7)&1));
  C_13_7 = (tmp&(((A>>13)&1) & ((B>>7)&1)))|(S_12_8&C_12_7);
  tmp = S_12_9^C_12_8;
  S_13_8 = tmp^(((A>>13)&1) & ((B>>8)&1));
  C_13_8 = (tmp&(((A>>13)&1) & ((B>>8)&1)))|(S_12_9&C_12_8);
  tmp = S_12_10^C_12_9;
  S_13_9 = tmp^(((A>>13)&1) & ((B>>9)&1));
  C_13_9 = (tmp&(((A>>13)&1) & ((B>>9)&1)))|(S_12_10&C_12_9);
  tmp = S_12_11^C_12_10;
  S_13_10 = tmp^(((A>>13)&1) & ((B>>10)&1));
  C_13_10 = (tmp&(((A>>13)&1) & ((B>>10)&1)))|(S_12_11&C_12_10);
  tmp = S_12_12^C_12_11;
  S_13_11 = tmp^(((A>>13)&1) & ((B>>11)&1));
  C_13_11 = (tmp&(((A>>13)&1) & ((B>>11)&1)))|(S_12_12&C_12_11);
  tmp = S_12_13^C_12_12;
  S_13_12 = tmp^(((A>>13)&1) & ((B>>12)&1));
  C_13_12 = (tmp&(((A>>13)&1) & ((B>>12)&1)))|(S_12_13&C_12_12);
  tmp = S_12_14^C_12_13;
  S_13_13 = tmp^(((A>>13)&1) & ((B>>13)&1));
  C_13_13 = (tmp&(((A>>13)&1) & ((B>>13)&1)))|(S_12_14&C_12_13);
  tmp = S_12_15^C_12_14;
  S_13_14 = tmp^(((A>>13)&1) & ((B>>14)&1));
  C_13_14 = (tmp&(((A>>13)&1) & ((B>>14)&1)))|(S_12_15&C_12_14);
  S_13_15 = C_12_15^(((((A>>13)&1) & ((B>>15)&1)))^1);
  C_13_15 = C_12_15&(((((A>>13)&1) & ((B>>15)&1)))^1);
  tmp = S_13_1^C_13_0;
  S_14_0 = tmp^(((A>>14)&1) & ((B>>0)&1));
  C_14_0 = (tmp&(((A>>14)&1) & ((B>>0)&1)))|(S_13_1&C_13_0);
  tmp = S_13_2^C_13_1;
  S_14_1 = tmp^(((A>>14)&1) & ((B>>1)&1));
  C_14_1 = (tmp&(((A>>14)&1) & ((B>>1)&1)))|(S_13_2&C_13_1);
  tmp = S_13_3^C_13_2;
  S_14_2 = tmp^(((A>>14)&1) & ((B>>2)&1));
  C_14_2 = (tmp&(((A>>14)&1) & ((B>>2)&1)))|(S_13_3&C_13_2);
  tmp = S_13_4^C_13_3;
  S_14_3 = tmp^(((A>>14)&1) & ((B>>3)&1));
  C_14_3 = (tmp&(((A>>14)&1) & ((B>>3)&1)))|(S_13_4&C_13_3);
  tmp = S_13_5^C_13_4;
  S_14_4 = tmp^(((A>>14)&1) & ((B>>4)&1));
  C_14_4 = (tmp&(((A>>14)&1) & ((B>>4)&1)))|(S_13_5&C_13_4);
  tmp = S_13_6^C_13_5;
  S_14_5 = tmp^(((A>>14)&1) & ((B>>5)&1));
  C_14_5 = (tmp&(((A>>14)&1) & ((B>>5)&1)))|(S_13_6&C_13_5);
  tmp = S_13_7^C_13_6;
  S_14_6 = tmp^(((A>>14)&1) & ((B>>6)&1));
  C_14_6 = (tmp&(((A>>14)&1) & ((B>>6)&1)))|(S_13_7&C_13_6);
  tmp = S_13_8^C_13_7;
  S_14_7 = tmp^(((A>>14)&1) & ((B>>7)&1));
  C_14_7 = (tmp&(((A>>14)&1) & ((B>>7)&1)))|(S_13_8&C_13_7);
  tmp = S_13_9^C_13_8;
  S_14_8 = tmp^(((A>>14)&1) & ((B>>8)&1));
  C_14_8 = (tmp&(((A>>14)&1) & ((B>>8)&1)))|(S_13_9&C_13_8);
  tmp = S_13_10^C_13_9;
  S_14_9 = tmp^(((A>>14)&1) & ((B>>9)&1));
  C_14_9 = (tmp&(((A>>14)&1) & ((B>>9)&1)))|(S_13_10&C_13_9);
  tmp = S_13_11^C_13_10;
  S_14_10 = tmp^(((A>>14)&1) & ((B>>10)&1));
  C_14_10 = (tmp&(((A>>14)&1) & ((B>>10)&1)))|(S_13_11&C_13_10);
  tmp = S_13_12^C_13_11;
  S_14_11 = tmp^(((A>>14)&1) & ((B>>11)&1));
  C_14_11 = (tmp&(((A>>14)&1) & ((B>>11)&1)))|(S_13_12&C_13_11);
  tmp = S_13_13^C_13_12;
  S_14_12 = tmp^(((A>>14)&1) & ((B>>12)&1));
  C_14_12 = (tmp&(((A>>14)&1) & ((B>>12)&1)))|(S_13_13&C_13_12);
  tmp = S_13_14^C_13_13;
  S_14_13 = tmp^(((A>>14)&1) & ((B>>13)&1));
  C_14_13 = (tmp&(((A>>14)&1) & ((B>>13)&1)))|(S_13_14&C_13_13);
  tmp = S_13_15^C_13_14;
  S_14_14 = tmp^(((A>>14)&1) & ((B>>14)&1));
  C_14_14 = (tmp&(((A>>14)&1) & ((B>>14)&1)))|(S_13_15&C_13_14);
  S_14_15 = C_13_15^(((((A>>14)&1) & ((B>>15)&1)))^1);
  C_14_15 = C_13_15&(((((A>>14)&1) & ((B>>15)&1)))^1);
  tmp = S_14_1^C_14_0;
  S_15_0 = tmp^(((((A>>15)&1) & ((B>>0)&1)))^1);
  C_15_0 = (tmp&(((((A>>15)&1) & ((B>>0)&1)))^1))|(S_14_1&C_14_0);
  tmp = S_14_2^C_14_1;
  S_15_1 = tmp^(((((A>>15)&1) & ((B>>1)&1)))^1);
  C_15_1 = (tmp&(((((A>>15)&1) & ((B>>1)&1)))^1))|(S_14_2&C_14_1);
  tmp = S_14_3^C_14_2;
  S_15_2 = tmp^(((((A>>15)&1) & ((B>>2)&1)))^1);
  C_15_2 = (tmp&(((((A>>15)&1) & ((B>>2)&1)))^1))|(S_14_3&C_14_2);
  tmp = S_14_4^C_14_3;
  S_15_3 = tmp^(((((A>>15)&1) & ((B>>3)&1)))^1);
  C_15_3 = (tmp&(((((A>>15)&1) & ((B>>3)&1)))^1))|(S_14_4&C_14_3);
  tmp = S_14_5^C_14_4;
  S_15_4 = tmp^(((((A>>15)&1) & ((B>>4)&1)))^1);
  C_15_4 = (tmp&(((((A>>15)&1) & ((B>>4)&1)))^1))|(S_14_5&C_14_4);
  tmp = S_14_6^C_14_5;
  S_15_5 = tmp^(((((A>>15)&1) & ((B>>5)&1)))^1);
  C_15_5 = (tmp&(((((A>>15)&1) & ((B>>5)&1)))^1))|(S_14_6&C_14_5);
  tmp = S_14_7^C_14_6;
  S_15_6 = tmp^(((((A>>15)&1) & ((B>>6)&1)))^1);
  C_15_6 = (tmp&(((((A>>15)&1) & ((B>>6)&1)))^1))|(S_14_7&C_14_6);
  tmp = S_14_8^C_14_7;
  S_15_7 = tmp^(((((A>>15)&1) & ((B>>7)&1)))^1);
  C_15_7 = (tmp&(((((A>>15)&1) & ((B>>7)&1)))^1))|(S_14_8&C_14_7);
  tmp = S_14_9^C_14_8;
  S_15_8 = tmp^(((((A>>15)&1) & ((B>>8)&1)))^1);
  C_15_8 = (tmp&(((((A>>15)&1) & ((B>>8)&1)))^1))|(S_14_9&C_14_8);
  tmp = S_14_10^C_14_9;
  S_15_9 = tmp^(((((A>>15)&1) & ((B>>9)&1)))^1);
  C_15_9 = (tmp&(((((A>>15)&1) & ((B>>9)&1)))^1))|(S_14_10&C_14_9);
  tmp = S_14_11^C_14_10;
  S_15_10 = tmp^(((((A>>15)&1) & ((B>>10)&1)))^1);
  C_15_10 = (tmp&(((((A>>15)&1) & ((B>>10)&1)))^1))|(S_14_11&C_14_10);
  tmp = S_14_12^C_14_11;
  S_15_11 = tmp^(((((A>>15)&1) & ((B>>11)&1)))^1);
  C_15_11 = (tmp&(((((A>>15)&1) & ((B>>11)&1)))^1))|(S_14_12&C_14_11);
  tmp = S_14_13^C_14_12;
  S_15_12 = tmp^(((((A>>15)&1) & ((B>>12)&1)))^1);
  C_15_12 = (tmp&(((((A>>15)&1) & ((B>>12)&1)))^1))|(S_14_13&C_14_12);
  tmp = S_14_14^C_14_13;
  S_15_13 = tmp^(((((A>>15)&1) & ((B>>13)&1)))^1);
  C_15_13 = (tmp&(((((A>>15)&1) & ((B>>13)&1)))^1))|(S_14_14&C_14_13);
  tmp = S_14_15^C_14_14;
  S_15_14 = tmp^(((((A>>15)&1) & ((B>>14)&1)))^1);
  C_15_14 = (tmp&(((((A>>15)&1) & ((B>>14)&1)))^1))|(S_14_15&C_14_14);
  S_15_15 = C_14_15^(((A>>15)&1) & ((B>>15)&1));
  C_15_15 = C_14_15&(((A>>15)&1) & ((B>>15)&1));
  S_16_0 = S_15_1^C_15_0;
  C_16_0 = S_15_1&C_15_0;
  tmp = S_15_2^C_16_0;
  S_16_1 = tmp^C_15_1;
  C_16_1 = (tmp&C_15_1)|(S_15_2&C_16_0);
  tmp = S_15_3^C_16_1;
  S_16_2 = tmp^C_15_2;
  C_16_2 = (tmp&C_15_2)|(S_15_3&C_16_1);
  tmp = S_15_4^C_16_2;
  S_16_3 = tmp^C_15_3;
  C_16_3 = (tmp&C_15_3)|(S_15_4&C_16_2);
  tmp = S_15_5^C_16_3;
  S_16_4 = tmp^C_15_4;
  C_16_4 = (tmp&C_15_4)|(S_15_5&C_16_3);
  tmp = S_15_6^C_16_4;
  S_16_5 = tmp^C_15_5;
  C_16_5 = (tmp&C_15_5)|(S_15_6&C_16_4);
  tmp = S_15_7^C_16_5;
  S_16_6 = tmp^C_15_6;
  C_16_6 = (tmp&C_15_6)|(S_15_7&C_16_5);
  tmp = S_15_8^C_16_6;
  S_16_7 = tmp^C_15_7;
  C_16_7 = (tmp&C_15_7)|(S_15_8&C_16_6);
  tmp = S_15_9^C_16_7;
  S_16_8 = tmp^C_15_8;
  C_16_8 = (tmp&C_15_8)|(S_15_9&C_16_7);
  tmp = S_15_10^C_16_8;
  S_16_9 = tmp^C_15_9;
  C_16_9 = (tmp&C_15_9)|(S_15_10&C_16_8);
  tmp = S_15_11^C_16_9;
  S_16_10 = tmp^C_15_10;
  C_16_10 = (tmp&C_15_10)|(S_15_11&C_16_9);
  tmp = S_15_12^C_16_10;
  S_16_11 = tmp^C_15_11;
  C_16_11 = (tmp&C_15_11)|(S_15_12&C_16_10);
  tmp = S_15_13^C_16_11;
  S_16_12 = tmp^C_15_12;
  C_16_12 = (tmp&C_15_12)|(S_15_13&C_16_11);
  tmp = S_15_14^C_16_12;
  S_16_13 = tmp^C_15_13;
  C_16_13 = (tmp&C_15_13)|(S_15_14&C_16_12);
  tmp = S_15_15^C_16_13;
  S_16_14 = tmp^C_15_14;
  C_16_14 = (tmp&C_15_14)|(S_15_15&C_16_13);
  tmp = 1^C_16_14;
  S_16_15 = tmp^C_15_15;
  C_16_15 = (tmp&C_15_15)|(1&C_16_14);
  P = 0;
  P |= (S_5_0 & 1) << 5;
  P |= (S_6_0 & 1) << 6;
  P |= (S_7_0 & 1) << 7;
  P |= (S_8_0 & 1) << 8;
  P |= (S_9_0 & 1) << 9;
  P |= (S_10_0 & 1) << 10;
  P |= (S_11_0 & 1) << 11;
  P |= (S_12_0 & 1) << 12;
  P |= (S_13_0 & 1) << 13;
  P |= (S_14_0 & 1) << 14;
  P |= (S_15_0 & 1) << 15;
  P |= (S_16_0 & 1) << 16;
  P |= (S_16_1 & 1) << 17;
  P |= (S_16_2 & 1) << 18;
  P |= (S_16_3 & 1) << 19;
  P |= (S_16_4 & 1) << 20;
  P |= (S_16_5 & 1) << 21;
  P |= (S_16_6 & 1) << 22;
  P |= (S_16_7 & 1) << 23;
  P |= (S_16_8 & 1) << 24;
  P |= (S_16_9 & 1) << 25;
  P |= (S_16_10 & 1) << 26;
  P |= (S_16_11 & 1) << 27;
  P |= (S_16_12 & 1) << 28;
  P |= (S_16_13 & 1) << 29;
  P |= (S_16_14 & 1) << 30;
  P |= (S_16_15 & 1) << 31;
  return P;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 0.002 %
// MAE = 87012 
// WCE% = 0.011 %
// WCE = 458703 
// WCRE% = 6300.00 %
// EP% = 98.43 %
// MRE% = 0.22 %
// MSE = 12526.988e6 
// PDK45_PWR = 1.483 mW
// PDK45_AREA = 1935.9 um2
// PDK45_DELAY = 2.55 ns



int32_t evoapproxlib::evoapprox_t::mul16s_HFZ(int16_t A, int16_t B)
{
 uint32_t O;
 uint8_t n1040,n1007,n448,n504,n96,n562,n789,n97,n148,n1196,n1145,n94,n538,n539,n536,n537,n534,n95,n532,n533,n530,n531,n1041,n158,n1195,n879,n629,n159,n442,n788,n443,n375,n440,n441,O26,O14,n1279,n947,n1198,n1045,n939,n1076,n151,O4,n951,n1132,n85,n84,n408,n86,n81,n80,n83,n82,n402,n403,n400,n401,n89,n404,n405,n156,n1219,n658,n1226,n392,n393,n390,n391,n396,n397,n394,n395,n398,n399,n1027,n1218,n777,n240,n241,n242,n243,n244,n245,n246,n247,n248,n249,n1158,n941,n718,n719,n940,n499,n498,n329,n328,n495,n494,n497,n496,n491,n490,n493,n492,n811,n810,n813,n812,n815,n814,n817,n816,n819,n818,n1275,n944,n1273,O27,n407,n1025,n805,n955,n946,n602,n1154,n948,O30,n884,n1141,n424,n893,n864,n605,n662,n663,n660,n926,n666,n667,n664,n665,n143,n142,n668,n140,n929,n146,n145,n144,n74,n75,n76,n77,n70,n71,n72,n79,n1049,n865,n1098,n867,n860,n861,n862,n863,n780,n868,n869,n1019,n380,n1143,n866,n958,n1108,n1048,n1030,n1167,n689,n701,n1159,n700,n1161,n1078,n801,n703,n565,n564,n567,n566,n561,n560,n563,O8,n446,n447,n1194,n445,n569,n568,n1059,n1058,O1,n733,n1291,n1290,n734,n706,n735,n690,n785,n736,n1165,n708,n737,n1144,O15,n511,n1250,n779,O28,n1209,n352,n693,n692,n691,n798,n697,n696,n695,n694,n699,n606,n1204,n1123,n1122,n1121,n1120,n1127,n1126,n1125,n1124,n1093,n369,n1128,O17,n1073,n598,n721,n1055,n1018,n1258,n590,n1146,n592,n117,n594,n595,n596,n597,n363,n1212,n918,n919,O13,n362,n914,n915,n916,n917,n910,n911,n912,n913,n502,n360,n367,n357,n366,n626,n627,n624,n625,n622,n365,n189,n188,n187,n149,n185,n184,n183,n182,n181,n180,n968,n378,n749,n748,n219,n218,n217,n216,n215,n214,n213,n212,n211,n210,n1232,n1225,n1090,n368,n1220,n1221,n1222,n732,n966,n1197,n1028,n1229,n828,n829,n985,n984,n983,n982,n981,n980,n820,n821,n822,n823,O5,n825,n989,n827,n1097,n963,n546,n1191,n599,O2,n836,n132,n133,n130,n131,n136,n137,n134,n135,n138,n139,n1262,n1096,n962,n1013,n720,n1264,n623,n1054,n87,n528,n1099,n409,n591,n521,n520,n1091,n1267,n525,n524,n527,n526,O16,n1103,n1015,n1133,n1014,n1152,n1153,n1189,n964,n1150,n1188,n1102,n1151,n960,n406,O25,n92,n88,n415,n414,n417,n416,n411,n410,n413,n412,n796,n967,n794,n1155,n419,n418,n790,n1168,n98,n99,n1008,n1009,n1004,n1005,n90,n91,n1000,n1001,n1002,n1003,n518,n1074,n1183,n1179,n742,n991,n641,n1199,n389,n388,n515,n385,n384,n387,n386,n381,n578,n383,n382,n519,n1077,n510,n1138,n1169,O6,n253,n252,n251,n250,n257,n256,n255,n254,n709,n648,n259,n258,n649,n1062,n318,n319,n1187,n1063,n312,n313,n310,n311,n316,n317,n314,n315,n1268,n1269,n1061,n1052,n1085,O9,n1066,n355,n1263,n851,n1265,n1266,n1067,n1064,n1109,n1139,n1065,O22,n619,n176,n177,n174,n175,n172,n173,n170,n171,n1083,n1112,n178,n179,n899,n898,n952,n953,n770,n678,n956,n957,n675,n674,n677,n676,n671,n670,n673,n672,n954,n1050,O29,n772,n773,n799,n877,n891,n875,n874,n873,n872,n871,n547,n1215,n1214,n1217,n1211,n1210,n1213,n878,n1239,n892,n364,n895,n621,n894,n1135,n897,n1193,n885,n430,n896,n961,n1149,O23,n959,n1038,n459,n458,n1042,n1043,n1044,n628,n1046,n1047,n451,n450,n453,n452,n455,n454,n457,n456,n1286,n969,n1284,n1282,n1283,n1280,n1281,n999,n554,n1288,n1137,n1192,n883,n1032,O12,n716,n1237,n717,n714,n745,n715,n744,n712,n1012,O31,n747,n713,n1035,n1034,n1037,n746,n1051,n710,n358,n359,n356,n741,n354,n711,n420,n421,n350,n740,n612,n589,n683,n743,n583,n582,n581,n580,n587,n586,n585,n584,n793,n1224,n909,n908,n907,n906,n905,n904,n903,n902,n901,n900,O19,n1233,n431,n631,n630,n633,n632,n635,n634,n637,n636,n639,n638,n1223,n782,n610,n738,n739,n228,n229,n979,n353,n222,n223,n220,n221,n226,n227,n224,n225,n1251,n370,n1253,n1252,n1255,n1254,n1257,n371,n965,n1228,n617,n1114,n1231,n327,n839,n838,n1031,n326,n833,n832,n831,n830,n837,n325,n835,n834,n987,n324,n1110,n986,n323,n1111,n1230,n322,n644,n645,n157,n647,n129,n128,n642,n643,n125,n124,n127,n126,n121,n120,n123,n122,n1084,n616,n449,n1087,n1080,n1081,n1082,n615,n778,n1088,n1089,n974,n1118,n1119,n614,n1086,n824,n1236,n1278,n975,n1277,n702,n826,n1276,n1180,O21,n988,n1026,n1274,n348,n972,n1272,n1170,n1171,n1172,n1173,n1174,n465,n466,n467,n468,n469,n783,n1270,n444,n784,n787,n786,n1079,n460,n1020,n549,n461,n1071,n1070,O3,n544,n543,n462,n541,n540,n437,n463,n436,n464,n698,n435,n434,n1176,n558,n296,n433,n1177,n432,n781,n640,n792,n346,n305,n304,n307,n306,n301,n300,n268,n269,n266,n267,n264,n265,n262,n263,n260,n261,n425,n1256,n284,n285,n286,n287,n280,n281,n282,n283,n1247,n289,n608,n1259,n1011,n161,n160,n163,n162,n165,n164,n167,n166,n169,n168,n548,n1184,n512,n427,n767,n766,n765,n764,n763,n762,n761,n760,n600,n601,n603,n604,n545,n769,n768,n774,n516,n1075,n1021,n517,n938,n542,n842,n843,n840,n841,n846,n847,n844,n845,n1206,n1207,n848,n849,n1202,n1203,n1200,n1201,n925,n924,n927,n114,n115,n661,n110,n111,n112,n113,n921,n118,n119,n920,n613,n923,n1287,n970,n922,n503,n886,n500,n507,n705,n505,n887,n509,n508,n141,n529,n669,n1134,O7,n423,n882,n943,n1147,n928,n559,n704,n880,n881,n513,n1136,n791,n1260,n379,n707,n775,n1092,n361,n1289,n523,n349,n1148,n1024,n522,n1022,n1023,n439,n438,n341,n340,n343,n342,n345,n344,n347,n1029,n535,n945,n618,n1095,n208,n1094,n681,n209,n950,n1186,n609,n978,n1208,n1142,n932,n933,n930,n931,n936,n934,n935,n976,n236,n888,n977,n1166,n682,n206,n971,n235,n234,n237,n207,n231,n230,n232,n555,n239,n238,n973,n482,n483,n480,n481,n338,n339,n485,n334,n335,n488,n489,n330,n331,n332,n333,n806,n1243,n804,n1241,n802,n803,n1244,n1245,n1248,n1249,n808,n809,O20,n514,n556,n593,n1178,n876,n1016,O18,n557,n776,n729,n728,O0,n657,n656,n655,n654,n653,n652,n651,n650,n150,n486,n152,n153,n154,n155,n659,n487,n1105,n550,n484,n1104,n1261,n1107,n69,n68,n723,n1106,n722,n1101,n1205,n336,n1100,n551,n337,n303,n995,n727,n302,n889,n611,n726,n1156,n1238,n725,n724,n949,n552,n1242,O10,n807,n309,n1240,n308,n473,n472,n471,n470,n477,n476,n475,n474,n1185,n1069,n479,n478,n1181,n553,n1157,n1182,n1068,n579,n800,n429,n572,n573,n570,n571,n576,n577,n574,n575,n1227,n1130,n1235,n1190,n1234,n1116,n646,n1140,n620,n680,n1017,n870,n1036,n684,n685,n686,n687,n688,n428,n1117,n279,n278,n372,n373,n374,n1113,n376,n377,n271,n270,n273,n272,n275,n274,n277,n276,n1033,n1164,n730,n1163,n890,n426,n1162,n297,O11,n295,n294,n293,n292,n291,n290,n1039,n1160,n942,n299,n298,O24,n731,n797,n1115,n795,n198,n199,n607,n194,n195,n196,n197,n190,n191,n192,n193,n752,n753,n750,n751,n756,n757,n754,n755,n204,n205,n758,n759,n200,n201,n202,n203,n1131,n321,n994,n996,n997,n990,n858,n992,n993,n855,n854,n857,n856,n998,n850,n853,n852,n1057,n1056,n506,n1060,n320,n107,n106,n105,n104,n103,n102,n101,n100,n1053,n1006,n109,n108;
 O0=0;
 O1=0;
 O2=0;
 O3=0;
 O4=0;
 O5=0;
 O6=((B >> 3)&1)&((A >> 3)&1);
 n1000=((B >> 14)&1)&((A >> 9)&1);
 n1004=((B >> 15)&1)&((A >> 8)&1);
 n1006=((B >> 12)&1)&((A >> 11)&1);
 n1007=((B >> 11)&1)&((A >> 12)&1);
 n1008=((B >> 10)&1)&((A >> 13)&1);
 n1009=((B >> 9)&1)&((A >> 14)&1);
 n1029=((B >> 9)&1)&((A >> 15)&1);
 n1066=((B >> 15)&1)&((A >> 9)&1);
 n1067=((B >> 14)&1)&((A >> 10)&1);
 n1068=((B >> 13)&1)&((A >> 11)&1);
 n1069=((B >> 12)&1)&((A >> 12)&1);
 n1070=((B >> 11)&1)&((A >> 13)&1);
 n1071=((B >> 10)&1)&((A >> 14)&1);
 n1091=((B >> 10)&1)&((A >> 15)&1);
 n110=((B >> 5)&1)&((A >> 5)&1);
 n1113=((B >> 13)&1)&((A >> 12)&1);
 n112=((B >> 7)&1)&((A >> 3)&1);
 n1121=((B >> 14)&1)&((A >> 11)&1);
 n1125=((B >> 15)&1)&((A >> 10)&1);
 n1127=((B >> 12)&1)&((A >> 13)&1);
 n1128=((B >> 11)&1)&((A >> 14)&1);
 n113=((B >> 6)&1)&((A >> 4)&1);
 n114=((B >> 4)&1)&((A >> 6)&1);
 n1148=((B >> 11)&1)&((A >> 15)&1);
 n115=((B >> 3)&1)&((A >> 7)&1);
 n1171=((B >> 15)&1)&((A >> 11)&1);
 n1172=((B >> 14)&1)&((A >> 12)&1);
 n1173=((B >> 13)&1)&((A >> 13)&1);
 n1174=((B >> 12)&1)&((A >> 14)&1);
 n1194=((B >> 12)&1)&((A >> 15)&1);
 n1202=((B >> 13)&1)&((A >> 14)&1);
 n1210=((B >> 14)&1)&((A >> 13)&1);
 n1214=((B >> 15)&1)&((A >> 12)&1);
 n1235=((B >> 13)&1)&((A >> 15)&1);
 n1244=((B >> 15)&1)&((A >> 13)&1);
 n1245=((B >> 14)&1)&((A >> 14)&1);
 n1265=((B >> 14)&1)&((A >> 15)&1);
 n1269=((B >> 15)&1)&((A >> 14)&1);
 n1284=((B >> 15)&1)&((A >> 15)&1);
 n140=((B >> 6)&1)&((A >> 5)&1);
 n142=((B >> 8)&1)&((A >> 3)&1);
 n143=((B >> 7)&1)&((A >> 4)&1);
 n144=((B >> 5)&1)&((A >> 6)&1);
 n145=((B >> 4)&1)&((A >> 7)&1);
 n146=((B >> 3)&1)&((A >> 8)&1);
 n178=((B >> 7)&1)&((A >> 5)&1);
 n180=((B >> 9)&1)&((A >> 3)&1);
 n181=((B >> 8)&1)&((A >> 4)&1);
 n182=((B >> 6)&1)&((A >> 6)&1);
 n183=((B >> 5)&1)&((A >> 7)&1);
 n184=((B >> 4)&1)&((A >> 8)&1);
 n185=((B >> 3)&1)&((A >> 9)&1);
 n224=((B >> 8)&1)&((A >> 5)&1);
 n226=((B >> 10)&1)&((A >> 3)&1);
 n227=((B >> 9)&1)&((A >> 4)&1);
 n228=((B >> 7)&1)&((A >> 6)&1);
 n229=((B >> 6)&1)&((A >> 7)&1);
 n230=((B >> 5)&1)&((A >> 8)&1);
 n231=((B >> 4)&1)&((A >> 9)&1);
 n232=((B >> 3)&1)&((A >> 10)&1);
 n278=((B >> 9)&1)&((A >> 5)&1);
 n280=((B >> 11)&1)&((A >> 3)&1);
 n281=((B >> 10)&1)&((A >> 4)&1);
 n282=((B >> 8)&1)&((A >> 6)&1);
 n283=((B >> 7)&1)&((A >> 7)&1);
 n284=((B >> 6)&1)&((A >> 8)&1);
 n285=((B >> 5)&1)&((A >> 9)&1);
 n286=((B >> 4)&1)&((A >> 10)&1);
 n287=((B >> 3)&1)&((A >> 11)&1);
 n340=((B >> 10)&1)&((A >> 5)&1);
 n342=((B >> 12)&1)&((A >> 3)&1);
 n343=((B >> 11)&1)&((A >> 4)&1);
 n344=((B >> 9)&1)&((A >> 6)&1);
 n345=((B >> 8)&1)&((A >> 7)&1);
 n346=((B >> 7)&1)&((A >> 8)&1);
 n347=((B >> 6)&1)&((A >> 9)&1);
 n348=((B >> 5)&1)&((A >> 10)&1);
 n349=((B >> 4)&1)&((A >> 11)&1);
 n350=((B >> 3)&1)&((A >> 12)&1);
 n410=((B >> 11)&1)&((A >> 5)&1);
 n412=((B >> 13)&1)&((A >> 3)&1);
 n413=((B >> 12)&1)&((A >> 4)&1);
 n414=((B >> 10)&1)&((A >> 6)&1);
 n415=((B >> 9)&1)&((A >> 7)&1);
 n416=((B >> 8)&1)&((A >> 8)&1);
 n417=((B >> 7)&1)&((A >> 9)&1);
 n418=((B >> 6)&1)&((A >> 10)&1);
 n419=((B >> 5)&1)&((A >> 11)&1);
 n420=((B >> 4)&1)&((A >> 12)&1);
 n421=((B >> 3)&1)&((A >> 13)&1);
 n488=((B >> 12)&1)&((A >> 5)&1);
 n490=((B >> 14)&1)&((A >> 3)&1);
 n491=((B >> 13)&1)&((A >> 4)&1);
 n492=((B >> 11)&1)&((A >> 6)&1);
 n493=((B >> 10)&1)&((A >> 7)&1);
 n494=((B >> 9)&1)&((A >> 8)&1);
 n495=((B >> 8)&1)&((A >> 9)&1);
 n496=((B >> 7)&1)&((A >> 10)&1);
 n497=((B >> 6)&1)&((A >> 11)&1);
 n498=((B >> 5)&1)&((A >> 12)&1);
 n499=((B >> 4)&1)&((A >> 13)&1);
 n500=((B >> 3)&1)&((A >> 14)&1);
 n508=((B >> 3)&1)&((A >> 15)&1);
 n575=((B >> 13)&1)&((A >> 5)&1);
 n577=((B >> 15)&1)&((A >> 3)&1);
 n578=((B >> 14)&1)&((A >> 4)&1);
 n579=((B >> 12)&1)&((A >> 6)&1);
 n580=((B >> 11)&1)&((A >> 7)&1);
 n581=((B >> 10)&1)&((A >> 8)&1);
 n582=((B >> 9)&1)&((A >> 9)&1);
 n583=((B >> 8)&1)&((A >> 10)&1);
 n584=((B >> 7)&1)&((A >> 11)&1);
 n585=((B >> 6)&1)&((A >> 12)&1);
 n586=((B >> 5)&1)&((A >> 13)&1);
 n587=((B >> 4)&1)&((A >> 14)&1);
 n601=((B >> 4)&1)&((A >> 15)&1);
 n668=((B >> 14)&1)&((A >> 5)&1);
 n669=((B >> 15)&1)&((A >> 4)&1);
 n670=((B >> 13)&1)&((A >> 6)&1);
 n671=((B >> 12)&1)&((A >> 7)&1);
 n672=((B >> 11)&1)&((A >> 8)&1);
 n673=((B >> 10)&1)&((A >> 9)&1);
 n674=((B >> 9)&1)&((A >> 10)&1);
 n675=((B >> 8)&1)&((A >> 11)&1);
 n676=((B >> 7)&1)&((A >> 12)&1);
 n677=((B >> 6)&1)&((A >> 13)&1);
 n678=((B >> 5)&1)&((A >> 14)&1);
 n69=((B >> 4)&1)&((A >> 4)&1);
 n694=((B >> 5)&1)&((A >> 15)&1);
 n71=((B >> 3)&1)&((A >> 4)&1);
 n72=((B >> 4)&1)&((A >> 3)&1);
 n75=((B >> 3)&1)&((A >> 5)&1);
 n751=((B >> 13)&1)&((A >> 7)&1);
 n759=((B >> 14)&1)&((A >> 6)&1);
 n762=~(((A >> 5)&1)|((A >> 4)&1));
 n764=((B >> 12)&1)&((A >> 8)&1);
 n765=((B >> 11)&1)&((A >> 9)&1);
 n766=((B >> 10)&1)&((A >> 10)&1);
 n767=((B >> 9)&1)&((A >> 11)&1);
 n768=((B >> 8)&1)&((A >> 12)&1);
 n769=((B >> 7)&1)&((A >> 13)&1);
 n77=((B >> 5)&1)&((A >> 3)&1);
 n770=((B >> 6)&1)&((A >> 14)&1);
 n790=((B >> 6)&1)&((A >> 15)&1);
 n840=((B >> 13)&1)&((A >> 8)&1);
 n848=((B >> 14)&1)&((A >> 7)&1);
 n851=((B >> 15)&1)&((A >> 6)&1);
 n853=((B >> 12)&1)&((A >> 9)&1);
 n854=((B >> 11)&1)&((A >> 10)&1);
 n855=((B >> 10)&1)&((A >> 11)&1);
 n856=((B >> 9)&1)&((A >> 12)&1);
 n857=((B >> 8)&1)&((A >> 13)&1);
 n858=((B >> 7)&1)&((A >> 14)&1);
 n878=((B >> 7)&1)&((A >> 15)&1);
 n88=((B >> 4)&1)&((A >> 5)&1);
 n90=((B >> 6)&1)&((A >> 3)&1);
 n91=((B >> 5)&1)&((A >> 4)&1);
 n92=((B >> 3)&1)&((A >> 6)&1);
 n929=((B >> 15)&1)&((A >> 7)&1);
 n930=((B >> 14)&1)&((A >> 8)&1);
 n931=((B >> 13)&1)&((A >> 9)&1);
 n932=((B >> 12)&1)&((A >> 10)&1);
 n933=((B >> 11)&1)&((A >> 11)&1);
 n934=((B >> 10)&1)&((A >> 12)&1);
 n935=((B >> 9)&1)&((A >> 13)&1);
 n936=((B >> 8)&1)&((A >> 14)&1);
 n956=((B >> 8)&1)&((A >> 15)&1);
 n992=((B >> 13)&1)&((A >> 10)&1);
 n109=n91&n90;
 n111=n113^n112;
 n139=n113&n112;
 n141=n143^n142;
 n177=n143&n142;
 n179=n181^n180;
 n223=n181&n180;
 n225=n227^n226;
 n277=n227&n226;
 n279=n281^n280;
 n339=n281&n280;
 n341=n343^n342;
 n409=n343&n342;
 n411=n413^n412;
 n487=n413&n412;
 n489=n491^n490;
 n574=n491&n490;
 n576=~(n578^n577);
 n667=n578&~n577;
 n68=n69&O6;
 n70=~(n72|n71);
 n757=n668&n669;
 n76=n77^n69;
 n761=((B >> 15)&1)&~n762;
 n763=((A >> 5)&1)&n669;
 n87=n77&n69;
 n89=n91^n90;
 O7=~(n70|n68);
 n104=n88&n87;
 n105=n88&n89;
 n106=n89&n87;
 n108=~(n110^n109);
 n134=n110&n109;
 n135=n110&n111;
 n136=n111&n109;
 n138=~(n140^n139);
 n172=n140&n139;
 n173=n140&n141;
 n174=n141&n139;
 n176=~(n178^n177);
 n218=n178&n177;
 n219=n178&n179;
 n220=n179&n177;
 n222=~(n224^n223);
 n272=n224&n223;
 n273=n224&n225;
 n274=n225&n223;
 n276=~(n278^n277);
 n334=n278&n277;
 n335=n278&n279;
 n336=n279&n277;
 n338=~(n340^n339);
 n404=n340&n339;
 n405=n340&n341;
 n406=n341&n339;
 n408=~(n410^n409);
 n482=n410&n409;
 n483=n410&n411;
 n484=n411&n409;
 n486=~(n488^n487);
 n569=n488&n487;
 n570=n488&n489;
 n571=n489&n487;
 n573=~(n575^n574);
 n662=n575&n574;
 n663=n575&n576;
 n664=n576&n574;
 n666=~(n668^n667);
 n74=~(n75^n68);
 n756=n668&n667;
 n758=n669&n667;
 n760=~n763&n761;
 n82=n75&n68;
 n83=n75&n76;
 n84=n76&n68;
 n850=~(n851|n761);
 n852=((A >> 6)&1)&n761;
 n86=~(n88^n87);
 O8=~(n76^n74);
 n1003=~n929&n850;
 n103=~(n105|n104);
 n107=n111^n108;
 n133=~(n135|n134);
 n137=n141^n138;
 n171=~(n173|n172);
 n175=n179^n176;
 n217=~(n219|n218);
 n221=n225^n222;
 n271=~(n273|n272);
 n275=n279^n276;
 n333=~(n335|n334);
 n337=n341^n338;
 n403=~(n405|n404);
 n407=n411^n408;
 n481=~(n483|n482);
 n485=n489^n486;
 n568=~(n570|n569);
 n572=n576^n573;
 n661=~(n663|n662);
 n665=n669^n666;
 n755=~(n757|n756);
 n81=~(n83|n82);
 n846=n759&n760;
 n849=~(n852|n850);
 n85=n89^n86;
 n928=~(n929^n850);
 n1002=~n1004&n1003;
 n1005=((A >> 8)&1)&~n1003;
 n102=~n106&n103;
 n128=n114&~n107;
 n132=~n136&n133;
 n166=n144&~n137;
 n170=~n174&n171;
 n212=n182&~n175;
 n216=~n220&n217;
 n266=n228&~n221;
 n270=~n274&n271;
 n328=n282&~n275;
 n332=~n336&n333;
 n398=n344&~n337;
 n402=~n406&n403;
 n476=n414&~n407;
 n480=~n484&n481;
 n563=n492&~n485;
 n567=~n571&n568;
 n656=n579&~n572;
 n660=~n664&n661;
 n749=n670&~n665;
 n754=~n758&n755;
 n80=~n84&n81;
 n926=n848&n849;
 n98=n92&~n85;
 n998=n930&n928;
 n1001=~(n1005|n1002);
 n101=~(n107^n102);
 n1065=~(n1066^n1002);
 n1124=~n1066&n1002;
 n127=~(n107|n102);
 n129=n114&~n102;
 n131=~(n137^n132);
 n165=~(n137|n132);
 n167=n144&~n132;
 n169=~(n175^n170);
 n211=~(n175|n170);
 n213=n182&~n170;
 n215=~(n221^n216);
 n265=~(n221|n216);
 n267=n228&~n216;
 n269=~(n275^n270);
 n327=~(n275|n270);
 n329=n282&~n270;
 n331=~(n337^n332);
 n397=~(n337|n332);
 n399=n344&~n332;
 n401=~(n407^n402);
 n475=~(n407|n402);
 n477=n414&~n402;
 n479=~(n485^n480);
 n562=~(n485|n480);
 n564=n492&~n480;
 n566=~(n572^n567);
 n655=~(n572|n567);
 n657=n579&~n567;
 n659=~(n665^n660);
 n748=~(n665|n660);
 n750=n670&~n660;
 n753=n759^n754;
 n79=~(n85^n80);
 n845=n759&~n754;
 n847=n760&~n754;
 n97=~(n85|n80);
 n99=n92&~n80;
 O9=~(n92^n79);
 n100=n114^n101;
 n1063=n1000&n1001;
 n1119=n1067&n1065;
 n1123=~n1125&n1124;
 n1126=((A >> 10)&1)&~n1124;
 n126=~(n128|n127);
 n130=n144^n131;
 n164=~(n166|n165);
 n168=n182^n169;
 n210=~(n212|n211);
 n214=n228^n215;
 n264=~(n266|n265);
 n268=n282^n269;
 n326=~(n328|n327);
 n330=n344^n331;
 n396=~(n398|n397);
 n400=n414^n401;
 n474=~(n476|n475);
 n478=n492^n479;
 n561=~(n563|n562);
 n565=n579^n566;
 n654=~(n656|n655);
 n658=n670^n659;
 n747=~(n749|n748);
 n752=n760^n753;
 n844=~(n846|n845);
 n96=~(n98|n97);
 n1122=~(n1126|n1123);
 n1170=~(n1171^n1123);
 n1213=~n1171&n1123;
 n122=n115&~n100;
 n125=~n129&n126;
 n160=n145&~n130;
 n163=~n167&n164;
 n206=n183&~n168;
 n209=~n213&n210;
 n260=n229&~n214;
 n263=~n267&n264;
 n322=n283&~n268;
 n325=~n329&n326;
 n392=n345&~n330;
 n395=~n399&n396;
 n470=n415&~n400;
 n473=~n477&n474;
 n557=n493&~n478;
 n560=~n564&n561;
 n650=n580&~n565;
 n653=~n657&n654;
 n743=n671&~n658;
 n746=~n750&n747;
 n838=n751&~n752;
 n843=~n847&n844;
 n95=~n99&n96;
 n1168=n1121&n1122;
 n120=~(n100|n95);
 n1208=n1172&n1170;
 n121=n115&~n95;
 n1212=~n1214&n1213;
 n1215=((A >> 12)&1)&~n1213;
 n124=~(n130^n125);
 n158=~(n130|n125);
 n159=n145&~n125;
 n162=~(n168^n163);
 n204=~(n168|n163);
 n205=n183&~n163;
 n208=~(n214^n209);
 n258=~(n214|n209);
 n259=n229&~n209;
 n262=~(n268^n263);
 n320=~(n268|n263);
 n321=n283&~n263;
 n324=~(n330^n325);
 n390=~(n330|n325);
 n391=n345&~n325;
 n394=~(n400^n395);
 n468=~(n400|n395);
 n469=n415&~n395;
 n472=~(n478^n473);
 n555=~(n478|n473);
 n556=n493&~n473;
 n559=~(n565^n560);
 n648=~(n565|n560);
 n649=n580&~n560;
 n652=~(n658^n653);
 n741=~(n658|n653);
 n742=n671&~n653;
 n745=n751^n746;
 n837=n751&~n746;
 n839=~(n752|n746);
 n842=n848^n843;
 n925=n848&~n843;
 n927=n849&~n843;
 n94=~(n100^n95);
 O10=~(n115^n94);
 n119=~(n121|n120);
 n1211=~(n1215|n1212);
 n123=n145^n124;
 n1243=~(n1244^n1212);
 n1268=~n1244&n1212;
 n157=~(n159|n158);
 n161=n183^n162;
 n203=~(n205|n204);
 n207=n229^n208;
 n257=~(n259|n258);
 n261=n283^n262;
 n319=~(n321|n320);
 n323=n345^n324;
 n389=~(n391|n390);
 n393=n415^n394;
 n467=~(n469|n468);
 n471=n493^n472;
 n554=~(n556|n555);
 n558=n580^n559;
 n647=~(n649|n648);
 n651=n671^n652;
 n740=~(n742|n741);
 n744=~(n752^n745);
 n836=~(n838|n837);
 n841=n849^n842;
 n924=~(n926|n925);
 n118=~n122&n119;
 n1241=n1210&n1211;
 n1263=n1245&n1243;
 n1267=~n1269&n1268;
 n1270=((A >> 14)&1)&~n1268;
 n153=n146&~n123;
 n156=~n160&n157;
 n199=n184&~n161;
 n202=~n206&n203;
 n253=n230&~n207;
 n256=~n260&n257;
 n315=n284&~n261;
 n318=~n322&n319;
 n385=n346&~n323;
 n388=~n392&n389;
 n463=n416&~n393;
 n466=~n470&n467;
 n550=n494&~n471;
 n553=~n557&n554;
 n643=n581&~n558;
 n646=~n650&n647;
 n736=n672&~n651;
 n739=~n743&n740;
 n831=n764&~n744;
 n835=~n839&n836;
 n919=n840&~n841;
 n923=~n927&n924;
 n117=~(n123^n118);
 n1266=~(n1270|n1267);
 n1283=~(n1284^n1267);
 n1290=n1284&n1267;
 n151=~(n123|n118);
 n152=n146&~n118;
 n155=~(n161^n156);
 n197=~(n161|n156);
 n198=n184&~n156;
 n201=~(n207^n202);
 n251=~(n207|n202);
 n252=n230&~n202;
 n255=~(n261^n256);
 n313=~(n261|n256);
 n314=n284&~n256;
 n317=~(n323^n318);
 n383=~(n323|n318);
 n384=n346&~n318;
 n387=~(n393^n388);
 n461=~(n393|n388);
 n462=n416&~n388;
 n465=~(n471^n466);
 n548=~(n471|n466);
 n549=n494&~n466;
 n552=~(n558^n553);
 n641=~(n558|n553);
 n642=n581&~n553;
 n645=~(n651^n646);
 n734=~(n651|n646);
 n735=n672&~n646;
 n738=~(n744^n739);
 n830=~(n744|n739);
 n832=n764&~n739;
 n834=n840^n835;
 n918=n840&~n835;
 n920=~(n841|n835);
 n922=n928^n923;
 n997=n928&~n923;
 n999=n930&~n923;
 O11=~(n146^n117);
 n1281=~n1265&n1266;
 n150=~(n152|n151);
 n154=n184^n155;
 n196=~(n198|n197);
 n200=n230^n201;
 n250=~(n252|n251);
 n254=n284^n255;
 n312=~(n314|n313);
 n316=n346^n317;
 n382=~(n384|n383);
 n386=n416^n387;
 n460=~(n462|n461);
 n464=n494^n465;
 n547=~(n549|n548);
 n551=n581^n552;
 n640=~(n642|n641);
 n644=n672^n645;
 n733=~(n735|n734);
 n737=n764^n738;
 n829=~(n831|n830);
 n833=~(n841^n834);
 n917=~(n919|n918);
 n921=n930^n922;
 n996=~(n998|n997);
 n149=~n153&n150;
 n192=n185&~n154;
 n195=~n199&n196;
 n246=n231&~n200;
 n249=~n253&n250;
 n308=n285&~n254;
 n311=~n315&n312;
 n378=n347&~n316;
 n381=~n385&n382;
 n456=n417&~n386;
 n459=~n463&n460;
 n543=n495&~n464;
 n546=~n550&n547;
 n636=n582&~n551;
 n639=~n643&n640;
 n729=n673&~n644;
 n732=~n736&n733;
 n824=n765&~n737;
 n828=~n832&n829;
 n912=n853&~n833;
 n916=~n920&n917;
 n990=n931&~n921;
 n995=~n999&n996;
 n1062=n1000&~n995;
 n1064=n1001&~n995;
 n148=~(n154^n149);
 n190=~(n154|n149);
 n191=n185&~n149;
 n194=~(n200^n195);
 n244=~(n200|n195);
 n245=n231&~n195;
 n248=~(n254^n249);
 n306=~(n254|n249);
 n307=n285&~n249;
 n310=~(n316^n311);
 n376=~(n316|n311);
 n377=n347&~n311;
 n380=~(n386^n381);
 n454=~(n386|n381);
 n455=n417&~n381;
 n458=~(n464^n459);
 n541=~(n464|n459);
 n542=n495&~n459;
 n545=~(n551^n546);
 n634=~(n551|n546);
 n635=n582&~n546;
 n638=~(n644^n639);
 n727=~(n644|n639);
 n728=n673&~n639;
 n731=~(n737^n732);
 n823=~(n737|n732);
 n825=n765&~n732;
 n827=~(n833^n828);
 n911=~(n833|n828);
 n913=n853&~n828;
 n915=~(n921^n916);
 n989=~(n921|n916);
 n991=n931&~n916;
 n994=n1000^n995;
 O12=~(n185^n148);
 n1061=~(n1063|n1062);
 n189=~(n191|n190);
 n193=n231^n194;
 n243=~(n245|n244);
 n247=n285^n248;
 n305=~(n307|n306);
 n309=n347^n310;
 n375=~(n377|n376);
 n379=n417^n380;
 n453=~(n455|n454);
 n457=n495^n458;
 n540=~(n542|n541);
 n544=n582^n545;
 n633=~(n635|n634);
 n637=n673^n638;
 n726=~(n728|n727);
 n730=n765^n731;
 n822=~(n824|n823);
 n826=n853^n827;
 n910=~(n912|n911);
 n914=n931^n915;
 n988=~(n990|n989);
 n993=n1001^n994;
 n1056=n992&~n993;
 n1060=~n1064&n1061;
 n188=~n192&n189;
 n239=n232&~n193;
 n242=~n246&n243;
 n301=n286&~n247;
 n304=~n308&n305;
 n371=n348&~n309;
 n374=~n378&n375;
 n449=n418&~n379;
 n452=~n456&n453;
 n536=n496&~n457;
 n539=~n543&n540;
 n629=n583&~n544;
 n632=~n636&n633;
 n722=n674&~n637;
 n725=~n729&n726;
 n817=n766&~n730;
 n821=~n825&n822;
 n905=n854&~n826;
 n909=~n913&n910;
 n983=n932&~n914;
 n987=~n991&n988;
 n1055=n992&~n987;
 n1057=~(n993|n987);
 n1059=n1065^n1060;
 n1118=n1065&~n1060;
 n1120=n1067&~n1060;
 n187=~(n193^n188);
 n237=~(n193|n188);
 n238=n232&~n188;
 n241=~(n247^n242);
 n299=~(n247|n242);
 n300=n286&~n242;
 n303=~(n309^n304);
 n369=~(n309|n304);
 n370=n348&~n304;
 n373=~(n379^n374);
 n447=~(n379|n374);
 n448=n418&~n374;
 n451=~(n457^n452);
 n534=~(n457|n452);
 n535=n496&~n452;
 n538=~(n544^n539);
 n627=~(n544|n539);
 n628=n583&~n539;
 n631=~(n637^n632);
 n720=~(n637|n632);
 n721=n674&~n632;
 n724=~(n730^n725);
 n816=~(n730|n725);
 n818=n766&~n725;
 n820=~(n826^n821);
 n904=~(n826|n821);
 n906=n854&~n821;
 n908=~(n914^n909);
 n982=~(n914|n909);
 n984=n932&~n909;
 n986=n992^n987;
 O13=~(n232^n187);
 n1054=~(n1056|n1055);
 n1058=n1067^n1059;
 n1117=~(n1119|n1118);
 n236=~(n238|n237);
 n240=n286^n241;
 n298=~(n300|n299);
 n302=n348^n303;
 n368=~(n370|n369);
 n372=n418^n373;
 n446=~(n448|n447);
 n450=n496^n451;
 n533=~(n535|n534);
 n537=n583^n538;
 n626=~(n628|n627);
 n630=n674^n631;
 n719=~(n721|n720);
 n723=n766^n724;
 n815=~(n817|n816);
 n819=n854^n820;
 n903=~(n905|n904);
 n907=n932^n908;
 n981=~(n983|n982);
 n985=~(n993^n986);
 n1049=n1006&~n985;
 n1053=~n1057&n1054;
 n1111=n1068&~n1058;
 n1116=~n1120&n1117;
 n235=~n239&n236;
 n294=n287&~n240;
 n297=~n301&n298;
 n364=n349&~n302;
 n367=~n371&n368;
 n442=n419&~n372;
 n445=~n449&n446;
 n529=n497&~n450;
 n532=~n536&n533;
 n622=n584&~n537;
 n625=~n629&n626;
 n715=n675&~n630;
 n718=~n722&n719;
 n810=n767&~n723;
 n814=~n818&n815;
 n898=n855&~n819;
 n902=~n906&n903;
 n976=n933&~n907;
 n980=~n984&n981;
 n1048=~(n985|n980);
 n1050=n1006&~n980;
 n1052=~(n1058^n1053);
 n1110=~(n1058|n1053);
 n1112=n1068&~n1053;
 n1115=n1121^n1116;
 n1167=n1121&~n1116;
 n1169=n1122&~n1116;
 n234=~(n240^n235);
 n292=~(n240|n235);
 n293=n287&~n235;
 n296=~(n302^n297);
 n362=~(n302|n297);
 n363=n349&~n297;
 n366=~(n372^n367);
 n440=~(n372|n367);
 n441=n419&~n367;
 n444=~(n450^n445);
 n527=~(n450|n445);
 n528=n497&~n445;
 n531=~(n537^n532);
 n620=~(n537|n532);
 n621=n584&~n532;
 n624=~(n630^n625);
 n713=~(n630|n625);
 n714=n675&~n625;
 n717=~(n723^n718);
 n809=~(n723|n718);
 n811=n767&~n718;
 n813=~(n819^n814);
 n897=~(n819|n814);
 n899=n855&~n814;
 n901=~(n907^n902);
 n975=~(n907|n902);
 n977=n933&~n902;
 n979=~(n985^n980);
 O14=~(n287^n234);
 n1047=~(n1049|n1048);
 n1051=n1068^n1052;
 n1109=~(n1111|n1110);
 n1114=n1122^n1115;
 n1166=~(n1168|n1167);
 n291=~(n293|n292);
 n295=n349^n296;
 n361=~(n363|n362);
 n365=n419^n366;
 n439=~(n441|n440);
 n443=n497^n444;
 n526=~(n528|n527);
 n530=n584^n531;
 n619=~(n621|n620);
 n623=n675^n624;
 n712=~(n714|n713);
 n716=n767^n717;
 n808=~(n810|n809);
 n812=n855^n813;
 n896=~(n898|n897);
 n900=n933^n901;
 n974=~(n976|n975);
 n978=n1006^n979;
 n1042=n1007&~n978;
 n1046=~n1050&n1047;
 n1104=n1069&~n1051;
 n1108=~n1112&n1109;
 n1161=n1113&~n1114;
 n1165=~n1169&n1166;
 n290=~n294&n291;
 n357=n350&~n295;
 n360=~n364&n361;
 n435=n420&~n365;
 n438=~n442&n439;
 n522=n498&~n443;
 n525=~n529&n526;
 n615=n585&~n530;
 n618=~n622&n619;
 n708=n676&~n623;
 n711=~n715&n712;
 n803=n768&~n716;
 n807=~n811&n808;
 n891=n856&~n812;
 n895=~n899&n896;
 n969=n934&~n900;
 n973=~n977&n974;
 n1041=~(n978|n973);
 n1043=n1007&~n973;
 n1045=~(n1051^n1046);
 n1103=~(n1051|n1046);
 n1105=n1069&~n1046;
 n1107=n1113^n1108;
 n1160=n1113&~n1108;
 n1162=~(n1114|n1108);
 n1164=n1170^n1165;
 n1207=n1170&~n1165;
 n1209=n1172&~n1165;
 n289=~(n295^n290);
 n355=~(n295|n290);
 n356=n350&~n290;
 n359=~(n365^n360);
 n433=~(n365|n360);
 n434=n420&~n360;
 n437=~(n443^n438);
 n520=~(n443|n438);
 n521=n498&~n438;
 n524=~(n530^n525);
 n613=~(n530|n525);
 n614=n585&~n525;
 n617=~(n623^n618);
 n706=~(n623|n618);
 n707=n676&~n618;
 n710=~(n716^n711);
 n802=~(n716|n711);
 n804=n768&~n711;
 n806=~(n812^n807);
 n890=~(n812|n807);
 n892=n856&~n807;
 n894=~(n900^n895);
 n968=~(n900|n895);
 n970=n934&~n895;
 n972=~(n978^n973);
 O15=~(n350^n289);
 n1040=~(n1042|n1041);
 n1044=n1069^n1045;
 n1102=~(n1104|n1103);
 n1106=~(n1114^n1107);
 n1159=~(n1161|n1160);
 n1163=n1172^n1164;
 n1206=~(n1208|n1207);
 n354=~(n356|n355);
 n358=n420^n359;
 n432=~(n434|n433);
 n436=n498^n437;
 n519=~(n521|n520);
 n523=n585^n524;
 n612=~(n614|n613);
 n616=n676^n617;
 n705=~(n707|n706);
 n709=n768^n710;
 n801=~(n803|n802);
 n805=n856^n806;
 n889=~(n891|n890);
 n893=n934^n894;
 n967=~(n969|n968);
 n971=n1007^n972;
 n1035=n1008&~n971;
 n1039=~n1043&n1040;
 n1097=n1070&~n1044;
 n1101=~n1105&n1102;
 n1154=n1127&~n1106;
 n1158=~n1162&n1159;
 n1200=n1173&~n1163;
 n1205=~n1209&n1206;
 n353=~n357&n354;
 n428=n421&~n358;
 n431=~n435&n432;
 n515=n499&~n436;
 n518=~n522&n519;
 n608=n586&~n523;
 n611=~n615&n612;
 n701=n677&~n616;
 n704=~n708&n705;
 n796=n769&~n709;
 n800=~n804&n801;
 n884=n857&~n805;
 n888=~n892&n889;
 n962=n935&~n893;
 n966=~n970&n967;
 n1034=~(n971|n966);
 n1036=n1008&~n966;
 n1038=~(n1044^n1039);
 n1096=~(n1044|n1039);
 n1098=n1070&~n1039;
 n1100=~(n1106^n1101);
 n1153=~(n1106|n1101);
 n1155=n1127&~n1101;
 n1157=~(n1163^n1158);
 n1199=~(n1163|n1158);
 n1201=n1173&~n1158;
 n1204=n1210^n1205;
 n1240=n1210&~n1205;
 n1242=n1211&~n1205;
 n352=~(n358^n353);
 n426=~(n358|n353);
 n427=n421&~n353;
 n430=~(n436^n431);
 n513=~(n436|n431);
 n514=n499&~n431;
 n517=~(n523^n518);
 n606=~(n523|n518);
 n607=n586&~n518;
 n610=~(n616^n611);
 n699=~(n616|n611);
 n700=n677&~n611;
 n703=~(n709^n704);
 n795=~(n709|n704);
 n797=n769&~n704;
 n799=~(n805^n800);
 n883=~(n805|n800);
 n885=n857&~n800;
 n887=~(n893^n888);
 n961=~(n893|n888);
 n963=n935&~n888;
 n965=~(n971^n966);
 O16=~(n421^n352);
 n1033=~(n1035|n1034);
 n1037=n1070^n1038;
 n1095=~(n1097|n1096);
 n1099=n1127^n1100;
 n1152=~(n1154|n1153);
 n1156=n1173^n1157;
 n1198=~(n1200|n1199);
 n1203=n1211^n1204;
 n1239=~(n1241|n1240);
 n425=~(n427|n426);
 n429=n499^n430;
 n512=~(n514|n513);
 n516=n586^n517;
 n605=~(n607|n606);
 n609=n677^n610;
 n698=~(n700|n699);
 n702=n769^n703;
 n794=~(n796|n795);
 n798=n857^n799;
 n882=~(n884|n883);
 n886=n935^n887;
 n960=~(n962|n961);
 n964=n1008^n965;
 n1027=n1009&~n964;
 n1032=~n1036&n1033;
 n1089=n1071&~n1037;
 n1094=~n1098&n1095;
 n1146=n1128&~n1099;
 n1151=~n1155&n1152;
 n1192=n1174&~n1156;
 n1197=~n1201&n1198;
 n1233=n1202&~n1203;
 n1238=~n1242&n1239;
 n424=~n428&n425;
 n507=n500&~n429;
 n511=~n515&n512;
 n600=n587&~n516;
 n604=~n608&n605;
 n693=n678&~n609;
 n697=~n701&n698;
 n788=n770&~n702;
 n793=~n797&n794;
 n876=n858&~n798;
 n881=~n885&n882;
 n954=n936&~n886;
 n959=~n963&n960;
 n1026=~(n964|n959);
 n1028=n1009&~n959;
 n1031=~(n1037^n1032);
 n1088=~(n1037|n1032);
 n1090=n1071&~n1032;
 n1093=~(n1099^n1094);
 n1145=~(n1099|n1094);
 n1147=n1128&~n1094;
 n1150=~(n1156^n1151);
 n1191=~(n1156|n1151);
 n1193=n1174&~n1151;
 n1196=n1202^n1197;
 n1232=n1202&~n1197;
 n1234=~(n1203|n1197);
 n1237=n1243^n1238;
 n1262=n1243&~n1238;
 n1264=n1245&~n1238;
 n423=~(n429^n424);
 n505=~(n429|n424);
 n506=n500&~n424;
 n510=~(n516^n511);
 n598=~(n516|n511);
 n599=n587&~n511;
 n603=~(n609^n604);
 n691=~(n609|n604);
 n692=n678&~n604;
 n696=~(n702^n697);
 n787=~(n702|n697);
 n789=n770&~n697;
 n792=~(n798^n793);
 n875=~(n798|n793);
 n877=n858&~n793;
 n880=~(n886^n881);
 n953=~(n886|n881);
 n955=n936&~n881;
 n958=~(n964^n959);
 O17=~(n500^n423);
 n1025=~(n1027|n1026);
 n1030=n1071^n1031;
 n1087=~(n1089|n1088);
 n1092=n1128^n1093;
 n1144=~(n1146|n1145);
 n1149=n1174^n1150;
 n1190=~(n1192|n1191);
 n1195=~(n1203^n1196);
 n1231=~(n1233|n1232);
 n1236=n1245^n1237;
 n1261=~(n1263|n1262);
 n504=~(n506|n505);
 n509=n587^n510;
 n597=~(n599|n598);
 n602=n678^n603;
 n690=~(n692|n691);
 n695=n770^n696;
 n786=~(n788|n787);
 n791=n858^n792;
 n874=~(n876|n875);
 n879=n936^n880;
 n952=~(n954|n953);
 n957=n1009^n958;
 n1020=~(n956|n957);
 n1024=~n1028&n1025;
 n1082=~(n1029|n1030);
 n1086=~n1090&n1087;
 n1139=~(n1091|n1092);
 n1143=~n1147&n1144;
 n1185=~(n1148|n1149);
 n1189=~n1193&n1190;
 n1226=~(n1194|n1195);
 n1230=~n1234&n1231;
 n1256=~(n1235|n1236);
 n1260=~n1264&n1261;
 n503=~n507&n504;
 n592=~(n508|n509);
 n596=~n600&n597;
 n685=~(n601|n602);
 n689=~n693&n690;
 n781=~(n694|n695);
 n785=~n789&n786;
 n869=~(n790|n791);
 n873=~n877&n874;
 n947=~(n878|n879);
 n951=~n955&n952;
 n1019=~(n956|n951);
 n1021=~(n957|n951);
 n1023=~(n1029^n1024);
 n1081=~(n1029|n1024);
 n1083=~(n1030|n1024);
 n1085=~(n1091^n1086);
 n1138=~(n1091|n1086);
 n1140=~(n1092|n1086);
 n1142=~(n1148^n1143);
 n1184=~(n1148|n1143);
 n1186=~(n1149|n1143);
 n1188=~(n1194^n1189);
 n1225=~(n1194|n1189);
 n1227=~(n1195|n1189);
 n1229=~(n1235^n1230);
 n1255=~(n1235|n1230);
 n1257=~(n1236|n1230);
 n1259=~(n1265^n1260);
 n1280=~(n1265|n1260);
 n1282=n1266&~n1260;
 n502=~(n508^n503);
 n591=~(n508|n503);
 n593=~(n509|n503);
 n595=~(n601^n596);
 n684=~(n601|n596);
 n686=~(n602|n596);
 n688=~(n694^n689);
 n780=~(n694|n689);
 n782=~(n695|n689);
 n784=~(n790^n785);
 n868=~(n790|n785);
 n870=~(n791|n785);
 n872=~(n878^n873);
 n946=~(n878|n873);
 n948=~(n879|n873);
 n950=~(n956^n951);
 O18=n509^n502;
 n1018=~(n1020|n1019);
 n1022=~(n1030^n1023);
 n1080=~(n1082|n1081);
 n1084=~(n1092^n1085);
 n1137=~(n1139|n1138);
 n1141=~(n1149^n1142);
 n1183=~(n1185|n1184);
 n1187=~(n1195^n1188);
 n1224=~(n1226|n1225);
 n1228=~(n1236^n1229);
 n1254=~(n1256|n1255);
 n1258=n1266^n1259;
 n1279=~(n1281|n1280);
 n590=~(n592|n591);
 n594=~(n602^n595);
 n683=~(n685|n684);
 n687=~(n695^n688);
 n779=~(n781|n780);
 n783=~(n791^n784);
 n867=~(n869|n868);
 n871=~(n879^n872);
 n945=~(n947|n946);
 n949=~(n957^n950);
 n1017=~n1021&n1018;
 n1079=~n1083&n1080;
 n1136=~n1140&n1137;
 n1182=~n1186&n1183;
 n1223=~n1227&n1224;
 n1253=~n1257&n1254;
 n1278=~n1282&n1279;
 n589=~n593&n590;
 n682=~n686&n683;
 n778=~n782&n779;
 n866=~n870&n867;
 n944=~n948&n945;
 O19=n594^n589;
 n1015=~(n949|n944);
 n1077=~(n1022|n1017);
 n1134=~(n1084|n1079);
 n1180=~(n1141|n1136);
 n1221=~(n1187|n1182);
 n1251=~(n1228|n1223);
 n1276=~(n1258|n1253);
 n1289=~(n1283|n1278);
 n680=~(n594|n589);
 n681=~(n687^n682);
 n776=~(n687|n682);
 n864=~(n783|n778);
 n942=~(n871|n866);
 O20=~(n681^n680);
 n1288=~(n1290|n1289);
 n775=~n687&n680;
 n777=~n682&n680;
 n774=~(n776|n775);
 n773=~n777&n774;
 n772=~(n778^n773);
 n863=~(n778|n773);
 n865=~(n783|n773);
 O21=n783^n772;
 n862=~(n864|n863);
 n861=~n865&n862;
 n860=~(n866^n861);
 n941=~(n866|n861);
 n943=~(n871|n861);
 O22=n871^n860;
 n940=~(n942|n941);
 n939=~n943&n940;
 n1014=~(n944|n939);
 n1016=~(n949|n939);
 n938=~(n944^n939);
 O23=n949^n938;
 n1013=~(n1015|n1014);
 n1012=~n1016&n1013;
 n1011=~(n1017^n1012);
 n1076=~(n1017|n1012);
 n1078=~(n1022|n1012);
 O24=n1022^n1011;
 n1075=~(n1077|n1076);
 n1074=~n1078&n1075;
 n1073=~(n1079^n1074);
 n1133=~(n1079|n1074);
 n1135=~(n1084|n1074);
 O25=n1084^n1073;
 n1132=~(n1134|n1133);
 n1131=~n1135&n1132;
 n1130=~(n1136^n1131);
 n1179=~(n1136|n1131);
 n1181=~(n1141|n1131);
 O26=n1141^n1130;
 n1178=~(n1180|n1179);
 n1177=~n1181&n1178;
 n1176=~(n1182^n1177);
 n1220=~(n1182|n1177);
 n1222=~(n1187|n1177);
 O27=n1187^n1176;
 n1219=~(n1221|n1220);
 n1218=~n1222&n1219;
 n1217=~(n1223^n1218);
 n1250=~(n1223|n1218);
 n1252=~(n1228|n1218);
 O28=n1228^n1217;
 n1249=~(n1251|n1250);
 n1248=~n1252&n1249;
 n1247=~(n1253^n1248);
 n1275=~(n1253|n1248);
 n1277=~(n1258|n1248);
 O29=n1258^n1247;
 n1274=~(n1276|n1275);
 n1273=~n1277&n1274;
 n1272=~(n1278^n1273);
 n1287=~(n1278|n1273);
 n1291=~(n1283|n1273);
 O30=n1283^n1272;
 n1286=n1288&~n1287;
 O31=~n1291&n1286;
 O = (O0 << 0)|(O1 << 1)|(O2 << 2)|(O3 << 3)|(O4 << 4)|(O5 << 5)|(O6 << 6)|(O7 << 7)|(O8 << 8)|(O9 << 9)|(O10 << 10)|(O11 << 11)|(O12 << 12)|(O13 << 13)|(O14 << 14)|(O15 << 15)|(O16 << 16)|(O17 << 17)|(O18 << 18)|(O19 << 19)|(O20 << 20)|(O21 << 21)|(O22 << 22)|(O23 << 23)|(O24 << 24)|(O25 << 25)|(O26 << 26)|(O27 << 27)|(O28 << 28)|(O29 << 29)|(O30 << 30)|(O31 << 31);
 return O;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.012 %
// MAE = 516096 
// WCE% = 0.048 %
// WCE = 2064384 
// WCRE% = 6300.00 %
// EP% = 98.44 %
// MRE% = 1.06 %
// MSE = 47727.824e7 
// PDK45_PWR = 1.396 mW
// PDK45_AREA = 1932.6 um2
// PDK45_DELAY = 2.57 ns



int32_t evoapproxlib::evoapprox_t::mul16s_GAT(int16_t A, int16_t B)
{
  int32_t P, P_;
  uint16_t tmp, C_10_0,C_10_1,C_10_10,C_10_11,C_10_12,C_10_13,C_10_14,C_10_15,C_10_2,C_10_3,C_10_4,C_10_5,C_10_6,C_10_7,C_10_8,C_10_9,C_11_0,C_11_1,C_11_10,C_11_11,C_11_12,C_11_13,C_11_14,C_11_15,C_11_2,C_11_3,C_11_4,C_11_5,C_11_6,C_11_7,C_11_8,C_11_9,C_12_0,C_12_1,C_12_10,C_12_11,C_12_12,C_12_13,C_12_14,C_12_15,C_12_2,C_12_3,C_12_4,C_12_5,C_12_6,C_12_7,C_12_8,C_12_9,C_13_0,C_13_1,C_13_10,C_13_11,C_13_12,C_13_13,C_13_14,C_13_15,C_13_2,C_13_3,C_13_4,C_13_5,C_13_6,C_13_7,C_13_8,C_13_9,C_14_0,C_14_1,C_14_10,C_14_11,C_14_12,C_14_13,C_14_14,C_14_15,C_14_2,C_14_3,C_14_4,C_14_5,C_14_6,C_14_7,C_14_8,C_14_9,C_15_0,C_15_1,C_15_10,C_15_11,C_15_12,C_15_13,C_15_14,C_15_15,C_15_2,C_15_3,C_15_4,C_15_5,C_15_6,C_15_7,C_15_8,C_15_9,C_16_0,C_16_1,C_16_10,C_16_11,C_16_12,C_16_13,C_16_14,C_16_15,C_16_2,C_16_3,C_16_4,C_16_5,C_16_6,C_16_7,C_16_8,C_16_9,C_6_15,C_6_9,C_7_0,C_7_1,C_7_10,C_7_11,C_7_12,C_7_13,C_7_14,C_7_15,C_7_2,C_7_3,C_7_4,C_7_5,C_7_6,C_7_7,C_7_8,C_7_9,C_8_0,C_8_1,C_8_10,C_8_11,C_8_12,C_8_13,C_8_14,C_8_15,C_8_2,C_8_3,C_8_4,C_8_5,C_8_6,C_8_7,C_8_8,C_8_9,C_9_0,C_9_1,C_9_10,C_9_11,C_9_12,C_9_13,C_9_14,C_9_15,C_9_2,C_9_3,C_9_4,C_9_5,C_9_6,C_9_7,C_9_8,C_9_9,S_0_15,S_10_0,S_10_1,S_10_10,S_10_11,S_10_12,S_10_13,S_10_14,S_10_15,S_10_2,S_10_3,S_10_4,S_10_5,S_10_6,S_10_7,S_10_8,S_10_9,S_11_0,S_11_1,S_11_10,S_11_11,S_11_12,S_11_13,S_11_14,S_11_15,S_11_2,S_11_3,S_11_4,S_11_5,S_11_6,S_11_7,S_11_8,S_11_9,S_12_0,S_12_1,S_12_10,S_12_11,S_12_12,S_12_13,S_12_14,S_12_15,S_12_2,S_12_3,S_12_4,S_12_5,S_12_6,S_12_7,S_12_8,S_12_9,S_13_0,S_13_1,S_13_10,S_13_11,S_13_12,S_13_13,S_13_14,S_13_15,S_13_2,S_13_3,S_13_4,S_13_5,S_13_6,S_13_7,S_13_8,S_13_9,S_14_0,S_14_1,S_14_10,S_14_11,S_14_12,S_14_13,S_14_14,S_14_15,S_14_2,S_14_3,S_14_4,S_14_5,S_14_6,S_14_7,S_14_8,S_14_9,S_15_0,S_15_1,S_15_10,S_15_11,S_15_12,S_15_13,S_15_14,S_15_15,S_15_2,S_15_3,S_15_4,S_15_5,S_15_6,S_15_7,S_15_8,S_15_9,S_16_0,S_16_1,S_16_10,S_16_11,S_16_12,S_16_13,S_16_14,S_16_15,S_16_2,S_16_3,S_16_4,S_16_5,S_16_6,S_16_7,S_16_8,S_16_9,S_1_14,S_2_13,S_3_12,S_4_11,S_5_10,S_6_0,S_6_1,S_6_10,S_6_11,S_6_12,S_6_13,S_6_14,S_6_15,S_6_2,S_6_3,S_6_4,S_6_5,S_6_6,S_6_7,S_6_8,S_6_9,S_7_0,S_7_1,S_7_10,S_7_11,S_7_12,S_7_13,S_7_14,S_7_15,S_7_2,S_7_3,S_7_4,S_7_5,S_7_6,S_7_7,S_7_8,S_7_9,S_8_0,S_8_1,S_8_10,S_8_11,S_8_12,S_8_13,S_8_14,S_8_15,S_8_2,S_8_3,S_8_4,S_8_5,S_8_6,S_8_7,S_8_8,S_8_9,S_9_0,S_9_1,S_9_10,S_9_11,S_9_12,S_9_13,S_9_14,S_9_15,S_9_2,S_9_3,S_9_4,S_9_5,S_9_6,S_9_7,S_9_8,S_9_9;
  S_0_15 = 1;
  S_1_14 = 1;
  S_2_13 = 1;
  S_3_12 = 1;
  S_4_11 = 1;
  S_5_10 = 1;
  S_6_0 = (((A>>6)&1) & ((B>>0)&1));
  S_6_1 = (((A>>6)&1) & ((B>>1)&1));
  S_6_2 = (((A>>6)&1) & ((B>>2)&1));
  S_6_3 = (((A>>6)&1) & ((B>>3)&1));
  S_6_4 = (((A>>6)&1) & ((B>>4)&1));
  S_6_5 = (((A>>6)&1) & ((B>>5)&1));
  S_6_6 = (((A>>6)&1) & ((B>>6)&1));
  S_6_7 = (((A>>6)&1) & ((B>>7)&1));
  S_6_8 = (((A>>6)&1) & ((B>>8)&1));
  S_6_9 = S_5_10^(((A>>6)&1) & ((B>>9)&1));
  C_6_9 = S_5_10&(((A>>6)&1) & ((B>>9)&1));
  S_6_10 = (((A>>6)&1) & ((B>>10)&1));
  S_6_11 = (((A>>6)&1) & ((B>>11)&1));
  S_6_12 = (((A>>6)&1) & ((B>>12)&1));
  S_6_13 = (((A>>6)&1) & ((B>>13)&1));
  S_6_14 = (((A>>6)&1) & ((B>>14)&1));
  S_6_15 = 1^(((((A>>6)&1) & ((B>>15)&1)))^1);
  C_6_15 = 1&(((((A>>6)&1) & ((B>>15)&1)))^1);
  S_7_0 = S_6_1^(((A>>7)&1) & ((B>>0)&1));
  C_7_0 = S_6_1&(((A>>7)&1) & ((B>>0)&1));
  S_7_1 = S_6_2^(((A>>7)&1) & ((B>>1)&1));
  C_7_1 = S_6_2&(((A>>7)&1) & ((B>>1)&1));
  S_7_2 = S_6_3^(((A>>7)&1) & ((B>>2)&1));
  C_7_2 = S_6_3&(((A>>7)&1) & ((B>>2)&1));
  S_7_3 = S_6_4^(((A>>7)&1) & ((B>>3)&1));
  C_7_3 = S_6_4&(((A>>7)&1) & ((B>>3)&1));
  S_7_4 = S_6_5^(((A>>7)&1) & ((B>>4)&1));
  C_7_4 = S_6_5&(((A>>7)&1) & ((B>>4)&1));
  S_7_5 = S_6_6^(((A>>7)&1) & ((B>>5)&1));
  C_7_5 = S_6_6&(((A>>7)&1) & ((B>>5)&1));
  S_7_6 = S_6_7^(((A>>7)&1) & ((B>>6)&1));
  C_7_6 = S_6_7&(((A>>7)&1) & ((B>>6)&1));
  S_7_7 = S_6_8^(((A>>7)&1) & ((B>>7)&1));
  C_7_7 = S_6_8&(((A>>7)&1) & ((B>>7)&1));
  S_7_8 = S_6_9^(((A>>7)&1) & ((B>>8)&1));
  C_7_8 = S_6_9&(((A>>7)&1) & ((B>>8)&1));
  tmp = S_6_10^C_6_9;
  S_7_9 = tmp^(((A>>7)&1) & ((B>>9)&1));
  C_7_9 = (tmp&(((A>>7)&1) & ((B>>9)&1)))|(S_6_10&C_6_9);
  S_7_10 = S_6_11^(((A>>7)&1) & ((B>>10)&1));
  C_7_10 = S_6_11&(((A>>7)&1) & ((B>>10)&1));
  S_7_11 = S_6_12^(((A>>7)&1) & ((B>>11)&1));
  C_7_11 = S_6_12&(((A>>7)&1) & ((B>>11)&1));
  S_7_12 = S_6_13^(((A>>7)&1) & ((B>>12)&1));
  C_7_12 = S_6_13&(((A>>7)&1) & ((B>>12)&1));
  S_7_13 = S_6_14^(((A>>7)&1) & ((B>>13)&1));
  C_7_13 = S_6_14&(((A>>7)&1) & ((B>>13)&1));
  S_7_14 = S_6_15^(((A>>7)&1) & ((B>>14)&1));
  C_7_14 = S_6_15&(((A>>7)&1) & ((B>>14)&1));
  S_7_15 = C_6_15^(((((A>>7)&1) & ((B>>15)&1)))^1);
  C_7_15 = C_6_15&(((((A>>7)&1) & ((B>>15)&1)))^1);
  tmp = S_7_1^C_7_0;
  S_8_0 = tmp^(((A>>8)&1) & ((B>>0)&1));
  C_8_0 = (tmp&(((A>>8)&1) & ((B>>0)&1)))|(S_7_1&C_7_0);
  tmp = S_7_2^C_7_1;
  S_8_1 = tmp^(((A>>8)&1) & ((B>>1)&1));
  C_8_1 = (tmp&(((A>>8)&1) & ((B>>1)&1)))|(S_7_2&C_7_1);
  tmp = S_7_3^C_7_2;
  S_8_2 = tmp^(((A>>8)&1) & ((B>>2)&1));
  C_8_2 = (tmp&(((A>>8)&1) & ((B>>2)&1)))|(S_7_3&C_7_2);
  tmp = S_7_4^C_7_3;
  S_8_3 = tmp^(((A>>8)&1) & ((B>>3)&1));
  C_8_3 = (tmp&(((A>>8)&1) & ((B>>3)&1)))|(S_7_4&C_7_3);
  tmp = S_7_5^C_7_4;
  S_8_4 = tmp^(((A>>8)&1) & ((B>>4)&1));
  C_8_4 = (tmp&(((A>>8)&1) & ((B>>4)&1)))|(S_7_5&C_7_4);
  tmp = S_7_6^C_7_5;
  S_8_5 = tmp^(((A>>8)&1) & ((B>>5)&1));
  C_8_5 = (tmp&(((A>>8)&1) & ((B>>5)&1)))|(S_7_6&C_7_5);
  tmp = S_7_7^C_7_6;
  S_8_6 = tmp^(((A>>8)&1) & ((B>>6)&1));
  C_8_6 = (tmp&(((A>>8)&1) & ((B>>6)&1)))|(S_7_7&C_7_6);
  tmp = S_7_8^C_7_7;
  S_8_7 = tmp^(((A>>8)&1) & ((B>>7)&1));
  C_8_7 = (tmp&(((A>>8)&1) & ((B>>7)&1)))|(S_7_8&C_7_7);
  tmp = S_7_9^C_7_8;
  S_8_8 = tmp^(((A>>8)&1) & ((B>>8)&1));
  C_8_8 = (tmp&(((A>>8)&1) & ((B>>8)&1)))|(S_7_9&C_7_8);
  tmp = S_7_10^C_7_9;
  S_8_9 = tmp^(((A>>8)&1) & ((B>>9)&1));
  C_8_9 = (tmp&(((A>>8)&1) & ((B>>9)&1)))|(S_7_10&C_7_9);
  tmp = S_7_11^C_7_10;
  S_8_10 = tmp^(((A>>8)&1) & ((B>>10)&1));
  C_8_10 = (tmp&(((A>>8)&1) & ((B>>10)&1)))|(S_7_11&C_7_10);
  tmp = S_7_12^C_7_11;
  S_8_11 = tmp^(((A>>8)&1) & ((B>>11)&1));
  C_8_11 = (tmp&(((A>>8)&1) & ((B>>11)&1)))|(S_7_12&C_7_11);
  tmp = S_7_13^C_7_12;
  S_8_12 = tmp^(((A>>8)&1) & ((B>>12)&1));
  C_8_12 = (tmp&(((A>>8)&1) & ((B>>12)&1)))|(S_7_13&C_7_12);
  tmp = S_7_14^C_7_13;
  S_8_13 = tmp^(((A>>8)&1) & ((B>>13)&1));
  C_8_13 = (tmp&(((A>>8)&1) & ((B>>13)&1)))|(S_7_14&C_7_13);
  tmp = S_7_15^C_7_14;
  S_8_14 = tmp^(((A>>8)&1) & ((B>>14)&1));
  C_8_14 = (tmp&(((A>>8)&1) & ((B>>14)&1)))|(S_7_15&C_7_14);
  S_8_15 = C_7_15^(((((A>>8)&1) & ((B>>15)&1)))^1);
  C_8_15 = C_7_15&(((((A>>8)&1) & ((B>>15)&1)))^1);
  tmp = S_8_1^C_8_0;
  S_9_0 = tmp^(((A>>9)&1) & ((B>>0)&1));
  C_9_0 = (tmp&(((A>>9)&1) & ((B>>0)&1)))|(S_8_1&C_8_0);
  tmp = S_8_2^C_8_1;
  S_9_1 = tmp^(((A>>9)&1) & ((B>>1)&1));
  C_9_1 = (tmp&(((A>>9)&1) & ((B>>1)&1)))|(S_8_2&C_8_1);
  tmp = S_8_3^C_8_2;
  S_9_2 = tmp^(((A>>9)&1) & ((B>>2)&1));
  C_9_2 = (tmp&(((A>>9)&1) & ((B>>2)&1)))|(S_8_3&C_8_2);
  tmp = S_8_4^C_8_3;
  S_9_3 = tmp^(((A>>9)&1) & ((B>>3)&1));
  C_9_3 = (tmp&(((A>>9)&1) & ((B>>3)&1)))|(S_8_4&C_8_3);
  tmp = S_8_5^C_8_4;
  S_9_4 = tmp^(((A>>9)&1) & ((B>>4)&1));
  C_9_4 = (tmp&(((A>>9)&1) & ((B>>4)&1)))|(S_8_5&C_8_4);
  tmp = S_8_6^C_8_5;
  S_9_5 = tmp^(((A>>9)&1) & ((B>>5)&1));
  C_9_5 = (tmp&(((A>>9)&1) & ((B>>5)&1)))|(S_8_6&C_8_5);
  tmp = S_8_7^C_8_6;
  S_9_6 = tmp^(((A>>9)&1) & ((B>>6)&1));
  C_9_6 = (tmp&(((A>>9)&1) & ((B>>6)&1)))|(S_8_7&C_8_6);
  tmp = S_8_8^C_8_7;
  S_9_7 = tmp^(((A>>9)&1) & ((B>>7)&1));
  C_9_7 = (tmp&(((A>>9)&1) & ((B>>7)&1)))|(S_8_8&C_8_7);
  tmp = S_8_9^C_8_8;
  S_9_8 = tmp^(((A>>9)&1) & ((B>>8)&1));
  C_9_8 = (tmp&(((A>>9)&1) & ((B>>8)&1)))|(S_8_9&C_8_8);
  tmp = S_8_10^C_8_9;
  S_9_9 = tmp^(((A>>9)&1) & ((B>>9)&1));
  C_9_9 = (tmp&(((A>>9)&1) & ((B>>9)&1)))|(S_8_10&C_8_9);
  tmp = S_8_11^C_8_10;
  S_9_10 = tmp^(((A>>9)&1) & ((B>>10)&1));
  C_9_10 = (tmp&(((A>>9)&1) & ((B>>10)&1)))|(S_8_11&C_8_10);
  tmp = S_8_12^C_8_11;
  S_9_11 = tmp^(((A>>9)&1) & ((B>>11)&1));
  C_9_11 = (tmp&(((A>>9)&1) & ((B>>11)&1)))|(S_8_12&C_8_11);
  tmp = S_8_13^C_8_12;
  S_9_12 = tmp^(((A>>9)&1) & ((B>>12)&1));
  C_9_12 = (tmp&(((A>>9)&1) & ((B>>12)&1)))|(S_8_13&C_8_12);
  tmp = S_8_14^C_8_13;
  S_9_13 = tmp^(((A>>9)&1) & ((B>>13)&1));
  C_9_13 = (tmp&(((A>>9)&1) & ((B>>13)&1)))|(S_8_14&C_8_13);
  tmp = S_8_15^C_8_14;
  S_9_14 = tmp^(((A>>9)&1) & ((B>>14)&1));
  C_9_14 = (tmp&(((A>>9)&1) & ((B>>14)&1)))|(S_8_15&C_8_14);
  S_9_15 = C_8_15^(((((A>>9)&1) & ((B>>15)&1)))^1);
  C_9_15 = C_8_15&(((((A>>9)&1) & ((B>>15)&1)))^1);
  tmp = S_9_1^C_9_0;
  S_10_0 = tmp^(((A>>10)&1) & ((B>>0)&1));
  C_10_0 = (tmp&(((A>>10)&1) & ((B>>0)&1)))|(S_9_1&C_9_0);
  tmp = S_9_2^C_9_1;
  S_10_1 = tmp^(((A>>10)&1) & ((B>>1)&1));
  C_10_1 = (tmp&(((A>>10)&1) & ((B>>1)&1)))|(S_9_2&C_9_1);
  tmp = S_9_3^C_9_2;
  S_10_2 = tmp^(((A>>10)&1) & ((B>>2)&1));
  C_10_2 = (tmp&(((A>>10)&1) & ((B>>2)&1)))|(S_9_3&C_9_2);
  tmp = S_9_4^C_9_3;
  S_10_3 = tmp^(((A>>10)&1) & ((B>>3)&1));
  C_10_3 = (tmp&(((A>>10)&1) & ((B>>3)&1)))|(S_9_4&C_9_3);
  tmp = S_9_5^C_9_4;
  S_10_4 = tmp^(((A>>10)&1) & ((B>>4)&1));
  C_10_4 = (tmp&(((A>>10)&1) & ((B>>4)&1)))|(S_9_5&C_9_4);
  tmp = S_9_6^C_9_5;
  S_10_5 = tmp^(((A>>10)&1) & ((B>>5)&1));
  C_10_5 = (tmp&(((A>>10)&1) & ((B>>5)&1)))|(S_9_6&C_9_5);
  tmp = S_9_7^C_9_6;
  S_10_6 = tmp^(((A>>10)&1) & ((B>>6)&1));
  C_10_6 = (tmp&(((A>>10)&1) & ((B>>6)&1)))|(S_9_7&C_9_6);
  tmp = S_9_8^C_9_7;
  S_10_7 = tmp^(((A>>10)&1) & ((B>>7)&1));
  C_10_7 = (tmp&(((A>>10)&1) & ((B>>7)&1)))|(S_9_8&C_9_7);
  tmp = S_9_9^C_9_8;
  S_10_8 = tmp^(((A>>10)&1) & ((B>>8)&1));
  C_10_8 = (tmp&(((A>>10)&1) & ((B>>8)&1)))|(S_9_9&C_9_8);
  tmp = S_9_10^C_9_9;
  S_10_9 = tmp^(((A>>10)&1) & ((B>>9)&1));
  C_10_9 = (tmp&(((A>>10)&1) & ((B>>9)&1)))|(S_9_10&C_9_9);
  tmp = S_9_11^C_9_10;
  S_10_10 = tmp^(((A>>10)&1) & ((B>>10)&1));
  C_10_10 = (tmp&(((A>>10)&1) & ((B>>10)&1)))|(S_9_11&C_9_10);
  tmp = S_9_12^C_9_11;
  S_10_11 = tmp^(((A>>10)&1) & ((B>>11)&1));
  C_10_11 = (tmp&(((A>>10)&1) & ((B>>11)&1)))|(S_9_12&C_9_11);
  tmp = S_9_13^C_9_12;
  S_10_12 = tmp^(((A>>10)&1) & ((B>>12)&1));
  C_10_12 = (tmp&(((A>>10)&1) & ((B>>12)&1)))|(S_9_13&C_9_12);
  tmp = S_9_14^C_9_13;
  S_10_13 = tmp^(((A>>10)&1) & ((B>>13)&1));
  C_10_13 = (tmp&(((A>>10)&1) & ((B>>13)&1)))|(S_9_14&C_9_13);
  tmp = S_9_15^C_9_14;
  S_10_14 = tmp^(((A>>10)&1) & ((B>>14)&1));
  C_10_14 = (tmp&(((A>>10)&1) & ((B>>14)&1)))|(S_9_15&C_9_14);
  S_10_15 = C_9_15^(((((A>>10)&1) & ((B>>15)&1)))^1);
  C_10_15 = C_9_15&(((((A>>10)&1) & ((B>>15)&1)))^1);
  tmp = S_10_1^C_10_0;
  S_11_0 = tmp^(((A>>11)&1) & ((B>>0)&1));
  C_11_0 = (tmp&(((A>>11)&1) & ((B>>0)&1)))|(S_10_1&C_10_0);
  tmp = S_10_2^C_10_1;
  S_11_1 = tmp^(((A>>11)&1) & ((B>>1)&1));
  C_11_1 = (tmp&(((A>>11)&1) & ((B>>1)&1)))|(S_10_2&C_10_1);
  tmp = S_10_3^C_10_2;
  S_11_2 = tmp^(((A>>11)&1) & ((B>>2)&1));
  C_11_2 = (tmp&(((A>>11)&1) & ((B>>2)&1)))|(S_10_3&C_10_2);
  tmp = S_10_4^C_10_3;
  S_11_3 = tmp^(((A>>11)&1) & ((B>>3)&1));
  C_11_3 = (tmp&(((A>>11)&1) & ((B>>3)&1)))|(S_10_4&C_10_3);
  tmp = S_10_5^C_10_4;
  S_11_4 = tmp^(((A>>11)&1) & ((B>>4)&1));
  C_11_4 = (tmp&(((A>>11)&1) & ((B>>4)&1)))|(S_10_5&C_10_4);
  tmp = S_10_6^C_10_5;
  S_11_5 = tmp^(((A>>11)&1) & ((B>>5)&1));
  C_11_5 = (tmp&(((A>>11)&1) & ((B>>5)&1)))|(S_10_6&C_10_5);
  tmp = S_10_7^C_10_6;
  S_11_6 = tmp^(((A>>11)&1) & ((B>>6)&1));
  C_11_6 = (tmp&(((A>>11)&1) & ((B>>6)&1)))|(S_10_7&C_10_6);
  tmp = S_10_8^C_10_7;
  S_11_7 = tmp^(((A>>11)&1) & ((B>>7)&1));
  C_11_7 = (tmp&(((A>>11)&1) & ((B>>7)&1)))|(S_10_8&C_10_7);
  tmp = S_10_9^C_10_8;
  S_11_8 = tmp^(((A>>11)&1) & ((B>>8)&1));
  C_11_8 = (tmp&(((A>>11)&1) & ((B>>8)&1)))|(S_10_9&C_10_8);
  tmp = S_10_10^C_10_9;
  S_11_9 = tmp^(((A>>11)&1) & ((B>>9)&1));
  C_11_9 = (tmp&(((A>>11)&1) & ((B>>9)&1)))|(S_10_10&C_10_9);
  tmp = S_10_11^C_10_10;
  S_11_10 = tmp^(((A>>11)&1) & ((B>>10)&1));
  C_11_10 = (tmp&(((A>>11)&1) & ((B>>10)&1)))|(S_10_11&C_10_10);
  tmp = S_10_12^C_10_11;
  S_11_11 = tmp^(((A>>11)&1) & ((B>>11)&1));
  C_11_11 = (tmp&(((A>>11)&1) & ((B>>11)&1)))|(S_10_12&C_10_11);
  tmp = S_10_13^C_10_12;
  S_11_12 = tmp^(((A>>11)&1) & ((B>>12)&1));
  C_11_12 = (tmp&(((A>>11)&1) & ((B>>12)&1)))|(S_10_13&C_10_12);
  tmp = S_10_14^C_10_13;
  S_11_13 = tmp^(((A>>11)&1) & ((B>>13)&1));
  C_11_13 = (tmp&(((A>>11)&1) & ((B>>13)&1)))|(S_10_14&C_10_13);
  tmp = S_10_15^C_10_14;
  S_11_14 = tmp^(((A>>11)&1) & ((B>>14)&1));
  C_11_14 = (tmp&(((A>>11)&1) & ((B>>14)&1)))|(S_10_15&C_10_14);
  S_11_15 = C_10_15^(((((A>>11)&1) & ((B>>15)&1)))^1);
  C_11_15 = C_10_15&(((((A>>11)&1) & ((B>>15)&1)))^1);
  tmp = S_11_1^C_11_0;
  S_12_0 = tmp^(((A>>12)&1) & ((B>>0)&1));
  C_12_0 = (tmp&(((A>>12)&1) & ((B>>0)&1)))|(S_11_1&C_11_0);
  tmp = S_11_2^C_11_1;
  S_12_1 = tmp^(((A>>12)&1) & ((B>>1)&1));
  C_12_1 = (tmp&(((A>>12)&1) & ((B>>1)&1)))|(S_11_2&C_11_1);
  tmp = S_11_3^C_11_2;
  S_12_2 = tmp^(((A>>12)&1) & ((B>>2)&1));
  C_12_2 = (tmp&(((A>>12)&1) & ((B>>2)&1)))|(S_11_3&C_11_2);
  tmp = S_11_4^C_11_3;
  S_12_3 = tmp^(((A>>12)&1) & ((B>>3)&1));
  C_12_3 = (tmp&(((A>>12)&1) & ((B>>3)&1)))|(S_11_4&C_11_3);
  tmp = S_11_5^C_11_4;
  S_12_4 = tmp^(((A>>12)&1) & ((B>>4)&1));
  C_12_4 = (tmp&(((A>>12)&1) & ((B>>4)&1)))|(S_11_5&C_11_4);
  tmp = S_11_6^C_11_5;
  S_12_5 = tmp^(((A>>12)&1) & ((B>>5)&1));
  C_12_5 = (tmp&(((A>>12)&1) & ((B>>5)&1)))|(S_11_6&C_11_5);
  tmp = S_11_7^C_11_6;
  S_12_6 = tmp^(((A>>12)&1) & ((B>>6)&1));
  C_12_6 = (tmp&(((A>>12)&1) & ((B>>6)&1)))|(S_11_7&C_11_6);
  tmp = S_11_8^C_11_7;
  S_12_7 = tmp^(((A>>12)&1) & ((B>>7)&1));
  C_12_7 = (tmp&(((A>>12)&1) & ((B>>7)&1)))|(S_11_8&C_11_7);
  tmp = S_11_9^C_11_8;
  S_12_8 = tmp^(((A>>12)&1) & ((B>>8)&1));
  C_12_8 = (tmp&(((A>>12)&1) & ((B>>8)&1)))|(S_11_9&C_11_8);
  tmp = S_11_10^C_11_9;
  S_12_9 = tmp^(((A>>12)&1) & ((B>>9)&1));
  C_12_9 = (tmp&(((A>>12)&1) & ((B>>9)&1)))|(S_11_10&C_11_9);
  tmp = S_11_11^C_11_10;
  S_12_10 = tmp^(((A>>12)&1) & ((B>>10)&1));
  C_12_10 = (tmp&(((A>>12)&1) & ((B>>10)&1)))|(S_11_11&C_11_10);
  tmp = S_11_12^C_11_11;
  S_12_11 = tmp^(((A>>12)&1) & ((B>>11)&1));
  C_12_11 = (tmp&(((A>>12)&1) & ((B>>11)&1)))|(S_11_12&C_11_11);
  tmp = S_11_13^C_11_12;
  S_12_12 = tmp^(((A>>12)&1) & ((B>>12)&1));
  C_12_12 = (tmp&(((A>>12)&1) & ((B>>12)&1)))|(S_11_13&C_11_12);
  tmp = S_11_14^C_11_13;
  S_12_13 = tmp^(((A>>12)&1) & ((B>>13)&1));
  C_12_13 = (tmp&(((A>>12)&1) & ((B>>13)&1)))|(S_11_14&C_11_13);
  tmp = S_11_15^C_11_14;
  S_12_14 = tmp^(((A>>12)&1) & ((B>>14)&1));
  C_12_14 = (tmp&(((A>>12)&1) & ((B>>14)&1)))|(S_11_15&C_11_14);
  S_12_15 = C_11_15^(((((A>>12)&1) & ((B>>15)&1)))^1);
  C_12_15 = C_11_15&(((((A>>12)&1) & ((B>>15)&1)))^1);
  tmp = S_12_1^C_12_0;
  S_13_0 = tmp^(((A>>13)&1) & ((B>>0)&1));
  C_13_0 = (tmp&(((A>>13)&1) & ((B>>0)&1)))|(S_12_1&C_12_0);
  tmp = S_12_2^C_12_1;
  S_13_1 = tmp^(((A>>13)&1) & ((B>>1)&1));
  C_13_1 = (tmp&(((A>>13)&1) & ((B>>1)&1)))|(S_12_2&C_12_1);
  tmp = S_12_3^C_12_2;
  S_13_2 = tmp^(((A>>13)&1) & ((B>>2)&1));
  C_13_2 = (tmp&(((A>>13)&1) & ((B>>2)&1)))|(S_12_3&C_12_2);
  tmp = S_12_4^C_12_3;
  S_13_3 = tmp^(((A>>13)&1) & ((B>>3)&1));
  C_13_3 = (tmp&(((A>>13)&1) & ((B>>3)&1)))|(S_12_4&C_12_3);
  tmp = S_12_5^C_12_4;
  S_13_4 = tmp^(((A>>13)&1) & ((B>>4)&1));
  C_13_4 = (tmp&(((A>>13)&1) & ((B>>4)&1)))|(S_12_5&C_12_4);
  tmp = S_12_6^C_12_5;
  S_13_5 = tmp^(((A>>13)&1) & ((B>>5)&1));
  C_13_5 = (tmp&(((A>>13)&1) & ((B>>5)&1)))|(S_12_6&C_12_5);
  tmp = S_12_7^C_12_6;
  S_13_6 = tmp^(((A>>13)&1) & ((B>>6)&1));
  C_13_6 = (tmp&(((A>>13)&1) & ((B>>6)&1)))|(S_12_7&C_12_6);
  tmp = S_12_8^C_12_7;
  S_13_7 = tmp^(((A>>13)&1) & ((B>>7)&1));
  C_13_7 = (tmp&(((A>>13)&1) & ((B>>7)&1)))|(S_12_8&C_12_7);
  tmp = S_12_9^C_12_8;
  S_13_8 = tmp^(((A>>13)&1) & ((B>>8)&1));
  C_13_8 = (tmp&(((A>>13)&1) & ((B>>8)&1)))|(S_12_9&C_12_8);
  tmp = S_12_10^C_12_9;
  S_13_9 = tmp^(((A>>13)&1) & ((B>>9)&1));
  C_13_9 = (tmp&(((A>>13)&1) & ((B>>9)&1)))|(S_12_10&C_12_9);
  tmp = S_12_11^C_12_10;
  S_13_10 = tmp^(((A>>13)&1) & ((B>>10)&1));
  C_13_10 = (tmp&(((A>>13)&1) & ((B>>10)&1)))|(S_12_11&C_12_10);
  tmp = S_12_12^C_12_11;
  S_13_11 = tmp^(((A>>13)&1) & ((B>>11)&1));
  C_13_11 = (tmp&(((A>>13)&1) & ((B>>11)&1)))|(S_12_12&C_12_11);
  tmp = S_12_13^C_12_12;
  S_13_12 = tmp^(((A>>13)&1) & ((B>>12)&1));
  C_13_12 = (tmp&(((A>>13)&1) & ((B>>12)&1)))|(S_12_13&C_12_12);
  tmp = S_12_14^C_12_13;
  S_13_13 = tmp^(((A>>13)&1) & ((B>>13)&1));
  C_13_13 = (tmp&(((A>>13)&1) & ((B>>13)&1)))|(S_12_14&C_12_13);
  tmp = S_12_15^C_12_14;
  S_13_14 = tmp^(((A>>13)&1) & ((B>>14)&1));
  C_13_14 = (tmp&(((A>>13)&1) & ((B>>14)&1)))|(S_12_15&C_12_14);
  S_13_15 = C_12_15^(((((A>>13)&1) & ((B>>15)&1)))^1);
  C_13_15 = C_12_15&(((((A>>13)&1) & ((B>>15)&1)))^1);
  tmp = S_13_1^C_13_0;
  S_14_0 = tmp^(((A>>14)&1) & ((B>>0)&1));
  C_14_0 = (tmp&(((A>>14)&1) & ((B>>0)&1)))|(S_13_1&C_13_0);
  tmp = S_13_2^C_13_1;
  S_14_1 = tmp^(((A>>14)&1) & ((B>>1)&1));
  C_14_1 = (tmp&(((A>>14)&1) & ((B>>1)&1)))|(S_13_2&C_13_1);
  tmp = S_13_3^C_13_2;
  S_14_2 = tmp^(((A>>14)&1) & ((B>>2)&1));
  C_14_2 = (tmp&(((A>>14)&1) & ((B>>2)&1)))|(S_13_3&C_13_2);
  tmp = S_13_4^C_13_3;
  S_14_3 = tmp^(((A>>14)&1) & ((B>>3)&1));
  C_14_3 = (tmp&(((A>>14)&1) & ((B>>3)&1)))|(S_13_4&C_13_3);
  tmp = S_13_5^C_13_4;
  S_14_4 = tmp^(((A>>14)&1) & ((B>>4)&1));
  C_14_4 = (tmp&(((A>>14)&1) & ((B>>4)&1)))|(S_13_5&C_13_4);
  tmp = S_13_6^C_13_5;
  S_14_5 = tmp^(((A>>14)&1) & ((B>>5)&1));
  C_14_5 = (tmp&(((A>>14)&1) & ((B>>5)&1)))|(S_13_6&C_13_5);
  tmp = S_13_7^C_13_6;
  S_14_6 = tmp^(((A>>14)&1) & ((B>>6)&1));
  C_14_6 = (tmp&(((A>>14)&1) & ((B>>6)&1)))|(S_13_7&C_13_6);
  tmp = S_13_8^C_13_7;
  S_14_7 = tmp^(((A>>14)&1) & ((B>>7)&1));
  C_14_7 = (tmp&(((A>>14)&1) & ((B>>7)&1)))|(S_13_8&C_13_7);
  tmp = S_13_9^C_13_8;
  S_14_8 = tmp^(((A>>14)&1) & ((B>>8)&1));
  C_14_8 = (tmp&(((A>>14)&1) & ((B>>8)&1)))|(S_13_9&C_13_8);
  tmp = S_13_10^C_13_9;
  S_14_9 = tmp^(((A>>14)&1) & ((B>>9)&1));
  C_14_9 = (tmp&(((A>>14)&1) & ((B>>9)&1)))|(S_13_10&C_13_9);
  tmp = S_13_11^C_13_10;
  S_14_10 = tmp^(((A>>14)&1) & ((B>>10)&1));
  C_14_10 = (tmp&(((A>>14)&1) & ((B>>10)&1)))|(S_13_11&C_13_10);
  tmp = S_13_12^C_13_11;
  S_14_11 = tmp^(((A>>14)&1) & ((B>>11)&1));
  C_14_11 = (tmp&(((A>>14)&1) & ((B>>11)&1)))|(S_13_12&C_13_11);
  tmp = S_13_13^C_13_12;
  S_14_12 = tmp^(((A>>14)&1) & ((B>>12)&1));
  C_14_12 = (tmp&(((A>>14)&1) & ((B>>12)&1)))|(S_13_13&C_13_12);
  tmp = S_13_14^C_13_13;
  S_14_13 = tmp^(((A>>14)&1) & ((B>>13)&1));
  C_14_13 = (tmp&(((A>>14)&1) & ((B>>13)&1)))|(S_13_14&C_13_13);
  tmp = S_13_15^C_13_14;
  S_14_14 = tmp^(((A>>14)&1) & ((B>>14)&1));
  C_14_14 = (tmp&(((A>>14)&1) & ((B>>14)&1)))|(S_13_15&C_13_14);
  S_14_15 = C_13_15^(((((A>>14)&1) & ((B>>15)&1)))^1);
  C_14_15 = C_13_15&(((((A>>14)&1) & ((B>>15)&1)))^1);
  tmp = S_14_1^C_14_0;
  S_15_0 = tmp^(((((A>>15)&1) & ((B>>0)&1)))^1);
  C_15_0 = (tmp&(((((A>>15)&1) & ((B>>0)&1)))^1))|(S_14_1&C_14_0);
  tmp = S_14_2^C_14_1;
  S_15_1 = tmp^(((((A>>15)&1) & ((B>>1)&1)))^1);
  C_15_1 = (tmp&(((((A>>15)&1) & ((B>>1)&1)))^1))|(S_14_2&C_14_1);
  tmp = S_14_3^C_14_2;
  S_15_2 = tmp^(((((A>>15)&1) & ((B>>2)&1)))^1);
  C_15_2 = (tmp&(((((A>>15)&1) & ((B>>2)&1)))^1))|(S_14_3&C_14_2);
  tmp = S_14_4^C_14_3;
  S_15_3 = tmp^(((((A>>15)&1) & ((B>>3)&1)))^1);
  C_15_3 = (tmp&(((((A>>15)&1) & ((B>>3)&1)))^1))|(S_14_4&C_14_3);
  tmp = S_14_5^C_14_4;
  S_15_4 = tmp^(((((A>>15)&1) & ((B>>4)&1)))^1);
  C_15_4 = (tmp&(((((A>>15)&1) & ((B>>4)&1)))^1))|(S_14_5&C_14_4);
  tmp = S_14_6^C_14_5;
  S_15_5 = tmp^(((((A>>15)&1) & ((B>>5)&1)))^1);
  C_15_5 = (tmp&(((((A>>15)&1) & ((B>>5)&1)))^1))|(S_14_6&C_14_5);
  tmp = S_14_7^C_14_6;
  S_15_6 = tmp^(((((A>>15)&1) & ((B>>6)&1)))^1);
  C_15_6 = (tmp&(((((A>>15)&1) & ((B>>6)&1)))^1))|(S_14_7&C_14_6);
  tmp = S_14_8^C_14_7;
  S_15_7 = tmp^(((((A>>15)&1) & ((B>>7)&1)))^1);
  C_15_7 = (tmp&(((((A>>15)&1) & ((B>>7)&1)))^1))|(S_14_8&C_14_7);
  tmp = S_14_9^C_14_8;
  S_15_8 = tmp^(((((A>>15)&1) & ((B>>8)&1)))^1);
  C_15_8 = (tmp&(((((A>>15)&1) & ((B>>8)&1)))^1))|(S_14_9&C_14_8);
  tmp = S_14_10^C_14_9;
  S_15_9 = tmp^(((((A>>15)&1) & ((B>>9)&1)))^1);
  C_15_9 = (tmp&(((((A>>15)&1) & ((B>>9)&1)))^1))|(S_14_10&C_14_9);
  tmp = S_14_11^C_14_10;
  S_15_10 = tmp^(((((A>>15)&1) & ((B>>10)&1)))^1);
  C_15_10 = (tmp&(((((A>>15)&1) & ((B>>10)&1)))^1))|(S_14_11&C_14_10);
  tmp = S_14_12^C_14_11;
  S_15_11 = tmp^(((((A>>15)&1) & ((B>>11)&1)))^1);
  C_15_11 = (tmp&(((((A>>15)&1) & ((B>>11)&1)))^1))|(S_14_12&C_14_11);
  tmp = S_14_13^C_14_12;
  S_15_12 = tmp^(((((A>>15)&1) & ((B>>12)&1)))^1);
  C_15_12 = (tmp&(((((A>>15)&1) & ((B>>12)&1)))^1))|(S_14_13&C_14_12);
  tmp = S_14_14^C_14_13;
  S_15_13 = tmp^(((((A>>15)&1) & ((B>>13)&1)))^1);
  C_15_13 = (tmp&(((((A>>15)&1) & ((B>>13)&1)))^1))|(S_14_14&C_14_13);
  tmp = S_14_15^C_14_14;
  S_15_14 = tmp^(((((A>>15)&1) & ((B>>14)&1)))^1);
  C_15_14 = (tmp&(((((A>>15)&1) & ((B>>14)&1)))^1))|(S_14_15&C_14_14);
  S_15_15 = C_14_15^(((A>>15)&1) & ((B>>15)&1));
  C_15_15 = C_14_15&(((A>>15)&1) & ((B>>15)&1));
  S_16_0 = S_15_1^C_15_0;
  C_16_0 = S_15_1&C_15_0;
  tmp = S_15_2^C_16_0;
  S_16_1 = tmp^C_15_1;
  C_16_1 = (tmp&C_15_1)|(S_15_2&C_16_0);
  tmp = S_15_3^C_16_1;
  S_16_2 = tmp^C_15_2;
  C_16_2 = (tmp&C_15_2)|(S_15_3&C_16_1);
  tmp = S_15_4^C_16_2;
  S_16_3 = tmp^C_15_3;
  C_16_3 = (tmp&C_15_3)|(S_15_4&C_16_2);
  tmp = S_15_5^C_16_3;
  S_16_4 = tmp^C_15_4;
  C_16_4 = (tmp&C_15_4)|(S_15_5&C_16_3);
  tmp = S_15_6^C_16_4;
  S_16_5 = tmp^C_15_5;
  C_16_5 = (tmp&C_15_5)|(S_15_6&C_16_4);
  tmp = S_15_7^C_16_5;
  S_16_6 = tmp^C_15_6;
  C_16_6 = (tmp&C_15_6)|(S_15_7&C_16_5);
  tmp = S_15_8^C_16_6;
  S_16_7 = tmp^C_15_7;
  C_16_7 = (tmp&C_15_7)|(S_15_8&C_16_6);
  tmp = S_15_9^C_16_7;
  S_16_8 = tmp^C_15_8;
  C_16_8 = (tmp&C_15_8)|(S_15_9&C_16_7);
  tmp = S_15_10^C_16_8;
  S_16_9 = tmp^C_15_9;
  C_16_9 = (tmp&C_15_9)|(S_15_10&C_16_8);
  tmp = S_15_11^C_16_9;
  S_16_10 = tmp^C_15_10;
  C_16_10 = (tmp&C_15_10)|(S_15_11&C_16_9);
  tmp = S_15_12^C_16_10;
  S_16_11 = tmp^C_15_11;
  C_16_11 = (tmp&C_15_11)|(S_15_12&C_16_10);
  tmp = S_15_13^C_16_11;
  S_16_12 = tmp^C_15_12;
  C_16_12 = (tmp&C_15_12)|(S_15_13&C_16_11);
  tmp = S_15_14^C_16_12;
  S_16_13 = tmp^C_15_13;
  C_16_13 = (tmp&C_15_13)|(S_15_14&C_16_12);
  tmp = S_15_15^C_16_13;
  S_16_14 = tmp^C_15_14;
  C_16_14 = (tmp&C_15_14)|(S_15_15&C_16_13);
  tmp = 1^C_16_14;
  S_16_15 = tmp^C_15_15;
  C_16_15 = (tmp&C_15_15)|(1&C_16_14);
  P = 0;
  P |= (S_6_0 & 1) << 6;
  P |= (S_7_0 & 1) << 7;
  P |= (S_8_0 & 1) << 8;
  P |= (S_9_0 & 1) << 9;
  P |= (S_10_0 & 1) << 10;
  P |= (S_11_0 & 1) << 11;
  P |= (S_12_0 & 1) << 12;
  P |= (S_13_0 & 1) << 13;
  P |= (S_14_0 & 1) << 14;
  P |= (S_15_0 & 1) << 15;
  P |= (S_16_0 & 1) << 16;
  P |= (S_16_1 & 1) << 17;
  P |= (S_16_2 & 1) << 18;
  P |= (S_16_3 & 1) << 19;
  P |= (S_16_4 & 1) << 20;
  P |= (S_16_5 & 1) << 21;
  P |= (S_16_6 & 1) << 22;
  P |= (S_16_7 & 1) << 23;
  P |= (S_16_8 & 1) << 24;
  P |= (S_16_9 & 1) << 25;
  P |= (S_16_10 & 1) << 26;
  P |= (S_16_11 & 1) << 27;
  P |= (S_16_12 & 1) << 28;
  P |= (S_16_13 & 1) << 29;
  P |= (S_16_14 & 1) << 30;
  P |= (S_16_15 & 1) << 31;
  return P;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.00019 %
// MAE = 8192 
// WCE% = 0.00076 %
// WCE = 32769 
// WCRE% = 300.00 %
// EP% = 62.50 %
// MRE% = 0.018 %
// MSE = 17895.697e4 
// PDK45_PWR = 2.325 mW
// PDK45_AREA = 2760.4 um2
// PDK45_DELAY = 3.11 ns



int32_t evoapproxlib::evoapprox_t::mul16s_G7Z(int16_t A, int16_t B)
{
  int32_t P, P_;
  uint16_t tmp, C_10_0,C_10_1,C_10_10,C_10_11,C_10_12,C_10_13,C_10_14,C_10_15,C_10_2,C_10_3,C_10_4,C_10_5,C_10_6,C_10_7,C_10_8,C_10_9,C_11_0,C_11_1,C_11_10,C_11_11,C_11_12,C_11_13,C_11_14,C_11_15,C_11_2,C_11_3,C_11_4,C_11_5,C_11_6,C_11_7,C_11_8,C_11_9,C_12_0,C_12_1,C_12_10,C_12_11,C_12_12,C_12_13,C_12_14,C_12_15,C_12_2,C_12_3,C_12_4,C_12_5,C_12_6,C_12_7,C_12_8,C_12_9,C_13_0,C_13_1,C_13_10,C_13_11,C_13_12,C_13_13,C_13_14,C_13_15,C_13_2,C_13_3,C_13_4,C_13_5,C_13_6,C_13_7,C_13_8,C_13_9,C_14_0,C_14_1,C_14_10,C_14_11,C_14_12,C_14_13,C_14_14,C_14_15,C_14_2,C_14_3,C_14_4,C_14_5,C_14_6,C_14_7,C_14_8,C_14_9,C_15_0,C_15_1,C_15_10,C_15_11,C_15_12,C_15_13,C_15_14,C_15_15,C_15_2,C_15_3,C_15_4,C_15_5,C_15_6,C_15_7,C_15_8,C_15_9,C_16_0,C_16_1,C_16_10,C_16_11,C_16_12,C_16_13,C_16_14,C_16_15,C_16_2,C_16_3,C_16_4,C_16_5,C_16_6,C_16_7,C_16_8,C_16_9,C_1_14,C_1_15,C_2_0,C_2_1,C_2_10,C_2_11,C_2_12,C_2_13,C_2_14,C_2_15,C_2_2,C_2_3,C_2_4,C_2_5,C_2_6,C_2_7,C_2_8,C_2_9,C_3_0,C_3_1,C_3_10,C_3_11,C_3_12,C_3_13,C_3_14,C_3_15,C_3_2,C_3_3,C_3_4,C_3_5,C_3_6,C_3_7,C_3_8,C_3_9,C_4_0,C_4_1,C_4_10,C_4_11,C_4_12,C_4_13,C_4_14,C_4_15,C_4_2,C_4_3,C_4_4,C_4_5,C_4_6,C_4_7,C_4_8,C_4_9,C_5_0,C_5_1,C_5_10,C_5_11,C_5_12,C_5_13,C_5_14,C_5_15,C_5_2,C_5_3,C_5_4,C_5_5,C_5_6,C_5_7,C_5_8,C_5_9,C_6_0,C_6_1,C_6_10,C_6_11,C_6_12,C_6_13,C_6_14,C_6_15,C_6_2,C_6_3,C_6_4,C_6_5,C_6_6,C_6_7,C_6_8,C_6_9,C_7_0,C_7_1,C_7_10,C_7_11,C_7_12,C_7_13,C_7_14,C_7_15,C_7_2,C_7_3,C_7_4,C_7_5,C_7_6,C_7_7,C_7_8,C_7_9,C_8_0,C_8_1,C_8_10,C_8_11,C_8_12,C_8_13,C_8_14,C_8_15,C_8_2,C_8_3,C_8_4,C_8_5,C_8_6,C_8_7,C_8_8,C_8_9,C_9_0,C_9_1,C_9_10,C_9_11,C_9_12,C_9_13,C_9_14,C_9_15,C_9_2,C_9_3,C_9_4,C_9_5,C_9_6,C_9_7,C_9_8,C_9_9,S_0_15,S_10_0,S_10_1,S_10_10,S_10_11,S_10_12,S_10_13,S_10_14,S_10_15,S_10_2,S_10_3,S_10_4,S_10_5,S_10_6,S_10_7,S_10_8,S_10_9,S_11_0,S_11_1,S_11_10,S_11_11,S_11_12,S_11_13,S_11_14,S_11_15,S_11_2,S_11_3,S_11_4,S_11_5,S_11_6,S_11_7,S_11_8,S_11_9,S_12_0,S_12_1,S_12_10,S_12_11,S_12_12,S_12_13,S_12_14,S_12_15,S_12_2,S_12_3,S_12_4,S_12_5,S_12_6,S_12_7,S_12_8,S_12_9,S_13_0,S_13_1,S_13_10,S_13_11,S_13_12,S_13_13,S_13_14,S_13_15,S_13_2,S_13_3,S_13_4,S_13_5,S_13_6,S_13_7,S_13_8,S_13_9,S_14_0,S_14_1,S_14_10,S_14_11,S_14_12,S_14_13,S_14_14,S_14_15,S_14_2,S_14_3,S_14_4,S_14_5,S_14_6,S_14_7,S_14_8,S_14_9,S_15_0,S_15_1,S_15_10,S_15_11,S_15_12,S_15_13,S_15_14,S_15_15,S_15_2,S_15_3,S_15_4,S_15_5,S_15_6,S_15_7,S_15_8,S_15_9,S_16_0,S_16_1,S_16_10,S_16_11,S_16_12,S_16_13,S_16_14,S_16_15,S_16_2,S_16_3,S_16_4,S_16_5,S_16_6,S_16_7,S_16_8,S_16_9,S_1_1,S_1_10,S_1_11,S_1_12,S_1_13,S_1_14,S_1_15,S_1_2,S_1_3,S_1_4,S_1_5,S_1_6,S_1_7,S_1_8,S_1_9,S_2_0,S_2_1,S_2_10,S_2_11,S_2_12,S_2_13,S_2_14,S_2_15,S_2_2,S_2_3,S_2_4,S_2_5,S_2_6,S_2_7,S_2_8,S_2_9,S_3_0,S_3_1,S_3_10,S_3_11,S_3_12,S_3_13,S_3_14,S_3_15,S_3_2,S_3_3,S_3_4,S_3_5,S_3_6,S_3_7,S_3_8,S_3_9,S_4_0,S_4_1,S_4_10,S_4_11,S_4_12,S_4_13,S_4_14,S_4_15,S_4_2,S_4_3,S_4_4,S_4_5,S_4_6,S_4_7,S_4_8,S_4_9,S_5_0,S_5_1,S_5_10,S_5_11,S_5_12,S_5_13,S_5_14,S_5_15,S_5_2,S_5_3,S_5_4,S_5_5,S_5_6,S_5_7,S_5_8,S_5_9,S_6_0,S_6_1,S_6_10,S_6_11,S_6_12,S_6_13,S_6_14,S_6_15,S_6_2,S_6_3,S_6_4,S_6_5,S_6_6,S_6_7,S_6_8,S_6_9,S_7_0,S_7_1,S_7_10,S_7_11,S_7_12,S_7_13,S_7_14,S_7_15,S_7_2,S_7_3,S_7_4,S_7_5,S_7_6,S_7_7,S_7_8,S_7_9,S_8_0,S_8_1,S_8_10,S_8_11,S_8_12,S_8_13,S_8_14,S_8_15,S_8_2,S_8_3,S_8_4,S_8_5,S_8_6,S_8_7,S_8_8,S_8_9,S_9_0,S_9_1,S_9_10,S_9_11,S_9_12,S_9_13,S_9_14,S_9_15,S_9_2,S_9_3,S_9_4,S_9_5,S_9_6,S_9_7,S_9_8,S_9_9;
  S_0_15 = 1;
  S_1_1 = (((A>>1)&1) & ((B>>1)&1));
  S_1_2 = (((A>>1)&1) & ((B>>2)&1));
  S_1_3 = (((A>>1)&1) & ((B>>3)&1));
  S_1_4 = (((A>>1)&1) & ((B>>4)&1));
  S_1_5 = (((A>>1)&1) & ((B>>5)&1));
  S_1_6 = (((A>>1)&1) & ((B>>6)&1));
  S_1_7 = (((A>>1)&1) & ((B>>7)&1));
  S_1_8 = (((A>>1)&1) & ((B>>8)&1));
  S_1_9 = (((A>>1)&1) & ((B>>9)&1));
  S_1_10 = (((A>>1)&1) & ((B>>10)&1));
  S_1_11 = (((A>>1)&1) & ((B>>11)&1));
  S_1_12 = (((A>>1)&1) & ((B>>12)&1));
  S_1_13 = (((A>>1)&1) & ((B>>13)&1));
  S_1_14 = S_0_15^(((A>>1)&1) & ((B>>14)&1));
  C_1_14 = S_0_15&(((A>>1)&1) & ((B>>14)&1));
  S_1_15 = 1^(((((A>>1)&1) & ((B>>15)&1)))^1);
  C_1_15 = 1&(((((A>>1)&1) & ((B>>15)&1)))^1);
  S_2_0 = S_1_1^(((A>>2)&1) & ((B>>0)&1));
  C_2_0 = S_1_1&(((A>>2)&1) & ((B>>0)&1));
  S_2_1 = S_1_2^(((A>>2)&1) & ((B>>1)&1));
  C_2_1 = S_1_2&(((A>>2)&1) & ((B>>1)&1));
  S_2_2 = S_1_3^(((A>>2)&1) & ((B>>2)&1));
  C_2_2 = S_1_3&(((A>>2)&1) & ((B>>2)&1));
  S_2_3 = S_1_4^(((A>>2)&1) & ((B>>3)&1));
  C_2_3 = S_1_4&(((A>>2)&1) & ((B>>3)&1));
  S_2_4 = S_1_5^(((A>>2)&1) & ((B>>4)&1));
  C_2_4 = S_1_5&(((A>>2)&1) & ((B>>4)&1));
  S_2_5 = S_1_6^(((A>>2)&1) & ((B>>5)&1));
  C_2_5 = S_1_6&(((A>>2)&1) & ((B>>5)&1));
  S_2_6 = S_1_7^(((A>>2)&1) & ((B>>6)&1));
  C_2_6 = S_1_7&(((A>>2)&1) & ((B>>6)&1));
  S_2_7 = S_1_8^(((A>>2)&1) & ((B>>7)&1));
  C_2_7 = S_1_8&(((A>>2)&1) & ((B>>7)&1));
  S_2_8 = S_1_9^(((A>>2)&1) & ((B>>8)&1));
  C_2_8 = S_1_9&(((A>>2)&1) & ((B>>8)&1));
  S_2_9 = S_1_10^(((A>>2)&1) & ((B>>9)&1));
  C_2_9 = S_1_10&(((A>>2)&1) & ((B>>9)&1));
  S_2_10 = S_1_11^(((A>>2)&1) & ((B>>10)&1));
  C_2_10 = S_1_11&(((A>>2)&1) & ((B>>10)&1));
  S_2_11 = S_1_12^(((A>>2)&1) & ((B>>11)&1));
  C_2_11 = S_1_12&(((A>>2)&1) & ((B>>11)&1));
  S_2_12 = S_1_13^(((A>>2)&1) & ((B>>12)&1));
  C_2_12 = S_1_13&(((A>>2)&1) & ((B>>12)&1));
  S_2_13 = S_1_14^(((A>>2)&1) & ((B>>13)&1));
  C_2_13 = S_1_14&(((A>>2)&1) & ((B>>13)&1));
  tmp = S_1_15^C_1_14;
  S_2_14 = tmp^(((A>>2)&1) & ((B>>14)&1));
  C_2_14 = (tmp&(((A>>2)&1) & ((B>>14)&1)))|(S_1_15&C_1_14);
  S_2_15 = C_1_15^(((((A>>2)&1) & ((B>>15)&1)))^1);
  C_2_15 = C_1_15&(((((A>>2)&1) & ((B>>15)&1)))^1);
  tmp = S_2_1^C_2_0;
  S_3_0 = tmp^(((A>>3)&1) & ((B>>0)&1));
  C_3_0 = (tmp&(((A>>3)&1) & ((B>>0)&1)))|(S_2_1&C_2_0);
  tmp = S_2_2^C_2_1;
  S_3_1 = tmp^(((A>>3)&1) & ((B>>1)&1));
  C_3_1 = (tmp&(((A>>3)&1) & ((B>>1)&1)))|(S_2_2&C_2_1);
  tmp = S_2_3^C_2_2;
  S_3_2 = tmp^(((A>>3)&1) & ((B>>2)&1));
  C_3_2 = (tmp&(((A>>3)&1) & ((B>>2)&1)))|(S_2_3&C_2_2);
  tmp = S_2_4^C_2_3;
  S_3_3 = tmp^(((A>>3)&1) & ((B>>3)&1));
  C_3_3 = (tmp&(((A>>3)&1) & ((B>>3)&1)))|(S_2_4&C_2_3);
  tmp = S_2_5^C_2_4;
  S_3_4 = tmp^(((A>>3)&1) & ((B>>4)&1));
  C_3_4 = (tmp&(((A>>3)&1) & ((B>>4)&1)))|(S_2_5&C_2_4);
  tmp = S_2_6^C_2_5;
  S_3_5 = tmp^(((A>>3)&1) & ((B>>5)&1));
  C_3_5 = (tmp&(((A>>3)&1) & ((B>>5)&1)))|(S_2_6&C_2_5);
  tmp = S_2_7^C_2_6;
  S_3_6 = tmp^(((A>>3)&1) & ((B>>6)&1));
  C_3_6 = (tmp&(((A>>3)&1) & ((B>>6)&1)))|(S_2_7&C_2_6);
  tmp = S_2_8^C_2_7;
  S_3_7 = tmp^(((A>>3)&1) & ((B>>7)&1));
  C_3_7 = (tmp&(((A>>3)&1) & ((B>>7)&1)))|(S_2_8&C_2_7);
  tmp = S_2_9^C_2_8;
  S_3_8 = tmp^(((A>>3)&1) & ((B>>8)&1));
  C_3_8 = (tmp&(((A>>3)&1) & ((B>>8)&1)))|(S_2_9&C_2_8);
  tmp = S_2_10^C_2_9;
  S_3_9 = tmp^(((A>>3)&1) & ((B>>9)&1));
  C_3_9 = (tmp&(((A>>3)&1) & ((B>>9)&1)))|(S_2_10&C_2_9);
  tmp = S_2_11^C_2_10;
  S_3_10 = tmp^(((A>>3)&1) & ((B>>10)&1));
  C_3_10 = (tmp&(((A>>3)&1) & ((B>>10)&1)))|(S_2_11&C_2_10);
  tmp = S_2_12^C_2_11;
  S_3_11 = tmp^(((A>>3)&1) & ((B>>11)&1));
  C_3_11 = (tmp&(((A>>3)&1) & ((B>>11)&1)))|(S_2_12&C_2_11);
  tmp = S_2_13^C_2_12;
  S_3_12 = tmp^(((A>>3)&1) & ((B>>12)&1));
  C_3_12 = (tmp&(((A>>3)&1) & ((B>>12)&1)))|(S_2_13&C_2_12);
  tmp = S_2_14^C_2_13;
  S_3_13 = tmp^(((A>>3)&1) & ((B>>13)&1));
  C_3_13 = (tmp&(((A>>3)&1) & ((B>>13)&1)))|(S_2_14&C_2_13);
  tmp = S_2_15^C_2_14;
  S_3_14 = tmp^(((A>>3)&1) & ((B>>14)&1));
  C_3_14 = (tmp&(((A>>3)&1) & ((B>>14)&1)))|(S_2_15&C_2_14);
  S_3_15 = C_2_15^(((((A>>3)&1) & ((B>>15)&1)))^1);
  C_3_15 = C_2_15&(((((A>>3)&1) & ((B>>15)&1)))^1);
  tmp = S_3_1^C_3_0;
  S_4_0 = tmp^(((A>>4)&1) & ((B>>0)&1));
  C_4_0 = (tmp&(((A>>4)&1) & ((B>>0)&1)))|(S_3_1&C_3_0);
  tmp = S_3_2^C_3_1;
  S_4_1 = tmp^(((A>>4)&1) & ((B>>1)&1));
  C_4_1 = (tmp&(((A>>4)&1) & ((B>>1)&1)))|(S_3_2&C_3_1);
  tmp = S_3_3^C_3_2;
  S_4_2 = tmp^(((A>>4)&1) & ((B>>2)&1));
  C_4_2 = (tmp&(((A>>4)&1) & ((B>>2)&1)))|(S_3_3&C_3_2);
  tmp = S_3_4^C_3_3;
  S_4_3 = tmp^(((A>>4)&1) & ((B>>3)&1));
  C_4_3 = (tmp&(((A>>4)&1) & ((B>>3)&1)))|(S_3_4&C_3_3);
  tmp = S_3_5^C_3_4;
  S_4_4 = tmp^(((A>>4)&1) & ((B>>4)&1));
  C_4_4 = (tmp&(((A>>4)&1) & ((B>>4)&1)))|(S_3_5&C_3_4);
  tmp = S_3_6^C_3_5;
  S_4_5 = tmp^(((A>>4)&1) & ((B>>5)&1));
  C_4_5 = (tmp&(((A>>4)&1) & ((B>>5)&1)))|(S_3_6&C_3_5);
  tmp = S_3_7^C_3_6;
  S_4_6 = tmp^(((A>>4)&1) & ((B>>6)&1));
  C_4_6 = (tmp&(((A>>4)&1) & ((B>>6)&1)))|(S_3_7&C_3_6);
  tmp = S_3_8^C_3_7;
  S_4_7 = tmp^(((A>>4)&1) & ((B>>7)&1));
  C_4_7 = (tmp&(((A>>4)&1) & ((B>>7)&1)))|(S_3_8&C_3_7);
  tmp = S_3_9^C_3_8;
  S_4_8 = tmp^(((A>>4)&1) & ((B>>8)&1));
  C_4_8 = (tmp&(((A>>4)&1) & ((B>>8)&1)))|(S_3_9&C_3_8);
  tmp = S_3_10^C_3_9;
  S_4_9 = tmp^(((A>>4)&1) & ((B>>9)&1));
  C_4_9 = (tmp&(((A>>4)&1) & ((B>>9)&1)))|(S_3_10&C_3_9);
  tmp = S_3_11^C_3_10;
  S_4_10 = tmp^(((A>>4)&1) & ((B>>10)&1));
  C_4_10 = (tmp&(((A>>4)&1) & ((B>>10)&1)))|(S_3_11&C_3_10);
  tmp = S_3_12^C_3_11;
  S_4_11 = tmp^(((A>>4)&1) & ((B>>11)&1));
  C_4_11 = (tmp&(((A>>4)&1) & ((B>>11)&1)))|(S_3_12&C_3_11);
  tmp = S_3_13^C_3_12;
  S_4_12 = tmp^(((A>>4)&1) & ((B>>12)&1));
  C_4_12 = (tmp&(((A>>4)&1) & ((B>>12)&1)))|(S_3_13&C_3_12);
  tmp = S_3_14^C_3_13;
  S_4_13 = tmp^(((A>>4)&1) & ((B>>13)&1));
  C_4_13 = (tmp&(((A>>4)&1) & ((B>>13)&1)))|(S_3_14&C_3_13);
  tmp = S_3_15^C_3_14;
  S_4_14 = tmp^(((A>>4)&1) & ((B>>14)&1));
  C_4_14 = (tmp&(((A>>4)&1) & ((B>>14)&1)))|(S_3_15&C_3_14);
  S_4_15 = C_3_15^(((((A>>4)&1) & ((B>>15)&1)))^1);
  C_4_15 = C_3_15&(((((A>>4)&1) & ((B>>15)&1)))^1);
  tmp = S_4_1^C_4_0;
  S_5_0 = tmp^(((A>>5)&1) & ((B>>0)&1));
  C_5_0 = (tmp&(((A>>5)&1) & ((B>>0)&1)))|(S_4_1&C_4_0);
  tmp = S_4_2^C_4_1;
  S_5_1 = tmp^(((A>>5)&1) & ((B>>1)&1));
  C_5_1 = (tmp&(((A>>5)&1) & ((B>>1)&1)))|(S_4_2&C_4_1);
  tmp = S_4_3^C_4_2;
  S_5_2 = tmp^(((A>>5)&1) & ((B>>2)&1));
  C_5_2 = (tmp&(((A>>5)&1) & ((B>>2)&1)))|(S_4_3&C_4_2);
  tmp = S_4_4^C_4_3;
  S_5_3 = tmp^(((A>>5)&1) & ((B>>3)&1));
  C_5_3 = (tmp&(((A>>5)&1) & ((B>>3)&1)))|(S_4_4&C_4_3);
  tmp = S_4_5^C_4_4;
  S_5_4 = tmp^(((A>>5)&1) & ((B>>4)&1));
  C_5_4 = (tmp&(((A>>5)&1) & ((B>>4)&1)))|(S_4_5&C_4_4);
  tmp = S_4_6^C_4_5;
  S_5_5 = tmp^(((A>>5)&1) & ((B>>5)&1));
  C_5_5 = (tmp&(((A>>5)&1) & ((B>>5)&1)))|(S_4_6&C_4_5);
  tmp = S_4_7^C_4_6;
  S_5_6 = tmp^(((A>>5)&1) & ((B>>6)&1));
  C_5_6 = (tmp&(((A>>5)&1) & ((B>>6)&1)))|(S_4_7&C_4_6);
  tmp = S_4_8^C_4_7;
  S_5_7 = tmp^(((A>>5)&1) & ((B>>7)&1));
  C_5_7 = (tmp&(((A>>5)&1) & ((B>>7)&1)))|(S_4_8&C_4_7);
  tmp = S_4_9^C_4_8;
  S_5_8 = tmp^(((A>>5)&1) & ((B>>8)&1));
  C_5_8 = (tmp&(((A>>5)&1) & ((B>>8)&1)))|(S_4_9&C_4_8);
  tmp = S_4_10^C_4_9;
  S_5_9 = tmp^(((A>>5)&1) & ((B>>9)&1));
  C_5_9 = (tmp&(((A>>5)&1) & ((B>>9)&1)))|(S_4_10&C_4_9);
  tmp = S_4_11^C_4_10;
  S_5_10 = tmp^(((A>>5)&1) & ((B>>10)&1));
  C_5_10 = (tmp&(((A>>5)&1) & ((B>>10)&1)))|(S_4_11&C_4_10);
  tmp = S_4_12^C_4_11;
  S_5_11 = tmp^(((A>>5)&1) & ((B>>11)&1));
  C_5_11 = (tmp&(((A>>5)&1) & ((B>>11)&1)))|(S_4_12&C_4_11);
  tmp = S_4_13^C_4_12;
  S_5_12 = tmp^(((A>>5)&1) & ((B>>12)&1));
  C_5_12 = (tmp&(((A>>5)&1) & ((B>>12)&1)))|(S_4_13&C_4_12);
  tmp = S_4_14^C_4_13;
  S_5_13 = tmp^(((A>>5)&1) & ((B>>13)&1));
  C_5_13 = (tmp&(((A>>5)&1) & ((B>>13)&1)))|(S_4_14&C_4_13);
  tmp = S_4_15^C_4_14;
  S_5_14 = tmp^(((A>>5)&1) & ((B>>14)&1));
  C_5_14 = (tmp&(((A>>5)&1) & ((B>>14)&1)))|(S_4_15&C_4_14);
  S_5_15 = C_4_15^(((((A>>5)&1) & ((B>>15)&1)))^1);
  C_5_15 = C_4_15&(((((A>>5)&1) & ((B>>15)&1)))^1);
  tmp = S_5_1^C_5_0;
  S_6_0 = tmp^(((A>>6)&1) & ((B>>0)&1));
  C_6_0 = (tmp&(((A>>6)&1) & ((B>>0)&1)))|(S_5_1&C_5_0);
  tmp = S_5_2^C_5_1;
  S_6_1 = tmp^(((A>>6)&1) & ((B>>1)&1));
  C_6_1 = (tmp&(((A>>6)&1) & ((B>>1)&1)))|(S_5_2&C_5_1);
  tmp = S_5_3^C_5_2;
  S_6_2 = tmp^(((A>>6)&1) & ((B>>2)&1));
  C_6_2 = (tmp&(((A>>6)&1) & ((B>>2)&1)))|(S_5_3&C_5_2);
  tmp = S_5_4^C_5_3;
  S_6_3 = tmp^(((A>>6)&1) & ((B>>3)&1));
  C_6_3 = (tmp&(((A>>6)&1) & ((B>>3)&1)))|(S_5_4&C_5_3);
  tmp = S_5_5^C_5_4;
  S_6_4 = tmp^(((A>>6)&1) & ((B>>4)&1));
  C_6_4 = (tmp&(((A>>6)&1) & ((B>>4)&1)))|(S_5_5&C_5_4);
  tmp = S_5_6^C_5_5;
  S_6_5 = tmp^(((A>>6)&1) & ((B>>5)&1));
  C_6_5 = (tmp&(((A>>6)&1) & ((B>>5)&1)))|(S_5_6&C_5_5);
  tmp = S_5_7^C_5_6;
  S_6_6 = tmp^(((A>>6)&1) & ((B>>6)&1));
  C_6_6 = (tmp&(((A>>6)&1) & ((B>>6)&1)))|(S_5_7&C_5_6);
  tmp = S_5_8^C_5_7;
  S_6_7 = tmp^(((A>>6)&1) & ((B>>7)&1));
  C_6_7 = (tmp&(((A>>6)&1) & ((B>>7)&1)))|(S_5_8&C_5_7);
  tmp = S_5_9^C_5_8;
  S_6_8 = tmp^(((A>>6)&1) & ((B>>8)&1));
  C_6_8 = (tmp&(((A>>6)&1) & ((B>>8)&1)))|(S_5_9&C_5_8);
  tmp = S_5_10^C_5_9;
  S_6_9 = tmp^(((A>>6)&1) & ((B>>9)&1));
  C_6_9 = (tmp&(((A>>6)&1) & ((B>>9)&1)))|(S_5_10&C_5_9);
  tmp = S_5_11^C_5_10;
  S_6_10 = tmp^(((A>>6)&1) & ((B>>10)&1));
  C_6_10 = (tmp&(((A>>6)&1) & ((B>>10)&1)))|(S_5_11&C_5_10);
  tmp = S_5_12^C_5_11;
  S_6_11 = tmp^(((A>>6)&1) & ((B>>11)&1));
  C_6_11 = (tmp&(((A>>6)&1) & ((B>>11)&1)))|(S_5_12&C_5_11);
  tmp = S_5_13^C_5_12;
  S_6_12 = tmp^(((A>>6)&1) & ((B>>12)&1));
  C_6_12 = (tmp&(((A>>6)&1) & ((B>>12)&1)))|(S_5_13&C_5_12);
  tmp = S_5_14^C_5_13;
  S_6_13 = tmp^(((A>>6)&1) & ((B>>13)&1));
  C_6_13 = (tmp&(((A>>6)&1) & ((B>>13)&1)))|(S_5_14&C_5_13);
  tmp = S_5_15^C_5_14;
  S_6_14 = tmp^(((A>>6)&1) & ((B>>14)&1));
  C_6_14 = (tmp&(((A>>6)&1) & ((B>>14)&1)))|(S_5_15&C_5_14);
  S_6_15 = C_5_15^(((((A>>6)&1) & ((B>>15)&1)))^1);
  C_6_15 = C_5_15&(((((A>>6)&1) & ((B>>15)&1)))^1);
  tmp = S_6_1^C_6_0;
  S_7_0 = tmp^(((A>>7)&1) & ((B>>0)&1));
  C_7_0 = (tmp&(((A>>7)&1) & ((B>>0)&1)))|(S_6_1&C_6_0);
  tmp = S_6_2^C_6_1;
  S_7_1 = tmp^(((A>>7)&1) & ((B>>1)&1));
  C_7_1 = (tmp&(((A>>7)&1) & ((B>>1)&1)))|(S_6_2&C_6_1);
  tmp = S_6_3^C_6_2;
  S_7_2 = tmp^(((A>>7)&1) & ((B>>2)&1));
  C_7_2 = (tmp&(((A>>7)&1) & ((B>>2)&1)))|(S_6_3&C_6_2);
  tmp = S_6_4^C_6_3;
  S_7_3 = tmp^(((A>>7)&1) & ((B>>3)&1));
  C_7_3 = (tmp&(((A>>7)&1) & ((B>>3)&1)))|(S_6_4&C_6_3);
  tmp = S_6_5^C_6_4;
  S_7_4 = tmp^(((A>>7)&1) & ((B>>4)&1));
  C_7_4 = (tmp&(((A>>7)&1) & ((B>>4)&1)))|(S_6_5&C_6_4);
  tmp = S_6_6^C_6_5;
  S_7_5 = tmp^(((A>>7)&1) & ((B>>5)&1));
  C_7_5 = (tmp&(((A>>7)&1) & ((B>>5)&1)))|(S_6_6&C_6_5);
  tmp = S_6_7^C_6_6;
  S_7_6 = tmp^(((A>>7)&1) & ((B>>6)&1));
  C_7_6 = (tmp&(((A>>7)&1) & ((B>>6)&1)))|(S_6_7&C_6_6);
  tmp = S_6_8^C_6_7;
  S_7_7 = tmp^(((A>>7)&1) & ((B>>7)&1));
  C_7_7 = (tmp&(((A>>7)&1) & ((B>>7)&1)))|(S_6_8&C_6_7);
  tmp = S_6_9^C_6_8;
  S_7_8 = tmp^(((A>>7)&1) & ((B>>8)&1));
  C_7_8 = (tmp&(((A>>7)&1) & ((B>>8)&1)))|(S_6_9&C_6_8);
  tmp = S_6_10^C_6_9;
  S_7_9 = tmp^(((A>>7)&1) & ((B>>9)&1));
  C_7_9 = (tmp&(((A>>7)&1) & ((B>>9)&1)))|(S_6_10&C_6_9);
  tmp = S_6_11^C_6_10;
  S_7_10 = tmp^(((A>>7)&1) & ((B>>10)&1));
  C_7_10 = (tmp&(((A>>7)&1) & ((B>>10)&1)))|(S_6_11&C_6_10);
  tmp = S_6_12^C_6_11;
  S_7_11 = tmp^(((A>>7)&1) & ((B>>11)&1));
  C_7_11 = (tmp&(((A>>7)&1) & ((B>>11)&1)))|(S_6_12&C_6_11);
  tmp = S_6_13^C_6_12;
  S_7_12 = tmp^(((A>>7)&1) & ((B>>12)&1));
  C_7_12 = (tmp&(((A>>7)&1) & ((B>>12)&1)))|(S_6_13&C_6_12);
  tmp = S_6_14^C_6_13;
  S_7_13 = tmp^(((A>>7)&1) & ((B>>13)&1));
  C_7_13 = (tmp&(((A>>7)&1) & ((B>>13)&1)))|(S_6_14&C_6_13);
  tmp = S_6_15^C_6_14;
  S_7_14 = tmp^(((A>>7)&1) & ((B>>14)&1));
  C_7_14 = (tmp&(((A>>7)&1) & ((B>>14)&1)))|(S_6_15&C_6_14);
  S_7_15 = C_6_15^(((((A>>7)&1) & ((B>>15)&1)))^1);
  C_7_15 = C_6_15&(((((A>>7)&1) & ((B>>15)&1)))^1);
  tmp = S_7_1^C_7_0;
  S_8_0 = tmp^(((A>>8)&1) & ((B>>0)&1));
  C_8_0 = (tmp&(((A>>8)&1) & ((B>>0)&1)))|(S_7_1&C_7_0);
  tmp = S_7_2^C_7_1;
  S_8_1 = tmp^(((A>>8)&1) & ((B>>1)&1));
  C_8_1 = (tmp&(((A>>8)&1) & ((B>>1)&1)))|(S_7_2&C_7_1);
  tmp = S_7_3^C_7_2;
  S_8_2 = tmp^(((A>>8)&1) & ((B>>2)&1));
  C_8_2 = (tmp&(((A>>8)&1) & ((B>>2)&1)))|(S_7_3&C_7_2);
  tmp = S_7_4^C_7_3;
  S_8_3 = tmp^(((A>>8)&1) & ((B>>3)&1));
  C_8_3 = (tmp&(((A>>8)&1) & ((B>>3)&1)))|(S_7_4&C_7_3);
  tmp = S_7_5^C_7_4;
  S_8_4 = tmp^(((A>>8)&1) & ((B>>4)&1));
  C_8_4 = (tmp&(((A>>8)&1) & ((B>>4)&1)))|(S_7_5&C_7_4);
  tmp = S_7_6^C_7_5;
  S_8_5 = tmp^(((A>>8)&1) & ((B>>5)&1));
  C_8_5 = (tmp&(((A>>8)&1) & ((B>>5)&1)))|(S_7_6&C_7_5);
  tmp = S_7_7^C_7_6;
  S_8_6 = tmp^(((A>>8)&1) & ((B>>6)&1));
  C_8_6 = (tmp&(((A>>8)&1) & ((B>>6)&1)))|(S_7_7&C_7_6);
  tmp = S_7_8^C_7_7;
  S_8_7 = tmp^(((A>>8)&1) & ((B>>7)&1));
  C_8_7 = (tmp&(((A>>8)&1) & ((B>>7)&1)))|(S_7_8&C_7_7);
  tmp = S_7_9^C_7_8;
  S_8_8 = tmp^(((A>>8)&1) & ((B>>8)&1));
  C_8_8 = (tmp&(((A>>8)&1) & ((B>>8)&1)))|(S_7_9&C_7_8);
  tmp = S_7_10^C_7_9;
  S_8_9 = tmp^(((A>>8)&1) & ((B>>9)&1));
  C_8_9 = (tmp&(((A>>8)&1) & ((B>>9)&1)))|(S_7_10&C_7_9);
  tmp = S_7_11^C_7_10;
  S_8_10 = tmp^(((A>>8)&1) & ((B>>10)&1));
  C_8_10 = (tmp&(((A>>8)&1) & ((B>>10)&1)))|(S_7_11&C_7_10);
  tmp = S_7_12^C_7_11;
  S_8_11 = tmp^(((A>>8)&1) & ((B>>11)&1));
  C_8_11 = (tmp&(((A>>8)&1) & ((B>>11)&1)))|(S_7_12&C_7_11);
  tmp = S_7_13^C_7_12;
  S_8_12 = tmp^(((A>>8)&1) & ((B>>12)&1));
  C_8_12 = (tmp&(((A>>8)&1) & ((B>>12)&1)))|(S_7_13&C_7_12);
  tmp = S_7_14^C_7_13;
  S_8_13 = tmp^(((A>>8)&1) & ((B>>13)&1));
  C_8_13 = (tmp&(((A>>8)&1) & ((B>>13)&1)))|(S_7_14&C_7_13);
  tmp = S_7_15^C_7_14;
  S_8_14 = tmp^(((A>>8)&1) & ((B>>14)&1));
  C_8_14 = (tmp&(((A>>8)&1) & ((B>>14)&1)))|(S_7_15&C_7_14);
  S_8_15 = C_7_15^(((((A>>8)&1) & ((B>>15)&1)))^1);
  C_8_15 = C_7_15&(((((A>>8)&1) & ((B>>15)&1)))^1);
  tmp = S_8_1^C_8_0;
  S_9_0 = tmp^(((A>>9)&1) & ((B>>0)&1));
  C_9_0 = (tmp&(((A>>9)&1) & ((B>>0)&1)))|(S_8_1&C_8_0);
  tmp = S_8_2^C_8_1;
  S_9_1 = tmp^(((A>>9)&1) & ((B>>1)&1));
  C_9_1 = (tmp&(((A>>9)&1) & ((B>>1)&1)))|(S_8_2&C_8_1);
  tmp = S_8_3^C_8_2;
  S_9_2 = tmp^(((A>>9)&1) & ((B>>2)&1));
  C_9_2 = (tmp&(((A>>9)&1) & ((B>>2)&1)))|(S_8_3&C_8_2);
  tmp = S_8_4^C_8_3;
  S_9_3 = tmp^(((A>>9)&1) & ((B>>3)&1));
  C_9_3 = (tmp&(((A>>9)&1) & ((B>>3)&1)))|(S_8_4&C_8_3);
  tmp = S_8_5^C_8_4;
  S_9_4 = tmp^(((A>>9)&1) & ((B>>4)&1));
  C_9_4 = (tmp&(((A>>9)&1) & ((B>>4)&1)))|(S_8_5&C_8_4);
  tmp = S_8_6^C_8_5;
  S_9_5 = tmp^(((A>>9)&1) & ((B>>5)&1));
  C_9_5 = (tmp&(((A>>9)&1) & ((B>>5)&1)))|(S_8_6&C_8_5);
  tmp = S_8_7^C_8_6;
  S_9_6 = tmp^(((A>>9)&1) & ((B>>6)&1));
  C_9_6 = (tmp&(((A>>9)&1) & ((B>>6)&1)))|(S_8_7&C_8_6);
  tmp = S_8_8^C_8_7;
  S_9_7 = tmp^(((A>>9)&1) & ((B>>7)&1));
  C_9_7 = (tmp&(((A>>9)&1) & ((B>>7)&1)))|(S_8_8&C_8_7);
  tmp = S_8_9^C_8_8;
  S_9_8 = tmp^(((A>>9)&1) & ((B>>8)&1));
  C_9_8 = (tmp&(((A>>9)&1) & ((B>>8)&1)))|(S_8_9&C_8_8);
  tmp = S_8_10^C_8_9;
  S_9_9 = tmp^(((A>>9)&1) & ((B>>9)&1));
  C_9_9 = (tmp&(((A>>9)&1) & ((B>>9)&1)))|(S_8_10&C_8_9);
  tmp = S_8_11^C_8_10;
  S_9_10 = tmp^(((A>>9)&1) & ((B>>10)&1));
  C_9_10 = (tmp&(((A>>9)&1) & ((B>>10)&1)))|(S_8_11&C_8_10);
  tmp = S_8_12^C_8_11;
  S_9_11 = tmp^(((A>>9)&1) & ((B>>11)&1));
  C_9_11 = (tmp&(((A>>9)&1) & ((B>>11)&1)))|(S_8_12&C_8_11);
  tmp = S_8_13^C_8_12;
  S_9_12 = tmp^(((A>>9)&1) & ((B>>12)&1));
  C_9_12 = (tmp&(((A>>9)&1) & ((B>>12)&1)))|(S_8_13&C_8_12);
  tmp = S_8_14^C_8_13;
  S_9_13 = tmp^(((A>>9)&1) & ((B>>13)&1));
  C_9_13 = (tmp&(((A>>9)&1) & ((B>>13)&1)))|(S_8_14&C_8_13);
  tmp = S_8_15^C_8_14;
  S_9_14 = tmp^(((A>>9)&1) & ((B>>14)&1));
  C_9_14 = (tmp&(((A>>9)&1) & ((B>>14)&1)))|(S_8_15&C_8_14);
  S_9_15 = C_8_15^(((((A>>9)&1) & ((B>>15)&1)))^1);
  C_9_15 = C_8_15&(((((A>>9)&1) & ((B>>15)&1)))^1);
  tmp = S_9_1^C_9_0;
  S_10_0 = tmp^(((A>>10)&1) & ((B>>0)&1));
  C_10_0 = (tmp&(((A>>10)&1) & ((B>>0)&1)))|(S_9_1&C_9_0);
  tmp = S_9_2^C_9_1;
  S_10_1 = tmp^(((A>>10)&1) & ((B>>1)&1));
  C_10_1 = (tmp&(((A>>10)&1) & ((B>>1)&1)))|(S_9_2&C_9_1);
  tmp = S_9_3^C_9_2;
  S_10_2 = tmp^(((A>>10)&1) & ((B>>2)&1));
  C_10_2 = (tmp&(((A>>10)&1) & ((B>>2)&1)))|(S_9_3&C_9_2);
  tmp = S_9_4^C_9_3;
  S_10_3 = tmp^(((A>>10)&1) & ((B>>3)&1));
  C_10_3 = (tmp&(((A>>10)&1) & ((B>>3)&1)))|(S_9_4&C_9_3);
  tmp = S_9_5^C_9_4;
  S_10_4 = tmp^(((A>>10)&1) & ((B>>4)&1));
  C_10_4 = (tmp&(((A>>10)&1) & ((B>>4)&1)))|(S_9_5&C_9_4);
  tmp = S_9_6^C_9_5;
  S_10_5 = tmp^(((A>>10)&1) & ((B>>5)&1));
  C_10_5 = (tmp&(((A>>10)&1) & ((B>>5)&1)))|(S_9_6&C_9_5);
  tmp = S_9_7^C_9_6;
  S_10_6 = tmp^(((A>>10)&1) & ((B>>6)&1));
  C_10_6 = (tmp&(((A>>10)&1) & ((B>>6)&1)))|(S_9_7&C_9_6);
  tmp = S_9_8^C_9_7;
  S_10_7 = tmp^(((A>>10)&1) & ((B>>7)&1));
  C_10_7 = (tmp&(((A>>10)&1) & ((B>>7)&1)))|(S_9_8&C_9_7);
  tmp = S_9_9^C_9_8;
  S_10_8 = tmp^(((A>>10)&1) & ((B>>8)&1));
  C_10_8 = (tmp&(((A>>10)&1) & ((B>>8)&1)))|(S_9_9&C_9_8);
  tmp = S_9_10^C_9_9;
  S_10_9 = tmp^(((A>>10)&1) & ((B>>9)&1));
  C_10_9 = (tmp&(((A>>10)&1) & ((B>>9)&1)))|(S_9_10&C_9_9);
  tmp = S_9_11^C_9_10;
  S_10_10 = tmp^(((A>>10)&1) & ((B>>10)&1));
  C_10_10 = (tmp&(((A>>10)&1) & ((B>>10)&1)))|(S_9_11&C_9_10);
  tmp = S_9_12^C_9_11;
  S_10_11 = tmp^(((A>>10)&1) & ((B>>11)&1));
  C_10_11 = (tmp&(((A>>10)&1) & ((B>>11)&1)))|(S_9_12&C_9_11);
  tmp = S_9_13^C_9_12;
  S_10_12 = tmp^(((A>>10)&1) & ((B>>12)&1));
  C_10_12 = (tmp&(((A>>10)&1) & ((B>>12)&1)))|(S_9_13&C_9_12);
  tmp = S_9_14^C_9_13;
  S_10_13 = tmp^(((A>>10)&1) & ((B>>13)&1));
  C_10_13 = (tmp&(((A>>10)&1) & ((B>>13)&1)))|(S_9_14&C_9_13);
  tmp = S_9_15^C_9_14;
  S_10_14 = tmp^(((A>>10)&1) & ((B>>14)&1));
  C_10_14 = (tmp&(((A>>10)&1) & ((B>>14)&1)))|(S_9_15&C_9_14);
  S_10_15 = C_9_15^(((((A>>10)&1) & ((B>>15)&1)))^1);
  C_10_15 = C_9_15&(((((A>>10)&1) & ((B>>15)&1)))^1);
  tmp = S_10_1^C_10_0;
  S_11_0 = tmp^(((A>>11)&1) & ((B>>0)&1));
  C_11_0 = (tmp&(((A>>11)&1) & ((B>>0)&1)))|(S_10_1&C_10_0);
  tmp = S_10_2^C_10_1;
  S_11_1 = tmp^(((A>>11)&1) & ((B>>1)&1));
  C_11_1 = (tmp&(((A>>11)&1) & ((B>>1)&1)))|(S_10_2&C_10_1);
  tmp = S_10_3^C_10_2;
  S_11_2 = tmp^(((A>>11)&1) & ((B>>2)&1));
  C_11_2 = (tmp&(((A>>11)&1) & ((B>>2)&1)))|(S_10_3&C_10_2);
  tmp = S_10_4^C_10_3;
  S_11_3 = tmp^(((A>>11)&1) & ((B>>3)&1));
  C_11_3 = (tmp&(((A>>11)&1) & ((B>>3)&1)))|(S_10_4&C_10_3);
  tmp = S_10_5^C_10_4;
  S_11_4 = tmp^(((A>>11)&1) & ((B>>4)&1));
  C_11_4 = (tmp&(((A>>11)&1) & ((B>>4)&1)))|(S_10_5&C_10_4);
  tmp = S_10_6^C_10_5;
  S_11_5 = tmp^(((A>>11)&1) & ((B>>5)&1));
  C_11_5 = (tmp&(((A>>11)&1) & ((B>>5)&1)))|(S_10_6&C_10_5);
  tmp = S_10_7^C_10_6;
  S_11_6 = tmp^(((A>>11)&1) & ((B>>6)&1));
  C_11_6 = (tmp&(((A>>11)&1) & ((B>>6)&1)))|(S_10_7&C_10_6);
  tmp = S_10_8^C_10_7;
  S_11_7 = tmp^(((A>>11)&1) & ((B>>7)&1));
  C_11_7 = (tmp&(((A>>11)&1) & ((B>>7)&1)))|(S_10_8&C_10_7);
  tmp = S_10_9^C_10_8;
  S_11_8 = tmp^(((A>>11)&1) & ((B>>8)&1));
  C_11_8 = (tmp&(((A>>11)&1) & ((B>>8)&1)))|(S_10_9&C_10_8);
  tmp = S_10_10^C_10_9;
  S_11_9 = tmp^(((A>>11)&1) & ((B>>9)&1));
  C_11_9 = (tmp&(((A>>11)&1) & ((B>>9)&1)))|(S_10_10&C_10_9);
  tmp = S_10_11^C_10_10;
  S_11_10 = tmp^(((A>>11)&1) & ((B>>10)&1));
  C_11_10 = (tmp&(((A>>11)&1) & ((B>>10)&1)))|(S_10_11&C_10_10);
  tmp = S_10_12^C_10_11;
  S_11_11 = tmp^(((A>>11)&1) & ((B>>11)&1));
  C_11_11 = (tmp&(((A>>11)&1) & ((B>>11)&1)))|(S_10_12&C_10_11);
  tmp = S_10_13^C_10_12;
  S_11_12 = tmp^(((A>>11)&1) & ((B>>12)&1));
  C_11_12 = (tmp&(((A>>11)&1) & ((B>>12)&1)))|(S_10_13&C_10_12);
  tmp = S_10_14^C_10_13;
  S_11_13 = tmp^(((A>>11)&1) & ((B>>13)&1));
  C_11_13 = (tmp&(((A>>11)&1) & ((B>>13)&1)))|(S_10_14&C_10_13);
  tmp = S_10_15^C_10_14;
  S_11_14 = tmp^(((A>>11)&1) & ((B>>14)&1));
  C_11_14 = (tmp&(((A>>11)&1) & ((B>>14)&1)))|(S_10_15&C_10_14);
  S_11_15 = C_10_15^(((((A>>11)&1) & ((B>>15)&1)))^1);
  C_11_15 = C_10_15&(((((A>>11)&1) & ((B>>15)&1)))^1);
  tmp = S_11_1^C_11_0;
  S_12_0 = tmp^(((A>>12)&1) & ((B>>0)&1));
  C_12_0 = (tmp&(((A>>12)&1) & ((B>>0)&1)))|(S_11_1&C_11_0);
  tmp = S_11_2^C_11_1;
  S_12_1 = tmp^(((A>>12)&1) & ((B>>1)&1));
  C_12_1 = (tmp&(((A>>12)&1) & ((B>>1)&1)))|(S_11_2&C_11_1);
  tmp = S_11_3^C_11_2;
  S_12_2 = tmp^(((A>>12)&1) & ((B>>2)&1));
  C_12_2 = (tmp&(((A>>12)&1) & ((B>>2)&1)))|(S_11_3&C_11_2);
  tmp = S_11_4^C_11_3;
  S_12_3 = tmp^(((A>>12)&1) & ((B>>3)&1));
  C_12_3 = (tmp&(((A>>12)&1) & ((B>>3)&1)))|(S_11_4&C_11_3);
  tmp = S_11_5^C_11_4;
  S_12_4 = tmp^(((A>>12)&1) & ((B>>4)&1));
  C_12_4 = (tmp&(((A>>12)&1) & ((B>>4)&1)))|(S_11_5&C_11_4);
  tmp = S_11_6^C_11_5;
  S_12_5 = tmp^(((A>>12)&1) & ((B>>5)&1));
  C_12_5 = (tmp&(((A>>12)&1) & ((B>>5)&1)))|(S_11_6&C_11_5);
  tmp = S_11_7^C_11_6;
  S_12_6 = tmp^(((A>>12)&1) & ((B>>6)&1));
  C_12_6 = (tmp&(((A>>12)&1) & ((B>>6)&1)))|(S_11_7&C_11_6);
  tmp = S_11_8^C_11_7;
  S_12_7 = tmp^(((A>>12)&1) & ((B>>7)&1));
  C_12_7 = (tmp&(((A>>12)&1) & ((B>>7)&1)))|(S_11_8&C_11_7);
  tmp = S_11_9^C_11_8;
  S_12_8 = tmp^(((A>>12)&1) & ((B>>8)&1));
  C_12_8 = (tmp&(((A>>12)&1) & ((B>>8)&1)))|(S_11_9&C_11_8);
  tmp = S_11_10^C_11_9;
  S_12_9 = tmp^(((A>>12)&1) & ((B>>9)&1));
  C_12_9 = (tmp&(((A>>12)&1) & ((B>>9)&1)))|(S_11_10&C_11_9);
  tmp = S_11_11^C_11_10;
  S_12_10 = tmp^(((A>>12)&1) & ((B>>10)&1));
  C_12_10 = (tmp&(((A>>12)&1) & ((B>>10)&1)))|(S_11_11&C_11_10);
  tmp = S_11_12^C_11_11;
  S_12_11 = tmp^(((A>>12)&1) & ((B>>11)&1));
  C_12_11 = (tmp&(((A>>12)&1) & ((B>>11)&1)))|(S_11_12&C_11_11);
  tmp = S_11_13^C_11_12;
  S_12_12 = tmp^(((A>>12)&1) & ((B>>12)&1));
  C_12_12 = (tmp&(((A>>12)&1) & ((B>>12)&1)))|(S_11_13&C_11_12);
  tmp = S_11_14^C_11_13;
  S_12_13 = tmp^(((A>>12)&1) & ((B>>13)&1));
  C_12_13 = (tmp&(((A>>12)&1) & ((B>>13)&1)))|(S_11_14&C_11_13);
  tmp = S_11_15^C_11_14;
  S_12_14 = tmp^(((A>>12)&1) & ((B>>14)&1));
  C_12_14 = (tmp&(((A>>12)&1) & ((B>>14)&1)))|(S_11_15&C_11_14);
  S_12_15 = C_11_15^(((((A>>12)&1) & ((B>>15)&1)))^1);
  C_12_15 = C_11_15&(((((A>>12)&1) & ((B>>15)&1)))^1);
  tmp = S_12_1^C_12_0;
  S_13_0 = tmp^(((A>>13)&1) & ((B>>0)&1));
  C_13_0 = (tmp&(((A>>13)&1) & ((B>>0)&1)))|(S_12_1&C_12_0);
  tmp = S_12_2^C_12_1;
  S_13_1 = tmp^(((A>>13)&1) & ((B>>1)&1));
  C_13_1 = (tmp&(((A>>13)&1) & ((B>>1)&1)))|(S_12_2&C_12_1);
  tmp = S_12_3^C_12_2;
  S_13_2 = tmp^(((A>>13)&1) & ((B>>2)&1));
  C_13_2 = (tmp&(((A>>13)&1) & ((B>>2)&1)))|(S_12_3&C_12_2);
  tmp = S_12_4^C_12_3;
  S_13_3 = tmp^(((A>>13)&1) & ((B>>3)&1));
  C_13_3 = (tmp&(((A>>13)&1) & ((B>>3)&1)))|(S_12_4&C_12_3);
  tmp = S_12_5^C_12_4;
  S_13_4 = tmp^(((A>>13)&1) & ((B>>4)&1));
  C_13_4 = (tmp&(((A>>13)&1) & ((B>>4)&1)))|(S_12_5&C_12_4);
  tmp = S_12_6^C_12_5;
  S_13_5 = tmp^(((A>>13)&1) & ((B>>5)&1));
  C_13_5 = (tmp&(((A>>13)&1) & ((B>>5)&1)))|(S_12_6&C_12_5);
  tmp = S_12_7^C_12_6;
  S_13_6 = tmp^(((A>>13)&1) & ((B>>6)&1));
  C_13_6 = (tmp&(((A>>13)&1) & ((B>>6)&1)))|(S_12_7&C_12_6);
  tmp = S_12_8^C_12_7;
  S_13_7 = tmp^(((A>>13)&1) & ((B>>7)&1));
  C_13_7 = (tmp&(((A>>13)&1) & ((B>>7)&1)))|(S_12_8&C_12_7);
  tmp = S_12_9^C_12_8;
  S_13_8 = tmp^(((A>>13)&1) & ((B>>8)&1));
  C_13_8 = (tmp&(((A>>13)&1) & ((B>>8)&1)))|(S_12_9&C_12_8);
  tmp = S_12_10^C_12_9;
  S_13_9 = tmp^(((A>>13)&1) & ((B>>9)&1));
  C_13_9 = (tmp&(((A>>13)&1) & ((B>>9)&1)))|(S_12_10&C_12_9);
  tmp = S_12_11^C_12_10;
  S_13_10 = tmp^(((A>>13)&1) & ((B>>10)&1));
  C_13_10 = (tmp&(((A>>13)&1) & ((B>>10)&1)))|(S_12_11&C_12_10);
  tmp = S_12_12^C_12_11;
  S_13_11 = tmp^(((A>>13)&1) & ((B>>11)&1));
  C_13_11 = (tmp&(((A>>13)&1) & ((B>>11)&1)))|(S_12_12&C_12_11);
  tmp = S_12_13^C_12_12;
  S_13_12 = tmp^(((A>>13)&1) & ((B>>12)&1));
  C_13_12 = (tmp&(((A>>13)&1) & ((B>>12)&1)))|(S_12_13&C_12_12);
  tmp = S_12_14^C_12_13;
  S_13_13 = tmp^(((A>>13)&1) & ((B>>13)&1));
  C_13_13 = (tmp&(((A>>13)&1) & ((B>>13)&1)))|(S_12_14&C_12_13);
  tmp = S_12_15^C_12_14;
  S_13_14 = tmp^(((A>>13)&1) & ((B>>14)&1));
  C_13_14 = (tmp&(((A>>13)&1) & ((B>>14)&1)))|(S_12_15&C_12_14);
  S_13_15 = C_12_15^(((((A>>13)&1) & ((B>>15)&1)))^1);
  C_13_15 = C_12_15&(((((A>>13)&1) & ((B>>15)&1)))^1);
  tmp = S_13_1^C_13_0;
  S_14_0 = tmp^(((A>>14)&1) & ((B>>0)&1));
  C_14_0 = (tmp&(((A>>14)&1) & ((B>>0)&1)))|(S_13_1&C_13_0);
  tmp = S_13_2^C_13_1;
  S_14_1 = tmp^(((A>>14)&1) & ((B>>1)&1));
  C_14_1 = (tmp&(((A>>14)&1) & ((B>>1)&1)))|(S_13_2&C_13_1);
  tmp = S_13_3^C_13_2;
  S_14_2 = tmp^(((A>>14)&1) & ((B>>2)&1));
  C_14_2 = (tmp&(((A>>14)&1) & ((B>>2)&1)))|(S_13_3&C_13_2);
  tmp = S_13_4^C_13_3;
  S_14_3 = tmp^(((A>>14)&1) & ((B>>3)&1));
  C_14_3 = (tmp&(((A>>14)&1) & ((B>>3)&1)))|(S_13_4&C_13_3);
  tmp = S_13_5^C_13_4;
  S_14_4 = tmp^(((A>>14)&1) & ((B>>4)&1));
  C_14_4 = (tmp&(((A>>14)&1) & ((B>>4)&1)))|(S_13_5&C_13_4);
  tmp = S_13_6^C_13_5;
  S_14_5 = tmp^(((A>>14)&1) & ((B>>5)&1));
  C_14_5 = (tmp&(((A>>14)&1) & ((B>>5)&1)))|(S_13_6&C_13_5);
  tmp = S_13_7^C_13_6;
  S_14_6 = tmp^(((A>>14)&1) & ((B>>6)&1));
  C_14_6 = (tmp&(((A>>14)&1) & ((B>>6)&1)))|(S_13_7&C_13_6);
  tmp = S_13_8^C_13_7;
  S_14_7 = tmp^(((A>>14)&1) & ((B>>7)&1));
  C_14_7 = (tmp&(((A>>14)&1) & ((B>>7)&1)))|(S_13_8&C_13_7);
  tmp = S_13_9^C_13_8;
  S_14_8 = tmp^(((A>>14)&1) & ((B>>8)&1));
  C_14_8 = (tmp&(((A>>14)&1) & ((B>>8)&1)))|(S_13_9&C_13_8);
  tmp = S_13_10^C_13_9;
  S_14_9 = tmp^(((A>>14)&1) & ((B>>9)&1));
  C_14_9 = (tmp&(((A>>14)&1) & ((B>>9)&1)))|(S_13_10&C_13_9);
  tmp = S_13_11^C_13_10;
  S_14_10 = tmp^(((A>>14)&1) & ((B>>10)&1));
  C_14_10 = (tmp&(((A>>14)&1) & ((B>>10)&1)))|(S_13_11&C_13_10);
  tmp = S_13_12^C_13_11;
  S_14_11 = tmp^(((A>>14)&1) & ((B>>11)&1));
  C_14_11 = (tmp&(((A>>14)&1) & ((B>>11)&1)))|(S_13_12&C_13_11);
  tmp = S_13_13^C_13_12;
  S_14_12 = tmp^(((A>>14)&1) & ((B>>12)&1));
  C_14_12 = (tmp&(((A>>14)&1) & ((B>>12)&1)))|(S_13_13&C_13_12);
  tmp = S_13_14^C_13_13;
  S_14_13 = tmp^(((A>>14)&1) & ((B>>13)&1));
  C_14_13 = (tmp&(((A>>14)&1) & ((B>>13)&1)))|(S_13_14&C_13_13);
  tmp = S_13_15^C_13_14;
  S_14_14 = tmp^(((A>>14)&1) & ((B>>14)&1));
  C_14_14 = (tmp&(((A>>14)&1) & ((B>>14)&1)))|(S_13_15&C_13_14);
  S_14_15 = C_13_15^(((((A>>14)&1) & ((B>>15)&1)))^1);
  C_14_15 = C_13_15&(((((A>>14)&1) & ((B>>15)&1)))^1);
  tmp = S_14_1^C_14_0;
  S_15_0 = tmp^(((((A>>15)&1) & ((B>>0)&1)))^1);
  C_15_0 = (tmp&(((((A>>15)&1) & ((B>>0)&1)))^1))|(S_14_1&C_14_0);
  tmp = S_14_2^C_14_1;
  S_15_1 = tmp^(((((A>>15)&1) & ((B>>1)&1)))^1);
  C_15_1 = (tmp&(((((A>>15)&1) & ((B>>1)&1)))^1))|(S_14_2&C_14_1);
  tmp = S_14_3^C_14_2;
  S_15_2 = tmp^(((((A>>15)&1) & ((B>>2)&1)))^1);
  C_15_2 = (tmp&(((((A>>15)&1) & ((B>>2)&1)))^1))|(S_14_3&C_14_2);
  tmp = S_14_4^C_14_3;
  S_15_3 = tmp^(((((A>>15)&1) & ((B>>3)&1)))^1);
  C_15_3 = (tmp&(((((A>>15)&1) & ((B>>3)&1)))^1))|(S_14_4&C_14_3);
  tmp = S_14_5^C_14_4;
  S_15_4 = tmp^(((((A>>15)&1) & ((B>>4)&1)))^1);
  C_15_4 = (tmp&(((((A>>15)&1) & ((B>>4)&1)))^1))|(S_14_5&C_14_4);
  tmp = S_14_6^C_14_5;
  S_15_5 = tmp^(((((A>>15)&1) & ((B>>5)&1)))^1);
  C_15_5 = (tmp&(((((A>>15)&1) & ((B>>5)&1)))^1))|(S_14_6&C_14_5);
  tmp = S_14_7^C_14_6;
  S_15_6 = tmp^(((((A>>15)&1) & ((B>>6)&1)))^1);
  C_15_6 = (tmp&(((((A>>15)&1) & ((B>>6)&1)))^1))|(S_14_7&C_14_6);
  tmp = S_14_8^C_14_7;
  S_15_7 = tmp^(((((A>>15)&1) & ((B>>7)&1)))^1);
  C_15_7 = (tmp&(((((A>>15)&1) & ((B>>7)&1)))^1))|(S_14_8&C_14_7);
  tmp = S_14_9^C_14_8;
  S_15_8 = tmp^(((((A>>15)&1) & ((B>>8)&1)))^1);
  C_15_8 = (tmp&(((((A>>15)&1) & ((B>>8)&1)))^1))|(S_14_9&C_14_8);
  tmp = S_14_10^C_14_9;
  S_15_9 = tmp^(((((A>>15)&1) & ((B>>9)&1)))^1);
  C_15_9 = (tmp&(((((A>>15)&1) & ((B>>9)&1)))^1))|(S_14_10&C_14_9);
  tmp = S_14_11^C_14_10;
  S_15_10 = tmp^(((((A>>15)&1) & ((B>>10)&1)))^1);
  C_15_10 = (tmp&(((((A>>15)&1) & ((B>>10)&1)))^1))|(S_14_11&C_14_10);
  tmp = S_14_12^C_14_11;
  S_15_11 = tmp^(((((A>>15)&1) & ((B>>11)&1)))^1);
  C_15_11 = (tmp&(((((A>>15)&1) & ((B>>11)&1)))^1))|(S_14_12&C_14_11);
  tmp = S_14_13^C_14_12;
  S_15_12 = tmp^(((((A>>15)&1) & ((B>>12)&1)))^1);
  C_15_12 = (tmp&(((((A>>15)&1) & ((B>>12)&1)))^1))|(S_14_13&C_14_12);
  tmp = S_14_14^C_14_13;
  S_15_13 = tmp^(((((A>>15)&1) & ((B>>13)&1)))^1);
  C_15_13 = (tmp&(((((A>>15)&1) & ((B>>13)&1)))^1))|(S_14_14&C_14_13);
  tmp = S_14_15^C_14_14;
  S_15_14 = tmp^(((((A>>15)&1) & ((B>>14)&1)))^1);
  C_15_14 = (tmp&(((((A>>15)&1) & ((B>>14)&1)))^1))|(S_14_15&C_14_14);
  S_15_15 = C_14_15^(((A>>15)&1) & ((B>>15)&1));
  C_15_15 = C_14_15&(((A>>15)&1) & ((B>>15)&1));
  S_16_0 = S_15_1^C_15_0;
  C_16_0 = S_15_1&C_15_0;
  tmp = S_15_2^C_16_0;
  S_16_1 = tmp^C_15_1;
  C_16_1 = (tmp&C_15_1)|(S_15_2&C_16_0);
  tmp = S_15_3^C_16_1;
  S_16_2 = tmp^C_15_2;
  C_16_2 = (tmp&C_15_2)|(S_15_3&C_16_1);
  tmp = S_15_4^C_16_2;
  S_16_3 = tmp^C_15_3;
  C_16_3 = (tmp&C_15_3)|(S_15_4&C_16_2);
  tmp = S_15_5^C_16_3;
  S_16_4 = tmp^C_15_4;
  C_16_4 = (tmp&C_15_4)|(S_15_5&C_16_3);
  tmp = S_15_6^C_16_4;
  S_16_5 = tmp^C_15_5;
  C_16_5 = (tmp&C_15_5)|(S_15_6&C_16_4);
  tmp = S_15_7^C_16_5;
  S_16_6 = tmp^C_15_6;
  C_16_6 = (tmp&C_15_6)|(S_15_7&C_16_5);
  tmp = S_15_8^C_16_6;
  S_16_7 = tmp^C_15_7;
  C_16_7 = (tmp&C_15_7)|(S_15_8&C_16_6);
  tmp = S_15_9^C_16_7;
  S_16_8 = tmp^C_15_8;
  C_16_8 = (tmp&C_15_8)|(S_15_9&C_16_7);
  tmp = S_15_10^C_16_8;
  S_16_9 = tmp^C_15_9;
  C_16_9 = (tmp&C_15_9)|(S_15_10&C_16_8);
  tmp = S_15_11^C_16_9;
  S_16_10 = tmp^C_15_10;
  C_16_10 = (tmp&C_15_10)|(S_15_11&C_16_9);
  tmp = S_15_12^C_16_10;
  S_16_11 = tmp^C_15_11;
  C_16_11 = (tmp&C_15_11)|(S_15_12&C_16_10);
  tmp = S_15_13^C_16_11;
  S_16_12 = tmp^C_15_12;
  C_16_12 = (tmp&C_15_12)|(S_15_13&C_16_11);
  tmp = S_15_14^C_16_12;
  S_16_13 = tmp^C_15_13;
  C_16_13 = (tmp&C_15_13)|(S_15_14&C_16_12);
  tmp = S_15_15^C_16_13;
  S_16_14 = tmp^C_15_14;
  C_16_14 = (tmp&C_15_14)|(S_15_15&C_16_13);
  tmp = 1^C_16_14;
  S_16_15 = tmp^C_15_15;
  C_16_15 = (tmp&C_15_15)|(1&C_16_14);
  P = 0;
  P |= (S_2_0 & 1) << 2;
  P |= (S_3_0 & 1) << 3;
  P |= (S_4_0 & 1) << 4;
  P |= (S_5_0 & 1) << 5;
  P |= (S_6_0 & 1) << 6;
  P |= (S_7_0 & 1) << 7;
  P |= (S_8_0 & 1) << 8;
  P |= (S_9_0 & 1) << 9;
  P |= (S_10_0 & 1) << 10;
  P |= (S_11_0 & 1) << 11;
  P |= (S_12_0 & 1) << 12;
  P |= (S_13_0 & 1) << 13;
  P |= (S_14_0 & 1) << 14;
  P |= (S_15_0 & 1) << 15;
  P |= (S_16_0 & 1) << 16;
  P |= (S_16_1 & 1) << 17;
  P |= (S_16_2 & 1) << 18;
  P |= (S_16_3 & 1) << 19;
  P |= (S_16_4 & 1) << 20;
  P |= (S_16_5 & 1) << 21;
  P |= (S_16_6 & 1) << 22;
  P |= (S_16_7 & 1) << 23;
  P |= (S_16_8 & 1) << 24;
  P |= (S_16_9 & 1) << 25;
  P |= (S_16_10 & 1) << 26;
  P |= (S_16_11 & 1) << 27;
  P |= (S_16_12 & 1) << 28;
  P |= (S_16_13 & 1) << 29;
  P |= (S_16_14 & 1) << 30;
  P |= (S_16_15 & 1) << 31;
  return P;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.00089 %
// MAE = 38343 
// WCE% = 0.0046 %
// WCE = 196599 
// WCRE% = 1500.00 %
// EP% = 93.75 %
// MRE% = 0.098 %
// MSE = 25053.976e5 
// PDK45_PWR = 1.775 mW
// PDK45_AREA = 2031.1 um2
// PDK45_DELAY = 2.67 ns



int32_t evoapproxlib::evoapprox_t::mul16s_HHP(int16_t A, int16_t B)
{
 uint32_t Z;
 uint8_t n1040,n91,n1051,n714,n1000,n1050,n789,n97,n1307,n1306,n1305,n1304,n1303,n94,n538,n539,n536,n537,n534,n95,n532,n533,n530,n531,n1041,n158,n1195,n715,n629,n159,n1028,n442,n788,n443,n1048,n440,n679,n628,n441,n950,n878,n1198,n1339,n262,n900,n1043,n951,n1132,n1013,n84,n87,n86,n81,n1016,n1015,n1014,n1152,n1153,n1150,n1151,n89,n1154,n1155,n156,n1026,n1044,n157,n1299,n1302,n392,n393,n390,n391,n397,n394,n395,n398,n1300,n1351,n555,n1147,n953,Z24,n711,n1146,n240,n767,n242,n535,n244,n245,n246,n766,n248,n249,n941,n718,n719,n406,n764,n499,n498,n329,n328,n327,n326,n325,n324,n491,n490,n493,n320,n811,n810,n813,n812,n815,n945,n817,n816,n819,n818,n1275,n944,n1273,n1271,n407,n1025,n632,n771,n579,n730,n602,Z11,n948,n463,n1141,n893,n404,n627,n925,n663,n927,n148,n921,n920,n664,n665,n143,n142,n141,n140,n147,n146,n145,n144,n74,n75,n76,n77,n70,n71,n73,n78,n79,Z8,n864,n865,n866,n867,n860,n861,n862,n863,n868,n869,n1019,n1143,n800,n895,n845,n955,n958,n229,n1310,n701,Z29,n885,n894,n700,n1021,n801,n703,n1270,n1057,n1056,n1055,n1054,n1053,n1052,n448,n449,n446,n447,n444,n445,n569,n568,n1059,n1058,n1295,n1294,n1297,n733,n1291,n1290,n1293,n1292,n1091,n226,n706,n1350,n1298,n227,n731,n224,n708,n225,n468,n1144,n279,n343,n1209,n352,n693,n692,n691,n690,n697,n696,n695,n694,n699,n698,n848,n363,n362,n361,n360,n1127,n1126,n365,n364,n1093,n1129,n570,n746,n598,n599,n1018,n590,n591,n592,n593,n594,n595,n596,n597,n1123,n510,n918,n919,n1122,n914,n915,n916,n917,n910,n911,n912,n913,n415,n367,n882,n366,n511,n954,n337,n622,n623,n620,n621,n187,n185,n184,n183,n182,n181,n180,n968,n749,n748,n219,n218,n217,n216,n215,n214,n213,n740,n211,n210,n1224,n1225,n1226,n1227,n1220,n1221,n1222,n1223,n844,n351,n1197,n1228,n987,n829,n985,n984,n983,n982,n981,n980,n820,n821,n822,n823,n824,n825,n826,n988,n1097,n963,n546,Z23,n1148,n549,Z12,n132,n133,n130,n131,n136,n137,n134,n135,n1157,n1029,n138,n139,n1096,n962,n85,n1120,n976,n1012,Z16,Z9,n283,n1158,n1311,n1312,n1313,n1314,n1315,n1316,n1317,n1318,n520,n523,n522,n525,n524,n527,n526,n83,n472,n660,n82,n402,n470,Z2,n403,n1189,n964,n899,n400,n1188,n1102,n401,n960,n661,n1156,n88,n1167,n1166,n1165,n1164,n1163,n1162,n1161,n1160,n796,n967,n794,n405,n419,n418,n1169,n1168,n1082,n98,n344,n1008,n1009,n92,n93,n90,n1007,n96,n1001,n1002,n1003,n647,n742,n1349,n128,n548,n1199,n389,n388,n515,n385,n384,n387,n386,n381,n380,n383,n382,n519,n977,n1138,n253,n252,n251,n250,n257,n256,n255,n254,n709,n121,n259,n258,n338,n572,n318,n319,n123,n573,n312,n313,n310,n311,n316,n317,n314,n315,n1268,n1269,n571,Z28,n747,n926,n1260,n1261,n1262,n1263,n1264,Z6,n1266,n577,n898,n574,Z26,n414,n1065,n1194,n886,n176,n177,n174,n175,n172,n173,n170,n171,n1112,n178,n179,n774,n775,n776,n777,n770,n678,n772,n773,n675,n674,n677,n676,n671,n670,n673,n672,n626,n399,n956,Z5,n1145,n802,n957,n799,n877,n891,n875,n625,n1219,n1218,n871,n870,n1215,n1214,n1217,n1211,n1210,n1213,n1212,n892,n189,n778,n188,n779,n1135,n897,n1193,n669,n896,n966,n961,n1038,n959,n741,n702,n459,n458,n512,n513,n514,n1045,n1046,n1047,n451,n450,n453,n452,n455,n454,n457,n456,n1286,n1287,n1284,n1285,n1282,n1283,n1280,n1281,n1321,n1301,n1323,n1322,n1325,n798,n1288,n1289,n1191,n883,n1032,n104,n716,n1237,n795,n241,n1192,n745,n243,n744,n292,n712,n368,n713,n1035,n1034,n1037,n1036,n428,n429,n358,n359,n356,n357,n354,n427,n1130,n421,n422,n423,n589,n588,n743,n583,n582,n581,n580,n587,n586,n585,n584,n952,n909,n908,n907,n906,n905,n904,n903,n902,n901,n611,n578,Z7,n929,n978,n545,n790,n631,n630,n633,n1216,n635,n634,n637,n636,n639,n487,n610,n1027,n738,n739,n228,n928,n879,n222,n223,n220,n221,n734,n735,n736,n737,n1251,n1250,n1253,n1252,n1255,n1254,n1257,n1256,n1259,n1258,n1039,n1231,n495,n839,n838,n494,n833,n832,n831,n830,n837,n836,n835,n1113,n828,n496,n1232,n1110,n986,n323,n1111,n1230,n322,n644,n645,n646,Z1,n129,n641,n642,n643,n125,n124,n127,n492,n648,n649,n212,n122,n1084,n1085,n1086,n1087,n1080,n1081,n554,n1083,Z22,n1088,n1089,n974,n541,n1118,n1119,n247,n943,n814,n1279,n1236,n1278,n965,n975,n1348,n1277,Z31,n989,n1276,n827,n732,n1149,n1274,n560,n1006,n972,n1272,n460,n1171,n1172,n1173,n1174,n1175,n1176,n1177,n781,n780,n783,n782,n785,n784,n787,n786,n1170,n563,n1020,n1098,n461,n1071,n1070,n1073,n1072,n1075,n1074,n1077,n1076,n341,n369,n340,n464,n1324,Z18,n640,n465,n370,n562,n342,n298,n466,n1010,n970,n345,Z14,n1121,n1178,n294,n424,n1179,n1139,n346,n371,n1105,n1104,n307,n306,n301,n300,n303,n302,n266,n267,n264,n265,n309,n263,n260,n261,n973,n638,n851,n308,Z4,n372,n969,n285,n286,n287,n280,n721,n282,n1078,n1309,n288,n289,n707,n409,n413,n576,n373,n849,n161,n160,n163,n162,n165,n164,n167,n166,n169,n168,n126,n1042,n608,n609,n765,n940,n763,n762,n761,n760,n600,n601,n603,n604,n605,n606,n607,n1308,n544,n516,n1125,n543,n1187,n517,n542,n842,n518,n840,n841,n846,n847,n1208,n1049,n1206,n1207,n1204,n1205,n1202,n1203,n1200,n1201,n662,n1196,n1124,Z30,n924,n149,Z25,n114,n115,n116,n117,n110,n111,n112,n113,n666,n118,n119,n667,n1329,n931,n497,n923,n1328,n922,Z17,n503,n502,n501,n500,n507,n506,n505,n504,n509,n508,n668,n1186,n529,n1338,n1159,n1134,n528,n1332,n1333,n1330,n1331,n1336,n1099,n1334,n1335,n378,n704,n880,n1320,n559,n881,n750,n274,n791,n379,n521,n1327,n1092,n1326,n1128,n720,n349,n348,n1024,n1090,n1022,n1023,n439,n438,n437,n436,n435,n434,n433,n432,n431,n430,n284,n751,Z0,n1095,n803,n756,n1094,n757,n938,n939,n1011,n1031,n1142,n932,n933,n930,n755,n936,n937,n934,n935,n613,n462,n888,n612,n682,n758,n971,n235,n234,n237,n759,n230,n233,n946,n617,n792,n232,n239,n238,n201,n482,n483,n729,n728,n486,n202,n485,n334,n335,n488,n203,n330,n331,n332,n333,n1242,n1243,n1240,n1241,n1246,n1247,n1244,n1245,n834,n1249,n808,n809,n236,Z10,n556,n1137,n876,Z19,n557,n480,Z15,Z20,n657,n656,n655,n654,n653,n652,n651,n650,n150,n151,n153,n154,n155,n659,n658,n67,n305,n550,n469,n484,n304,n1107,n69,n68,n723,n1106,n722,n1101,n874,n481,n1100,n1267,n551,n489,n1103,Z13,n995,n727,n269,n889,n1239,n726,Z27,n1238,n725,n873,n990,n724,n949,n991,n806,n807,n1109,n339,n804,n1108,n473,n1233,n471,n805,n477,n476,n475,n474,n1184,n843,n575,n1181,n1180,n1183,n1182,n1343,n1342,n1068,n1069,n1346,n1345,n1344,n1062,n1063,n1060,n1061,n1066,n1067,n1064,n850,n552,n547,n1235,n1190,n1234,n1248,n887,n1140,n479,n680,n681,n558,n683,n684,n685,n686,n687,n688,n689,Z21,n347,n1030,n1116,n1117,n1114,n1115,n374,n375,n376,n377,n271,n270,n273,n272,n275,n417,n277,n276,n1033,n416,n769,n425,n411,n890,n1341,n426,n410,n297,n296,n295,n355,n293,n408,n291,n290,n420,n412,n942,n299,n353,n768,n350,n797,n1340,n478,n1133,n884,n281,n705,n268,n198,n199,n106,n194,n195,n196,n197,n190,n191,n192,n193,n752,n753,n619,n618,n208,n209,n754,n979,n204,n205,n206,n207,n200,n616,n615,n614,n553,n1131,n100,n321,n994,n996,n997,n859,n858,n992,n993,n855,n854,n857,n856,n998,n999,n853,n852,n565,n564,n717,n567,n107,n1004,n105,n566,n103,n102,n101,n1005,n561,Z3,n109,n108;
 Z0=0;
 Z1=0;
 Z2=0;
 Z3=0;
 n117=((B >> 5)&1)&((A >> 2)&1);
 n118=((B >> 4)&1)&~((A >> 2)&1);
 n138=((A >> 6)&1)&((A >> 5)&1);
 n140=((A >> 6)&1)^((A >> 5)&1);
 n143=~(((A >> 6)&1)|((A >> 5)&1));
 n148=((B >> 6)&1)&((A >> 2)&1);
 n149=((B >> 5)&1)&~((A >> 2)&1);
 n170=((B >> 7)&1)&((A >> 2)&1);
 n171=((B >> 6)&1)&~((A >> 2)&1);
 n206=((A >> 8)&1)&((A >> 7)&1);
 n208=((A >> 8)&1)^((A >> 7)&1);
 n211=~(((A >> 8)&1)|((A >> 7)&1));
 n216=((B >> 8)&1)&((A >> 2)&1);
 n217=((B >> 7)&1)&~((A >> 2)&1);
 n250=((B >> 9)&1)&((A >> 2)&1);
 n251=((B >> 8)&1)&~((A >> 2)&1);
 n308=((A >> 10)&1)&((A >> 9)&1);
 n310=((A >> 10)&1)^((A >> 9)&1);
 n313=~(((A >> 10)&1)|((A >> 9)&1));
 n318=((B >> 10)&1)&((A >> 2)&1);
 n319=((B >> 9)&1)&~((A >> 2)&1);
 n363=((B >> 11)&1)&((A >> 2)&1);
 n364=((B >> 10)&1)&~((A >> 2)&1);
 n428=((A >> 12)&1)&((A >> 11)&1);
 n430=((A >> 12)&1)^((A >> 11)&1);
 n433=~(((A >> 12)&1)|((A >> 11)&1));
 n438=((B >> 12)&1)&((A >> 2)&1);
 n439=((B >> 11)&1)&~((A >> 2)&1);
 n492=((B >> 13)&1)&((A >> 2)&1);
 n493=((B >> 12)&1)&~((A >> 2)&1);
 n591=((A >> 14)&1)&((A >> 13)&1);
 n593=((A >> 14)&1)^((A >> 13)&1);
 n596=~(((A >> 14)&1)|((A >> 13)&1));
 n601=((B >> 14)&1)&((A >> 2)&1);
 n602=((B >> 13)&1)&~((A >> 2)&1);
 n69=((B >> 2)&1)&((A >> 2)&1);
 n697=((B >> 15)&1)&((A >> 2)&1);
 n698=((B >> 14)&1)&~((A >> 2)&1);
 n71=~((A >> 3)&1)&((A >> 2)&1);
 n740=~((B >> 15)&1)&((A >> 3)&1);
 n77=((B >> 3)&1)&((A >> 2)&1);
 n78=((B >> 2)&1)&~((A >> 2)&1);
 n86=((B >> 4)&1)&((A >> 2)&1);
 n87=((B >> 3)&1)&~((A >> 2)&1);
 n90=((A >> 4)&1)&((A >> 3)&1);
 n94=((A >> 4)&1)^((A >> 3)&1);
 n97=~(((A >> 4)&1)|((A >> 3)&1));
 n1002=((B >> 13)&1)&n208;
 n1003=((B >> 12)&1)&~n208;
 n1008=((B >> 9)&1)&n430;
 n1009=((B >> 8)&1)&~n430;
 n1014=((B >> 15)&1)&n140;
 n1015=((B >> 14)&1)&~n140;
 n1053=((B >> 14)&1)&n208;
 n1054=((B >> 13)&1)&~n208;
 n1059=((B >> 8)&1)&n593;
 n1060=((B >> 7)&1)&~n593;
 n1070=((B >> 12)&1)&n310;
 n1071=((B >> 11)&1)&~n310;
 n1076=((B >> 10)&1)&n430;
 n1077=((B >> 9)&1)&~n430;
 n109=((B >> 3)&1)&n94;
 n110=((B >> 2)&1)&~n94;
 n1103=((B >> 11)&1)&n430;
 n1104=((B >> 10)&1)&~n430;
 n1109=((B >> 9)&1)&n593;
 n1110=((B >> 8)&1)&~n593;
 n1115=((B >> 15)&1)&n208;
 n1116=((B >> 14)&1)&~n208;
 n1128=((B >> 13)&1)&n310;
 n1129=((B >> 12)&1)&~n310;
 n116=~(n118|n117);
 n1160=((B >> 14)&1)&n310;
 n1161=((B >> 13)&1)&~n310;
 n1166=((B >> 10)&1)&n593;
 n1167=((B >> 9)&1)&~n593;
 n1182=((B >> 12)&1)&n430;
 n1183=((B >> 11)&1)&~n430;
 n1214=((B >> 11)&1)&n593;
 n1215=((B >> 10)&1)&~n593;
 n1220=((B >> 13)&1)&n430;
 n1221=((B >> 12)&1)&~n430;
 n1226=((B >> 15)&1)&n310;
 n1227=((B >> 14)&1)&~n310;
 n1253=((B >> 12)&1)&n593;
 n1254=((B >> 11)&1)&~n593;
 n1259=((B >> 14)&1)&n430;
 n1260=((B >> 13)&1)&~n430;
 n1287=((B >> 13)&1)&n593;
 n1288=((B >> 12)&1)&~n593;
 n1293=((B >> 15)&1)&n430;
 n1294=((B >> 14)&1)&~n430;
 n1313=((B >> 14)&1)&n593;
 n1314=((B >> 13)&1)&~n593;
 n132=((B >> 4)&1)&n94;
 n133=((B >> 3)&1)&~n94;
 n1334=((B >> 15)&1)&n593;
 n1335=((B >> 14)&1)&~n593;
 n137=((A >> 7)&1)&~n138;
 n139=((B >> 2)&1)&n140;
 n142=~(((A >> 7)&1)|n143);
 n147=~(n149|n148);
 n169=~(n171|n170);
 n177=((B >> 3)&1)&n140;
 n178=((B >> 2)&1)&~n140;
 n183=((B >> 5)&1)&n94;
 n184=((B >> 4)&1)&~n94;
 n200=((B >> 4)&1)&n140;
 n201=((B >> 3)&1)&~n140;
 n205=((A >> 9)&1)&~n206;
 n207=((B >> 2)&1)&n208;
 n210=~(((A >> 9)&1)|n211);
 n215=~(n217|n216);
 n222=((B >> 6)&1)&n94;
 n223=((B >> 5)&1)&~n94;
 n249=~(n251|n250);
 n258=((B >> 5)&1)&n140;
 n259=((B >> 4)&1)&~n140;
 n264=((B >> 3)&1)&n208;
 n265=((B >> 2)&1)&~n208;
 n270=((B >> 7)&1)&n94;
 n271=((B >> 6)&1)&~n94;
 n302=((B >> 4)&1)&n208;
 n303=((B >> 3)&1)&~n208;
 n307=((A >> 11)&1)&~n308;
 n309=((B >> 2)&1)&n310;
 n312=~(((A >> 11)&1)|n313);
 n317=~(n319|n318);
 n327=((B >> 6)&1)&n140;
 n328=((B >> 5)&1)&~n140;
 n333=((B >> 8)&1)&n94;
 n334=((B >> 7)&1)&~n94;
 n355=((B >> 9)&1)&n94;
 n356=((B >> 8)&1)&~n94;
 n362=~(n364|n363);
 n376=((B >> 7)&1)&n140;
 n377=((B >> 6)&1)&~n140;
 n382=((B >> 3)&1)&n310;
 n383=((B >> 2)&1)&~n310;
 n388=((B >> 5)&1)&n208;
 n389=((B >> 4)&1)&~n208;
 n422=((B >> 4)&1)&n310;
 n423=((B >> 3)&1)&~n310;
 n427=((A >> 13)&1)&~n428;
 n429=((B >> 2)&1)&n430;
 n432=~(((A >> 13)&1)|n433);
 n437=~(n439|n438);
 n447=((B >> 8)&1)&n140;
 n448=((B >> 7)&1)&~n140;
 n453=((B >> 6)&1)&n208;
 n454=((B >> 5)&1)&~n208;
 n459=((B >> 10)&1)&n94;
 n460=((B >> 9)&1)&~n94;
 n491=~(n493|n492);
 n499=((B >> 5)&1)&n310;
 n500=((B >> 4)&1)&~n310;
 n505=((B >> 9)&1)&n140;
 n506=((B >> 8)&1)&~n140;
 n525=((B >> 11)&1)&n94;
 n526=((B >> 10)&1)&~n94;
 n531=((B >> 3)&1)&n430;
 n532=((B >> 2)&1)&~n430;
 n537=((B >> 7)&1)&n208;
 n538=((B >> 6)&1)&~n208;
 n569=((B >> 8)&1)&n208;
 n570=((B >> 7)&1)&~n208;
 n585=((B >> 12)&1)&n94;
 n586=((B >> 11)&1)&~n94;
 n590=((A >> 15)&1)&~n591;
 n592=((B >> 2)&1)&n593;
 n595=~(((A >> 15)&1)|n596);
 n600=~(n602|n601);
 n609=((B >> 6)&1)&n310;
 n610=((B >> 5)&1)&~n310;
 n615=((B >> 4)&1)&n430;
 n616=((B >> 3)&1)&~n430;
 n621=((B >> 10)&1)&n140;
 n622=((B >> 9)&1)&~n140;
 n644=((B >> 5)&1)&n430;
 n645=((B >> 4)&1)&~n430;
 n650=((B >> 3)&1)&n593;
 n651=((B >> 2)&1)&~n593;
 n656=((B >> 9)&1)&n208;
 n657=((B >> 8)&1)&~n208;
 n664=((B >> 11)&1)&n140;
 n665=((B >> 10)&1)&~n140;
 n670=((B >> 13)&1)&n94;
 n671=((B >> 12)&1)&~n94;
 n676=((B >> 7)&1)&n310;
 n677=((B >> 6)&1)&~n310;
 n68=~(((A >> 3)&1)|n69);
 n696=~(n698|n697);
 n70=~n71&n69;
 n735=((B >> 14)&1)&n94;
 n736=((B >> 13)&1)&~n94;
 n739=((B >> 15)&1)&n71;
 n759=((B >> 8)&1)&n310;
 n76=~(n78|n77);
 n760=((B >> 7)&1)&~n310;
 n765=((B >> 10)&1)&n208;
 n766=((B >> 9)&1)&~n208;
 n773=((B >> 12)&1)&n140;
 n774=((B >> 11)&1)&~n140;
 n779=((B >> 4)&1)&n593;
 n780=((B >> 3)&1)&~n593;
 n785=((B >> 6)&1)&n430;
 n786=((B >> 5)&1)&~n430;
 n825=((B >> 11)&1)&n208;
 n826=((B >> 10)&1)&~n208;
 n831=((B >> 9)&1)&n310;
 n832=((B >> 8)&1)&~n310;
 n837=((B >> 5)&1)&n593;
 n838=((B >> 4)&1)&~n593;
 n85=~(n87|n86);
 n857=((B >> 13)&1)&n140;
 n858=((B >> 12)&1)&~n140;
 n863=((B >> 7)&1)&n430;
 n864=((B >> 6)&1)&~n430;
 n869=((B >> 15)&1)&n94;
 n870=((B >> 14)&1)&~n94;
 n89=((A >> 5)&1)&~n90;
 n903=((B >> 14)&1)&n140;
 n904=((B >> 13)&1)&~n140;
 n909=((B >> 6)&1)&n593;
 n910=((B >> 5)&1)&~n593;
 n920=((B >> 8)&1)&n430;
 n921=((B >> 7)&1)&~n430;
 n926=((B >> 12)&1)&n208;
 n927=((B >> 11)&1)&~n208;
 n93=((B >> 2)&1)&n94;
 n939=((B >> 10)&1)&n310;
 n940=((B >> 9)&1)&~n310;
 n96=~(((A >> 5)&1)|n97);
 n982=((B >> 7)&1)&n593;
 n983=((B >> 6)&1)&~n593;
 n988=((B >> 11)&1)&n310;
 n989=((B >> 10)&1)&~n310;
 n1001=~(n1003|n1002);
 n1007=~(n1009|n1008);
 n1013=~(n1015|n1014);
 n1052=~(n1054|n1053);
 n1058=~(n1060|n1059);
 n1063=((B >> 15)&1)&n142;
 n1064=~((B >> 15)&1)&n137;
 n1069=~(n1071|n1070);
 n1075=~(n1077|n1076);
 n108=~(n110|n109);
 n1102=~(n1104|n1103);
 n1108=~(n1110|n1109);
 n1114=~(n1116|n1115);
 n1127=~(n1129|n1128);
 n115=~((A >> 3)&1)&n116;
 n1159=~(n1161|n1160);
 n1165=~(n1167|n1166);
 n1170=((B >> 15)&1)&n210;
 n1171=~((B >> 15)&1)&n205;
 n1181=~(n1183|n1182);
 n119=~(n71|n116);
 n1213=~(n1215|n1214);
 n1219=~(n1221|n1220);
 n1225=~(n1227|n1226);
 n1252=~(n1254|n1253);
 n1258=~(n1260|n1259);
 n1263=((B >> 15)&1)&n312;
 n1264=~((B >> 15)&1)&n307;
 n1286=~(n1288|n1287);
 n1292=~(n1294|n1293);
 n131=~(n133|n132);
 n1312=~(n1314|n1313);
 n1317=((B >> 15)&1)&n432;
 n1318=~((B >> 15)&1)&n427;
 n1333=~(n1335|n1334);
 n1345=((B >> 15)&1)&n595;
 n1346=~((B >> 15)&1)&n590;
 n136=~(n139|n137);
 n141=~n142&n139;
 n146=~((A >> 3)&1)&n147;
 n150=~(n71|n147);
 n168=~((A >> 3)&1)&n169;
 n172=~(n71|n169);
 n176=~(n178|n177);
 n182=~(n184|n183);
 n199=~(n201|n200);
 n204=~(n207|n205);
 n209=~n210&n207;
 n214=~((A >> 3)&1)&n215;
 n218=~(n71|n215);
 n221=~(n223|n222);
 n248=~((A >> 3)&1)&n249;
 n252=~(n71|n249);
 n257=~(n259|n258);
 n263=~(n265|n264);
 n269=~(n271|n270);
 n301=~(n303|n302);
 n306=~(n309|n307);
 n311=~n312&n309;
 n316=~((A >> 3)&1)&n317;
 n320=~(n71|n317);
 n326=~(n328|n327);
 n332=~(n334|n333);
 n354=~(n356|n355);
 n361=~((A >> 3)&1)&n362;
 n365=~(n71|n362);
 n375=~(n377|n376);
 n381=~(n383|n382);
 n387=~(n389|n388);
 n421=~(n423|n422);
 n426=~(n429|n427);
 n431=~n432&n429;
 n436=~((A >> 3)&1)&n437;
 n440=~(n71|n437);
 n446=~(n448|n447);
 n452=~(n454|n453);
 n458=~(n460|n459);
 n490=~((A >> 3)&1)&n491;
 n494=~(n71|n491);
 n498=~(n500|n499);
 n504=~(n506|n505);
 n524=~(n526|n525);
 n530=~(n532|n531);
 n536=~(n538|n537);
 n568=~(n570|n569);
 n584=~(n586|n585);
 n589=~(n592|n590);
 n594=~n595&n592;
 n599=~((A >> 3)&1)&n600;
 n603=~(n71|n600);
 n608=~(n610|n609);
 n614=~(n616|n615);
 n620=~(n622|n621);
 n643=~(n645|n644);
 n649=~(n651|n650);
 n655=~(n657|n656);
 n663=~(n665|n664);
 n669=~(n671|n670);
 n67=~(n70|n68);
 n675=~(n677|n676);
 n695=~((A >> 3)&1)&n696;
 n699=~(n71|n696);
 n734=~(n736|n735);
 n738=~(n740|n739);
 n75=~((A >> 3)&1)&n76;
 n758=~(n760|n759);
 n764=~(n766|n765);
 n772=~(n774|n773);
 n778=~(n780|n779);
 n784=~(n786|n785);
 n79=~(n71|n76);
 n824=~(n826|n825);
 n830=~(n832|n831);
 n836=~(n838|n837);
 n84=~((A >> 3)&1)&n85;
 n856=~(n858|n857);
 n862=~(n864|n863);
 n868=~(n870|n869);
 n88=~(n71|n85);
 n902=~(n904|n903);
 n908=~(n910|n909);
 n913=((B >> 15)&1)&n96;
 n914=~((B >> 15)&1)&n89;
 n919=~(n921|n920);
 n92=~(n89|n93);
 n925=~(n927|n926);
 n938=~(n940|n939);
 n95=~n96&n93;
 n981=~(n983|n982);
 n987=~(n989|n988);
 Z4=((A >> 3)&1)^n67;
 n1000=~n205&n1001;
 n1004=~(n210|n1001);
 n1006=~n427&n1007;
 n1010=~(n432|n1007);
 n1012=~n137&n1013;
 n1016=~(n142|n1013);
 n1051=~n205&n1052;
 n1055=~(n210|n1052);
 n1057=~n590&n1058;
 n1061=~(n595|n1058);
 n1062=~(n1064|n1063);
 n1068=~n307&n1069;
 n107=~n89&n108;
 n1072=~(n312|n1069);
 n1074=~n427&n1075;
 n1078=~(n432|n1075);
 n1101=~n427&n1102;
 n1105=~(n432|n1102);
 n1107=~n590&n1108;
 n111=~(n96|n108);
 n1111=~(n595|n1108);
 n1113=~n205&n1114;
 n1117=~(n210|n1114);
 n1126=~n307&n1127;
 n1130=~(n312|n1127);
 n114=~(n119|n115);
 n1158=~n307&n1159;
 n1162=~(n312|n1159);
 n1164=~n590&n1165;
 n1168=~(n595|n1165);
 n1169=~(n1171|n1170);
 n1180=~n427&n1181;
 n1184=~(n432|n1181);
 n1212=~n590&n1213;
 n1216=~(n595|n1213);
 n1218=~n427&n1219;
 n1222=~(n432|n1219);
 n1224=~n307&n1225;
 n1228=~(n312|n1225);
 n1251=~n590&n1252;
 n1255=~(n595|n1252);
 n1257=~n427&n1258;
 n1261=~(n432|n1258);
 n1262=~(n1264|n1263);
 n1285=~n590&n1286;
 n1289=~(n595|n1286);
 n1291=~n427&n1292;
 n1295=~(n432|n1292);
 n130=~n89&n131;
 n1311=~n590&n1312;
 n1315=~(n595|n1312);
 n1316=~(n1318|n1317);
 n1332=~n590&n1333;
 n1336=~(n595|n1333);
 n134=~(n96|n131);
 n1344=~(n1346|n1345);
 n135=~(n141|n136);
 n145=~(n150|n146);
 n167=~(n172|n168);
 n175=~n137&n176;
 n179=~(n142|n176);
 n181=~n89&n182;
 n185=~(n96|n182);
 n198=~n137&n199;
 n202=~(n142|n199);
 n203=~(n209|n204);
 n213=~(n218|n214);
 n220=~n89&n221;
 n224=~(n96|n221);
 n247=~(n252|n248);
 n256=~n137&n257;
 n260=~(n142|n257);
 n262=~n205&n263;
 n266=~(n210|n263);
 n268=~n89&n269;
 n272=~(n96|n269);
 n300=~n205&n301;
 n304=~(n210|n301);
 n305=~(n311|n306);
 n315=~(n320|n316);
 n325=~n137&n326;
 n329=~(n142|n326);
 n331=~n89&n332;
 n335=~(n96|n332);
 n353=~n89&n354;
 n357=~(n96|n354);
 n360=~(n365|n361);
 n374=~n137&n375;
 n378=~(n142|n375);
 n380=~n307&n381;
 n384=~(n312|n381);
 n386=~n205&n387;
 n390=~(n210|n387);
 n420=~n307&n421;
 n424=~(n312|n421);
 n425=~(n431|n426);
 n435=~(n440|n436);
 n445=~n137&n446;
 n449=~(n142|n446);
 n451=~n205&n452;
 n455=~(n210|n452);
 n457=~n89&n458;
 n461=~(n96|n458);
 n489=~(n494|n490);
 n497=~n307&n498;
 n501=~(n312|n498);
 n503=~n137&n504;
 n507=~(n142|n504);
 n523=~n89&n524;
 n527=~(n96|n524);
 n529=~n427&n530;
 n533=~(n432|n530);
 n535=~n205&n536;
 n539=~(n210|n536);
 n567=~n205&n568;
 n571=~(n210|n568);
 n583=~n89&n584;
 n587=~(n96|n584);
 n588=~(n594|n589);
 n598=~(n603|n599);
 n607=~n307&n608;
 n611=~(n312|n608);
 n613=~n427&n614;
 n617=~(n432|n614);
 n619=~n137&n620;
 n623=~(n142|n620);
 n642=~n427&n643;
 n646=~(n432|n643);
 n648=~n590&n649;
 n652=~(n595|n649);
 n654=~n205&n655;
 n658=~(n210|n655);
 n662=~n137&n663;
 n666=~(n142|n663);
 n668=~n89&n669;
 n672=~(n96|n669);
 n674=~n307&n675;
 n678=~(n312|n675);
 n694=~(n699|n695);
 n73=((A >> 3)&1)&n67;
 n733=~n89&n734;
 n737=~(n96|n734);
 n74=~(n79|n75);
 n757=~n307&n758;
 n761=~(n312|n758);
 n763=~n205&n764;
 n767=~(n210|n764);
 n771=~n137&n772;
 n775=~(n142|n772);
 n777=~n590&n778;
 n781=~(n595|n778);
 n783=~n427&n784;
 n787=~(n432|n784);
 n823=~n205&n824;
 n827=~(n210|n824);
 n829=~n307&n830;
 n83=~(n88|n84);
 n833=~(n312|n830);
 n835=~n590&n836;
 n839=~(n595|n836);
 n855=~n137&n856;
 n859=~(n142|n856);
 n861=~n427&n862;
 n865=~(n432|n862);
 n867=~n89&n868;
 n871=~(n96|n868);
 n901=~n137&n902;
 n905=~(n142|n902);
 n907=~n590&n908;
 n91=~(n95|n92);
 n911=~(n595|n908);
 n912=~(n914|n913);
 n918=~n427&n919;
 n922=~(n432|n919);
 n924=~n205&n925;
 n928=~(n210|n925);
 n937=~n307&n938;
 n941=~(n312|n938);
 n980=~n590&n981;
 n984=~(n595|n981);
 n986=~n307&n987;
 n990=~(n312|n987);
 Z5=n74^n73;
 n1005=~(n1010|n1006);
 n1011=~(n1016|n1012);
 n1050=~(n1055|n1051);
 n1056=~(n1061|n1057);
 n106=~(n111|n107);
 n1067=~(n1072|n1068);
 n1073=~(n1078|n1074);
 n1100=~(n1105|n1101);
 n1106=~(n1111|n1107);
 n1112=~(n1117|n1113);
 n1125=~(n1130|n1126);
 n113=n89&n83;
 n1157=~(n1162|n1158);
 n1163=~(n1168|n1164);
 n1179=~(n1184|n1180);
 n1211=~(n1216|n1212);
 n1217=~(n1222|n1218);
 n1223=~(n1228|n1224);
 n1250=~(n1255|n1251);
 n1256=~(n1261|n1257);
 n1284=~(n1289|n1285);
 n129=~(n134|n130);
 n1290=~(n1295|n1291);
 n1310=~(n1315|n1311);
 n1331=~(n1336|n1332);
 n144=n137^n145;
 n166=n137&n145;
 n174=~(n179|n175);
 n180=~(n185|n181);
 n197=~(n202|n198);
 n212=n205^n213;
 n219=~(n224|n220);
 n246=n205&n213;
 n255=~(n260|n256);
 n261=~(n266|n262);
 n267=~(n272|n268);
 n299=~(n304|n300);
 n314=n307^n315;
 n324=~(n329|n325);
 n330=~(n335|n331);
 n352=~(n357|n353);
 n359=n307&n315;
 n373=~(n378|n374);
 n379=~(n384|n380);
 n385=~(n390|n386);
 n419=~(n424|n420);
 n434=n427^n435;
 n444=~(n449|n445);
 n450=~(n455|n451);
 n456=~(n461|n457);
 n488=n427&n435;
 n496=~(n501|n497);
 n502=~(n507|n503);
 n522=~(n527|n523);
 n528=~(n533|n529);
 n534=~(n539|n535);
 n566=~(n571|n567);
 n582=~(n587|n583);
 n597=n590^n598;
 n606=~(n611|n607);
 n612=~(n617|n613);
 n618=~(n623|n619);
 n641=~(n646|n642);
 n647=~(n652|n648);
 n653=~(n658|n654);
 n661=~(n666|n662);
 n667=~(n672|n668);
 n673=~(n678|n674);
 n693=n590&n598;
 n732=~(n737|n733);
 n756=~(n761|n757);
 n762=~(n767|n763);
 n770=~(n775|n771);
 n776=~(n781|n777);
 n782=~(n787|n783);
 n82=n89^n83;
 n822=~(n827|n823);
 n828=~(n833|n829);
 n834=~(n839|n835);
 n854=~(n859|n855);
 n860=~(n865|n861);
 n866=~(n871|n867);
 n900=~(n905|n901);
 n906=~(n911|n907);
 n917=~(n922|n918);
 n923=~(n928|n924);
 n936=~(n941|n937);
 n979=~(n984|n980);
 n98=n74&n73;
 n985=~(n990|n986);
 n999=~(n1004|n1000);
 n103=n91&n82;
 n1039=n985&n979;
 n104=n91&n98;
 n1045=n1005&n999;
 n1046=n1005&~n1011;
 n1047=n999&~n1011;
 n1049=~(n1056^n1050);
 n105=n82&n98;
 n1066=~(n1073^n1067);
 n1099=~(n1106^n1100);
 n112=n114^n113;
 n1122=n1056&n1050;
 n1123=n1062&n1056;
 n1124=n1062&n1050;
 n1133=n1073&n1067;
 n1134=n1073&n1011;
 n1135=n1067&n1011;
 n1156=~(n1163^n1157);
 n1175=n1106&n1100;
 n1176=n1106&~n1112;
 n1177=n1100&~n1112;
 n1178=~(n1179^n1112);
 n1201=n1179&n1112;
 n1206=n1163&n1157;
 n1207=n1169&n1163;
 n1208=n1169&n1157;
 n1210=~(n1217^n1211);
 n1245=n1217&n1211;
 n1246=n1217&~n1223;
 n1247=n1211&~n1223;
 n1249=~(n1256^n1250);
 n128=~(n135^n129);
 n1280=n1256&n1250;
 n1281=n1262&n1256;
 n1282=n1262&n1250;
 n1283=n1290^n1284;
 n1306=~n1290&n1284;
 n1309=~(n1310^n1290);
 n1328=n1310&n1290;
 n1329=n1316&n1310;
 n1330=n1316&n1290;
 n1350=n1344&n1331;
 n151=n114&n113;
 n161=n135&n129;
 n162=n135&n144;
 n163=n129&n144;
 n165=n167^n166;
 n173=~(n180^n174);
 n196=~(n203^n197);
 n225=n167&n166;
 n229=n180&n174;
 n242=n203&n197;
 n243=n203&n212;
 n244=n197&n212;
 n245=n247^n246;
 n254=~(n261^n255);
 n294=n261&n255;
 n295=n261&n267;
 n296=n255&n267;
 n298=~(n305^n299);
 n322=n247&n246;
 n323=~(n330^n324);
 n349=n305&n299;
 n350=n305&n314;
 n351=n299&n314;
 n358=n360^n359;
 n369=n330&n324;
 n372=~(n379^n373);
 n414=n379&n373;
 n415=n379&n385;
 n416=n373&n385;
 n418=~(n425^n419);
 n441=n360&n359;
 n443=~(n450^n444);
 n487=n489^n488;
 n495=~(n502^n496);
 n512=n425&n419;
 n513=n425&n434;
 n514=n419&n434;
 n517=n450&n444;
 n518=n450&n456;
 n519=n444&n456;
 n521=~(n528^n522);
 n563=n528&n522;
 n564=n528&n534;
 n565=n522&n534;
 n572=n489&n488;
 n578=n502&n496;
 n581=~(n588^n582);
 n605=~(n612^n606);
 n640=~(n647^n641);
 n660=~(n667^n661);
 n689=n588&n582;
 n690=n588&n597;
 n691=n582&n597;
 n692=n694^n693;
 n702=n612&n606;
 n703=n612&n618;
 n704=n606&n618;
 n728=n667&n661;
 n729=n667&n673;
 n730=n661&n673;
 n731=n738^n732;
 n743=n647&n641;
 n744=n647&n653;
 n745=n641&n653;
 n754=n694&n693;
 n755=~(n762^n756);
 n769=~(n776^n770);
 n81=~(n91^n82);
 n816=n776&n770;
 n817=n776&n782;
 n818=n770&n782;
 n819=~(n738|n732);
 n821=~(n828^n822);
 n850=n762&n756;
 n853=~(n860^n854);
 n899=~(n906^n900);
 n916=~(n917^n866);
 n933=n860&n854;
 n934=n860&~n866;
 n935=n854&~n866;
 n944=n828&n822;
 n945=n828&n834;
 n946=n822&n834;
 n975=n906&n900;
 n976=n912&n906;
 n977=n912&n900;
 n978=~(n985^n979);
 n994=n917&n866;
 n995=n923&n866;
 n996=n917&n923;
 n998=~(n1005^n999);
 Z6=~(n98^n81);
 n102=~(n104|n103);
 n1044=~(n1046|n1045);
 n1048=n1062^n1049;
 n1065=n1011^n1066;
 n1098=~(n1112^n1099);
 n1121=~(n1123|n1122);
 n1132=~(n1134|n1133);
 n1155=n1169^n1156;
 n1174=~(n1176|n1175);
 n1205=~(n1207|n1206);
 n1209=~(n1223^n1210);
 n1244=~(n1246|n1245);
 n1248=n1262^n1249;
 n125=n106&n112;
 n127=n144^n128;
 n1279=~(n1281|n1280);
 n1308=n1316^n1309;
 n1327=~(n1329|n1328);
 n160=~(n162|n161);
 n164=n173^n165;
 n195=n212^n196;
 n228=n180&n165;
 n230=n174&n165;
 n241=~(n243|n242);
 n253=n267^n254;
 n276=n219&n225;
 n293=~(n295|n294);
 n297=n314^n298;
 n321=n323^n322;
 n348=~(n350|n349);
 n368=n330&n322;
 n370=n324&n322;
 n371=n385^n372;
 n408=n352&n358;
 n413=~(n415|n414);
 n417=n434^n418;
 n442=n456^n443;
 n486=n495^n487;
 n511=~(n513|n512);
 n516=~(n518|n517);
 n520=n534^n521;
 n562=~(n564|n563);
 n577=n502&n487;
 n579=n496&n487;
 n580=n597^n581;
 n604=n618^n605;
 n637=n566&n572;
 n639=n653^n640;
 n659=n673^n660;
 n688=~(n690|n689);
 n701=~(n703|n702);
 n727=~(n729|n728);
 n742=~(n744|n743);
 n753=n755^n754;
 n768=n782^n769;
 n815=~(n817|n816);
 n820=n834^n821;
 n849=n762&n754;
 n851=n756&n754;
 n852=~(n866^n853);
 n898=n912^n899;
 n915=n923^n916;
 n932=~(n934|n933);
 n943=~(n945|n944);
 n974=~(n976|n975);
 n993=~(n995|n994);
 n997=~(n1011^n998);
 n101=~n105&n102;
 n1043=~n1047&n1044;
 n1097=~(n1048|n1065);
 n1120=~n1124&n1121;
 n1131=~n1135&n1132;
 n1173=~n1177&n1174;
 n1204=~n1208&n1205;
 n1243=~n1247&n1244;
 n1276=n1223&~n1248;
 n1278=~n1282&n1279;
 n1326=~n1330&n1327;
 n156=n151&~n127;
 n159=~n163&n160;
 n194=n219^n195;
 n227=~(n229|n228);
 n240=~n244&n241;
 n275=n219&~n195;
 n277=n225&~n195;
 n289=n245&~n253;
 n292=~n296&n293;
 n347=~n351&n348;
 n367=~(n369|n368);
 n395=~(n297|n321);
 n412=~n416&n413;
 n485=n441&~n417;
 n510=~n514&n511;
 n515=~n519&n516;
 n561=~n565&n562;
 n576=~(n578|n577);
 n684=~(n580|n604);
 n687=~n691&n688;
 n700=~n704&n701;
 n722=~(n639|n659);
 n726=~n730&n727;
 n741=~n745&n742;
 n810=~(n753|n768);
 n814=~n818&n815;
 n848=~(n850|n849);
 n897=~(n819|n820);
 n931=~n935&n932;
 n942=~n946&n943;
 n963=~(n898|n915);
 n973=~n977&n974;
 n992=~n996&n993;
 n100=n106^n101;
 n1033=~(n997|n992);
 n1038=n985&~n973;
 n1040=n979&~n973;
 n1042=~(n1048^n1043);
 n1095=~(n1048|n1043);
 n1096=~(n1065|n1043);
 n1119=n1125^n1120;
 n1152=n1125&~n1120;
 n1153=~(n1120|n1131);
 n1154=n1125&~n1131;
 n1172=~(n1178^n1173);
 n1200=n1179&~n1173;
 n1202=n1112&~n1173;
 n1203=~(n1209^n1204);
 n1239=~(n1209|n1204);
 n124=n106&~n101;
 n1242=n1223^n1243;
 n126=n112&~n101;
 n1274=n1223&~n1243;
 n1275=~(n1248|n1243);
 n1277=~(n1283^n1278);
 n1305=~(n1290|n1278);
 n1307=n1284&~n1278;
 n1325=~(n1331^n1326);
 n1342=~(n1331|n1326);
 n158=~(n164^n159);
 n190=~(n164|n159);
 n193=n225^n194;
 n226=~n230&n227;
 n239=n245^n240;
 n274=~(n276|n275);
 n287=n245&~n240;
 n288=~(n253|n240);
 n291=~(n297^n292);
 n346=n352^n347;
 n366=~n370&n367;
 n393=~(n297|n292);
 n394=~(n321|n292);
 n407=n352&~n347;
 n409=n358&~n347;
 n411=~(n417^n412);
 n483=~(n417|n412);
 n484=n441&~n412;
 n509=~(n515^n510);
 n556=~(n515|n510);
 n557=~(n520|n515);
 n558=~(n520|n510);
 n560=n566^n561;
 n575=~n579&n576;
 n636=n566&~n561;
 n638=n572&~n561;
 n686=n692^n687;
 n725=~(n731^n726);
 n750=n692&~n687;
 n751=~(n687|n700);
 n752=n692&~n700;
 n813=~(n819^n814);
 n843=~(n731|n726);
 n844=~(n726|n741);
 n845=~(n731|n741);
 n847=~n851&n848;
 n895=~(n819|n814);
 n896=~(n820|n814);
 n930=n936^n931;
 n968=n936&~n931;
 n969=~(n931|n942);
 n970=n936&~n942;
 n972=~(n978^n973);
 n991=~(n997^n992);
 Z7=~(n112^n100);
 n1032=~(n992|n972);
 n1034=~(n997|n972);
 n1037=~(n1039|n1038);
 n1041=~(n1065^n1042);
 n1094=~(n1096|n1095);
 n1118=~(n1131^n1119);
 n1151=~(n1153|n1152);
 n1195=~(n1155|n1172);
 n1199=~(n1201|n1200);
 n123=~(n125|n124);
 n1241=~(n1248^n1242);
 n1273=~(n1275|n1274);
 n1304=~(n1306|n1305);
 n192=~(n226^n193);
 n235=~(n226|n193);
 n238=~(n253^n239);
 n273=~n277&n274;
 n286=~(n288|n287);
 n290=~(n321^n291);
 n345=n358^n346;
 n392=~(n394|n393);
 n406=~(n408|n407);
 n410=n441^n411;
 n465=~(n371|n366);
 n482=~(n484|n483);
 n508=~(n520^n509);
 n555=~(n557|n556);
 n559=n572^n560;
 n574=~(n580^n575);
 n635=~(n637|n636);
 n682=~(n580|n575);
 n683=~(n604|n575);
 n685=~(n700^n686);
 n724=~(n741^n725);
 n749=~(n751|n750);
 n812=~(n820^n813);
 n842=~(n844|n843);
 n846=~(n852^n847);
 n889=~(n852|n847);
 n894=~(n896|n895);
 n929=~(n942^n930);
 n967=~(n969|n968);
 n971=~(n991^n972);
 n1031=~(n1033|n1032);
 n1036=~n1040&n1037;
 n1093=~n1097&n1094;
 n1147=~(n1098|n1118);
 n1150=~n1154&n1151;
 n1198=~n1202&n1199;
 n122=~n126&n123;
 n1272=~n1276&n1273;
 n1303=~n1307&n1304;
 n237=~(n273^n238);
 n282=~(n273|n238);
 n285=~n289&n286;
 n344=~(n366^n345);
 n391=~n395&n392;
 n405=~n409&n406;
 n464=~(n366|n345);
 n466=~(n371|n345);
 n478=~(n442|n410);
 n481=~n485&n482;
 n551=~(n486|n508);
 n554=~n558&n555;
 n573=~(n604^n574);
 n634=~n638&n635;
 n681=~(n683|n682);
 n748=~n752&n749;
 n841=~n845&n842;
 n893=~n897&n894;
 n966=~n970&n967;
 n1027=~(n971|n966);
 n1030=~n1034&n1031;
 n1035=~(n1041^n1036);
 n1089=~(n1041|n1036);
 n1092=~(n1098^n1093);
 n1145=~(n1098|n1093);
 n1146=~(n1118|n1093);
 n1149=~(n1155^n1150);
 n1194=~(n1155|n1150);
 n1196=~(n1172|n1150);
 n1197=~(n1203^n1198);
 n121=~(n127^n122);
 n1238=~(n1204|n1198);
 n1240=~(n1209|n1198);
 n1300=~(n1277|n1272);
 n1302=~(n1308^n1303);
 n1323=~(n1308|n1303);
 n155=~(n127|n122);
 n157=n151&~n122;
 n284=~(n290^n285);
 n340=~(n290|n285);
 n343=~(n371^n344);
 n404=~(n410^n405);
 n463=~(n465|n464);
 n476=~(n410|n405);
 n477=~(n442|n405);
 n480=~(n486^n481);
 n549=~(n486|n481);
 n550=~(n508|n481);
 n553=~(n559^n554);
 n633=~(n639^n634);
 n680=~n684&n681;
 n707=~(n559|n554);
 n708=~(n554|n573);
 n709=~(n559|n573);
 n721=~(n639|n634);
 n723=~(n659|n634);
 n747=~(n753^n748);
 n809=~(n753|n748);
 n811=~(n768|n748);
 n840=~(n846^n841);
 n888=~(n847|n841);
 n890=~(n852|n841);
 n892=~(n898^n893);
 n962=~(n898|n893);
 n964=~(n915|n893);
 n965=~(n971^n966);
 Z8=~(n151^n121);
 n1029=~(n1035^n1030);
 n1088=~(n1036|n1030);
 n1090=~(n1041|n1030);
 n1091=~(n1118^n1092);
 n1144=~(n1146|n1145);
 n1148=~(n1172^n1149);
 n1193=~(n1195|n1194);
 n1237=~(n1239|n1238);
 n154=~(n156|n155);
 n342=~(n391^n343);
 n400=~(n391|n343);
 n403=~(n442^n404);
 n462=~n466&n463;
 n475=~(n477|n476);
 n479=~(n508^n480);
 n548=~(n550|n549);
 n552=~(n573^n553);
 n632=~(n659^n633);
 n679=~(n685^n680);
 n706=~(n708|n707);
 n720=~(n722|n721);
 n746=~(n768^n747);
 n791=~(n685|n680);
 n808=~(n810|n809);
 n882=~(n812|n840);
 n887=~(n889|n888);
 n891=~(n915^n892);
 n961=~(n963|n962);
 n1087=~(n1089|n1088);
 n1143=~n1147&n1144;
 n1192=~n1196&n1193;
 n1236=~n1240&n1237;
 n153=~n157&n154;
 n402=~(n462^n403);
 n471=~(n462|n403);
 n474=~n478&n475;
 n547=~n551&n548;
 n631=~(n679^n632);
 n705=~n709&n706;
 n719=~n723&n720;
 n790=~(n680|n632);
 n792=~(n685|n632);
 n804=~(n724|n746);
 n807=~n811&n808;
 n886=~n890&n887;
 n958=~(n929|n891);
 n960=~n964&n961;
 Z9=n158^n153;
 n1026=~(n966|n960);
 n1028=~(n971|n960);
 n1086=~n1090&n1087;
 n1142=~(n1148^n1143);
 n1189=~(n1148|n1143);
 n1191=~(n1197^n1192);
 n1233=~(n1197|n1192);
 n1235=~(n1241^n1236);
 n1270=~(n1241|n1236);
 n189=~(n159|n153);
 n191=~(n164|n153);
 n473=~(n479^n474);
 n544=~(n479|n474);
 n546=~(n552^n547);
 n628=~(n552|n547);
 n630=~(n705^n631);
 n714=~(n705|n631);
 n718=~(n724^n719);
 n789=~(n791|n790);
 n802=~(n724|n719);
 n803=~(n746|n719);
 n806=~(n812^n807);
 n881=~(n812|n807);
 n883=~(n840|n807);
 n885=~(n891^n886);
 n956=~(n891|n886);
 n957=~(n929|n886);
 n959=~(n965^n960);
 n1025=~(n1027|n1026);
 n1085=~(n1091^n1086);
 n1140=~(n1091|n1086);
 n188=~(n190|n189);
 n717=~(n746^n718);
 n788=~n792&n789;
 n801=~(n803|n802);
 n805=~(n840^n806);
 n880=~(n882|n881);
 n884=~(n929^n885);
 n955=~(n957|n956);
 n1024=~n1028&n1025;
 n187=~n191&n188;
 n716=~(n788^n717);
 n797=~(n788|n717);
 n800=~n804&n801;
 n879=~n883&n880;
 n954=~n958&n955;
 Z10=n192^n187;
 n1021=~(n959|n954);
 n1023=~(n1029^n1024);
 n1083=~(n1029|n1024);
 n234=~(n226|n187);
 n236=~(n193|n187);
 n799=~(n805^n800);
 n876=~(n805|n800);
 n878=~(n884^n879);
 n951=~(n884|n879);
 n953=~(n959^n954);
 n233=~(n235|n234);
 n232=~n236&n233;
 Z11=n237^n232;
 n281=~(n273|n232);
 n283=~(n238|n232);
 n280=~(n282|n281);
 n279=~n283&n280;
 Z12=n284^n279;
 n339=~(n285|n279);
 n341=~(n290|n279);
 n338=~(n340|n339);
 n337=~n341&n338;
 Z13=n342^n337;
 n399=~(n391|n337);
 n401=~(n343|n337);
 n398=~(n400|n399);
 n397=~n401&n398;
 Z14=n402^n397;
 n470=~(n462|n397);
 n472=~(n403|n397);
 n469=~(n471|n470);
 n468=~n472&n469;
 Z15=n473^n468;
 n543=~(n474|n468);
 n545=~(n479|n468);
 n542=~(n544|n543);
 n541=~n545&n542;
 Z16=n546^n541;
 n627=~(n547|n541);
 n629=~(n552|n541);
 n626=~(n628|n627);
 n625=~n629&n626;
 Z17=n630^n625;
 n713=~(n705|n625);
 n715=~(n631|n625);
 n712=~(n714|n713);
 n711=~n715&n712;
 Z18=n716^n711;
 n796=~(n788|n711);
 n798=~(n717|n711);
 n795=~(n797|n796);
 n794=~n798&n795;
 Z19=n799^n794;
 n875=~(n800|n794);
 n877=~(n805|n794);
 n874=~(n876|n875);
 n873=~n877&n874;
 Z20=n878^n873;
 n950=~(n879|n873);
 n952=~(n884|n873);
 n949=~(n951|n950);
 n948=~n952&n949;
 Z21=n953^n948;
 n1020=~(n954|n948);
 n1022=~(n959|n948);
 n1019=~(n1021|n1020);
 n1018=~n1022&n1019;
 Z22=n1023^n1018;
 n1082=~(n1024|n1018);
 n1084=~(n1029|n1018);
 n1081=~(n1083|n1082);
 n1080=~n1084&n1081;
 Z23=n1085^n1080;
 n1139=~(n1086|n1080);
 n1141=~(n1091|n1080);
 n1138=~(n1140|n1139);
 n1137=~n1141&n1138;
 Z24=n1142^n1137;
 n1188=~(n1143|n1137);
 n1190=~(n1148|n1137);
 n1187=~(n1189|n1188);
 n1186=~n1190&n1187;
 Z25=n1191^n1186;
 n1232=~(n1192|n1186);
 n1234=~(n1197|n1186);
 n1231=~(n1233|n1232);
 n1230=~n1234&n1231;
 Z26=n1235^n1230;
 n1269=~(n1236|n1230);
 n1271=~(n1241|n1230);
 n1268=~(n1270|n1269);
 n1267=~n1271&n1268;
 n1266=~(n1272^n1267);
 n1299=~(n1272|n1267);
 n1301=~(n1277|n1267);
 Z27=n1277^n1266;
 n1298=~(n1300|n1299);
 n1297=~n1301&n1298;
 Z28=n1302^n1297;
 n1322=~(n1303|n1297);
 n1324=~(n1308|n1297);
 n1321=~(n1323|n1322);
 n1320=~n1324&n1321;
 Z29=n1325^n1320;
 n1341=~(n1326|n1320);
 n1343=~(n1331|n1320);
 n1340=~(n1342|n1341);
 n1339=~n1343&n1340;
 n1338=n1331^n1339;
 n1349=n1331&~n1339;
 n1351=n1344&~n1339;
 Z30=~(n1344^n1338);
 n1348=~(n1350|n1349);
 Z31=~n1351&n1348;
 Z = (Z0 << 0)|(Z1 << 1)|(Z2 << 2)|(Z3 << 3)|(Z4 << 4)|(Z5 << 5)|(Z6 << 6)|(Z7 << 7)|(Z8 << 8)|(Z9 << 9)|(Z10 << 10)|(Z11 << 11)|(Z12 << 12)|(Z13 << 13)|(Z14 << 14)|(Z15 << 15)|(Z16 << 16)|(Z17 << 17)|(Z18 << 18)|(Z19 << 19)|(Z20 << 20)|(Z21 << 21)|(Z22 << 22)|(Z23 << 23)|(Z24 << 24)|(Z25 << 25)|(Z26 << 26)|(Z27 << 27)|(Z28 << 28)|(Z29 << 29)|(Z30 << 30)|(Z31 << 31);
 return Z;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mse parameters
***/
// MAE% = 0.00000096 %
// MAE = 41 
// WCE% = 0.0000032 %
// WCE = 139 
// WCRE% = 7900.00 %
// EP% = 98.37 %
// MRE% = 0.00013 %
// MSE = 2581 
// PDK45_PWR = 2.087 mW
// PDK45_AREA = 2977.2 um2
// PDK45_DELAY = 3.02 ns



uint16_t mul8_364(uint8_t a, uint8_t b)
{
  uint16_t c = 0;
  uint8_t n0 = (a >> 0) & 0x1;
  uint8_t n2 = (a >> 1) & 0x1;
  uint8_t n4 = (a >> 2) & 0x1;
  uint8_t n6 = (a >> 3) & 0x1;
  uint8_t n8 = (a >> 4) & 0x1;
  uint8_t n10 = (a >> 5) & 0x1;
  uint8_t n12 = (a >> 6) & 0x1;
  uint8_t n14 = (a >> 7) & 0x1;
  uint8_t n16 = (b >> 0) & 0x1;
  uint8_t n18 = (b >> 1) & 0x1;
  uint8_t n20 = (b >> 2) & 0x1;
  uint8_t n22 = (b >> 3) & 0x1;
  uint8_t n24 = (b >> 4) & 0x1;
  uint8_t n26 = (b >> 5) & 0x1;
  uint8_t n28 = (b >> 6) & 0x1;
  uint8_t n30 = (b >> 7) & 0x1;
  uint8_t n32;
  uint8_t n48;
  uint8_t n64;
  uint8_t n82;
  uint8_t n98;
  uint8_t n114;
  uint8_t n132;
  uint8_t n149;
  uint8_t n164;
  uint8_t n167;
  uint8_t n182;
  uint8_t n198;
  uint8_t n214;
  uint8_t n232;
  uint8_t n248;
  uint8_t n264;
  uint8_t n282;
  uint8_t n298;
  uint8_t n299;
  uint8_t n314;
  uint8_t n315;
  uint8_t n332;
  uint8_t n333;
  uint8_t n348;
  uint8_t n349;
  uint8_t n364;
  uint8_t n365;
  uint8_t n382;
  uint8_t n383;
  uint8_t n398;
  uint8_t n399;
  uint8_t n414;
  uint8_t n432;
  uint8_t n448;
  uint8_t n464;
  uint8_t n482;
  uint8_t n498;
  uint8_t n514;
  uint8_t n532;
  uint8_t n548;
  uint8_t n549;
  uint8_t n564;
  uint8_t n565;
  uint8_t n582;
  uint8_t n583;
  uint8_t n598;
  uint8_t n599;
  uint8_t n614;
  uint8_t n615;
  uint8_t n632;
  uint8_t n633;
  uint8_t n648;
  uint8_t n649;
  uint8_t n664;
  uint8_t n682;
  uint8_t n698;
  uint8_t n714;
  uint8_t n732;
  uint8_t n748;
  uint8_t n764;
  uint8_t n782;
  uint8_t n798;
  uint8_t n799;
  uint8_t n814;
  uint8_t n815;
  uint8_t n832;
  uint8_t n833;
  uint8_t n848;
  uint8_t n849;
  uint8_t n864;
  uint8_t n865;
  uint8_t n882;
  uint8_t n883;
  uint8_t n898;
  uint8_t n899;
  uint8_t n914;
  uint8_t n932;
  uint8_t n948;
  uint8_t n964;
  uint8_t n982;
  uint8_t n998;
  uint8_t n1014;
  uint8_t n1032;
  uint8_t n1048;
  uint8_t n1049;
  uint8_t n1064;
  uint8_t n1065;
  uint8_t n1082;
  uint8_t n1083;
  uint8_t n1098;
  uint8_t n1099;
  uint8_t n1114;
  uint8_t n1115;
  uint8_t n1132;
  uint8_t n1133;
  uint8_t n1148;
  uint8_t n1149;
  uint8_t n1164;
  uint8_t n1182;
  uint8_t n1198;
  uint8_t n1214;
  uint8_t n1232;
  uint8_t n1248;
  uint8_t n1264;
  uint8_t n1282;
  uint8_t n1298;
  uint8_t n1299;
  uint8_t n1314;
  uint8_t n1315;
  uint8_t n1332;
  uint8_t n1333;
  uint8_t n1348;
  uint8_t n1349;
  uint8_t n1364;
  uint8_t n1365;
  uint8_t n1382;
  uint8_t n1383;
  uint8_t n1398;
  uint8_t n1399;
  uint8_t n1414;
  uint8_t n1432;
  uint8_t n1448;
  uint8_t n1464;
  uint8_t n1482;
  uint8_t n1498;
  uint8_t n1514;
  uint8_t n1532;
  uint8_t n1548;
  uint8_t n1549;
  uint8_t n1564;
  uint8_t n1565;
  uint8_t n1582;
  uint8_t n1583;
  uint8_t n1598;
  uint8_t n1599;
  uint8_t n1614;
  uint8_t n1615;
  uint8_t n1632;
  uint8_t n1633;
  uint8_t n1648;
  uint8_t n1649;
  uint8_t n1664;
  uint8_t n1682;
  uint8_t n1698;
  uint8_t n1714;
  uint8_t n1732;
  uint8_t n1748;
  uint8_t n1764;
  uint8_t n1782;
  uint8_t n1798;
  uint8_t n1799;
  uint8_t n1814;
  uint8_t n1815;
  uint8_t n1832;
  uint8_t n1833;
  uint8_t n1848;
  uint8_t n1849;
  uint8_t n1864;
  uint8_t n1865;
  uint8_t n1882;
  uint8_t n1883;
  uint8_t n1898;
  uint8_t n1899;
  uint8_t n1914;
  uint8_t n1915;
  uint8_t n1932;
  uint8_t n1933;
  uint8_t n1948;
  uint8_t n1949;
  uint8_t n1964;
  uint8_t n1965;
  uint8_t n1982;
  uint8_t n1983;
  uint8_t n1998;
  uint8_t n1999;
  uint8_t n2014;
  uint8_t n2015;

  n32 = n0 & n16;
  n48 = n2 & n16;
  n64 = n4 & n16;
  n82 = n6 & n16;
  n98 = n8 & n16;
  n114 = n10 & n16;
  n132 = n12 & n16;
  n149 = n14 & n16;
  n164 = n0 & n18;
  n167 = n149;
  n182 = n2 & n18;
  n198 = n4 & n18;
  n214 = n6 & n18;
  n232 = n8 & n18;
  n248 = n10 & n18;
  n264 = n12 & n18;
  n282 = n14 & n18;
  n298 = n48 ^ n164;
  n299 = n48 & n164;
  n314 = n64 ^ n182;
  n315 = n64 & n182;
  n332 = n82 ^ n198;
  n333 = n82 & n198;
  n348 = n98 ^ n214;
  n349 = n98 & n214;
  n364 = n114 ^ n232;
  n365 = n114 & n232;
  n382 = n132 ^ n248;
  n383 = n132 & n248;
  n398 = n167 ^ n264;
  n399 = n167 & n264;
  n414 = n0 & n20;
  n432 = n2 & n20;
  n448 = n4 & n20;
  n464 = n6 & n20;
  n482 = n8 & n20;
  n498 = n10 & n20;
  n514 = n12 & n20;
  n532 = n14 & n20;
  n548 = (n314 ^ n414) ^ n299;
  n549 = (n314 & n414) | (n414 & n299) | (n314 & n299);
  n564 = (n332 ^ n432) ^ n315;
  n565 = (n332 & n432) | (n432 & n315) | (n332 & n315);
  n582 = (n348 ^ n448) ^ n333;
  n583 = (n348 & n448) | (n448 & n333) | (n348 & n333);
  n598 = (n364 ^ n464) ^ n349;
  n599 = (n364 & n464) | (n464 & n349) | (n364 & n349);
  n614 = (n382 ^ n482) ^ n365;
  n615 = (n382 & n482) | (n482 & n365) | (n382 & n365);
  n632 = (n398 ^ n498) ^ n383;
  n633 = (n398 & n498) | (n498 & n383) | (n398 & n383);
  n648 = (n282 ^ n514) ^ n399;
  n649 = (n282 & n514) | (n514 & n399) | (n282 & n399);
  n664 = n0 & n22;
  n682 = n2 & n22;
  n698 = n4 & n22;
  n714 = n6 & n22;
  n732 = n8 & n22;
  n748 = n10 & n22;
  n764 = n12 & n22;
  n782 = n14 & n22;
  n798 = (n564 ^ n664) ^ n549;
  n799 = (n564 & n664) | (n664 & n549) | (n564 & n549);
  n814 = (n582 ^ n682) ^ n565;
  n815 = (n582 & n682) | (n682 & n565) | (n582 & n565);
  n832 = (n598 ^ n698) ^ n583;
  n833 = (n598 & n698) | (n698 & n583) | (n598 & n583);
  n848 = (n614 ^ n714) ^ n599;
  n849 = (n614 & n714) | (n714 & n599) | (n614 & n599);
  n864 = (n632 ^ n732) ^ n615;
  n865 = (n632 & n732) | (n732 & n615) | (n632 & n615);
  n882 = (n648 ^ n748) ^ n633;
  n883 = (n648 & n748) | (n748 & n633) | (n648 & n633);
  n898 = (n532 ^ n764) ^ n649;
  n899 = (n532 & n764) | (n764 & n649) | (n532 & n649);
  n914 = n0 & n24;
  n932 = n2 & n24;
  n948 = n4 & n24;
  n964 = n6 & n24;
  n982 = n8 & n24;
  n998 = n10 & n24;
  n1014 = n12 & n24;
  n1032 = n14 & n24;
  n1048 = (n814 ^ n914) ^ n799;
  n1049 = (n814 & n914) | (n914 & n799) | (n814 & n799);
  n1064 = (n832 ^ n932) ^ n815;
  n1065 = (n832 & n932) | (n932 & n815) | (n832 & n815);
  n1082 = (n848 ^ n948) ^ n833;
  n1083 = (n848 & n948) | (n948 & n833) | (n848 & n833);
  n1098 = (n864 ^ n964) ^ n849;
  n1099 = (n864 & n964) | (n964 & n849) | (n864 & n849);
  n1114 = (n882 ^ n982) ^ n865;
  n1115 = (n882 & n982) | (n982 & n865) | (n882 & n865);
  n1132 = (n898 ^ n998) ^ n883;
  n1133 = (n898 & n998) | (n998 & n883) | (n898 & n883);
  n1148 = (n782 ^ n1014) ^ n899;
  n1149 = (n782 & n1014) | (n1014 & n899) | (n782 & n899);
  n1164 = n0 & n26;
  n1182 = n2 & n26;
  n1198 = n4 & n26;
  n1214 = n6 & n26;
  n1232 = n8 & n26;
  n1248 = n10 & n26;
  n1264 = n12 & n26;
  n1282 = n14 & n26;
  n1298 = (n1064 ^ n1164) ^ n1049;
  n1299 = (n1064 & n1164) | (n1164 & n1049) | (n1064 & n1049);
  n1314 = (n1082 ^ n1182) ^ n1065;
  n1315 = (n1082 & n1182) | (n1182 & n1065) | (n1082 & n1065);
  n1332 = (n1098 ^ n1198) ^ n1083;
  n1333 = (n1098 & n1198) | (n1198 & n1083) | (n1098 & n1083);
  n1348 = (n1114 ^ n1214) ^ n1099;
  n1349 = (n1114 & n1214) | (n1214 & n1099) | (n1114 & n1099);
  n1364 = (n1132 ^ n1232) ^ n1115;
  n1365 = (n1132 & n1232) | (n1232 & n1115) | (n1132 & n1115);
  n1382 = (n1148 ^ n1248) ^ n1133;
  n1383 = (n1148 & n1248) | (n1248 & n1133) | (n1148 & n1133);
  n1398 = (n1032 ^ n1264) ^ n1149;
  n1399 = (n1032 & n1264) | (n1264 & n1149) | (n1032 & n1149);
  n1414 = n0 & n28;
  n1432 = n2 & n28;
  n1448 = n4 & n28;
  n1464 = n6 & n28;
  n1482 = n8 & n28;
  n1498 = n10 & n28;
  n1514 = n12 & n28;
  n1532 = n14 & n28;
  n1548 = (n1314 ^ n1414) ^ n1299;
  n1549 = (n1314 & n1414) | (n1414 & n1299) | (n1314 & n1299);
  n1564 = (n1332 ^ n1432) ^ n1315;
  n1565 = (n1332 & n1432) | (n1432 & n1315) | (n1332 & n1315);
  n1582 = (n1348 ^ n1448) ^ n1333;
  n1583 = (n1348 & n1448) | (n1448 & n1333) | (n1348 & n1333);
  n1598 = (n1364 ^ n1464) ^ n1349;
  n1599 = (n1364 & n1464) | (n1464 & n1349) | (n1364 & n1349);
  n1614 = (n1382 ^ n1482) ^ n1365;
  n1615 = (n1382 & n1482) | (n1482 & n1365) | (n1382 & n1365);
  n1632 = (n1398 ^ n1498) ^ n1383;
  n1633 = (n1398 & n1498) | (n1498 & n1383) | (n1398 & n1383);
  n1648 = (n1282 ^ n1514) ^ n1399;
  n1649 = (n1282 & n1514) | (n1514 & n1399) | (n1282 & n1399);
  n1664 = n0 & n30;
  n1682 = n2 & n30;
  n1698 = n4 & n30;
  n1714 = n6 & n30;
  n1732 = n8 & n30;
  n1748 = n10 & n30;
  n1764 = n12 & n30;
  n1782 = n14 & n30;
  n1798 = (n1564 ^ n1664) ^ n1549;
  n1799 = (n1564 & n1664) | (n1664 & n1549) | (n1564 & n1549);
  n1814 = (n1582 ^ n1682) ^ n1565;
  n1815 = (n1582 & n1682) | (n1682 & n1565) | (n1582 & n1565);
  n1832 = (n1598 ^ n1698) ^ n1583;
  n1833 = (n1598 & n1698) | (n1698 & n1583) | (n1598 & n1583);
  n1848 = (n1614 ^ n1714) ^ n1599;
  n1849 = (n1614 & n1714) | (n1714 & n1599) | (n1614 & n1599);
  n1864 = (n1632 ^ n1732) ^ n1615;
  n1865 = (n1632 & n1732) | (n1732 & n1615) | (n1632 & n1615);
  n1882 = (n1648 ^ n1748) ^ n1633;
  n1883 = (n1648 & n1748) | (n1748 & n1633) | (n1648 & n1633);
  n1898 = (n1532 ^ n1764) ^ n1649;
  n1899 = (n1532 & n1764) | (n1764 & n1649) | (n1532 & n1649);
  n1914 = n1814 ^ n1799;
  n1915 = n1814 & n1799;
  n1932 = (n1832 ^ n1815) ^ n1915;
  n1933 = (n1832 & n1815) | (n1815 & n1915) | (n1832 & n1915);
  n1948 = (n1848 ^ n1833) ^ n1933;
  n1949 = (n1848 & n1833) | (n1833 & n1933) | (n1848 & n1933);
  n1964 = (n1864 ^ n1849) ^ n1949;
  n1965 = (n1864 & n1849) | (n1849 & n1949) | (n1864 & n1949);
  n1982 = (n1882 ^ n1865) ^ n1965;
  n1983 = (n1882 & n1865) | (n1865 & n1965) | (n1882 & n1965);
  n1998 = (n1898 ^ n1883) ^ n1983;
  n1999 = (n1898 & n1883) | (n1883 & n1983) | (n1898 & n1983);
  n2014 = (n1782 ^ n1899) ^ n1999;
  n2015 = (n1782 & n1899) | (n1899 & n1999) | (n1782 & n1999);

  c |= (n32 & 0x1) << 0;
  c |= (n298 & 0x1) << 1;
  c |= (n548 & 0x1) << 2;
  c |= (n798 & 0x1) << 3;
  c |= (n1048 & 0x1) << 4;
  c |= (n1298 & 0x1) << 5;
  c |= (n1548 & 0x1) << 6;
  c |= (n1798 & 0x1) << 7;
  c |= (n1914 & 0x1) << 8;
  c |= (n1932 & 0x1) << 9;
  c |= (n1948 & 0x1) << 10;
  c |= (n1964 & 0x1) << 11;
  c |= (n1982 & 0x1) << 12;
  c |= (n1998 & 0x1) << 13;
  c |= (n2014 & 0x1) << 14;
  c |= (n2015 & 0x1) << 15;

  return c;
}

uint64_t mult8_cgp14_wc139_csamrca(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_23, dout_27, dout_29, dout_30, dout_31, dout_43, dout_44, dout_45, dout_50, dout_51, dout_52, dout_53, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_87, dout_88, dout_93, dout_94, dout_95, dout_96, dout_108, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_133, dout_134, dout_136, dout_137, dout_138, dout_139, dout_146, dout_150, dout_151, dout_153, dout_155, dout_156, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_171, dout_172, dout_173, dout_174, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_27=((B >> 3)&1)&((A >> 3)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_43=((A >> 0)&1)&dout_29;
   dout_44=dout_23^dout_30;
   dout_45=dout_23&dout_30;
   dout_50=((B >> 4)&1)&((A >> 2)&1);
   dout_51=((B >> 5)&1)&((A >> 2)&1);
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_79=dout_44^dout_51;
   dout_80=dout_44&dout_51;
   dout_81=dout_79&dout_43;
   dout_82=dout_79^dout_43;
   dout_83=dout_80|dout_81;
   dout_84=dout_31^dout_52;
   dout_85=dout_31&dout_52;
   dout_87=dout_84^dout_45;
   dout_88=dout_85|dout_45;
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_108=((A >> 3)&1)&((B >> 2)&1);
   dout_117=dout_82^dout_93;
   dout_118=dout_82&dout_93;
   dout_119=dout_117&dout_50;
   dout_120=dout_117^dout_50;
   dout_121=dout_118|dout_119;
   dout_122=dout_87^dout_94;
   dout_123=dout_87&dout_94;
   dout_124=dout_122&dout_83;
   dout_125=dout_122^dout_83;
   dout_126=dout_123|dout_124;
   dout_127=dout_53^dout_95;
   dout_128=dout_53&dout_95;
   dout_129=dout_127&dout_88;
   dout_130=dout_127^dout_88;
   dout_131=dout_128|dout_129;
   dout_133=((B >> 3)&1)&((A >> 4)&1);
   dout_134=((B >> 2)&1)&((A >> 4)&1);
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_146=((B >> 1)&1)&((A >> 4)&1);
   dout_150=dout_27|dout_134;
   dout_151=dout_108&dout_150;
   dout_153=dout_150^dout_108;
   dout_155=dout_120^dout_133;
   dout_156=dout_120&dout_133;
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_121;
   dout_163=dout_160^dout_121;
   dout_164=dout_161|dout_162;
   dout_165=dout_130^dout_137;
   dout_166=dout_130&dout_137;
   dout_167=dout_165&dout_126;
   dout_168=dout_165^dout_126;
   dout_169=dout_166|dout_167;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_172=dout_170&dout_131;
   dout_173=dout_170^dout_131;
   dout_174=dout_171|dout_172;
   dout_176=((B >> 1)&1)&((A >> 5)&1);
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_188=dout_153^dout_176;
   dout_189=dout_153&dout_176;
   dout_190=dout_188&dout_146;
   dout_191=dout_188^dout_146;
   dout_192=dout_189|dout_190;
   dout_193=dout_155^dout_177;
   dout_194=dout_155&dout_177;
   dout_195=dout_193&dout_151;
   dout_196=dout_193^dout_151;
   dout_197=dout_194|dout_195;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_156;
   dout_201=dout_198^dout_156;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_218=((B >> 0)&1)&((A >> 6)&1);
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_226=dout_191^dout_218;
   dout_228=dout_191&((B >> 0)&1);
   dout_229=dout_226^((B >> 0)&1);
   dout_230=dout_218|dout_228;
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_233=dout_231&dout_192;
   dout_234=dout_231^dout_192;
   dout_235=dout_232|dout_233;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_197;
   dout_239=dout_236^dout_197;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_234^dout_261;
   dout_270=dout_234&dout_261;
   dout_271=dout_269&dout_230;
   dout_272=dout_269^dout_230;
   dout_273=dout_270|dout_271;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_235;
   dout_277=dout_274^dout_235;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_304=dout_277^dout_273;
   dout_305=dout_277&dout_273;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_302^dout_298;
   dout_327=dout_302&dout_298;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_268^dout_303;
   dout_332=((A >> 7)&1)&dout_303;
   dout_333=dout_331&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (((A >> 4)&1)&1) << 0;
   O |= (dout_179&1) << 1;
   O |= (dout_172&1) << 2;
   O |= (dout_88&1) << 3;
   O |= (((A >> 0)&1)&1) << 4;
   O |= (((B >> 3)&1)&1) << 5;
   O |= (dout_229&1) << 6;
   O |= (dout_272&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

uint32_t evoapproxlib::evoapprox_t::mul16u_C37 (uint16_t a, uint16_t b) {
    static uint16_t * cacheLL = NULL;
    static uint16_t * cacheLH = NULL;
    static uint16_t * cacheHL = NULL;
    static uint16_t * cacheHH = NULL;
    int fillData = cacheLL == NULL || cacheLH == NULL || cacheHL == NULL || cacheHH == NULL;

    if(!cacheLL) cacheLL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheLH) cacheLH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHL) cacheHL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHH) cacheHH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    
    if(fillData) {
        for(int i = 0; i < 256; i++) {
            for(int j = 0; j < 256; j++) {
                cacheLL[i * 256 + j] = mult8_cgp14_wc139_csamrca(i, j);
                cacheLH[i * 256 + j] = mul8_364(i, j);
                cacheHL[i * 256 + j] = mul8_364(i, j);
                cacheHH[i * 256 + j] = mul8_364(i, j);
            }
        }
    }

    uint32_t opt = 0;

    opt += (uint32_t)cacheLL[(a & 0xFF       ) * 256 + (b & 0xFF             )];
    opt += (uint32_t)cacheLH[(a & 0xFF       ) * 256 + ((b >> 8) & 0xFF      )] << 8;
    opt += (uint32_t)cacheHL[((a >> 8) & 0xFF) * 256 + (b & 0xFF             )] << 8;
    opt += (uint32_t)cacheHH[((a >> 8) & 0xFF) * 256 + ((b >> 8) & 0xFF      )] << 16;

    return opt;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 0.00000029 %
// MAE = 12 
// WCE% = 0.000001 %
// WCE = 43 
// WCRE% = 700.00 %
// EP% = 91.60 %
// MRE% = 0.000038 %
// MSE = 249 
// PDK45_PWR = 2.149 mW
// PDK45_AREA = 3064.1 um2
// PDK45_DELAY = 3.12 ns


uint64_t mult8_cgp14ep_ep64716_wc43_csamrca(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_18, dout_19, dout_21, dout_22, dout_23, dout_28, dout_29, dout_30, dout_31, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_50, dout_51, dout_52, dout_53, dout_54, dout_69, dout_72, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_87, dout_88, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_107, dout_108, dout_109, dout_110, dout_111, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_141, dout_145, dout_146, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_171, dout_172, dout_173, dout_174, dout_175, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_183, dout_184, dout_185, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_18=((A >> 0)&1)&((B >> 2)&1);
   dout_19=((B >> 3)&1)&((A >> 2)&1);
   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_40=dout_21^dout_28;
   dout_41=dout_21&dout_28;
   dout_42=dout_22^dout_29;
   dout_43=dout_22&dout_29;
   dout_44=dout_23^dout_30;
   dout_45=dout_23&dout_30;
   dout_50=((B >> 4)&1)&((A >> 2)&1);
   dout_51=((B >> 5)&1)&((A >> 2)&1);
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_54=dout_52&dout_31;
   dout_69=dout_40^dout_19;
   dout_72=dout_69^dout_19;
   dout_74=dout_42^dout_50;
   dout_75=dout_42&dout_50;
   dout_76=dout_74&dout_41;
   dout_77=dout_74^dout_41;
   dout_78=dout_75|dout_76;
   dout_79=dout_44^dout_51;
   dout_80=dout_44&dout_51;
   dout_81=dout_79&dout_43;
   dout_82=dout_79^dout_43;
   dout_83=dout_80|dout_81;
   dout_84=dout_31^dout_52;
   dout_87=dout_84^dout_45;
   dout_88=dout_54|dout_45;
   dout_91=((B >> 2)&1)&((A >> 3)&1);
   dout_92=((B >> 3)&1)&((A >> 3)&1);
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_107=dout_72^dout_91;
   dout_108=dout_72&dout_91;
   dout_109=dout_107&dout_18;
   dout_110=dout_107^dout_18;
   dout_111=dout_108|dout_109;
   dout_112=dout_77^dout_92;
   dout_113=dout_77&dout_92;
   dout_114=dout_112&dout_19;
   dout_115=dout_112^dout_19;
   dout_116=dout_113|dout_114;
   dout_117=dout_82^dout_93;
   dout_118=dout_82&dout_93;
   dout_119=dout_117&dout_78;
   dout_120=dout_117^dout_78;
   dout_121=dout_118|dout_119;
   dout_122=dout_87^dout_94;
   dout_123=dout_87&dout_94;
   dout_124=dout_122&dout_83;
   dout_125=dout_122^dout_83;
   dout_126=dout_123|dout_124;
   dout_127=dout_53^dout_95;
   dout_128=dout_53&dout_95;
   dout_129=dout_127&dout_88;
   dout_130=dout_127^dout_88;
   dout_131=dout_128|dout_129;
   dout_132=((B >> 0)&1)&((A >> 4)&1);
   dout_133=((B >> 1)&1)&((A >> 4)&1);
   dout_134=((B >> 2)&1)&((A >> 4)&1);
   dout_135=((B >> 3)&1)&((A >> 4)&1);
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_141=((A >> 3)&1)&((B >> 1)&1);
   dout_145=dout_110^dout_133;
   dout_146=dout_110&dout_133;
   dout_150=dout_115^dout_134;
   dout_151=dout_115&dout_134;
   dout_152=dout_150&dout_111;
   dout_153=dout_150^dout_111;
   dout_154=dout_151|dout_152;
   dout_155=dout_120^dout_135;
   dout_156=dout_120&dout_135;
   dout_157=dout_155&dout_116;
   dout_158=dout_155^dout_116;
   dout_159=dout_156|dout_157;
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_121;
   dout_163=dout_160^dout_121;
   dout_164=dout_161|dout_162;
   dout_165=dout_130^dout_137;
   dout_166=dout_130&dout_137;
   dout_167=dout_165&dout_126;
   dout_168=dout_165^dout_126;
   dout_169=dout_166|dout_167;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_172=dout_170&dout_131;
   dout_173=dout_170^dout_131;
   dout_174=dout_171|dout_172;
   dout_175=((B >> 0)&1)&((A >> 5)&1);
   dout_176=((B >> 1)&1)&((A >> 5)&1);
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_183=dout_145^dout_175;
   dout_184=dout_145&dout_175;
   dout_185=dout_183&dout_141;
   dout_186=dout_183^dout_141;
   dout_187=dout_184|dout_185;
   dout_188=dout_153^dout_176;
   dout_189=dout_153&dout_176;
   dout_190=dout_188&dout_146;
   dout_191=dout_188^dout_146;
   dout_192=dout_189|dout_190;
   dout_193=dout_158^dout_177;
   dout_194=dout_158&dout_177;
   dout_195=dout_193&dout_154;
   dout_196=dout_193^dout_154;
   dout_197=dout_194|dout_195;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_159;
   dout_201=dout_198^dout_159;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_218=((B >> 0)&1)&((A >> 6)&1);
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_226=dout_191^dout_218;
   dout_227=dout_191&dout_218;
   dout_228=dout_226&dout_187;
   dout_229=dout_226^dout_187;
   dout_230=dout_227|dout_228;
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_233=dout_231&dout_192;
   dout_234=dout_231^dout_192;
   dout_235=dout_232|dout_233;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_197;
   dout_239=dout_236^dout_197;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_234^dout_261;
   dout_270=dout_234&dout_261;
   dout_271=dout_269&dout_230;
   dout_272=dout_269^dout_230;
   dout_273=dout_270|dout_271;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_235;
   dout_277=dout_274^dout_235;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_304=dout_277^dout_273;
   dout_305=dout_277&dout_273;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_302^dout_298;
   dout_327=dout_302&dout_298;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_268^dout_303;
   dout_332=((A >> 7)&1)&dout_303;
   dout_333=dout_331&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_139&1) << 0;
   O |= (dout_28&1) << 1;
   O |= (dout_218&1) << 2;
   O |= (dout_28&1) << 3;
   O |= (dout_132&1) << 4;
   O |= (dout_186&1) << 5;
   O |= (dout_229&1) << 6;
   O |= (dout_272&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

uint32_t evoapproxlib::evoapprox_t::mul16u_FGL (uint16_t a, uint16_t b) {
    static uint16_t * cacheLL = NULL;
    static uint16_t * cacheLH = NULL;
    static uint16_t * cacheHL = NULL;
    static uint16_t * cacheHH = NULL;
    int fillData = cacheLL == NULL || cacheLH == NULL || cacheHL == NULL || cacheHH == NULL;

    if(!cacheLL) cacheLL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheLH) cacheLH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHL) cacheHL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHH) cacheHH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    
    if(fillData) {
        for(int i = 0; i < 256; i++) {
            for(int j = 0; j < 256; j++) {
                cacheLL[i * 256 + j] = mult8_cgp14ep_ep64716_wc43_csamrca(i, j);
                cacheLH[i * 256 + j] = mul8_364(i, j);
                cacheHL[i * 256 + j] = mul8_364(i, j);
                cacheHH[i * 256 + j] = mul8_364(i, j);
            }
        }
    }

    uint32_t opt = 0;

    opt += (uint32_t)cacheLL[(a & 0xFF       ) * 256 + (b & 0xFF             )];
    opt += (uint32_t)cacheLH[(a & 0xFF       ) * 256 + ((b >> 8) & 0xFF      )] << 8;
    opt += (uint32_t)cacheHL[((a >> 8) & 0xFF) * 256 + (b & 0xFF             )] << 8;
    opt += (uint32_t)cacheHH[((a >> 8) & 0xFF) * 256 + ((b >> 8) & 0xFF      )] << 16;

    return opt;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): Z. Vasicek and L. Sekanina, "Evolutionary Approach to Approximate Digital Circuits Design" in IEEE Transactions on Evolutionary Computation, vol. 19, no. 3, pp. 432-444, June 2015. doi: 10.1109/TEVC.2014.2336175 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 1.39 %
// MAE = 59650503 
// WCE% = 22.22 %
// WCE = 954408050 
// WCRE% = 22.22 %
// EP% = 80.98 %
// MRE% = 3.32 %
// MSE = 27897.246e12 
// PDK45_PWR = 1.984 mW
// PDK45_AREA = 3094.1 um2
// PDK45_DELAY = 3.23 ns



uint32_t evoapproxlib::evoapprox_t::mul16u_0ZG(const uint16_t A,const uint16_t B)
{
   uint8_t dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_56, dout_58, dout_63, dout_65, dout_66, dout_67, dout_69, dout_71, dout_75, dout_80, dout_82, dout_83, dout_85, dout_98, dout_100, dout_102, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_111, dout_113, dout_117, dout_122, dout_123, dout_124, dout_125, dout_127, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143, dout_144, dout_145, dout_146, dout_147, dout_148, dout_149, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_160, dout_162, dout_167, dout_169, dout_170, dout_171, dout_173, dout_175, dout_179, dout_184, dout_186, dout_187, dout_189, dout_202, dout_204, dout_206, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_215, dout_217, dout_221, dout_226, dout_227, dout_228, dout_229, dout_231, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_264, dout_266, dout_271, dout_273, dout_274, dout_275, dout_277, dout_279, dout_283, dout_288, dout_290, dout_291, dout_293, dout_306, dout_308, dout_310, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_319, dout_321, dout_325, dout_330, dout_331, dout_332, dout_333, dout_335, dout_344, dout_345, dout_346, dout_347, dout_348, dout_349, dout_350, dout_351, dout_352, dout_353, dout_354, dout_355, dout_356, dout_357, dout_358, dout_359, dout_360, dout_361, dout_362, dout_363, dout_368, dout_370, dout_375, dout_377, dout_378, dout_379, dout_381, dout_383, dout_387, dout_392, dout_394, dout_395, dout_397, dout_410, dout_412, dout_414, dout_416, dout_417, dout_418, dout_419, dout_420, dout_421, dout_423, dout_425, dout_429, dout_434, dout_435, dout_436, dout_437, dout_439, dout_460, dout_462, dout_464, dout_466, dout_467, dout_468, dout_469, dout_470, dout_471, dout_472, dout_473, dout_474, dout_475, dout_476, dout_477, dout_478, dout_479, dout_480, dout_481, dout_482, dout_483, dout_484, dout_485, dout_486, dout_487, dout_488, dout_489, dout_490, dout_491, dout_492, dout_494, dout_499, dout_502, dout_506, dout_509, dout_510, dout_511, dout_512, dout_515, dout_516, dout_517, dout_519, dout_520, dout_521, dout_550, dout_552, dout_554, dout_556, dout_557, dout_558, dout_559, dout_560, dout_561, dout_562, dout_563, dout_564, dout_565, dout_566, dout_567, dout_568, dout_569, dout_570, dout_571, dout_572, dout_573, dout_574, dout_575, dout_576, dout_577, dout_578, dout_579, dout_580, dout_581, dout_582, dout_584, dout_589, dout_592, dout_596, dout_599, dout_600, dout_601, dout_602, dout_605, dout_606, dout_607, dout_609, dout_610, dout_611, dout_628, dout_629, dout_630, dout_631, dout_632, dout_633, dout_634, dout_635, dout_636, dout_637, dout_638, dout_639, dout_640, dout_641, dout_642, dout_643, dout_644, dout_645, dout_646, dout_647, dout_652, dout_654, dout_659, dout_661, dout_662, dout_663, dout_665, dout_667, dout_671, dout_676, dout_678, dout_679, dout_681, dout_694, dout_696, dout_698, dout_700, dout_701, dout_702, dout_703, dout_704, dout_705, dout_707, dout_709, dout_713, dout_718, dout_719, dout_720, dout_721, dout_723, dout_732, dout_733, dout_734, dout_735, dout_736, dout_737, dout_738, dout_739, dout_740, dout_741, dout_742, dout_743, dout_744, dout_745, dout_746, dout_747, dout_748, dout_749, dout_750, dout_751, dout_756, dout_758, dout_763, dout_765, dout_766, dout_767, dout_769, dout_771, dout_775, dout_780, dout_782, dout_783, dout_785, dout_798, dout_800, dout_802, dout_804, dout_805, dout_806, dout_807, dout_808, dout_809, dout_811, dout_813, dout_817, dout_822, dout_823, dout_824, dout_825, dout_827, dout_836, dout_837, dout_838, dout_839, dout_840, dout_841, dout_842, dout_843, dout_844, dout_845, dout_846, dout_847, dout_848, dout_849, dout_850, dout_851, dout_852, dout_853, dout_854, dout_855, dout_860, dout_862, dout_867, dout_869, dout_870, dout_871, dout_873, dout_875, dout_879, dout_884, dout_886, dout_887, dout_889, dout_902, dout_904, dout_906, dout_908, dout_909, dout_910, dout_911, dout_912, dout_913, dout_915, dout_917, dout_921, dout_926, dout_927, dout_928, dout_929, dout_931, dout_940, dout_941, dout_942, dout_943, dout_944, dout_945, dout_946, dout_947, dout_948, dout_949, dout_950, dout_951, dout_952, dout_953, dout_954, dout_955, dout_956, dout_957, dout_958, dout_959, dout_964, dout_966, dout_971, dout_973, dout_974, dout_975, dout_977, dout_979, dout_983, dout_988, dout_990, dout_991, dout_993, dout_1006, dout_1008, dout_1010, dout_1012, dout_1013, dout_1014, dout_1015, dout_1016, dout_1017, dout_1019, dout_1021, dout_1025, dout_1030, dout_1031, dout_1032, dout_1033, dout_1035, dout_1056, dout_1058, dout_1060, dout_1062, dout_1063, dout_1064, dout_1065, dout_1066, dout_1067, dout_1068, dout_1069, dout_1070, dout_1071, dout_1072, dout_1073, dout_1074, dout_1075, dout_1076, dout_1077, dout_1078, dout_1079, dout_1080, dout_1081, dout_1082, dout_1083, dout_1084, dout_1085, dout_1086, dout_1087, dout_1088, dout_1090, dout_1095, dout_1098, dout_1102, dout_1105, dout_1106, dout_1107, dout_1108, dout_1111, dout_1112, dout_1113, dout_1115, dout_1116, dout_1117, dout_1146, dout_1148, dout_1150, dout_1152, dout_1153, dout_1154, dout_1155, dout_1156, dout_1157, dout_1158, dout_1159, dout_1160, dout_1161, dout_1162, dout_1163, dout_1164, dout_1165, dout_1166, dout_1167, dout_1168, dout_1169, dout_1170, dout_1171, dout_1172, dout_1173, dout_1174, dout_1175, dout_1176, dout_1177, dout_1178, dout_1180, dout_1185, dout_1188, dout_1192, dout_1195, dout_1196, dout_1197, dout_1198, dout_1201, dout_1202, dout_1203, dout_1205, dout_1206, dout_1207, dout_1224, dout_1225, dout_1226, dout_1227, dout_1228, dout_1229, dout_1230, dout_1231, dout_1232, dout_1233, dout_1234, dout_1235, dout_1236, dout_1237, dout_1238, dout_1239, dout_1240, dout_1241, dout_1242, dout_1243, dout_1248, dout_1250, dout_1255, dout_1257, dout_1258, dout_1259, dout_1261, dout_1263, dout_1267, dout_1272, dout_1274, dout_1275, dout_1277, dout_1290, dout_1292, dout_1294, dout_1296, dout_1297, dout_1298, dout_1299, dout_1300, dout_1301, dout_1303, dout_1305, dout_1309, dout_1314, dout_1315, dout_1316, dout_1317, dout_1319, dout_1328, dout_1329, dout_1330, dout_1331, dout_1332, dout_1333, dout_1334, dout_1335, dout_1336, dout_1337, dout_1338, dout_1339, dout_1340, dout_1341, dout_1342, dout_1343, dout_1344, dout_1345, dout_1346, dout_1347, dout_1352, dout_1354, dout_1359, dout_1361, dout_1362, dout_1363, dout_1365, dout_1367, dout_1371, dout_1376, dout_1378, dout_1379, dout_1381, dout_1394, dout_1396, dout_1398, dout_1400, dout_1401, dout_1402, dout_1403, dout_1404, dout_1405, dout_1407, dout_1409, dout_1413, dout_1418, dout_1419, dout_1420, dout_1421, dout_1423, dout_1432, dout_1433, dout_1434, dout_1435, dout_1436, dout_1437, dout_1438, dout_1439, dout_1440, dout_1441, dout_1442, dout_1443, dout_1444, dout_1445, dout_1446, dout_1447, dout_1448, dout_1449, dout_1450, dout_1451, dout_1456, dout_1458, dout_1463, dout_1465, dout_1466, dout_1467, dout_1469, dout_1471, dout_1475, dout_1480, dout_1482, dout_1483, dout_1485, dout_1498, dout_1500, dout_1502, dout_1504, dout_1505, dout_1506, dout_1507, dout_1508, dout_1509, dout_1511, dout_1513, dout_1517, dout_1522, dout_1523, dout_1524, dout_1525, dout_1527, dout_1536, dout_1537, dout_1538, dout_1539, dout_1540, dout_1541, dout_1542, dout_1543, dout_1544, dout_1545, dout_1546, dout_1547, dout_1548, dout_1549, dout_1550, dout_1551, dout_1552, dout_1553, dout_1554, dout_1555, dout_1560, dout_1562, dout_1567, dout_1569, dout_1570, dout_1571, dout_1573, dout_1575, dout_1579, dout_1584, dout_1586, dout_1587, dout_1589, dout_1602, dout_1604, dout_1606, dout_1608, dout_1609, dout_1610, dout_1611, dout_1612, dout_1613, dout_1615, dout_1617, dout_1621, dout_1626, dout_1627, dout_1628, dout_1629, dout_1631, dout_1652, dout_1654, dout_1656, dout_1658, dout_1659, dout_1660, dout_1661, dout_1662, dout_1663, dout_1664, dout_1665, dout_1666, dout_1667, dout_1668, dout_1669, dout_1670, dout_1671, dout_1672, dout_1673, dout_1674, dout_1675, dout_1676, dout_1677, dout_1678, dout_1679, dout_1680, dout_1681, dout_1682, dout_1683, dout_1684, dout_1686, dout_1691, dout_1694, dout_1698, dout_1701, dout_1702, dout_1703, dout_1704, dout_1707, dout_1708, dout_1709, dout_1711, dout_1712, dout_1713, dout_1742, dout_1744, dout_1746, dout_1748, dout_1749, dout_1750, dout_1751, dout_1752, dout_1753, dout_1754, dout_1755, dout_1756, dout_1757, dout_1758, dout_1759, dout_1760, dout_1761, dout_1762, dout_1763, dout_1764, dout_1765, dout_1766, dout_1767, dout_1768, dout_1769, dout_1770, dout_1771, dout_1772, dout_1773, dout_1774, dout_1776, dout_1781, dout_1784, dout_1788, dout_1791, dout_1792, dout_1793, dout_1794, dout_1797, dout_1798, dout_1799, dout_1801, dout_1802, dout_1803, dout_1820, dout_1821, dout_1822, dout_1823, dout_1824, dout_1825, dout_1826, dout_1827, dout_1828, dout_1829, dout_1830, dout_1831, dout_1832, dout_1833, dout_1834, dout_1835, dout_1836, dout_1837, dout_1838, dout_1839, dout_1844, dout_1846, dout_1851, dout_1853, dout_1854, dout_1855, dout_1857, dout_1859, dout_1863, dout_1868, dout_1870, dout_1871, dout_1873, dout_1886, dout_1888, dout_1890, dout_1892, dout_1893, dout_1894, dout_1895, dout_1896, dout_1897, dout_1899, dout_1901, dout_1905, dout_1910, dout_1911, dout_1912, dout_1913, dout_1915, dout_1924, dout_1925, dout_1926, dout_1927, dout_1928, dout_1929, dout_1930, dout_1931, dout_1932, dout_1933, dout_1934, dout_1935, dout_1936, dout_1937, dout_1938, dout_1939, dout_1940, dout_1941, dout_1942, dout_1943, dout_1948, dout_1950, dout_1955, dout_1957, dout_1958, dout_1959, dout_1961, dout_1963, dout_1967, dout_1972, dout_1974, dout_1975, dout_1977, dout_1990, dout_1992, dout_1994, dout_1996, dout_1997, dout_1998, dout_1999, dout_2000, dout_2001, dout_2003, dout_2005, dout_2009, dout_2014, dout_2015, dout_2016, dout_2017, dout_2019, dout_2028, dout_2029, dout_2030, dout_2031, dout_2032, dout_2033, dout_2034, dout_2035, dout_2036, dout_2037, dout_2038, dout_2039, dout_2040, dout_2041, dout_2042, dout_2043, dout_2044, dout_2045, dout_2046, dout_2047, dout_2052, dout_2054, dout_2059, dout_2061, dout_2062, dout_2063, dout_2065, dout_2067, dout_2071, dout_2076, dout_2078, dout_2079, dout_2081, dout_2094, dout_2096, dout_2098, dout_2100, dout_2101, dout_2102, dout_2103, dout_2104, dout_2105, dout_2107, dout_2109, dout_2113, dout_2118, dout_2119, dout_2120, dout_2121, dout_2123, dout_2132, dout_2133, dout_2134, dout_2135, dout_2136, dout_2137, dout_2138, dout_2139, dout_2140, dout_2141, dout_2142, dout_2143, dout_2144, dout_2145, dout_2146, dout_2147, dout_2148, dout_2149, dout_2150, dout_2151, dout_2156, dout_2158, dout_2163, dout_2165, dout_2166, dout_2167, dout_2169, dout_2171, dout_2175, dout_2180, dout_2182, dout_2183, dout_2185, dout_2198, dout_2200, dout_2202, dout_2204, dout_2205, dout_2206, dout_2207, dout_2208, dout_2209, dout_2211, dout_2213, dout_2217, dout_2222, dout_2223, dout_2224, dout_2225, dout_2227, dout_2248, dout_2250, dout_2252, dout_2254, dout_2255, dout_2256, dout_2257, dout_2258, dout_2259, dout_2260, dout_2261, dout_2262, dout_2263, dout_2264, dout_2265, dout_2266, dout_2267, dout_2268, dout_2269, dout_2270, dout_2271, dout_2272, dout_2273, dout_2274, dout_2275, dout_2276, dout_2277, dout_2278, dout_2279, dout_2280, dout_2282, dout_2287, dout_2290, dout_2294, dout_2297, dout_2298, dout_2299, dout_2300, dout_2303, dout_2304, dout_2305, dout_2307, dout_2308, dout_2309, dout_2338, dout_2340, dout_2342, dout_2344, dout_2345, dout_2346, dout_2347, dout_2348, dout_2349, dout_2350, dout_2351, dout_2352, dout_2353, dout_2354, dout_2355, dout_2356, dout_2357, dout_2358, dout_2359, dout_2360, dout_2361, dout_2362, dout_2363, dout_2364, dout_2365, dout_2366, dout_2367, dout_2368, dout_2369, dout_2370, dout_2372, dout_2377, dout_2380, dout_2384, dout_2387, dout_2388, dout_2389, dout_2390, dout_2393, dout_2394, dout_2395, dout_2397, dout_2398, dout_2399, dout_2432, dout_2433, dout_2434, dout_2435, dout_2436, dout_2437, dout_2438, dout_2439, dout_2440, dout_2441, dout_2442, dout_2443, dout_2444, dout_2445, dout_2446, dout_2447, dout_2448, dout_2449, dout_2450, dout_2451, dout_2452, dout_2453, dout_2454, dout_2455, dout_2456, dout_2457, dout_2458, dout_2459, dout_2460, dout_2461, dout_2462, dout_2463, dout_2503, dout_2504, dout_2505, dout_2506, dout_2507, dout_2508, dout_2509, dout_2510, dout_2511, dout_2512, dout_2513, dout_2514, dout_2515, dout_2516, dout_2517, dout_2518, dout_2519, dout_2520, dout_2521, dout_2522, dout_2523, dout_2524, dout_2525, dout_2526, dout_2527, dout_2528, dout_2529, dout_2530, dout_2531, dout_2532, dout_2533, dout_2534, dout_2535, dout_2536, dout_2537, dout_2538, dout_2539, dout_2540, dout_2541, dout_2542, dout_2543, dout_2544, dout_2545, dout_2546, dout_2547, dout_2548, dout_2549, dout_2551, dout_2552, dout_2554, dout_2555, dout_2557, dout_2558, dout_2560, dout_2561, dout_2563, dout_2564, dout_2566, dout_2567, dout_2569, dout_2586, dout_2587, dout_2588, dout_2589, dout_2590, dout_2591, dout_2592, dout_2593, dout_2594, dout_2595, dout_2596, dout_2597, dout_2598, dout_2599, dout_2600, dout_2601, dout_2602, dout_2603, dout_2604, dout_2605, dout_2606, dout_2607, dout_2608, dout_2609, dout_2610, dout_2611, dout_2612, dout_2613, dout_2614, dout_2615, dout_2616, dout_2617, dout_2657, dout_2658, dout_2659, dout_2660, dout_2661, dout_2662, dout_2663, dout_2664, dout_2665, dout_2666, dout_2667, dout_2668, dout_2669, dout_2670, dout_2671, dout_2672, dout_2673, dout_2674, dout_2675, dout_2676, dout_2677, dout_2678, dout_2679, dout_2680, dout_2681, dout_2682, dout_2683, dout_2684, dout_2685, dout_2686, dout_2687, dout_2688, dout_2689, dout_2690, dout_2691, dout_2692, dout_2693, dout_2694, dout_2695, dout_2696, dout_2697, dout_2698, dout_2699, dout_2700, dout_2701, dout_2702, dout_2703, dout_2705, dout_2706, dout_2708, dout_2709, dout_2711, dout_2712, dout_2714, dout_2715, dout_2717, dout_2718, dout_2720, dout_2721, dout_2723;
   uint32_t O;

   dout_32=((A >> 1)&1)&((B >> 0)&1);
   dout_33=((A >> 1)&1)&((B >> 1)&1);
   dout_34=((B >> 1)&1)&((A >> 0)&1);
   dout_35=((A >> 0)&1)&((B >> 0)&1);
   dout_36=dout_34|dout_32;
   dout_37=((A >> 3)&1)&((B >> 0)&1);
   dout_38=((A >> 3)&1)&((B >> 1)&1);
   dout_39=((B >> 1)&1)&((A >> 2)&1);
   dout_40=((A >> 2)&1)&((B >> 0)&1);
   dout_41=dout_39|dout_37;
   dout_42=((A >> 1)&1)&((B >> 2)&1);
   dout_43=((A >> 1)&1)&((B >> 3)&1);
   dout_44=((B >> 3)&1)&((A >> 0)&1);
   dout_45=((A >> 0)&1)&((B >> 2)&1);
   dout_46=dout_44|dout_42;
   dout_47=((A >> 3)&1)&((B >> 2)&1);
   dout_48=((A >> 3)&1)&((B >> 3)&1);
   dout_49=((B >> 3)&1)&((A >> 2)&1);
   dout_50=((A >> 2)&1)&((B >> 2)&1);
   dout_51=dout_49|dout_47;
   dout_56=dout_40^dout_33;
   dout_58=dout_40&dout_33;
   dout_63=dout_41&dout_58;
   dout_65=dout_38^dout_50;
   dout_66=dout_38&dout_50;
   dout_67=dout_65&dout_63;
   dout_69=dout_66|dout_67;
   dout_71=dout_51&dout_69;
   dout_75=dout_48&dout_71;
   dout_80=dout_65^dout_63;
   dout_82=dout_48^dout_71;
   dout_83=dout_51^dout_69;
   dout_85=dout_41^dout_58;
   dout_98=dout_45^dout_56;
   dout_100=dout_45&dout_56;
   dout_102=dout_46^dout_85;
   dout_104=dout_46&dout_85;
   dout_105=dout_102&dout_100;
   dout_106=dout_104|dout_105;
   dout_107=dout_43^dout_80;
   dout_108=dout_43&dout_80;
   dout_109=dout_107&dout_106;
   dout_111=dout_108|dout_109;
   dout_113=dout_83&dout_111;
   dout_117=dout_82&dout_113;
   dout_122=dout_107^dout_106;
   dout_123=dout_75^dout_117;
   dout_124=dout_82^dout_113;
   dout_125=dout_83^dout_111;
   dout_127=dout_102^dout_100;
   dout_136=((A >> 5)&1)&((B >> 0)&1);
   dout_137=((A >> 5)&1)&((B >> 1)&1);
   dout_138=((B >> 1)&1)&((A >> 4)&1);
   dout_139=((A >> 4)&1)&((B >> 0)&1);
   dout_140=dout_138|dout_136;
   dout_141=((A >> 7)&1)&((B >> 0)&1);
   dout_142=((A >> 7)&1)&((B >> 1)&1);
   dout_143=((B >> 1)&1)&((A >> 6)&1);
   dout_144=((A >> 6)&1)&((B >> 0)&1);
   dout_145=dout_143|dout_141;
   dout_146=((A >> 5)&1)&((B >> 2)&1);
   dout_147=((A >> 5)&1)&((B >> 3)&1);
   dout_148=((B >> 3)&1)&((A >> 4)&1);
   dout_149=((A >> 4)&1)&((B >> 2)&1);
   dout_150=dout_148|dout_146;
   dout_151=((A >> 7)&1)&((B >> 2)&1);
   dout_152=((A >> 7)&1)&((B >> 3)&1);
   dout_153=((B >> 3)&1)&((A >> 6)&1);
   dout_154=((A >> 6)&1)&((B >> 2)&1);
   dout_155=dout_153|dout_151;
   dout_160=dout_144^dout_137;
   dout_162=dout_144&dout_137;
   dout_167=dout_145&dout_162;
   dout_169=dout_142^dout_154;
   dout_170=dout_142&dout_154;
   dout_171=dout_169&dout_167;
   dout_173=dout_170|dout_171;
   dout_175=dout_155&dout_173;
   dout_179=dout_152&dout_175;
   dout_184=dout_169^dout_167;
   dout_186=dout_152^dout_175;
   dout_187=dout_155^dout_173;
   dout_189=dout_145^dout_162;
   dout_202=dout_149^dout_160;
   dout_204=dout_149&dout_160;
   dout_206=dout_150^dout_189;
   dout_208=dout_150&dout_189;
   dout_209=dout_206&dout_204;
   dout_210=dout_208|dout_209;
   dout_211=dout_147^dout_184;
   dout_212=dout_147&dout_184;
   dout_213=dout_211&dout_210;
   dout_215=dout_212|dout_213;
   dout_217=dout_187&dout_215;
   dout_221=dout_186&dout_217;
   dout_226=dout_211^dout_210;
   dout_227=dout_179^dout_221;
   dout_228=dout_186^dout_217;
   dout_229=dout_187^dout_215;
   dout_231=dout_206^dout_204;
   dout_240=((A >> 1)&1)&((B >> 4)&1);
   dout_241=((A >> 1)&1)&((B >> 5)&1);
   dout_242=((B >> 5)&1)&((A >> 0)&1);
   dout_243=((A >> 0)&1)&((B >> 4)&1);
   dout_244=dout_242|dout_240;
   dout_245=((A >> 3)&1)&((B >> 4)&1);
   dout_246=((A >> 3)&1)&((B >> 5)&1);
   dout_247=((B >> 5)&1)&((A >> 2)&1);
   dout_248=((A >> 2)&1)&((B >> 4)&1);
   dout_249=dout_247|dout_245;
   dout_250=((A >> 1)&1)&((B >> 6)&1);
   dout_251=((A >> 1)&1)&((B >> 7)&1);
   dout_252=((B >> 7)&1)&((A >> 0)&1);
   dout_253=((A >> 0)&1)&((B >> 6)&1);
   dout_254=dout_252|dout_250;
   dout_255=((A >> 3)&1)&((B >> 6)&1);
   dout_256=((A >> 3)&1)&((B >> 7)&1);
   dout_257=((B >> 7)&1)&((A >> 2)&1);
   dout_258=((A >> 2)&1)&((B >> 6)&1);
   dout_259=dout_257|dout_255;
   dout_264=dout_248^dout_241;
   dout_266=dout_248&dout_241;
   dout_271=dout_249&dout_266;
   dout_273=dout_246^dout_258;
   dout_274=dout_246&dout_258;
   dout_275=dout_273&dout_271;
   dout_277=dout_274|dout_275;
   dout_279=dout_259&dout_277;
   dout_283=dout_256&dout_279;
   dout_288=dout_273^dout_271;
   dout_290=dout_256^dout_279;
   dout_291=dout_259^dout_277;
   dout_293=dout_249^dout_266;
   dout_306=dout_253^dout_264;
   dout_308=dout_253&dout_264;
   dout_310=dout_254^dout_293;
   dout_312=dout_254&dout_293;
   dout_313=dout_310&dout_308;
   dout_314=dout_312|dout_313;
   dout_315=dout_251^dout_288;
   dout_316=dout_251&dout_288;
   dout_317=dout_315&dout_314;
   dout_319=dout_316|dout_317;
   dout_321=dout_291&dout_319;
   dout_325=dout_290&dout_321;
   dout_330=dout_315^dout_314;
   dout_331=dout_283^dout_325;
   dout_332=dout_290^dout_321;
   dout_333=dout_291^dout_319;
   dout_335=dout_310^dout_308;
   dout_344=((A >> 5)&1)&((B >> 4)&1);
   dout_345=((A >> 5)&1)&((B >> 5)&1);
   dout_346=((B >> 5)&1)&((A >> 4)&1);
   dout_347=((A >> 4)&1)&((B >> 4)&1);
   dout_348=dout_346|dout_344;
   dout_349=((A >> 7)&1)&((B >> 4)&1);
   dout_350=((A >> 7)&1)&((B >> 5)&1);
   dout_351=((B >> 5)&1)&((A >> 6)&1);
   dout_352=((A >> 6)&1)&((B >> 4)&1);
   dout_353=dout_351|dout_349;
   dout_354=((A >> 5)&1)&((B >> 6)&1);
   dout_355=((A >> 5)&1)&((B >> 7)&1);
   dout_356=((B >> 7)&1)&((A >> 4)&1);
   dout_357=((A >> 4)&1)&((B >> 6)&1);
   dout_358=dout_356|dout_354;
   dout_359=((A >> 7)&1)&((B >> 6)&1);
   dout_360=((A >> 7)&1)&((B >> 7)&1);
   dout_361=((B >> 7)&1)&((A >> 6)&1);
   dout_362=((A >> 6)&1)&((B >> 6)&1);
   dout_363=dout_361|dout_359;
   dout_368=dout_352^dout_345;
   dout_370=dout_352&dout_345;
   dout_375=dout_353&dout_370;
   dout_377=dout_350^dout_362;
   dout_378=dout_350&dout_362;
   dout_379=dout_377&dout_375;
   dout_381=dout_378|dout_379;
   dout_383=dout_363&dout_381;
   dout_387=dout_360&dout_383;
   dout_392=dout_377^dout_375;
   dout_394=dout_360^dout_383;
   dout_395=dout_363^dout_381;
   dout_397=dout_353^dout_370;
   dout_410=dout_357^dout_368;
   dout_412=dout_357&dout_368;
   dout_414=dout_358^dout_397;
   dout_416=dout_358&dout_397;
   dout_417=dout_414&dout_412;
   dout_418=dout_416|dout_417;
   dout_419=dout_355^dout_392;
   dout_420=dout_355&dout_392;
   dout_421=dout_419&dout_418;
   dout_423=dout_420|dout_421;
   dout_425=dout_395&dout_423;
   dout_429=dout_394&dout_425;
   dout_434=dout_419^dout_418;
   dout_435=dout_387^dout_429;
   dout_436=dout_394^dout_425;
   dout_437=dout_395^dout_423;
   dout_439=dout_414^dout_412;
   dout_460=dout_139^dout_122;
   dout_462=dout_139&dout_122;
   dout_464=dout_140^dout_125;
   dout_466=dout_464&dout_462;
   dout_467=dout_140&dout_125;
   dout_468=dout_467|dout_466;
   dout_469=dout_202^dout_124;
   dout_470=dout_469&dout_468;
   dout_471=dout_202&dout_124;
   dout_472=dout_471|dout_470;
   dout_473=dout_231^dout_123;
   dout_474=dout_473&dout_472;
   dout_475=dout_231&dout_123;
   dout_476=dout_226^dout_347;
   dout_477=dout_475|dout_474;
   dout_478=dout_226&dout_347;
   dout_479=dout_476&dout_477;
   dout_480=dout_229^dout_348;
   dout_481=dout_478|dout_479;
   dout_482=dout_229&dout_348;
   dout_483=dout_480&dout_481;
   dout_484=dout_228^dout_410;
   dout_485=dout_482|dout_483;
   dout_486=dout_484&dout_485;
   dout_487=dout_228&dout_410;
   dout_488=dout_487|dout_486;
   dout_489=dout_227^dout_439;
   dout_490=dout_489&dout_488;
   dout_491=dout_227&dout_439;
   dout_492=dout_491|dout_490;
   dout_494=dout_434&dout_492;
   dout_499=dout_437&dout_494;
   dout_502=dout_436&dout_499;
   dout_506=dout_464^dout_462;
   dout_509=dout_484^dout_485;
   dout_510=dout_469^dout_468;
   dout_511=dout_489^dout_488;
   dout_512=dout_434^dout_492;
   dout_515=dout_437^dout_494;
   dout_516=dout_436^dout_499;
   dout_517=dout_480^dout_481;
   dout_519=dout_435^dout_502;
   dout_520=dout_476^dout_477;
   dout_521=dout_473^dout_472;
   dout_550=dout_243^dout_460;
   dout_552=dout_243&dout_460;
   dout_554=dout_244^dout_506;
   dout_556=dout_554&dout_552;
   dout_557=dout_244&dout_506;
   dout_558=dout_557|dout_556;
   dout_559=dout_306^dout_510;
   dout_560=dout_559&dout_558;
   dout_561=dout_306&dout_510;
   dout_562=dout_561|dout_560;
   dout_563=dout_335^dout_521;
   dout_564=dout_563&dout_562;
   dout_565=dout_335&dout_521;
   dout_566=dout_330^dout_520;
   dout_567=dout_565|dout_564;
   dout_568=dout_330&dout_520;
   dout_569=dout_566&dout_567;
   dout_570=dout_333^dout_517;
   dout_571=dout_568|dout_569;
   dout_572=dout_333&dout_517;
   dout_573=dout_570&dout_571;
   dout_574=dout_332^dout_509;
   dout_575=dout_572|dout_573;
   dout_576=dout_574&dout_575;
   dout_577=dout_332&dout_509;
   dout_578=dout_577|dout_576;
   dout_579=dout_331^dout_511;
   dout_580=dout_579&dout_578;
   dout_581=dout_331&dout_511;
   dout_582=dout_581|dout_580;
   dout_584=dout_512&dout_582;
   dout_589=dout_515&dout_584;
   dout_592=dout_516&dout_589;
   dout_596=dout_554^dout_552;
   dout_599=dout_574^dout_575;
   dout_600=dout_559^dout_558;
   dout_601=dout_579^dout_578;
   dout_602=dout_512^dout_582;
   dout_605=dout_515^dout_584;
   dout_606=dout_516^dout_589;
   dout_607=dout_570^dout_571;
   dout_609=dout_519^dout_592;
   dout_610=dout_566^dout_567;
   dout_611=dout_563^dout_562;
   dout_628=((A >> 9)&1)&((B >> 0)&1);
   dout_629=((A >> 9)&1)&((B >> 1)&1);
   dout_630=((B >> 1)&1)&((A >> 8)&1);
   dout_631=((A >> 8)&1)&((B >> 0)&1);
   dout_632=dout_630|dout_628;
   dout_633=((A >> 11)&1)&((B >> 0)&1);
   dout_634=((A >> 11)&1)&((B >> 1)&1);
   dout_635=((B >> 1)&1)&((A >> 10)&1);
   dout_636=((A >> 10)&1)&((B >> 0)&1);
   dout_637=dout_635|dout_633;
   dout_638=((A >> 9)&1)&((B >> 2)&1);
   dout_639=((A >> 9)&1)&((B >> 3)&1);
   dout_640=((B >> 3)&1)&((A >> 8)&1);
   dout_641=((A >> 8)&1)&((B >> 2)&1);
   dout_642=dout_640|dout_638;
   dout_643=((A >> 11)&1)&((B >> 2)&1);
   dout_644=((A >> 11)&1)&((B >> 3)&1);
   dout_645=((B >> 3)&1)&((A >> 10)&1);
   dout_646=((A >> 10)&1)&((B >> 2)&1);
   dout_647=dout_645|dout_643;
   dout_652=dout_636^dout_629;
   dout_654=dout_636&dout_629;
   dout_659=dout_637&dout_654;
   dout_661=dout_634^dout_646;
   dout_662=dout_634&dout_646;
   dout_663=dout_661&dout_659;
   dout_665=dout_662|dout_663;
   dout_667=dout_647&dout_665;
   dout_671=dout_644&dout_667;
   dout_676=dout_661^dout_659;
   dout_678=dout_644^dout_667;
   dout_679=dout_647^dout_665;
   dout_681=dout_637^dout_654;
   dout_694=dout_641^dout_652;
   dout_696=dout_641&dout_652;
   dout_698=dout_642^dout_681;
   dout_700=dout_642&dout_681;
   dout_701=dout_698&dout_696;
   dout_702=dout_700|dout_701;
   dout_703=dout_639^dout_676;
   dout_704=dout_639&dout_676;
   dout_705=dout_703&dout_702;
   dout_707=dout_704|dout_705;
   dout_709=dout_679&dout_707;
   dout_713=dout_678&dout_709;
   dout_718=dout_703^dout_702;
   dout_719=dout_671^dout_713;
   dout_720=dout_678^dout_709;
   dout_721=dout_679^dout_707;
   dout_723=dout_698^dout_696;
   dout_732=((A >> 13)&1)&((B >> 0)&1);
   dout_733=((A >> 13)&1)&((B >> 1)&1);
   dout_734=((B >> 1)&1)&((A >> 12)&1);
   dout_735=((A >> 12)&1)&((B >> 0)&1);
   dout_736=dout_734|dout_732;
   dout_737=((A >> 15)&1)&((B >> 0)&1);
   dout_738=((A >> 15)&1)&((B >> 1)&1);
   dout_739=((B >> 1)&1)&((A >> 14)&1);
   dout_740=((A >> 14)&1)&((B >> 0)&1);
   dout_741=dout_739|dout_737;
   dout_742=((A >> 13)&1)&((B >> 2)&1);
   dout_743=((A >> 13)&1)&((B >> 3)&1);
   dout_744=((B >> 3)&1)&((A >> 12)&1);
   dout_745=((A >> 12)&1)&((B >> 2)&1);
   dout_746=dout_744|dout_742;
   dout_747=((A >> 15)&1)&((B >> 2)&1);
   dout_748=((A >> 15)&1)&((B >> 3)&1);
   dout_749=((B >> 3)&1)&((A >> 14)&1);
   dout_750=((A >> 14)&1)&((B >> 2)&1);
   dout_751=dout_749|dout_747;
   dout_756=dout_740^dout_733;
   dout_758=dout_740&dout_733;
   dout_763=dout_741&dout_758;
   dout_765=dout_738^dout_750;
   dout_766=dout_738&dout_750;
   dout_767=dout_765&dout_763;
   dout_769=dout_766|dout_767;
   dout_771=dout_751&dout_769;
   dout_775=dout_748&dout_771;
   dout_780=dout_765^dout_763;
   dout_782=dout_748^dout_771;
   dout_783=dout_751^dout_769;
   dout_785=dout_741^dout_758;
   dout_798=dout_745^dout_756;
   dout_800=dout_745&dout_756;
   dout_802=dout_746^dout_785;
   dout_804=dout_746&dout_785;
   dout_805=dout_802&dout_800;
   dout_806=dout_804|dout_805;
   dout_807=dout_743^dout_780;
   dout_808=dout_743&dout_780;
   dout_809=dout_807&dout_806;
   dout_811=dout_808|dout_809;
   dout_813=dout_783&dout_811;
   dout_817=dout_782&dout_813;
   dout_822=dout_807^dout_806;
   dout_823=dout_775^dout_817;
   dout_824=dout_782^dout_813;
   dout_825=dout_783^dout_811;
   dout_827=dout_802^dout_800;
   dout_836=((A >> 9)&1)&((B >> 4)&1);
   dout_837=((A >> 9)&1)&((B >> 5)&1);
   dout_838=((B >> 5)&1)&((A >> 8)&1);
   dout_839=((A >> 8)&1)&((B >> 4)&1);
   dout_840=dout_838|dout_836;
   dout_841=((A >> 11)&1)&((B >> 4)&1);
   dout_842=((A >> 11)&1)&((B >> 5)&1);
   dout_843=((B >> 5)&1)&((A >> 10)&1);
   dout_844=((A >> 10)&1)&((B >> 4)&1);
   dout_845=dout_843|dout_841;
   dout_846=((A >> 9)&1)&((B >> 6)&1);
   dout_847=((A >> 9)&1)&((B >> 7)&1);
   dout_848=((B >> 7)&1)&((A >> 8)&1);
   dout_849=((A >> 8)&1)&((B >> 6)&1);
   dout_850=dout_848|dout_846;
   dout_851=((A >> 11)&1)&((B >> 6)&1);
   dout_852=((A >> 11)&1)&((B >> 7)&1);
   dout_853=((B >> 7)&1)&((A >> 10)&1);
   dout_854=((A >> 10)&1)&((B >> 6)&1);
   dout_855=dout_853|dout_851;
   dout_860=dout_844^dout_837;
   dout_862=dout_844&dout_837;
   dout_867=dout_845&dout_862;
   dout_869=dout_842^dout_854;
   dout_870=dout_842&dout_854;
   dout_871=dout_869&dout_867;
   dout_873=dout_870|dout_871;
   dout_875=dout_855&dout_873;
   dout_879=dout_852&dout_875;
   dout_884=dout_869^dout_867;
   dout_886=dout_852^dout_875;
   dout_887=dout_855^dout_873;
   dout_889=dout_845^dout_862;
   dout_902=dout_849^dout_860;
   dout_904=dout_849&dout_860;
   dout_906=dout_850^dout_889;
   dout_908=dout_850&dout_889;
   dout_909=dout_906&dout_904;
   dout_910=dout_908|dout_909;
   dout_911=dout_847^dout_884;
   dout_912=dout_847&dout_884;
   dout_913=dout_911&dout_910;
   dout_915=dout_912|dout_913;
   dout_917=dout_887&dout_915;
   dout_921=dout_886&dout_917;
   dout_926=dout_911^dout_910;
   dout_927=dout_879^dout_921;
   dout_928=dout_886^dout_917;
   dout_929=dout_887^dout_915;
   dout_931=dout_906^dout_904;
   dout_940=((A >> 13)&1)&((B >> 4)&1);
   dout_941=((A >> 13)&1)&((B >> 5)&1);
   dout_942=((B >> 5)&1)&((A >> 12)&1);
   dout_943=((A >> 12)&1)&((B >> 4)&1);
   dout_944=dout_942|dout_940;
   dout_945=((A >> 15)&1)&((B >> 4)&1);
   dout_946=((A >> 15)&1)&((B >> 5)&1);
   dout_947=((B >> 5)&1)&((A >> 14)&1);
   dout_948=((A >> 14)&1)&((B >> 4)&1);
   dout_949=dout_947|dout_945;
   dout_950=((A >> 13)&1)&((B >> 6)&1);
   dout_951=((A >> 13)&1)&((B >> 7)&1);
   dout_952=((B >> 7)&1)&((A >> 12)&1);
   dout_953=((A >> 12)&1)&((B >> 6)&1);
   dout_954=dout_952|dout_950;
   dout_955=((A >> 15)&1)&((B >> 6)&1);
   dout_956=((A >> 15)&1)&((B >> 7)&1);
   dout_957=((B >> 7)&1)&((A >> 14)&1);
   dout_958=((A >> 14)&1)&((B >> 6)&1);
   dout_959=dout_957|dout_955;
   dout_964=dout_948^dout_941;
   dout_966=dout_948&dout_941;
   dout_971=dout_949&dout_966;
   dout_973=dout_946^dout_958;
   dout_974=dout_946&dout_958;
   dout_975=dout_973&dout_971;
   dout_977=dout_974|dout_975;
   dout_979=dout_959&dout_977;
   dout_983=dout_956&dout_979;
   dout_988=dout_973^dout_971;
   dout_990=dout_956^dout_979;
   dout_991=dout_959^dout_977;
   dout_993=dout_949^dout_966;
   dout_1006=dout_953^dout_964;
   dout_1008=dout_953&dout_964;
   dout_1010=dout_954^dout_993;
   dout_1012=dout_954&dout_993;
   dout_1013=dout_1010&dout_1008;
   dout_1014=dout_1012|dout_1013;
   dout_1015=dout_951^dout_988;
   dout_1016=dout_951&dout_988;
   dout_1017=dout_1015&dout_1014;
   dout_1019=dout_1016|dout_1017;
   dout_1021=dout_991&dout_1019;
   dout_1025=dout_990&dout_1021;
   dout_1030=dout_1015^dout_1014;
   dout_1031=dout_983^dout_1025;
   dout_1032=dout_990^dout_1021;
   dout_1033=dout_991^dout_1019;
   dout_1035=dout_1010^dout_1008;
   dout_1056=dout_735^dout_718;
   dout_1058=dout_735&dout_718;
   dout_1060=dout_736^dout_721;
   dout_1062=dout_1060&dout_1058;
   dout_1063=dout_736&dout_721;
   dout_1064=dout_1063|dout_1062;
   dout_1065=dout_798^dout_720;
   dout_1066=dout_1065&dout_1064;
   dout_1067=dout_798&dout_720;
   dout_1068=dout_1067|dout_1066;
   dout_1069=dout_827^dout_719;
   dout_1070=dout_1069&dout_1068;
   dout_1071=dout_827&dout_719;
   dout_1072=dout_822^dout_943;
   dout_1073=dout_1071|dout_1070;
   dout_1074=dout_822&dout_943;
   dout_1075=dout_1072&dout_1073;
   dout_1076=dout_825^dout_944;
   dout_1077=dout_1074|dout_1075;
   dout_1078=dout_825&dout_944;
   dout_1079=dout_1076&dout_1077;
   dout_1080=dout_824^dout_1006;
   dout_1081=dout_1078|dout_1079;
   dout_1082=dout_1080&dout_1081;
   dout_1083=dout_824&dout_1006;
   dout_1084=dout_1083|dout_1082;
   dout_1085=dout_823^dout_1035;
   dout_1086=dout_1085&dout_1084;
   dout_1087=dout_823&dout_1035;
   dout_1088=dout_1087|dout_1086;
   dout_1090=dout_1030&dout_1088;
   dout_1095=dout_1033&dout_1090;
   dout_1098=dout_1032&dout_1095;
   dout_1102=dout_1060^dout_1058;
   dout_1105=dout_1080^dout_1081;
   dout_1106=dout_1065^dout_1064;
   dout_1107=dout_1085^dout_1084;
   dout_1108=dout_1030^dout_1088;
   dout_1111=dout_1033^dout_1090;
   dout_1112=dout_1032^dout_1095;
   dout_1113=dout_1076^dout_1077;
   dout_1115=dout_1031^dout_1098;
   dout_1116=dout_1072^dout_1073;
   dout_1117=dout_1069^dout_1068;
   dout_1146=dout_839^dout_1056;
   dout_1148=dout_839&dout_1056;
   dout_1150=dout_840^dout_1102;
   dout_1152=dout_1150&dout_1148;
   dout_1153=dout_840&dout_1102;
   dout_1154=dout_1153|dout_1152;
   dout_1155=dout_902^dout_1106;
   dout_1156=dout_1155&dout_1154;
   dout_1157=dout_902&dout_1106;
   dout_1158=dout_1157|dout_1156;
   dout_1159=dout_931^dout_1117;
   dout_1160=dout_1159&dout_1158;
   dout_1161=dout_931&dout_1117;
   dout_1162=dout_926^dout_1116;
   dout_1163=dout_1161|dout_1160;
   dout_1164=dout_926&dout_1116;
   dout_1165=dout_1162&dout_1163;
   dout_1166=dout_929^dout_1113;
   dout_1167=dout_1164|dout_1165;
   dout_1168=dout_929&dout_1113;
   dout_1169=dout_1166&dout_1167;
   dout_1170=dout_928^dout_1105;
   dout_1171=dout_1168|dout_1169;
   dout_1172=dout_1170&dout_1171;
   dout_1173=dout_928&dout_1105;
   dout_1174=dout_1173|dout_1172;
   dout_1175=dout_927^dout_1107;
   dout_1176=dout_1175&dout_1174;
   dout_1177=dout_927&dout_1107;
   dout_1178=dout_1177|dout_1176;
   dout_1180=dout_1108&dout_1178;
   dout_1185=dout_1111&dout_1180;
   dout_1188=dout_1112&dout_1185;
   dout_1192=dout_1150^dout_1148;
   dout_1195=dout_1170^dout_1171;
   dout_1196=dout_1155^dout_1154;
   dout_1197=dout_1175^dout_1174;
   dout_1198=dout_1108^dout_1178;
   dout_1201=dout_1111^dout_1180;
   dout_1202=dout_1112^dout_1185;
   dout_1203=dout_1166^dout_1167;
   dout_1205=dout_1115^dout_1188;
   dout_1206=dout_1162^dout_1163;
   dout_1207=dout_1159^dout_1158;
   dout_1224=((A >> 1)&1)&((B >> 8)&1);
   dout_1225=((A >> 1)&1)&((B >> 9)&1);
   dout_1226=((B >> 9)&1)&((A >> 0)&1);
   dout_1227=((A >> 0)&1)&((B >> 8)&1);
   dout_1228=dout_1226|dout_1224;
   dout_1229=((A >> 3)&1)&((B >> 8)&1);
   dout_1230=((A >> 3)&1)&((B >> 9)&1);
   dout_1231=((B >> 9)&1)&((A >> 2)&1);
   dout_1232=((A >> 2)&1)&((B >> 8)&1);
   dout_1233=dout_1231|dout_1229;
   dout_1234=((A >> 1)&1)&((B >> 10)&1);
   dout_1235=((A >> 1)&1)&((B >> 11)&1);
   dout_1236=((B >> 11)&1)&((A >> 0)&1);
   dout_1237=((A >> 0)&1)&((B >> 10)&1);
   dout_1238=dout_1236|dout_1234;
   dout_1239=((A >> 3)&1)&((B >> 10)&1);
   dout_1240=((A >> 3)&1)&((B >> 11)&1);
   dout_1241=((B >> 11)&1)&((A >> 2)&1);
   dout_1242=((A >> 2)&1)&((B >> 10)&1);
   dout_1243=dout_1241|dout_1239;
   dout_1248=dout_1232^dout_1225;
   dout_1250=dout_1232&dout_1225;
   dout_1255=dout_1233&dout_1250;
   dout_1257=dout_1230^dout_1242;
   dout_1258=dout_1230&dout_1242;
   dout_1259=dout_1257&dout_1255;
   dout_1261=dout_1258|dout_1259;
   dout_1263=dout_1243&dout_1261;
   dout_1267=dout_1240&dout_1263;
   dout_1272=dout_1257^dout_1255;
   dout_1274=dout_1240^dout_1263;
   dout_1275=dout_1243^dout_1261;
   dout_1277=dout_1233^dout_1250;
   dout_1290=dout_1237^dout_1248;
   dout_1292=dout_1237&dout_1248;
   dout_1294=dout_1238^dout_1277;
   dout_1296=dout_1238&dout_1277;
   dout_1297=dout_1294&dout_1292;
   dout_1298=dout_1296|dout_1297;
   dout_1299=dout_1235^dout_1272;
   dout_1300=dout_1235&dout_1272;
   dout_1301=dout_1299&dout_1298;
   dout_1303=dout_1300|dout_1301;
   dout_1305=dout_1275&dout_1303;
   dout_1309=dout_1274&dout_1305;
   dout_1314=dout_1299^dout_1298;
   dout_1315=dout_1267^dout_1309;
   dout_1316=dout_1274^dout_1305;
   dout_1317=dout_1275^dout_1303;
   dout_1319=dout_1294^dout_1292;
   dout_1328=((A >> 5)&1)&((B >> 8)&1);
   dout_1329=((A >> 5)&1)&((B >> 9)&1);
   dout_1330=((B >> 9)&1)&((A >> 4)&1);
   dout_1331=((A >> 4)&1)&((B >> 8)&1);
   dout_1332=dout_1330|dout_1328;
   dout_1333=((A >> 7)&1)&((B >> 8)&1);
   dout_1334=((A >> 7)&1)&((B >> 9)&1);
   dout_1335=((B >> 9)&1)&((A >> 6)&1);
   dout_1336=((A >> 6)&1)&((B >> 8)&1);
   dout_1337=dout_1335|dout_1333;
   dout_1338=((A >> 5)&1)&((B >> 10)&1);
   dout_1339=((A >> 5)&1)&((B >> 11)&1);
   dout_1340=((B >> 11)&1)&((A >> 4)&1);
   dout_1341=((A >> 4)&1)&((B >> 10)&1);
   dout_1342=dout_1340|dout_1338;
   dout_1343=((A >> 7)&1)&((B >> 10)&1);
   dout_1344=((A >> 7)&1)&((B >> 11)&1);
   dout_1345=((B >> 11)&1)&((A >> 6)&1);
   dout_1346=((A >> 6)&1)&((B >> 10)&1);
   dout_1347=dout_1345|dout_1343;
   dout_1352=dout_1336^dout_1329;
   dout_1354=dout_1336&dout_1329;
   dout_1359=dout_1337&dout_1354;
   dout_1361=dout_1334^dout_1346;
   dout_1362=dout_1334&dout_1346;
   dout_1363=dout_1361&dout_1359;
   dout_1365=dout_1362|dout_1363;
   dout_1367=dout_1347&dout_1365;
   dout_1371=dout_1344&dout_1367;
   dout_1376=dout_1361^dout_1359;
   dout_1378=dout_1344^dout_1367;
   dout_1379=dout_1347^dout_1365;
   dout_1381=dout_1337^dout_1354;
   dout_1394=dout_1341^dout_1352;
   dout_1396=dout_1341&dout_1352;
   dout_1398=dout_1342^dout_1381;
   dout_1400=dout_1342&dout_1381;
   dout_1401=dout_1398&dout_1396;
   dout_1402=dout_1400|dout_1401;
   dout_1403=dout_1339^dout_1376;
   dout_1404=dout_1339&dout_1376;
   dout_1405=dout_1403&dout_1402;
   dout_1407=dout_1404|dout_1405;
   dout_1409=dout_1379&dout_1407;
   dout_1413=dout_1378&dout_1409;
   dout_1418=dout_1403^dout_1402;
   dout_1419=dout_1371^dout_1413;
   dout_1420=dout_1378^dout_1409;
   dout_1421=dout_1379^dout_1407;
   dout_1423=dout_1398^dout_1396;
   dout_1432=((A >> 1)&1)&((B >> 12)&1);
   dout_1433=((A >> 1)&1)&((B >> 13)&1);
   dout_1434=((B >> 13)&1)&((A >> 0)&1);
   dout_1435=((A >> 0)&1)&((B >> 12)&1);
   dout_1436=dout_1434|dout_1432;
   dout_1437=((A >> 3)&1)&((B >> 12)&1);
   dout_1438=((A >> 3)&1)&((B >> 13)&1);
   dout_1439=((B >> 13)&1)&((A >> 2)&1);
   dout_1440=((A >> 2)&1)&((B >> 12)&1);
   dout_1441=dout_1439|dout_1437;
   dout_1442=((A >> 1)&1)&((B >> 14)&1);
   dout_1443=((A >> 1)&1)&((B >> 15)&1);
   dout_1444=((B >> 15)&1)&((A >> 0)&1);
   dout_1445=((A >> 0)&1)&((B >> 14)&1);
   dout_1446=dout_1444|dout_1442;
   dout_1447=((A >> 3)&1)&((B >> 14)&1);
   dout_1448=((A >> 3)&1)&((B >> 15)&1);
   dout_1449=((B >> 15)&1)&((A >> 2)&1);
   dout_1450=((A >> 2)&1)&((B >> 14)&1);
   dout_1451=dout_1449|dout_1447;
   dout_1456=dout_1440^dout_1433;
   dout_1458=dout_1440&dout_1433;
   dout_1463=dout_1441&dout_1458;
   dout_1465=dout_1438^dout_1450;
   dout_1466=dout_1438&dout_1450;
   dout_1467=dout_1465&dout_1463;
   dout_1469=dout_1466|dout_1467;
   dout_1471=dout_1451&dout_1469;
   dout_1475=dout_1448&dout_1471;
   dout_1480=dout_1465^dout_1463;
   dout_1482=dout_1448^dout_1471;
   dout_1483=dout_1451^dout_1469;
   dout_1485=dout_1441^dout_1458;
   dout_1498=dout_1445^dout_1456;
   dout_1500=dout_1445&dout_1456;
   dout_1502=dout_1446^dout_1485;
   dout_1504=dout_1446&dout_1485;
   dout_1505=dout_1502&dout_1500;
   dout_1506=dout_1504|dout_1505;
   dout_1507=dout_1443^dout_1480;
   dout_1508=dout_1443&dout_1480;
   dout_1509=dout_1507&dout_1506;
   dout_1511=dout_1508|dout_1509;
   dout_1513=dout_1483&dout_1511;
   dout_1517=dout_1482&dout_1513;
   dout_1522=dout_1507^dout_1506;
   dout_1523=dout_1475^dout_1517;
   dout_1524=dout_1482^dout_1513;
   dout_1525=dout_1483^dout_1511;
   dout_1527=dout_1502^dout_1500;
   dout_1536=((A >> 5)&1)&((B >> 12)&1);
   dout_1537=((A >> 5)&1)&((B >> 13)&1);
   dout_1538=((B >> 13)&1)&((A >> 4)&1);
   dout_1539=((A >> 4)&1)&((B >> 12)&1);
   dout_1540=dout_1538|dout_1536;
   dout_1541=((A >> 7)&1)&((B >> 12)&1);
   dout_1542=((A >> 7)&1)&((B >> 13)&1);
   dout_1543=((B >> 13)&1)&((A >> 6)&1);
   dout_1544=((A >> 6)&1)&((B >> 12)&1);
   dout_1545=dout_1543|dout_1541;
   dout_1546=((A >> 5)&1)&((B >> 14)&1);
   dout_1547=((A >> 5)&1)&((B >> 15)&1);
   dout_1548=((B >> 15)&1)&((A >> 4)&1);
   dout_1549=((A >> 4)&1)&((B >> 14)&1);
   dout_1550=dout_1548|dout_1546;
   dout_1551=((A >> 7)&1)&((B >> 14)&1);
   dout_1552=((A >> 7)&1)&((B >> 15)&1);
   dout_1553=((B >> 15)&1)&((A >> 6)&1);
   dout_1554=((A >> 6)&1)&((B >> 14)&1);
   dout_1555=dout_1553|dout_1551;
   dout_1560=dout_1544^dout_1537;
   dout_1562=dout_1544&dout_1537;
   dout_1567=dout_1545&dout_1562;
   dout_1569=dout_1542^dout_1554;
   dout_1570=dout_1542&dout_1554;
   dout_1571=dout_1569&dout_1567;
   dout_1573=dout_1570|dout_1571;
   dout_1575=dout_1555&dout_1573;
   dout_1579=dout_1552&dout_1575;
   dout_1584=dout_1569^dout_1567;
   dout_1586=dout_1552^dout_1575;
   dout_1587=dout_1555^dout_1573;
   dout_1589=dout_1545^dout_1562;
   dout_1602=dout_1549^dout_1560;
   dout_1604=dout_1549&dout_1560;
   dout_1606=dout_1550^dout_1589;
   dout_1608=dout_1550&dout_1589;
   dout_1609=dout_1606&dout_1604;
   dout_1610=dout_1608|dout_1609;
   dout_1611=dout_1547^dout_1584;
   dout_1612=dout_1547&dout_1584;
   dout_1613=dout_1611&dout_1610;
   dout_1615=dout_1612|dout_1613;
   dout_1617=dout_1587&dout_1615;
   dout_1621=dout_1586&dout_1617;
   dout_1626=dout_1611^dout_1610;
   dout_1627=dout_1579^dout_1621;
   dout_1628=dout_1586^dout_1617;
   dout_1629=dout_1587^dout_1615;
   dout_1631=dout_1606^dout_1604;
   dout_1652=dout_1331^dout_1314;
   dout_1654=dout_1331&dout_1314;
   dout_1656=dout_1332^dout_1317;
   dout_1658=dout_1656&dout_1654;
   dout_1659=dout_1332&dout_1317;
   dout_1660=dout_1659|dout_1658;
   dout_1661=dout_1394^dout_1316;
   dout_1662=dout_1661&dout_1660;
   dout_1663=dout_1394&dout_1316;
   dout_1664=dout_1663|dout_1662;
   dout_1665=dout_1423^dout_1315;
   dout_1666=dout_1665&dout_1664;
   dout_1667=dout_1423&dout_1315;
   dout_1668=dout_1418^dout_1539;
   dout_1669=dout_1667|dout_1666;
   dout_1670=dout_1418&dout_1539;
   dout_1671=dout_1668&dout_1669;
   dout_1672=dout_1421^dout_1540;
   dout_1673=dout_1670|dout_1671;
   dout_1674=dout_1421&dout_1540;
   dout_1675=dout_1672&dout_1673;
   dout_1676=dout_1420^dout_1602;
   dout_1677=dout_1674|dout_1675;
   dout_1678=dout_1676&dout_1677;
   dout_1679=dout_1420&dout_1602;
   dout_1680=dout_1679|dout_1678;
   dout_1681=dout_1419^dout_1631;
   dout_1682=dout_1681&dout_1680;
   dout_1683=dout_1419&dout_1631;
   dout_1684=dout_1683|dout_1682;
   dout_1686=dout_1626&dout_1684;
   dout_1691=dout_1629&dout_1686;
   dout_1694=dout_1628&dout_1691;
   dout_1698=dout_1656^dout_1654;
   dout_1701=dout_1676^dout_1677;
   dout_1702=dout_1661^dout_1660;
   dout_1703=dout_1681^dout_1680;
   dout_1704=dout_1626^dout_1684;
   dout_1707=dout_1629^dout_1686;
   dout_1708=dout_1628^dout_1691;
   dout_1709=dout_1672^dout_1673;
   dout_1711=dout_1627^dout_1694;
   dout_1712=dout_1668^dout_1669;
   dout_1713=dout_1665^dout_1664;
   dout_1742=dout_1435^dout_1652;
   dout_1744=dout_1435&dout_1652;
   dout_1746=dout_1436^dout_1698;
   dout_1748=dout_1746&dout_1744;
   dout_1749=dout_1436&dout_1698;
   dout_1750=dout_1749|dout_1748;
   dout_1751=dout_1498^dout_1702;
   dout_1752=dout_1751&dout_1750;
   dout_1753=dout_1498&dout_1702;
   dout_1754=dout_1753|dout_1752;
   dout_1755=dout_1527^dout_1713;
   dout_1756=dout_1755&dout_1754;
   dout_1757=dout_1527&dout_1713;
   dout_1758=dout_1522^dout_1712;
   dout_1759=dout_1757|dout_1756;
   dout_1760=dout_1522&dout_1712;
   dout_1761=dout_1758&dout_1759;
   dout_1762=dout_1525^dout_1709;
   dout_1763=dout_1760|dout_1761;
   dout_1764=dout_1525&dout_1709;
   dout_1765=dout_1762&dout_1763;
   dout_1766=dout_1524^dout_1701;
   dout_1767=dout_1764|dout_1765;
   dout_1768=dout_1766&dout_1767;
   dout_1769=dout_1524&dout_1701;
   dout_1770=dout_1769|dout_1768;
   dout_1771=dout_1523^dout_1703;
   dout_1772=dout_1771&dout_1770;
   dout_1773=dout_1523&dout_1703;
   dout_1774=dout_1773|dout_1772;
   dout_1776=dout_1704&dout_1774;
   dout_1781=dout_1707&dout_1776;
   dout_1784=dout_1708&dout_1781;
   dout_1788=dout_1746^dout_1744;
   dout_1791=dout_1766^dout_1767;
   dout_1792=dout_1751^dout_1750;
   dout_1793=dout_1771^dout_1770;
   dout_1794=dout_1704^dout_1774;
   dout_1797=dout_1707^dout_1776;
   dout_1798=dout_1708^dout_1781;
   dout_1799=dout_1762^dout_1763;
   dout_1801=dout_1711^dout_1784;
   dout_1802=dout_1758^dout_1759;
   dout_1803=dout_1755^dout_1754;
   dout_1820=((A >> 9)&1)&((B >> 8)&1);
   dout_1821=((A >> 9)&1)&((B >> 9)&1);
   dout_1822=((B >> 9)&1)&((A >> 8)&1);
   dout_1823=((A >> 8)&1)&((B >> 8)&1);
   dout_1824=dout_1822|dout_1820;
   dout_1825=((A >> 11)&1)&((B >> 8)&1);
   dout_1826=((A >> 11)&1)&((B >> 9)&1);
   dout_1827=((B >> 9)&1)&((A >> 10)&1);
   dout_1828=((A >> 10)&1)&((B >> 8)&1);
   dout_1829=dout_1827|dout_1825;
   dout_1830=((A >> 9)&1)&((B >> 10)&1);
   dout_1831=((A >> 9)&1)&((B >> 11)&1);
   dout_1832=((B >> 11)&1)&((A >> 8)&1);
   dout_1833=((A >> 8)&1)&((B >> 10)&1);
   dout_1834=dout_1832|dout_1830;
   dout_1835=((A >> 11)&1)&((B >> 10)&1);
   dout_1836=((A >> 11)&1)&((B >> 11)&1);
   dout_1837=((B >> 11)&1)&((A >> 10)&1);
   dout_1838=((A >> 10)&1)&((B >> 10)&1);
   dout_1839=dout_1837|dout_1835;
   dout_1844=dout_1828^dout_1821;
   dout_1846=dout_1828&dout_1821;
   dout_1851=dout_1829&dout_1846;
   dout_1853=dout_1826^dout_1838;
   dout_1854=dout_1826&dout_1838;
   dout_1855=dout_1853&dout_1851;
   dout_1857=dout_1854|dout_1855;
   dout_1859=dout_1839&dout_1857;
   dout_1863=dout_1836&dout_1859;
   dout_1868=dout_1853^dout_1851;
   dout_1870=dout_1836^dout_1859;
   dout_1871=dout_1839^dout_1857;
   dout_1873=dout_1829^dout_1846;
   dout_1886=dout_1833^dout_1844;
   dout_1888=dout_1833&dout_1844;
   dout_1890=dout_1834^dout_1873;
   dout_1892=dout_1834&dout_1873;
   dout_1893=dout_1890&dout_1888;
   dout_1894=dout_1892|dout_1893;
   dout_1895=dout_1831^dout_1868;
   dout_1896=dout_1831&dout_1868;
   dout_1897=dout_1895&dout_1894;
   dout_1899=dout_1896|dout_1897;
   dout_1901=dout_1871&dout_1899;
   dout_1905=dout_1870&dout_1901;
   dout_1910=dout_1895^dout_1894;
   dout_1911=dout_1863^dout_1905;
   dout_1912=dout_1870^dout_1901;
   dout_1913=dout_1871^dout_1899;
   dout_1915=dout_1890^dout_1888;
   dout_1924=((A >> 13)&1)&((B >> 8)&1);
   dout_1925=((A >> 13)&1)&((B >> 9)&1);
   dout_1926=((B >> 9)&1)&((A >> 12)&1);
   dout_1927=((A >> 12)&1)&((B >> 8)&1);
   dout_1928=dout_1926|dout_1924;
   dout_1929=((A >> 15)&1)&((B >> 8)&1);
   dout_1930=((A >> 15)&1)&((B >> 9)&1);
   dout_1931=((B >> 9)&1)&((A >> 14)&1);
   dout_1932=((A >> 14)&1)&((B >> 8)&1);
   dout_1933=dout_1931|dout_1929;
   dout_1934=((A >> 13)&1)&((B >> 10)&1);
   dout_1935=((A >> 13)&1)&((B >> 11)&1);
   dout_1936=((B >> 11)&1)&((A >> 12)&1);
   dout_1937=((A >> 12)&1)&((B >> 10)&1);
   dout_1938=dout_1936|dout_1934;
   dout_1939=((A >> 15)&1)&((B >> 10)&1);
   dout_1940=((A >> 15)&1)&((B >> 11)&1);
   dout_1941=((B >> 11)&1)&((A >> 14)&1);
   dout_1942=((A >> 14)&1)&((B >> 10)&1);
   dout_1943=dout_1941|dout_1939;
   dout_1948=dout_1932^dout_1925;
   dout_1950=dout_1932&dout_1925;
   dout_1955=dout_1933&dout_1950;
   dout_1957=dout_1930^dout_1942;
   dout_1958=dout_1930&dout_1942;
   dout_1959=dout_1957&dout_1955;
   dout_1961=dout_1958|dout_1959;
   dout_1963=dout_1943&dout_1961;
   dout_1967=dout_1940&dout_1963;
   dout_1972=dout_1957^dout_1955;
   dout_1974=dout_1940^dout_1963;
   dout_1975=dout_1943^dout_1961;
   dout_1977=dout_1933^dout_1950;
   dout_1990=dout_1937^dout_1948;
   dout_1992=dout_1937&dout_1948;
   dout_1994=dout_1938^dout_1977;
   dout_1996=dout_1938&dout_1977;
   dout_1997=dout_1994&dout_1992;
   dout_1998=dout_1996|dout_1997;
   dout_1999=dout_1935^dout_1972;
   dout_2000=dout_1935&dout_1972;
   dout_2001=dout_1999&dout_1998;
   dout_2003=dout_2000|dout_2001;
   dout_2005=dout_1975&dout_2003;
   dout_2009=dout_1974&dout_2005;
   dout_2014=dout_1999^dout_1998;
   dout_2015=dout_1967^dout_2009;
   dout_2016=dout_1974^dout_2005;
   dout_2017=dout_1975^dout_2003;
   dout_2019=dout_1994^dout_1992;
   dout_2028=((A >> 9)&1)&((B >> 12)&1);
   dout_2029=((A >> 9)&1)&((B >> 13)&1);
   dout_2030=((B >> 13)&1)&((A >> 8)&1);
   dout_2031=((A >> 8)&1)&((B >> 12)&1);
   dout_2032=dout_2030|dout_2028;
   dout_2033=((A >> 11)&1)&((B >> 12)&1);
   dout_2034=((A >> 11)&1)&((B >> 13)&1);
   dout_2035=((B >> 13)&1)&((A >> 10)&1);
   dout_2036=((A >> 10)&1)&((B >> 12)&1);
   dout_2037=dout_2035|dout_2033;
   dout_2038=((A >> 9)&1)&((B >> 14)&1);
   dout_2039=((A >> 9)&1)&((B >> 15)&1);
   dout_2040=((B >> 15)&1)&((A >> 8)&1);
   dout_2041=((A >> 8)&1)&((B >> 14)&1);
   dout_2042=dout_2040|dout_2038;
   dout_2043=((A >> 11)&1)&((B >> 14)&1);
   dout_2044=((A >> 11)&1)&((B >> 15)&1);
   dout_2045=((B >> 15)&1)&((A >> 10)&1);
   dout_2046=((A >> 10)&1)&((B >> 14)&1);
   dout_2047=dout_2045|dout_2043;
   dout_2052=dout_2036^dout_2029;
   dout_2054=dout_2036&dout_2029;
   dout_2059=dout_2037&dout_2054;
   dout_2061=dout_2034^dout_2046;
   dout_2062=dout_2034&dout_2046;
   dout_2063=dout_2061&dout_2059;
   dout_2065=dout_2062|dout_2063;
   dout_2067=dout_2047&dout_2065;
   dout_2071=dout_2044&dout_2067;
   dout_2076=dout_2061^dout_2059;
   dout_2078=dout_2044^dout_2067;
   dout_2079=dout_2047^dout_2065;
   dout_2081=dout_2037^dout_2054;
   dout_2094=dout_2041^dout_2052;
   dout_2096=dout_2041&dout_2052;
   dout_2098=dout_2042^dout_2081;
   dout_2100=dout_2042&dout_2081;
   dout_2101=dout_2098&dout_2096;
   dout_2102=dout_2100|dout_2101;
   dout_2103=dout_2039^dout_2076;
   dout_2104=dout_2039&dout_2076;
   dout_2105=dout_2103&dout_2102;
   dout_2107=dout_2104|dout_2105;
   dout_2109=dout_2079&dout_2107;
   dout_2113=dout_2078&dout_2109;
   dout_2118=dout_2103^dout_2102;
   dout_2119=dout_2071^dout_2113;
   dout_2120=dout_2078^dout_2109;
   dout_2121=dout_2079^dout_2107;
   dout_2123=dout_2098^dout_2096;
   dout_2132=((A >> 13)&1)&((B >> 12)&1);
   dout_2133=((A >> 13)&1)&((B >> 13)&1);
   dout_2134=((B >> 13)&1)&((A >> 12)&1);
   dout_2135=((A >> 12)&1)&((B >> 12)&1);
   dout_2136=dout_2134|dout_2132;
   dout_2137=((A >> 15)&1)&((B >> 12)&1);
   dout_2138=((A >> 15)&1)&((B >> 13)&1);
   dout_2139=((B >> 13)&1)&((A >> 14)&1);
   dout_2140=((A >> 14)&1)&((B >> 12)&1);
   dout_2141=dout_2139|dout_2137;
   dout_2142=((A >> 13)&1)&((B >> 14)&1);
   dout_2143=((A >> 13)&1)&((B >> 15)&1);
   dout_2144=((B >> 15)&1)&((A >> 12)&1);
   dout_2145=((A >> 12)&1)&((B >> 14)&1);
   dout_2146=dout_2144|dout_2142;
   dout_2147=((A >> 15)&1)&((B >> 14)&1);
   dout_2148=((A >> 15)&1)&((B >> 15)&1);
   dout_2149=((B >> 15)&1)&((A >> 14)&1);
   dout_2150=((A >> 14)&1)&((B >> 14)&1);
   dout_2151=dout_2149|dout_2147;
   dout_2156=dout_2140^dout_2133;
   dout_2158=dout_2140&dout_2133;
   dout_2163=dout_2141&dout_2158;
   dout_2165=dout_2138^dout_2150;
   dout_2166=dout_2138&dout_2150;
   dout_2167=dout_2165&dout_2163;
   dout_2169=dout_2166|dout_2167;
   dout_2171=dout_2151&dout_2169;
   dout_2175=dout_2148&dout_2171;
   dout_2180=dout_2165^dout_2163;
   dout_2182=dout_2148^dout_2171;
   dout_2183=dout_2151^dout_2169;
   dout_2185=dout_2141^dout_2158;
   dout_2198=dout_2145^dout_2156;
   dout_2200=dout_2145&dout_2156;
   dout_2202=dout_2146^dout_2185;
   dout_2204=dout_2146&dout_2185;
   dout_2205=dout_2202&dout_2200;
   dout_2206=dout_2204|dout_2205;
   dout_2207=dout_2143^dout_2180;
   dout_2208=dout_2143&dout_2180;
   dout_2209=dout_2207&dout_2206;
   dout_2211=dout_2208|dout_2209;
   dout_2213=dout_2183&dout_2211;
   dout_2217=dout_2182&dout_2213;
   dout_2222=dout_2207^dout_2206;
   dout_2223=dout_2175^dout_2217;
   dout_2224=dout_2182^dout_2213;
   dout_2225=dout_2183^dout_2211;
   dout_2227=dout_2202^dout_2200;
   dout_2248=dout_1927^dout_1910;
   dout_2250=dout_1927&dout_1910;
   dout_2252=dout_1928^dout_1913;
   dout_2254=dout_2252&dout_2250;
   dout_2255=dout_1928&dout_1913;
   dout_2256=dout_2255|dout_2254;
   dout_2257=dout_1990^dout_1912;
   dout_2258=dout_2257&dout_2256;
   dout_2259=dout_1990&dout_1912;
   dout_2260=dout_2259|dout_2258;
   dout_2261=dout_2019^dout_1911;
   dout_2262=dout_2261&dout_2260;
   dout_2263=dout_2019&dout_1911;
   dout_2264=dout_2014^dout_2135;
   dout_2265=dout_2263|dout_2262;
   dout_2266=dout_2014&dout_2135;
   dout_2267=dout_2264&dout_2265;
   dout_2268=dout_2017^dout_2136;
   dout_2269=dout_2266|dout_2267;
   dout_2270=dout_2017&dout_2136;
   dout_2271=dout_2268&dout_2269;
   dout_2272=dout_2016^dout_2198;
   dout_2273=dout_2270|dout_2271;
   dout_2274=dout_2272&dout_2273;
   dout_2275=dout_2016&dout_2198;
   dout_2276=dout_2275|dout_2274;
   dout_2277=dout_2015^dout_2227;
   dout_2278=dout_2277&dout_2276;
   dout_2279=dout_2015&dout_2227;
   dout_2280=dout_2279|dout_2278;
   dout_2282=dout_2222&dout_2280;
   dout_2287=dout_2225&dout_2282;
   dout_2290=dout_2224&dout_2287;
   dout_2294=dout_2252^dout_2250;
   dout_2297=dout_2272^dout_2273;
   dout_2298=dout_2257^dout_2256;
   dout_2299=dout_2277^dout_2276;
   dout_2300=dout_2222^dout_2280;
   dout_2303=dout_2225^dout_2282;
   dout_2304=dout_2224^dout_2287;
   dout_2305=dout_2268^dout_2269;
   dout_2307=dout_2223^dout_2290;
   dout_2308=dout_2264^dout_2265;
   dout_2309=dout_2261^dout_2260;
   dout_2338=dout_2031^dout_2248;
   dout_2340=dout_2031&dout_2248;
   dout_2342=dout_2032^dout_2294;
   dout_2344=dout_2342&dout_2340;
   dout_2345=dout_2032&dout_2294;
   dout_2346=dout_2345|dout_2344;
   dout_2347=dout_2094^dout_2298;
   dout_2348=dout_2347&dout_2346;
   dout_2349=dout_2094&dout_2298;
   dout_2350=dout_2349|dout_2348;
   dout_2351=dout_2123^dout_2309;
   dout_2352=dout_2351&dout_2350;
   dout_2353=dout_2123&dout_2309;
   dout_2354=dout_2118^dout_2308;
   dout_2355=dout_2353|dout_2352;
   dout_2356=dout_2118&dout_2308;
   dout_2357=dout_2354&dout_2355;
   dout_2358=dout_2121^dout_2305;
   dout_2359=dout_2356|dout_2357;
   dout_2360=dout_2121&dout_2305;
   dout_2361=dout_2358&dout_2359;
   dout_2362=dout_2120^dout_2297;
   dout_2363=dout_2360|dout_2361;
   dout_2364=dout_2362&dout_2363;
   dout_2365=dout_2120&dout_2297;
   dout_2366=dout_2365|dout_2364;
   dout_2367=dout_2119^dout_2299;
   dout_2368=dout_2367&dout_2366;
   dout_2369=dout_2119&dout_2299;
   dout_2370=dout_2369|dout_2368;
   dout_2372=dout_2300&dout_2370;
   dout_2377=dout_2303&dout_2372;
   dout_2380=dout_2304&dout_2377;
   dout_2384=dout_2342^dout_2340;
   dout_2387=dout_2362^dout_2363;
   dout_2388=dout_2347^dout_2346;
   dout_2389=dout_2367^dout_2366;
   dout_2390=dout_2300^dout_2370;
   dout_2393=dout_2303^dout_2372;
   dout_2394=dout_2304^dout_2377;
   dout_2395=dout_2358^dout_2359;
   dout_2397=dout_2307^dout_2380;
   dout_2398=dout_2354^dout_2355;
   dout_2399=dout_2351^dout_2350;
   dout_2432=dout_631^dout_610;
   dout_2433=dout_631&dout_610;
   dout_2434=dout_632^dout_607;
   dout_2435=dout_632&dout_607;
   dout_2436=dout_694^dout_599;
   dout_2437=dout_694&dout_599;
   dout_2438=dout_723^dout_601;
   dout_2439=dout_723&dout_601;
   dout_2440=dout_1146^dout_602;
   dout_2441=dout_1146&dout_602;
   dout_2442=dout_1192^dout_605;
   dout_2443=dout_1192&dout_605;
   dout_2444=dout_1196^dout_606;
   dout_2445=dout_1196&dout_606;
   dout_2446=dout_1207^dout_609;
   dout_2447=dout_1207&dout_609;
   dout_2448=dout_1206^dout_1823;
   dout_2449=dout_1206&dout_1823;
   dout_2450=dout_1203^dout_1824;
   dout_2451=dout_1203&dout_1824;
   dout_2452=dout_1195^dout_1886;
   dout_2453=dout_1195&dout_1886;
   dout_2454=dout_1197^dout_1915;
   dout_2455=dout_1197&dout_1915;
   dout_2456=dout_1198^dout_2338;
   dout_2457=dout_1198&dout_2338;
   dout_2458=dout_1201^dout_2384;
   dout_2459=dout_1201&dout_2384;
   dout_2460=dout_1202^dout_2388;
   dout_2461=dout_1202&dout_2388;
   dout_2462=dout_1205^dout_2399;
   dout_2463=dout_1205&dout_2399;
   dout_2503=dout_2434^dout_2433;
   dout_2504=dout_2434&dout_2433;
   dout_2505=dout_2435|dout_2504;
   dout_2506=dout_2436^dout_2505;
   dout_2507=dout_2436&dout_2505;
   dout_2508=dout_2437|dout_2507;
   dout_2509=dout_2438^dout_2508;
   dout_2510=dout_2438&dout_2508;
   dout_2511=dout_2439|dout_2510;
   dout_2512=dout_2440^dout_2511;
   dout_2513=dout_2440&dout_2511;
   dout_2514=dout_2441|dout_2513;
   dout_2515=dout_2442^dout_2514;
   dout_2516=dout_2442&dout_2514;
   dout_2517=dout_2443|dout_2516;
   dout_2518=dout_2444^dout_2517;
   dout_2519=dout_2444&dout_2517;
   dout_2520=dout_2445|dout_2519;
   dout_2521=dout_2446^dout_2520;
   dout_2522=dout_2446&dout_2520;
   dout_2523=dout_2447|dout_2522;
   dout_2524=dout_2448^dout_2523;
   dout_2525=dout_2448&dout_2523;
   dout_2526=dout_2449|dout_2525;
   dout_2527=dout_2450^dout_2526;
   dout_2528=dout_2450&dout_2526;
   dout_2529=dout_2451|dout_2528;
   dout_2530=dout_2452^dout_2529;
   dout_2531=dout_2452&dout_2529;
   dout_2532=dout_2453|dout_2531;
   dout_2533=dout_2454^dout_2532;
   dout_2534=dout_2454&dout_2532;
   dout_2535=dout_2455|dout_2534;
   dout_2536=dout_2456^dout_2535;
   dout_2537=dout_2456&dout_2535;
   dout_2538=dout_2457|dout_2537;
   dout_2539=dout_2458^dout_2538;
   dout_2540=dout_2458&dout_2538;
   dout_2541=dout_2459|dout_2540;
   dout_2542=dout_2460^dout_2541;
   dout_2543=dout_2460&dout_2541;
   dout_2544=dout_2461|dout_2543;
   dout_2545=dout_2462^dout_2544;
   dout_2546=dout_2462&dout_2544;
   dout_2547=dout_2463|dout_2546;
   dout_2548=dout_2398^dout_2547;
   dout_2549=dout_2398&dout_2547;
   dout_2551=dout_2395^dout_2549;
   dout_2552=dout_2395&dout_2549;
   dout_2554=dout_2387^dout_2552;
   dout_2555=dout_2387&dout_2552;
   dout_2557=dout_2389^dout_2555;
   dout_2558=dout_2389&dout_2555;
   dout_2560=dout_2390^dout_2558;
   dout_2561=dout_2390&dout_2558;
   dout_2563=dout_2393^dout_2561;
   dout_2564=dout_2393&dout_2561;
   dout_2566=dout_2394^dout_2564;
   dout_2567=dout_2394&dout_2564;
   dout_2569=dout_2397^dout_2567;
   dout_2586=dout_1227^dout_2432;
   dout_2587=dout_1227&dout_2432;
   dout_2588=dout_1228^dout_2503;
   dout_2589=dout_1228&dout_2503;
   dout_2590=dout_1290^dout_2506;
   dout_2591=dout_1290&dout_2506;
   dout_2592=dout_1319^dout_2509;
   dout_2593=dout_1319&dout_2509;
   dout_2594=dout_1742^dout_2512;
   dout_2595=dout_1742&dout_2512;
   dout_2596=dout_1788^dout_2515;
   dout_2597=dout_1788&dout_2515;
   dout_2598=dout_1792^dout_2518;
   dout_2599=dout_1792&dout_2518;
   dout_2600=dout_1803^dout_2521;
   dout_2601=dout_1803&dout_2521;
   dout_2602=dout_1802^dout_2524;
   dout_2603=dout_1802&dout_2524;
   dout_2604=dout_1799^dout_2527;
   dout_2605=dout_1799&dout_2527;
   dout_2606=dout_1791^dout_2530;
   dout_2607=dout_1791&dout_2530;
   dout_2608=dout_1793^dout_2533;
   dout_2609=dout_1793&dout_2533;
   dout_2610=dout_1794^dout_2536;
   dout_2611=dout_1794&dout_2536;
   dout_2612=dout_1797^dout_2539;
   dout_2613=dout_1797&dout_2539;
   dout_2614=dout_1798^dout_2542;
   dout_2615=dout_1798&dout_2542;
   dout_2616=dout_1801^dout_2545;
   dout_2617=dout_1801&dout_2545;
   dout_2657=dout_2588^dout_2587;
   dout_2658=dout_2588&dout_2587;
   dout_2659=dout_2589|dout_2658;
   dout_2660=dout_2590^dout_2659;
   dout_2661=dout_2590&dout_2659;
   dout_2662=dout_2591|dout_2661;
   dout_2663=dout_2592^dout_2662;
   dout_2664=dout_2592&dout_2662;
   dout_2665=dout_2593|dout_2664;
   dout_2666=dout_2594^dout_2665;
   dout_2667=dout_2594&dout_2665;
   dout_2668=dout_2595|dout_2667;
   dout_2669=dout_2596^dout_2668;
   dout_2670=dout_2596&dout_2668;
   dout_2671=dout_2597|dout_2670;
   dout_2672=dout_2598^dout_2671;
   dout_2673=dout_2598&dout_2671;
   dout_2674=dout_2599|dout_2673;
   dout_2675=dout_2600^dout_2674;
   dout_2676=dout_2600&dout_2674;
   dout_2677=dout_2601|dout_2676;
   dout_2678=dout_2602^dout_2677;
   dout_2679=dout_2602&dout_2677;
   dout_2680=dout_2603|dout_2679;
   dout_2681=dout_2604^dout_2680;
   dout_2682=dout_2604&dout_2680;
   dout_2683=dout_2605|dout_2682;
   dout_2684=dout_2606^dout_2683;
   dout_2685=dout_2606&dout_2683;
   dout_2686=dout_2607|dout_2685;
   dout_2687=dout_2608^dout_2686;
   dout_2688=dout_2608&dout_2686;
   dout_2689=dout_2609|dout_2688;
   dout_2690=dout_2610^dout_2689;
   dout_2691=dout_2610&dout_2689;
   dout_2692=dout_2611|dout_2691;
   dout_2693=dout_2612^dout_2692;
   dout_2694=dout_2612&dout_2692;
   dout_2695=dout_2613|dout_2694;
   dout_2696=dout_2614^dout_2695;
   dout_2697=dout_2614&dout_2695;
   dout_2698=dout_2615|dout_2697;
   dout_2699=dout_2616^dout_2698;
   dout_2700=dout_2616&dout_2698;
   dout_2701=dout_2617|dout_2700;
   dout_2702=dout_2548^dout_2701;
   dout_2703=dout_2548&dout_2701;
   dout_2705=dout_2551^dout_2703;
   dout_2706=dout_2551&dout_2703;
   dout_2708=dout_2554^dout_2706;
   dout_2709=dout_2554&dout_2706;
   dout_2711=dout_2557^dout_2709;
   dout_2712=dout_2557&dout_2709;
   dout_2714=dout_2560^dout_2712;
   dout_2715=dout_2560&dout_2712;
   dout_2717=dout_2563^dout_2715;
   dout_2718=dout_2563&dout_2715;
   dout_2720=dout_2566^dout_2718;
   dout_2721=dout_2566&dout_2718;
   dout_2723=dout_2569^dout_2721;

   O = 0;
   O |= (dout_35&1) << 0;
   O |= (dout_36&1) << 1;
   O |= (dout_98&1) << 2;
   O |= (dout_127&1) << 3;
   O |= (dout_550&1) << 4;
   O |= (dout_596&1) << 5;
   O |= (dout_600&1) << 6;
   O |= (dout_611&1) << 7;
   O |= (dout_2586&1) << 8;
   O |= (dout_2657&1) << 9;
   O |= (dout_2660&1) << 10;
   O |= (dout_2663&1) << 11;
   O |= (dout_2666&1) << 12;
   O |= (dout_2669&1) << 13;
   O |= (dout_2672&1) << 14;
   O |= (dout_2675&1) << 15;
   O |= (dout_2678&1) << 16;
   O |= (dout_2681&1) << 17;
   O |= (dout_2684&1) << 18;
   O |= (dout_2687&1) << 19;
   O |= (dout_2690&1) << 20;
   O |= (dout_2693&1) << 21;
   O |= (dout_2696&1) << 22;
   O |= (dout_2699&1) << 23;
   O |= (dout_2702&1) << 24;
   O |= (dout_2705&1) << 25;
   O |= (dout_2708&1) << 26;
   O |= (dout_2711&1) << 27;
   O |= (dout_2714&1) << 28;
   O |= (dout_2717&1) << 29;
   O |= (dout_2720&1) << 30;
   O |= (dout_2723&1) << 31;
   return O;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.00073 %
// MAE = 31364 
// WCE% = 0.0047 %
// WCE = 200773 
// WCRE% = 106.25 %
// EP% = 99.98 %
// MRE% = 0.047 %
// MSE = 15307.282e5 
// PDK45_PWR = 1.231 mW
// PDK45_AREA = 1900.2 um2
// PDK45_DELAY = 2.45 ns

uint64_t mult8_cgp14ep_ep63897_wc377_rcam(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_23, dout_30, dout_31, dout_59, dout_60, dout_63, dout_64, dout_72, dout_73, dout_90, dout_97, dout_101, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110, dout_114, dout_115, dout_117, dout_118, dout_141, dout_142, dout_143, dout_144, dout_145, dout_146, dout_147, dout_148, dout_149, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_160, dout_161, dout_162, dout_163, dout_165, dout_172, dout_173, dout_176, dout_177, dout_181, dout_182, dout_183, dout_184, dout_185, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_193, dout_194, dout_195, dout_196, dout_198, dout_199, dout_200, dout_204, dout_205, dout_206, dout_207, dout_208, dout_216, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_256, dout_259, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_59=dout_23|dout_30;
   dout_60=dout_23&dout_30;
   dout_63=dout_31&((B >> 6)&1);
   dout_64=dout_60^dout_31;
   dout_72=((B >> 6)&1)&((A >> 2)&1);
   dout_73=((B >> 7)&1)&((A >> 2)&1);
   dout_90=dout_63&((A >> 0)&1);
   dout_97=((A >> 2)&1)&((B >> 5)&1);
   dout_101=dout_64^dout_72;
   dout_102=dout_64&dout_72;
   dout_103=dout_101&dout_97;
   dout_104=dout_101^dout_97;
   dout_105=dout_102|dout_103;
   dout_106=dout_90^dout_73;
   dout_107=dout_63&((A >> 2)&1);
   dout_108=dout_73&dout_105;
   dout_109=dout_106^dout_105;
   dout_110=dout_107|dout_108;
   dout_114=((B >> 5)&1)&((A >> 3)&1);
   dout_115=((B >> 4)&1)&((A >> 3)&1);
   dout_117=((B >> 6)&1)&((A >> 3)&1);
   dout_118=((B >> 7)&1)&((A >> 3)&1);
   dout_141=dout_104^dout_114;
   dout_142=dout_104&dout_114;
   dout_143=dout_141&dout_115;
   dout_144=dout_141^dout_115;
   dout_145=dout_142|dout_143;
   dout_146=dout_109^dout_117;
   dout_147=dout_109&dout_117;
   dout_148=dout_146&dout_145;
   dout_149=dout_146^dout_145;
   dout_150=dout_147|dout_148;
   dout_151=dout_110^dout_118;
   dout_152=dout_110&((A >> 3)&1);
   dout_153=((B >> 7)&1)&dout_150;
   dout_154=dout_151^dout_150;
   dout_155=dout_152|dout_153;
   dout_160=((B >> 4)&1)&((A >> 4)&1);
   dout_161=((B >> 5)&1)&((A >> 4)&1);
   dout_162=((B >> 6)&1)&((A >> 4)&1);
   dout_163=((B >> 7)&1)&((A >> 4)&1);
   dout_165=dout_162&dout_154;
   dout_172=((B >> 2)&1)&((A >> 5)&1);
   dout_173=dout_155&((A >> 4)&1);
   dout_176=dout_59|dout_172;
   dout_177=((A >> 4)&1)&((B >> 3)&1);
   dout_181=dout_144^dout_160;
   dout_182=dout_144&dout_160;
   dout_183=dout_181&dout_177;
   dout_184=dout_181^dout_177;
   dout_185=dout_182|dout_183;
   dout_186=dout_149^dout_161;
   dout_187=dout_149&dout_161;
   dout_188=dout_186&dout_185;
   dout_189=dout_186^dout_185;
   dout_190=dout_187|dout_188;
   dout_191=dout_154^dout_162;
   dout_193=dout_191&dout_190;
   dout_194=dout_191^dout_190;
   dout_195=dout_165|dout_193;
   dout_196=dout_155^dout_163;
   dout_198=dout_163&dout_195;
   dout_199=dout_196^dout_195;
   dout_200=dout_173|dout_198;
   dout_204=((B >> 3)&1)&((A >> 5)&1);
   dout_205=((B >> 4)&1)&((A >> 5)&1);
   dout_206=((B >> 5)&1)&((A >> 5)&1);
   dout_207=((B >> 6)&1)&((A >> 5)&1);
   dout_208=((B >> 7)&1)&((A >> 5)&1);
   dout_216=dout_176^dout_172;
   dout_221=dout_184^dout_204;
   dout_222=dout_184&dout_204;
   dout_223=dout_221&dout_172;
   dout_224=dout_221^dout_172;
   dout_225=dout_222|dout_223;
   dout_226=dout_189^dout_205;
   dout_227=dout_189&dout_205;
   dout_228=dout_226&dout_225;
   dout_229=dout_226^dout_225;
   dout_230=dout_227|dout_228;
   dout_231=dout_194^dout_206;
   dout_232=dout_194&dout_206;
   dout_233=dout_231&dout_230;
   dout_234=dout_231^dout_230;
   dout_235=dout_232|dout_233;
   dout_236=dout_199^dout_207;
   dout_237=dout_199&dout_207;
   dout_238=dout_236&dout_235;
   dout_239=dout_236^dout_235;
   dout_240=dout_237|dout_238;
   dout_241=dout_200^dout_208;
   dout_242=dout_200&((A >> 5)&1);
   dout_243=dout_208&dout_240;
   dout_244=dout_241^dout_240;
   dout_245=dout_242|dout_243;
   dout_247=((B >> 1)&1)&((A >> 6)&1);
   dout_248=((B >> 2)&1)&((A >> 6)&1);
   dout_249=((B >> 3)&1)&((A >> 6)&1);
   dout_250=((B >> 4)&1)&((A >> 6)&1);
   dout_251=((B >> 5)&1)&((A >> 6)&1);
   dout_252=((B >> 6)&1)&((A >> 6)&1);
   dout_253=((B >> 7)&1)&((A >> 6)&1);
   dout_256=dout_216|dout_247;
   dout_259=dout_256^dout_247;
   dout_261=dout_224^dout_248;
   dout_262=dout_224&dout_248;
   dout_263=dout_261&dout_247;
   dout_264=dout_261^dout_247;
   dout_265=dout_262|dout_263;
   dout_266=dout_229^dout_249;
   dout_267=dout_229&dout_249;
   dout_268=dout_266&dout_265;
   dout_269=dout_266^dout_265;
   dout_270=dout_267|dout_268;
   dout_271=dout_234^dout_250;
   dout_272=dout_234&dout_250;
   dout_273=dout_271&dout_270;
   dout_274=dout_271^dout_270;
   dout_275=dout_272|dout_273;
   dout_276=dout_239^dout_251;
   dout_277=dout_239&dout_251;
   dout_278=dout_276&dout_275;
   dout_279=dout_276^dout_275;
   dout_280=dout_277|dout_278;
   dout_281=dout_244^dout_252;
   dout_282=dout_244&dout_252;
   dout_283=dout_281&dout_280;
   dout_284=dout_281^dout_280;
   dout_285=dout_282|dout_283;
   dout_286=dout_245^dout_253;
   dout_287=dout_245&((A >> 6)&1);
   dout_288=dout_253&dout_285;
   dout_289=dout_286^dout_285;
   dout_290=dout_287|dout_288;
   dout_291=((B >> 0)&1)&((A >> 7)&1);
   dout_292=((B >> 1)&1)&((A >> 7)&1);
   dout_293=((B >> 2)&1)&((A >> 7)&1);
   dout_294=((B >> 3)&1)&((A >> 7)&1);
   dout_295=((B >> 4)&1)&((A >> 7)&1);
   dout_296=((B >> 5)&1)&((A >> 7)&1);
   dout_297=((B >> 6)&1)&((A >> 7)&1);
   dout_298=((B >> 7)&1)&((A >> 7)&1);
   dout_299=dout_259|dout_291;
   dout_300=dout_259&dout_291;
   dout_301=dout_264^dout_292;
   dout_302=dout_264&dout_292;
   dout_303=dout_301&dout_300;
   dout_304=dout_301^dout_300;
   dout_305=dout_302|dout_303;
   dout_306=dout_269^dout_293;
   dout_307=dout_269&dout_293;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_274^dout_294;
   dout_312=dout_274&dout_294;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_279^dout_295;
   dout_317=dout_279&dout_295;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_284^dout_296;
   dout_322=dout_284&dout_296;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_289^dout_297;
   dout_327=dout_289&dout_297;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_290^dout_298;
   dout_332=dout_290&((A >> 7)&1);
   dout_333=((B >> 7)&1)&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (0&1) << 0;
   O |= (dout_73&1) << 1;
   O |= (dout_172&1) << 2;
   O |= (dout_115&1) << 3;
   O |= (0&1) << 4;
   O |= (dout_222&1) << 5;
   O |= (dout_59&1) << 6;
   O |= (dout_299&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

uint64_t mult8_cgp14ep_ep65536_wc16384_2_csamcsa(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_225, dout_267, dout_268, dout_299, dout_300, dout_302, dout_328, dout_331;   int avg=0;

   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_299=dout_225|dout_267;
   dout_300=dout_225&dout_267;
   dout_302=dout_299|dout_268;
   dout_328=dout_268^dout_300;
   dout_331=dout_328^dout_302;

   O = 0;
   O |= (0&1) << 0;
   O |= (0&1) << 1;
   O |= (0&1) << 2;
   O |= (0&1) << 3;
   O |= (0&1) << 4;
   O |= (0&1) << 5;
   O |= (0&1) << 6;
   O |= (0&1) << 7;
   O |= (0&1) << 8;
   O |= (0&1) << 9;
   O |= (0&1) << 10;
   O |= (0&1) << 11;
   O |= (0&1) << 12;
   O |= (0&1) << 13;
   O |= (dout_331&1) << 14;
   O |= (dout_268&1) << 15;
   return O;
}

uint32_t evoapproxlib::evoapprox_t::mul16u_CK3 (uint16_t a, uint16_t b) {
    static uint16_t * cacheLL = NULL;
    static uint16_t * cacheLH = NULL;
    static uint16_t * cacheHL = NULL;
    static uint16_t * cacheHH = NULL;
    int fillData = cacheLL == NULL || cacheLH == NULL || cacheHL == NULL || cacheHH == NULL;

    if(!cacheLL) cacheLL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheLH) cacheLH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHL) cacheHL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHH) cacheHH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    
    if(fillData) {
        for(int i = 0; i < 256; i++) {
            for(int j = 0; j < 256; j++) {
                cacheLL[i * 256 + j] = mult8_cgp14ep_ep65536_wc16384_2_csamcsa(i, j);
                cacheLH[i * 256 + j] = mult8_cgp14ep_ep63897_wc377_rcam(i, j);
                cacheHL[i * 256 + j] = mult8_cgp14ep_ep63897_wc377_rcam(i, j);
                cacheHH[i * 256 + j] = mul8_364(i, j);
            }
        }
    }

    uint32_t opt = 0;

    opt += (uint32_t)cacheLL[(a & 0xFF       ) * 256 + (b & 0xFF             )];
    opt += (uint32_t)cacheLH[(a & 0xFF       ) * 256 + ((b >> 8) & 0xFF      )] << 8;
    opt += (uint32_t)cacheHL[((a >> 8) & 0xFF) * 256 + (b & 0xFF             )] << 8;
    opt += (uint32_t)cacheHH[((a >> 8) & 0xFF) * 256 + ((b >> 8) & 0xFF      )] << 16;

    return opt;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 0.048 %
// MAE = 2040348 
// WCE% = 0.20 %
// WCE = 8404992 
// WCRE% = 100.00 %
// EP% = 100.00 %
// MRE% = 1.34 %
// MSE = 61508.569e8 
// PDK45_PWR = 0.512 mW
// PDK45_AREA = 872.9 um2
// PDK45_DELAY = 1.64 ns



uint16_t trun8_tam00b(uint8_t A, uint8_t B)
{
  uint16_t P, P_;
  uint8_t tmp, C_1_0,C_1_1,C_1_2,C_1_3,C_1_4,C_1_5,C_1_6,C_2_0,C_2_1,C_2_2,C_2_3,C_2_4,C_2_5,C_2_6,C_3_0,C_3_1,C_3_2,C_3_3,C_3_4,C_3_5,C_3_6,C_4_0,C_4_1,C_4_2,C_4_3,C_4_4,C_4_5,C_4_6,C_5_0,C_5_1,C_5_2,C_5_3,C_5_4,C_5_5,C_5_6,C_6_0,C_6_1,C_6_2,C_6_3,C_6_4,C_6_5,C_6_6,C_7_0,C_7_1,C_7_2,C_7_3,C_7_4,C_7_5,C_7_6,S_0_0,S_0_1,S_0_2,S_0_3,S_0_4,S_0_5,S_0_6,S_0_7,S_1_0,S_1_1,S_1_2,S_1_3,S_1_4,S_1_5,S_1_6,S_1_7,S_2_0,S_2_1,S_2_2,S_2_3,S_2_4,S_2_5,S_2_6,S_2_7,S_3_0,S_3_1,S_3_2,S_3_3,S_3_4,S_3_5,S_3_6,S_3_7,S_4_0,S_4_1,S_4_2,S_4_3,S_4_4,S_4_5,S_4_6,S_4_7,S_5_0,S_5_1,S_5_2,S_5_3,S_5_4,S_5_5,S_5_6,S_5_7,S_6_0,S_6_1,S_6_2,S_6_3,S_6_4,S_6_5,S_6_6,S_6_7,S_7_0,S_7_1,S_7_2,S_7_3,S_7_4,S_7_5,S_7_6,S_7_7,S_8_0,S_8_1,S_8_2,S_8_3,S_8_4,S_8_5,S_8_6,S_8_7;
  S_0_0 = (((A>>0)&1) & ((B>>0)&1));
  S_0_1 = (((A>>0)&1) & ((B>>1)&1));
  S_0_2 = (((A>>0)&1) & ((B>>2)&1));
  S_0_3 = (((A>>0)&1) & ((B>>3)&1));
  S_0_4 = (((A>>0)&1) & ((B>>4)&1));
  S_0_5 = (((A>>0)&1) & ((B>>5)&1));
  S_0_6 = (((A>>0)&1) & ((B>>6)&1));
  S_0_7 = (((A>>0)&1) & ((B>>7)&1));
  S_1_0 = S_0_1^(((A>>1)&1) & ((B>>0)&1));
  C_1_0 = S_0_1&(((A>>1)&1) & ((B>>0)&1));
  S_1_1 = S_0_2^(((A>>1)&1) & ((B>>1)&1));
  C_1_1 = S_0_2&(((A>>1)&1) & ((B>>1)&1));
  S_1_2 = S_0_3^(((A>>1)&1) & ((B>>2)&1));
  C_1_2 = S_0_3&(((A>>1)&1) & ((B>>2)&1));
  S_1_3 = S_0_4^(((A>>1)&1) & ((B>>3)&1));
  C_1_3 = S_0_4&(((A>>1)&1) & ((B>>3)&1));
  S_1_4 = S_0_5^(((A>>1)&1) & ((B>>4)&1));
  C_1_4 = S_0_5&(((A>>1)&1) & ((B>>4)&1));
  S_1_5 = S_0_6^(((A>>1)&1) & ((B>>5)&1));
  C_1_5 = S_0_6&(((A>>1)&1) & ((B>>5)&1));
  S_1_6 = S_0_7^(((A>>1)&1) & ((B>>6)&1));
  C_1_6 = S_0_7&(((A>>1)&1) & ((B>>6)&1));
  S_1_7 = (((A>>1)&1) & ((B>>7)&1));
  tmp = S_1_1^C_1_0;
  S_2_0 = tmp^(((A>>2)&1) & ((B>>0)&1));
  C_2_0 = (tmp&(((A>>2)&1) & ((B>>0)&1)))|(S_1_1&C_1_0);
  tmp = S_1_2^C_1_1;
  S_2_1 = tmp^(((A>>2)&1) & ((B>>1)&1));
  C_2_1 = (tmp&(((A>>2)&1) & ((B>>1)&1)))|(S_1_2&C_1_1);
  tmp = S_1_3^C_1_2;
  S_2_2 = tmp^(((A>>2)&1) & ((B>>2)&1));
  C_2_2 = (tmp&(((A>>2)&1) & ((B>>2)&1)))|(S_1_3&C_1_2);
  tmp = S_1_4^C_1_3;
  S_2_3 = tmp^(((A>>2)&1) & ((B>>3)&1));
  C_2_3 = (tmp&(((A>>2)&1) & ((B>>3)&1)))|(S_1_4&C_1_3);
  tmp = S_1_5^C_1_4;
  S_2_4 = tmp^(((A>>2)&1) & ((B>>4)&1));
  C_2_4 = (tmp&(((A>>2)&1) & ((B>>4)&1)))|(S_1_5&C_1_4);
  tmp = S_1_6^C_1_5;
  S_2_5 = tmp^(((A>>2)&1) & ((B>>5)&1));
  C_2_5 = (tmp&(((A>>2)&1) & ((B>>5)&1)))|(S_1_6&C_1_5);
  tmp = S_1_7^C_1_6;
  S_2_6 = tmp^(((A>>2)&1) & ((B>>6)&1));
  C_2_6 = (tmp&(((A>>2)&1) & ((B>>6)&1)))|(S_1_7&C_1_6);
  S_2_7 = (((A>>2)&1) & ((B>>7)&1));
  tmp = S_2_1^C_2_0;
  S_3_0 = tmp^(((A>>3)&1) & ((B>>0)&1));
  C_3_0 = (tmp&(((A>>3)&1) & ((B>>0)&1)))|(S_2_1&C_2_0);
  tmp = S_2_2^C_2_1;
  S_3_1 = tmp^(((A>>3)&1) & ((B>>1)&1));
  C_3_1 = (tmp&(((A>>3)&1) & ((B>>1)&1)))|(S_2_2&C_2_1);
  tmp = S_2_3^C_2_2;
  S_3_2 = tmp^(((A>>3)&1) & ((B>>2)&1));
  C_3_2 = (tmp&(((A>>3)&1) & ((B>>2)&1)))|(S_2_3&C_2_2);
  tmp = S_2_4^C_2_3;
  S_3_3 = tmp^(((A>>3)&1) & ((B>>3)&1));
  C_3_3 = (tmp&(((A>>3)&1) & ((B>>3)&1)))|(S_2_4&C_2_3);
  tmp = S_2_5^C_2_4;
  S_3_4 = tmp^(((A>>3)&1) & ((B>>4)&1));
  C_3_4 = (tmp&(((A>>3)&1) & ((B>>4)&1)))|(S_2_5&C_2_4);
  tmp = S_2_6^C_2_5;
  S_3_5 = tmp^(((A>>3)&1) & ((B>>5)&1));
  C_3_5 = (tmp&(((A>>3)&1) & ((B>>5)&1)))|(S_2_6&C_2_5);
  tmp = S_2_7^C_2_6;
  S_3_6 = tmp^(((A>>3)&1) & ((B>>6)&1));
  C_3_6 = (tmp&(((A>>3)&1) & ((B>>6)&1)))|(S_2_7&C_2_6);
  S_3_7 = (((A>>3)&1) & ((B>>7)&1));
  tmp = S_3_1^C_3_0;
  S_4_0 = tmp^(((A>>4)&1) & ((B>>0)&1));
  C_4_0 = (tmp&(((A>>4)&1) & ((B>>0)&1)))|(S_3_1&C_3_0);
  tmp = S_3_2^C_3_1;
  S_4_1 = tmp^(((A>>4)&1) & ((B>>1)&1));
  C_4_1 = (tmp&(((A>>4)&1) & ((B>>1)&1)))|(S_3_2&C_3_1);
  tmp = S_3_3^C_3_2;
  S_4_2 = tmp^(((A>>4)&1) & ((B>>2)&1));
  C_4_2 = (tmp&(((A>>4)&1) & ((B>>2)&1)))|(S_3_3&C_3_2);
  tmp = S_3_4^C_3_3;
  S_4_3 = tmp^(((A>>4)&1) & ((B>>3)&1));
  C_4_3 = (tmp&(((A>>4)&1) & ((B>>3)&1)))|(S_3_4&C_3_3);
  tmp = S_3_5^C_3_4;
  S_4_4 = tmp^(((A>>4)&1) & ((B>>4)&1));
  C_4_4 = (tmp&(((A>>4)&1) & ((B>>4)&1)))|(S_3_5&C_3_4);
  tmp = S_3_6^C_3_5;
  S_4_5 = tmp^(((A>>4)&1) & ((B>>5)&1));
  C_4_5 = (tmp&(((A>>4)&1) & ((B>>5)&1)))|(S_3_6&C_3_5);
  tmp = S_3_7^C_3_6;
  S_4_6 = tmp^(((A>>4)&1) & ((B>>6)&1));
  C_4_6 = (tmp&(((A>>4)&1) & ((B>>6)&1)))|(S_3_7&C_3_6);
  S_4_7 = (((A>>4)&1) & ((B>>7)&1));
  tmp = S_4_1^C_4_0;
  S_5_0 = tmp^(((A>>5)&1) & ((B>>0)&1));
  C_5_0 = (tmp&(((A>>5)&1) & ((B>>0)&1)))|(S_4_1&C_4_0);
  tmp = S_4_2^C_4_1;
  S_5_1 = tmp^(((A>>5)&1) & ((B>>1)&1));
  C_5_1 = (tmp&(((A>>5)&1) & ((B>>1)&1)))|(S_4_2&C_4_1);
  tmp = S_4_3^C_4_2;
  S_5_2 = tmp^(((A>>5)&1) & ((B>>2)&1));
  C_5_2 = (tmp&(((A>>5)&1) & ((B>>2)&1)))|(S_4_3&C_4_2);
  tmp = S_4_4^C_4_3;
  S_5_3 = tmp^(((A>>5)&1) & ((B>>3)&1));
  C_5_3 = (tmp&(((A>>5)&1) & ((B>>3)&1)))|(S_4_4&C_4_3);
  tmp = S_4_5^C_4_4;
  S_5_4 = tmp^(((A>>5)&1) & ((B>>4)&1));
  C_5_4 = (tmp&(((A>>5)&1) & ((B>>4)&1)))|(S_4_5&C_4_4);
  tmp = S_4_6^C_4_5;
  S_5_5 = tmp^(((A>>5)&1) & ((B>>5)&1));
  C_5_5 = (tmp&(((A>>5)&1) & ((B>>5)&1)))|(S_4_6&C_4_5);
  tmp = S_4_7^C_4_6;
  S_5_6 = tmp^(((A>>5)&1) & ((B>>6)&1));
  C_5_6 = (tmp&(((A>>5)&1) & ((B>>6)&1)))|(S_4_7&C_4_6);
  S_5_7 = (((A>>5)&1) & ((B>>7)&1));
  tmp = S_5_1^C_5_0;
  S_6_0 = tmp^(((A>>6)&1) & ((B>>0)&1));
  C_6_0 = (tmp&(((A>>6)&1) & ((B>>0)&1)))|(S_5_1&C_5_0);
  tmp = S_5_2^C_5_1;
  S_6_1 = tmp^(((A>>6)&1) & ((B>>1)&1));
  C_6_1 = (tmp&(((A>>6)&1) & ((B>>1)&1)))|(S_5_2&C_5_1);
  tmp = S_5_3^C_5_2;
  S_6_2 = tmp^(((A>>6)&1) & ((B>>2)&1));
  C_6_2 = (tmp&(((A>>6)&1) & ((B>>2)&1)))|(S_5_3&C_5_2);
  tmp = S_5_4^C_5_3;
  S_6_3 = tmp^(((A>>6)&1) & ((B>>3)&1));
  C_6_3 = (tmp&(((A>>6)&1) & ((B>>3)&1)))|(S_5_4&C_5_3);
  tmp = S_5_5^C_5_4;
  S_6_4 = tmp^(((A>>6)&1) & ((B>>4)&1));
  C_6_4 = (tmp&(((A>>6)&1) & ((B>>4)&1)))|(S_5_5&C_5_4);
  tmp = S_5_6^C_5_5;
  S_6_5 = tmp^(((A>>6)&1) & ((B>>5)&1));
  C_6_5 = (tmp&(((A>>6)&1) & ((B>>5)&1)))|(S_5_6&C_5_5);
  tmp = S_5_7^C_5_6;
  S_6_6 = tmp^(((A>>6)&1) & ((B>>6)&1));
  C_6_6 = (tmp&(((A>>6)&1) & ((B>>6)&1)))|(S_5_7&C_5_6);
  S_6_7 = (((A>>6)&1) & ((B>>7)&1));
  tmp = S_6_1^C_6_0;
  S_7_0 = tmp^(((A>>7)&1) & ((B>>0)&1));
  C_7_0 = (tmp&(((A>>7)&1) & ((B>>0)&1)))|(S_6_1&C_6_0);
  tmp = S_6_2^C_6_1;
  S_7_1 = tmp^(((A>>7)&1) & ((B>>1)&1));
  C_7_1 = (tmp&(((A>>7)&1) & ((B>>1)&1)))|(S_6_2&C_6_1);
  tmp = S_6_3^C_6_2;
  S_7_2 = tmp^(((A>>7)&1) & ((B>>2)&1));
  C_7_2 = (tmp&(((A>>7)&1) & ((B>>2)&1)))|(S_6_3&C_6_2);
  tmp = S_6_4^C_6_3;
  S_7_3 = tmp^(((A>>7)&1) & ((B>>3)&1));
  C_7_3 = (tmp&(((A>>7)&1) & ((B>>3)&1)))|(S_6_4&C_6_3);
  tmp = S_6_5^C_6_4;
  S_7_4 = tmp^(((A>>7)&1) & ((B>>4)&1));
  C_7_4 = (tmp&(((A>>7)&1) & ((B>>4)&1)))|(S_6_5&C_6_4);
  tmp = S_6_6^C_6_5;
  S_7_5 = tmp^(((A>>7)&1) & ((B>>5)&1));
  C_7_5 = (tmp&(((A>>7)&1) & ((B>>5)&1)))|(S_6_6&C_6_5);
  tmp = S_6_7^C_6_6;
  S_7_6 = tmp^(((A>>7)&1) & ((B>>6)&1));
  C_7_6 = (tmp&(((A>>7)&1) & ((B>>6)&1)))|(S_6_7&C_6_6);
  S_7_7 = (((A>>7)&1) & ((B>>7)&1));
  P_ = (((C_7_0 & 1)<<0)|((C_7_1 & 1)<<1)|((C_7_2 & 1)<<2)|((C_7_3 & 1)<<3)|((C_7_4 & 1)<<4)|((C_7_5 & 1)<<5)|((C_7_6 & 1)<<6)) + (((S_7_1 & 1)<<0)|((S_7_2 & 1)<<1)|((S_7_3 & 1)<<2)|((S_7_4 & 1)<<3)|((S_7_5 & 1)<<4)|((S_7_6 & 1)<<5)|((S_7_7 & 1)<<6));
  S_8_0 = (P_ >> 0) & 1;
  S_8_1 = (P_ >> 1) & 1;
  S_8_2 = (P_ >> 2) & 1;
  S_8_3 = (P_ >> 3) & 1;
  S_8_4 = (P_ >> 4) & 1;
  S_8_5 = (P_ >> 5) & 1;
  S_8_6 = (P_ >> 6) & 1;
  S_8_7 = (P_ >> 7) & 1;
  P = 0;
  P |= (S_0_0 & 1) << 0;
  P |= (S_1_0 & 1) << 1;
  P |= (S_2_0 & 1) << 2;
  P |= (S_3_0 & 1) << 3;
  P |= (S_4_0 & 1) << 4;
  P |= (S_5_0 & 1) << 5;
  P |= (S_6_0 & 1) << 6;
  P |= (S_7_0 & 1) << 7;
  P |= (S_8_0 & 1) << 8;
  P |= (S_8_1 & 1) << 9;
  P |= (S_8_2 & 1) << 10;
  P |= (S_8_3 & 1) << 11;
  P |= (S_8_4 & 1) << 12;
  P |= (S_8_5 & 1) << 13;
  P |= (S_8_6 & 1) << 14;
  P |= (S_8_7 & 1) << 15;
  return P;
}

uint32_t evoapproxlib::evoapprox_t::mul16u_6NY (uint16_t a, uint16_t b) {
    static uint16_t * cacheLL = NULL;
    static uint16_t * cacheLH = NULL;
    static uint16_t * cacheHL = NULL;
    static uint16_t * cacheHH = NULL;
    int fillData = cacheLL == NULL || cacheLH == NULL || cacheHL == NULL || cacheHH == NULL;

    if(!cacheLL) cacheLL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheLH) cacheLH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHL) cacheHL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHH) cacheHH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    
    if(fillData) {
        for(int i = 0; i < 256; i++) {
            for(int j = 0; j < 256; j++) {
                cacheLL[i * 256 + j] = mult8_cgp14ep_ep65536_wc16384_2_csamcsa(i, j);
                cacheLH[i * 256 + j] = mult8_cgp14ep_ep65536_wc16384_2_csamcsa(i, j);
                cacheHL[i * 256 + j] = mult8_cgp14ep_ep65536_wc16384_2_csamcsa(i, j);
                cacheHH[i * 256 + j] = trun8_tam00b(i, j);
            }
        }
    }

    uint32_t opt = 0;

    opt += (uint32_t)cacheLL[(a & 0xFF       ) * 256 + (b & 0xFF             )];
    opt += (uint32_t)cacheLH[(a & 0xFF       ) * 256 + ((b >> 8) & 0xFF      )] << 8;
    opt += (uint32_t)cacheHL[((a >> 8) & 0xFF) * 256 + (b & 0xFF             )] << 8;
    opt += (uint32_t)cacheHH[((a >> 8) & 0xFF) * 256 + ((b >> 8) & 0xFF      )] << 16;

    return opt;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.00 %
// MAE = 0 
// WCE% = 0.00 %
// WCE = 0 
// WCRE% = 0.00 %
// EP% = 0.00 %
// MRE% = 0.00 %
// MSE = 0 
// PDK45_PWR = 2.202 mW
// PDK45_AREA = 3203.0 um2
// PDK45_DELAY = 3.11 ns

uint32_t evoapproxlib::evoapprox_t::mul16u_BMC (uint16_t a, uint16_t b) {
    static uint16_t * cacheLL = NULL;
    static uint16_t * cacheLH = NULL;
    static uint16_t * cacheHL = NULL;
    static uint16_t * cacheHH = NULL;
    int fillData = cacheLL == NULL || cacheLH == NULL || cacheHL == NULL || cacheHH == NULL;

    if(!cacheLL) cacheLL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheLH) cacheLH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHL) cacheHL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHH) cacheHH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    
    if(fillData) {
        for(int i = 0; i < 256; i++) {
            for(int j = 0; j < 256; j++) {
                cacheLL[i * 256 + j] = mul8_364(i, j);
                cacheLH[i * 256 + j] = mul8_364(i, j);
                cacheHL[i * 256 + j] = trun8_tam00b(i, j);
                cacheHH[i * 256 + j] = mul8_364(i, j);
            }
        }
    }

    uint32_t opt = 0;

    opt += (uint32_t)cacheLL[(a & 0xFF       ) * 256 + (b & 0xFF             )];
    opt += (uint32_t)cacheLH[(a & 0xFF       ) * 256 + ((b >> 8) & 0xFF      )] << 8;
    opt += (uint32_t)cacheHL[((a >> 8) & 0xFF) * 256 + (b & 0xFF             )] << 8;
    opt += (uint32_t)cacheHH[((a >> 8) & 0xFF) * 256 + ((b >> 8) & 0xFF      )] << 16;

    return opt;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.16 %
// MAE = 6782976 
// WCE% = 0.63 %
// WCE = 27131905 
// WCRE% = 100.00 %
// EP% = 100.00 %
// MRE% = 3.06 %
// MSE = 55158.891e9 
// PDK45_PWR = 0.401 mW
// PDK45_AREA = 642.0 um2
// PDK45_DELAY = 1.97 ns



uint32_t evoapproxlib::evoapprox_t::mul16u_GPE(uint16_t A, uint16_t B)
{
  uint32_t P, P_;
  uint16_t tmp, C_10_11,C_10_12,C_10_13,C_10_14,C_11_10,C_11_11,C_11_12,C_11_13,C_11_14,C_12_10,C_12_11,C_12_12,C_12_13,C_12_14,C_12_9,C_13_10,C_13_11,C_13_12,C_13_13,C_13_14,C_13_8,C_13_9,C_14_10,C_14_11,C_14_12,C_14_13,C_14_14,C_14_7,C_14_8,C_14_9,C_15_10,C_15_11,C_15_12,C_15_13,C_15_14,C_15_6,C_15_7,C_15_8,C_15_9,C_16_10,C_16_11,C_16_12,C_16_13,C_16_14,C_16_6,C_16_7,C_16_8,C_16_9,C_8_13,C_8_14,C_9_12,C_9_13,C_9_14,S_10_11,S_10_12,S_10_13,S_10_14,S_10_15,S_11_10,S_11_11,S_11_12,S_11_13,S_11_14,S_11_15,S_12_10,S_12_11,S_12_12,S_12_13,S_12_14,S_12_15,S_12_9,S_13_10,S_13_11,S_13_12,S_13_13,S_13_14,S_13_15,S_13_8,S_13_9,S_14_10,S_14_11,S_14_12,S_14_13,S_14_14,S_14_15,S_14_7,S_14_8,S_14_9,S_15_10,S_15_11,S_15_12,S_15_13,S_15_14,S_15_15,S_15_6,S_15_7,S_15_8,S_15_9,S_16_10,S_16_11,S_16_12,S_16_13,S_16_14,S_16_15,S_16_5,S_16_6,S_16_7,S_16_8,S_16_9,S_7_14,S_7_15,S_8_13,S_8_14,S_8_15,S_9_12,S_9_13,S_9_14,S_9_15;
  S_7_14 = (((A>>7)&1) & ((B>>14)&1));
  S_7_15 = (((A>>7)&1) & ((B>>15)&1));
  S_8_13 = S_7_14^(((A>>8)&1) & ((B>>13)&1));
  C_8_13 = S_7_14&(((A>>8)&1) & ((B>>13)&1));
  S_8_14 = S_7_15^(((A>>8)&1) & ((B>>14)&1));
  C_8_14 = S_7_15&(((A>>8)&1) & ((B>>14)&1));
  S_8_15 = (((A>>8)&1) & ((B>>15)&1));
  S_9_12 = S_8_13^(((A>>9)&1) & ((B>>12)&1));
  C_9_12 = S_8_13&(((A>>9)&1) & ((B>>12)&1));
  tmp = S_8_14^C_8_13;
  S_9_13 = tmp^(((A>>9)&1) & ((B>>13)&1));
  C_9_13 = (tmp&(((A>>9)&1) & ((B>>13)&1)))|(S_8_14&C_8_13);
  tmp = S_8_15^C_8_14;
  S_9_14 = tmp^(((A>>9)&1) & ((B>>14)&1));
  C_9_14 = (tmp&(((A>>9)&1) & ((B>>14)&1)))|(S_8_15&C_8_14);
  S_9_15 = (((A>>9)&1) & ((B>>15)&1));
  S_10_11 = S_9_12^(((A>>10)&1) & ((B>>11)&1));
  C_10_11 = S_9_12&(((A>>10)&1) & ((B>>11)&1));
  tmp = S_9_13^C_9_12;
  S_10_12 = tmp^(((A>>10)&1) & ((B>>12)&1));
  C_10_12 = (tmp&(((A>>10)&1) & ((B>>12)&1)))|(S_9_13&C_9_12);
  tmp = S_9_14^C_9_13;
  S_10_13 = tmp^(((A>>10)&1) & ((B>>13)&1));
  C_10_13 = (tmp&(((A>>10)&1) & ((B>>13)&1)))|(S_9_14&C_9_13);
  tmp = S_9_15^C_9_14;
  S_10_14 = tmp^(((A>>10)&1) & ((B>>14)&1));
  C_10_14 = (tmp&(((A>>10)&1) & ((B>>14)&1)))|(S_9_15&C_9_14);
  S_10_15 = (((A>>10)&1) & ((B>>15)&1));
  S_11_10 = S_10_11^(((A>>11)&1) & ((B>>10)&1));
  C_11_10 = S_10_11&(((A>>11)&1) & ((B>>10)&1));
  tmp = S_10_12^C_10_11;
  S_11_11 = tmp^(((A>>11)&1) & ((B>>11)&1));
  C_11_11 = (tmp&(((A>>11)&1) & ((B>>11)&1)))|(S_10_12&C_10_11);
  tmp = S_10_13^C_10_12;
  S_11_12 = tmp^(((A>>11)&1) & ((B>>12)&1));
  C_11_12 = (tmp&(((A>>11)&1) & ((B>>12)&1)))|(S_10_13&C_10_12);
  tmp = S_10_14^C_10_13;
  S_11_13 = tmp^(((A>>11)&1) & ((B>>13)&1));
  C_11_13 = (tmp&(((A>>11)&1) & ((B>>13)&1)))|(S_10_14&C_10_13);
  tmp = S_10_15^C_10_14;
  S_11_14 = tmp^(((A>>11)&1) & ((B>>14)&1));
  C_11_14 = (tmp&(((A>>11)&1) & ((B>>14)&1)))|(S_10_15&C_10_14);
  S_11_15 = (((A>>11)&1) & ((B>>15)&1));
  S_12_9 = S_11_10^(((A>>12)&1) & ((B>>9)&1));
  C_12_9 = S_11_10&(((A>>12)&1) & ((B>>9)&1));
  tmp = S_11_11^C_11_10;
  S_12_10 = tmp^(((A>>12)&1) & ((B>>10)&1));
  C_12_10 = (tmp&(((A>>12)&1) & ((B>>10)&1)))|(S_11_11&C_11_10);
  tmp = S_11_12^C_11_11;
  S_12_11 = tmp^(((A>>12)&1) & ((B>>11)&1));
  C_12_11 = (tmp&(((A>>12)&1) & ((B>>11)&1)))|(S_11_12&C_11_11);
  tmp = S_11_13^C_11_12;
  S_12_12 = tmp^(((A>>12)&1) & ((B>>12)&1));
  C_12_12 = (tmp&(((A>>12)&1) & ((B>>12)&1)))|(S_11_13&C_11_12);
  tmp = S_11_14^C_11_13;
  S_12_13 = tmp^(((A>>12)&1) & ((B>>13)&1));
  C_12_13 = (tmp&(((A>>12)&1) & ((B>>13)&1)))|(S_11_14&C_11_13);
  tmp = S_11_15^C_11_14;
  S_12_14 = tmp^(((A>>12)&1) & ((B>>14)&1));
  C_12_14 = (tmp&(((A>>12)&1) & ((B>>14)&1)))|(S_11_15&C_11_14);
  S_12_15 = (((A>>12)&1) & ((B>>15)&1));
  S_13_8 = S_12_9^(((A>>13)&1) & ((B>>8)&1));
  C_13_8 = S_12_9&(((A>>13)&1) & ((B>>8)&1));
  tmp = S_12_10^C_12_9;
  S_13_9 = tmp^(((A>>13)&1) & ((B>>9)&1));
  C_13_9 = (tmp&(((A>>13)&1) & ((B>>9)&1)))|(S_12_10&C_12_9);
  tmp = S_12_11^C_12_10;
  S_13_10 = tmp^(((A>>13)&1) & ((B>>10)&1));
  C_13_10 = (tmp&(((A>>13)&1) & ((B>>10)&1)))|(S_12_11&C_12_10);
  tmp = S_12_12^C_12_11;
  S_13_11 = tmp^(((A>>13)&1) & ((B>>11)&1));
  C_13_11 = (tmp&(((A>>13)&1) & ((B>>11)&1)))|(S_12_12&C_12_11);
  tmp = S_12_13^C_12_12;
  S_13_12 = tmp^(((A>>13)&1) & ((B>>12)&1));
  C_13_12 = (tmp&(((A>>13)&1) & ((B>>12)&1)))|(S_12_13&C_12_12);
  tmp = S_12_14^C_12_13;
  S_13_13 = tmp^(((A>>13)&1) & ((B>>13)&1));
  C_13_13 = (tmp&(((A>>13)&1) & ((B>>13)&1)))|(S_12_14&C_12_13);
  tmp = S_12_15^C_12_14;
  S_13_14 = tmp^(((A>>13)&1) & ((B>>14)&1));
  C_13_14 = (tmp&(((A>>13)&1) & ((B>>14)&1)))|(S_12_15&C_12_14);
  S_13_15 = (((A>>13)&1) & ((B>>15)&1));
  S_14_7 = S_13_8^(((A>>14)&1) & ((B>>7)&1));
  C_14_7 = S_13_8&(((A>>14)&1) & ((B>>7)&1));
  tmp = S_13_9^C_13_8;
  S_14_8 = tmp^(((A>>14)&1) & ((B>>8)&1));
  C_14_8 = (tmp&(((A>>14)&1) & ((B>>8)&1)))|(S_13_9&C_13_8);
  tmp = S_13_10^C_13_9;
  S_14_9 = tmp^(((A>>14)&1) & ((B>>9)&1));
  C_14_9 = (tmp&(((A>>14)&1) & ((B>>9)&1)))|(S_13_10&C_13_9);
  tmp = S_13_11^C_13_10;
  S_14_10 = tmp^(((A>>14)&1) & ((B>>10)&1));
  C_14_10 = (tmp&(((A>>14)&1) & ((B>>10)&1)))|(S_13_11&C_13_10);
  tmp = S_13_12^C_13_11;
  S_14_11 = tmp^(((A>>14)&1) & ((B>>11)&1));
  C_14_11 = (tmp&(((A>>14)&1) & ((B>>11)&1)))|(S_13_12&C_13_11);
  tmp = S_13_13^C_13_12;
  S_14_12 = tmp^(((A>>14)&1) & ((B>>12)&1));
  C_14_12 = (tmp&(((A>>14)&1) & ((B>>12)&1)))|(S_13_13&C_13_12);
  tmp = S_13_14^C_13_13;
  S_14_13 = tmp^(((A>>14)&1) & ((B>>13)&1));
  C_14_13 = (tmp&(((A>>14)&1) & ((B>>13)&1)))|(S_13_14&C_13_13);
  tmp = S_13_15^C_13_14;
  S_14_14 = tmp^(((A>>14)&1) & ((B>>14)&1));
  C_14_14 = (tmp&(((A>>14)&1) & ((B>>14)&1)))|(S_13_15&C_13_14);
  S_14_15 = (((A>>14)&1) & ((B>>15)&1));
  S_15_6 = S_14_7^(((A>>15)&1) & ((B>>6)&1));
  C_15_6 = S_14_7&(((A>>15)&1) & ((B>>6)&1));
  tmp = S_14_8^C_14_7;
  S_15_7 = tmp^(((A>>15)&1) & ((B>>7)&1));
  C_15_7 = (tmp&(((A>>15)&1) & ((B>>7)&1)))|(S_14_8&C_14_7);
  tmp = S_14_9^C_14_8;
  S_15_8 = tmp^(((A>>15)&1) & ((B>>8)&1));
  C_15_8 = (tmp&(((A>>15)&1) & ((B>>8)&1)))|(S_14_9&C_14_8);
  tmp = S_14_10^C_14_9;
  S_15_9 = tmp^(((A>>15)&1) & ((B>>9)&1));
  C_15_9 = (tmp&(((A>>15)&1) & ((B>>9)&1)))|(S_14_10&C_14_9);
  tmp = S_14_11^C_14_10;
  S_15_10 = tmp^(((A>>15)&1) & ((B>>10)&1));
  C_15_10 = (tmp&(((A>>15)&1) & ((B>>10)&1)))|(S_14_11&C_14_10);
  tmp = S_14_12^C_14_11;
  S_15_11 = tmp^(((A>>15)&1) & ((B>>11)&1));
  C_15_11 = (tmp&(((A>>15)&1) & ((B>>11)&1)))|(S_14_12&C_14_11);
  tmp = S_14_13^C_14_12;
  S_15_12 = tmp^(((A>>15)&1) & ((B>>12)&1));
  C_15_12 = (tmp&(((A>>15)&1) & ((B>>12)&1)))|(S_14_13&C_14_12);
  tmp = S_14_14^C_14_13;
  S_15_13 = tmp^(((A>>15)&1) & ((B>>13)&1));
  C_15_13 = (tmp&(((A>>15)&1) & ((B>>13)&1)))|(S_14_14&C_14_13);
  tmp = S_14_15^C_14_14;
  S_15_14 = tmp^(((A>>15)&1) & ((B>>14)&1));
  C_15_14 = (tmp&(((A>>15)&1) & ((B>>14)&1)))|(S_14_15&C_14_14);
  S_15_15 = (((A>>15)&1) & ((B>>15)&1));
  S_16_5 = S_15_6;
  S_16_6 = S_15_7^C_15_6;
  C_16_6 = S_15_7&C_15_6;
  tmp = S_15_8^C_16_6;
  S_16_7 = tmp^C_15_7;
  C_16_7 = (tmp&C_15_7)|(S_15_8&C_16_6);
  tmp = S_15_9^C_16_7;
  S_16_8 = tmp^C_15_8;
  C_16_8 = (tmp&C_15_8)|(S_15_9&C_16_7);
  tmp = S_15_10^C_16_8;
  S_16_9 = tmp^C_15_9;
  C_16_9 = (tmp&C_15_9)|(S_15_10&C_16_8);
  tmp = S_15_11^C_16_9;
  S_16_10 = tmp^C_15_10;
  C_16_10 = (tmp&C_15_10)|(S_15_11&C_16_9);
  tmp = S_15_12^C_16_10;
  S_16_11 = tmp^C_15_11;
  C_16_11 = (tmp&C_15_11)|(S_15_12&C_16_10);
  tmp = S_15_13^C_16_11;
  S_16_12 = tmp^C_15_12;
  C_16_12 = (tmp&C_15_12)|(S_15_13&C_16_11);
  tmp = S_15_14^C_16_12;
  S_16_13 = tmp^C_15_13;
  C_16_13 = (tmp&C_15_13)|(S_15_14&C_16_12);
  tmp = S_15_15^C_16_13;
  S_16_14 = tmp^C_15_14;
  C_16_14 = (tmp&C_15_14)|(S_15_15&C_16_13);
  S_16_15 = C_16_14;
  P = 0;
  P |= (S_16_5 & 1) << 21;
  P |= (S_16_6 & 1) << 22;
  P |= (S_16_7 & 1) << 23;
  P |= (S_16_8 & 1) << 24;
  P |= (S_16_9 & 1) << 25;
  P |= (S_16_10 & 1) << 26;
  P |= (S_16_11 & 1) << 27;
  P |= (S_16_12 & 1) << 28;
  P |= (S_16_13 & 1) << 29;
  P |= (S_16_14 & 1) << 30;
  P |= (S_16_15 & 1) << 31;
  return P;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.00000011 %
// MAE = 4.9 
// WCE% = 0.00000023 %
// WCE = 10 
// WCRE% = 800.00 %
// EP% = 90.62 %
// MRE% = 0.000015 %
// MSE = 33 
// PDK45_PWR = 2.176 mW
// PDK45_AREA = 3128.4 um2
// PDK45_DELAY = 3.15 ns


uint64_t mult8_cgp14_wc10_csamrca(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_19, dout_20, dout_21, dout_22, dout_23, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_60, dout_61, dout_63, dout_64, dout_65, dout_66, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_87, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_100, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110, dout_111, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143, dout_144, dout_145, dout_146, dout_147, dout_148, dout_149, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_171, dout_172, dout_173, dout_174, dout_175, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_183, dout_184, dout_185, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_19=((B >> 3)&1)&((A >> 0)&1);
   dout_20=((B >> 4)&1)&((A >> 0)&1);
   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_26=((B >> 2)&1)&((A >> 1)&1);
   dout_27=((B >> 3)&1)&((A >> 1)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_37=dout_19&dout_26;
   dout_38=dout_20^dout_27;
   dout_39=dout_20&dout_27;
   dout_40=dout_21^dout_28;
   dout_41=dout_21&dout_28;
   dout_42=dout_22^dout_29;
   dout_43=dout_22&dout_29;
   dout_44=dout_23^dout_30;
   dout_45=dout_23&dout_30;
   dout_47=((B >> 1)&1)&((A >> 2)&1);
   dout_48=((B >> 2)&1)&((A >> 2)&1);
   dout_49=((B >> 3)&1)&((A >> 2)&1);
   dout_50=((B >> 4)&1)&((A >> 2)&1);
   dout_51=((B >> 5)&1)&((A >> 2)&1);
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_60=dout_19&dout_47;
   dout_61=dout_47&dout_26;
   dout_63=dout_60|dout_61;
   dout_64=dout_38^dout_48;
   dout_65=dout_38&dout_48;
   dout_66=dout_64&dout_37;
   dout_67=dout_64^dout_37;
   dout_68=dout_65|dout_66;
   dout_69=dout_40^dout_49;
   dout_70=dout_40&dout_49;
   dout_71=dout_69&dout_39;
   dout_72=dout_69^dout_39;
   dout_73=dout_70|dout_71;
   dout_74=dout_42^dout_50;
   dout_75=dout_42&dout_50;
   dout_76=dout_74&dout_41;
   dout_77=dout_74^dout_41;
   dout_78=dout_75|dout_76;
   dout_79=dout_44^dout_51;
   dout_80=dout_44&dout_51;
   dout_81=dout_79&dout_43;
   dout_82=dout_79^dout_43;
   dout_83=dout_80|dout_81;
   dout_84=dout_31^dout_52;
   dout_85=dout_31&dout_52;
   dout_87=dout_84^dout_45;
   dout_88=dout_85|dout_45;
   dout_89=((B >> 0)&1)&((A >> 3)&1);
   dout_90=((B >> 1)&1)&((A >> 3)&1);
   dout_91=((B >> 2)&1)&((A >> 3)&1);
   dout_92=((B >> 3)&1)&((A >> 3)&1);
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_100=dout_89^0xFFFFFFFFFFFFFFFFU;
   dout_102=dout_67^dout_90;
   dout_103=dout_67&dout_90;
   dout_104=dout_102&dout_63;
   dout_105=dout_102^dout_63;
   dout_106=dout_103|dout_104;
   dout_107=dout_72^dout_91;
   dout_108=dout_72&dout_91;
   dout_109=dout_107&dout_68;
   dout_110=dout_107^dout_68;
   dout_111=dout_108|dout_109;
   dout_112=dout_77^dout_92;
   dout_113=dout_77&dout_92;
   dout_114=dout_112&dout_73;
   dout_115=dout_112^dout_73;
   dout_116=dout_113|dout_114;
   dout_117=dout_82^dout_93;
   dout_118=dout_82&dout_93;
   dout_119=dout_117&dout_78;
   dout_120=dout_117^dout_78;
   dout_121=dout_118|dout_119;
   dout_122=dout_87^dout_94;
   dout_123=dout_87&dout_94;
   dout_124=dout_122&dout_83;
   dout_125=dout_122^dout_83;
   dout_126=dout_123|dout_124;
   dout_127=dout_53^dout_95;
   dout_128=dout_53&dout_95;
   dout_129=dout_127&dout_88;
   dout_130=dout_127^dout_88;
   dout_131=dout_128|dout_129;
   dout_132=((B >> 0)&1)&((A >> 4)&1);
   dout_133=((B >> 1)&1)&((A >> 4)&1);
   dout_134=((B >> 2)&1)&((A >> 4)&1);
   dout_135=((B >> 3)&1)&((A >> 4)&1);
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_140=dout_105^dout_132;
   dout_141=dout_105&dout_132;
   dout_142=dout_140&dout_89;
   dout_143=dout_140^dout_89;
   dout_144=dout_141|dout_142;
   dout_145=dout_110^dout_133;
   dout_146=dout_110&dout_133;
   dout_147=dout_145&dout_106;
   dout_148=dout_145^dout_106;
   dout_149=dout_146|dout_147;
   dout_150=dout_115^dout_134;
   dout_151=dout_115&dout_134;
   dout_152=dout_150&dout_111;
   dout_153=dout_150^dout_111;
   dout_154=dout_151|dout_152;
   dout_155=dout_120^dout_135;
   dout_156=dout_120&dout_135;
   dout_157=dout_155&dout_116;
   dout_158=dout_155^dout_116;
   dout_159=dout_156|dout_157;
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_121;
   dout_163=dout_160^dout_121;
   dout_164=dout_161|dout_162;
   dout_165=dout_130^dout_137;
   dout_166=dout_130&dout_137;
   dout_167=dout_165&dout_126;
   dout_168=dout_165^dout_126;
   dout_169=dout_166|dout_167;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_172=dout_170&dout_131;
   dout_173=dout_170^dout_131;
   dout_174=dout_171|dout_172;
   dout_175=((B >> 0)&1)&((A >> 5)&1);
   dout_176=((B >> 1)&1)&((A >> 5)&1);
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_183=dout_148^dout_175;
   dout_184=dout_148&dout_175;
   dout_185=dout_183&dout_144;
   dout_186=dout_183^dout_144;
   dout_187=dout_184|dout_185;
   dout_188=dout_153^dout_176;
   dout_189=dout_153&dout_176;
   dout_190=dout_188&dout_149;
   dout_191=dout_188^dout_149;
   dout_192=dout_189|dout_190;
   dout_193=dout_158^dout_177;
   dout_194=dout_158&dout_177;
   dout_195=dout_193&dout_154;
   dout_196=dout_193^dout_154;
   dout_197=dout_194|dout_195;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_159;
   dout_201=dout_198^dout_159;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_218=((B >> 0)&1)&((A >> 6)&1);
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_226=dout_191^dout_218;
   dout_227=dout_191&dout_218;
   dout_228=dout_226&dout_187;
   dout_229=dout_226^dout_187;
   dout_230=dout_227|dout_228;
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_233=dout_231&dout_192;
   dout_234=dout_231^dout_192;
   dout_235=dout_232|dout_233;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_197;
   dout_239=dout_236^dout_197;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_234^dout_261;
   dout_270=dout_234&dout_261;
   dout_271=dout_269&dout_230;
   dout_272=dout_269^dout_230;
   dout_273=dout_270|dout_271;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_235;
   dout_277=dout_274^dout_235;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_304=dout_277^dout_273;
   dout_305=dout_277&dout_273;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_302^dout_298;
   dout_327=dout_302&dout_298;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_268^dout_303;
   dout_332=((A >> 7)&1)&dout_303;
   dout_333=dout_331&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (((B >> 0)&1)&1) << 0;
   O |= (((A >> 1)&1)&1) << 1;
   O |= (0&1) << 2;
   O |= (dout_100&1) << 3;
   O |= (dout_143&1) << 4;
   O |= (dout_186&1) << 5;
   O |= (dout_229&1) << 6;
   O |= (dout_272&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

uint32_t evoapproxlib::evoapprox_t::mul16u_CG0 (uint16_t a, uint16_t b) {
    static uint16_t * cacheLL = NULL;
    static uint16_t * cacheLH = NULL;
    static uint16_t * cacheHL = NULL;
    static uint16_t * cacheHH = NULL;
    int fillData = cacheLL == NULL || cacheLH == NULL || cacheHL == NULL || cacheHH == NULL;

    if(!cacheLL) cacheLL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheLH) cacheLH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHL) cacheHL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHH) cacheHH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    
    if(fillData) {
        for(int i = 0; i < 256; i++) {
            for(int j = 0; j < 256; j++) {
                cacheLL[i * 256 + j] = mult8_cgp14_wc10_csamrca(i, j);
                cacheLH[i * 256 + j] = mul8_364(i, j);
                cacheHL[i * 256 + j] = trun8_tam00b(i, j);
                cacheHH[i * 256 + j] = mul8_364(i, j);
            }
        }
    }

    uint32_t opt = 0;

    opt += (uint32_t)cacheLL[(a & 0xFF       ) * 256 + (b & 0xFF             )];
    opt += (uint32_t)cacheLH[(a & 0xFF       ) * 256 + ((b >> 8) & 0xFF      )] << 8;
    opt += (uint32_t)cacheHL[((a >> 8) & 0xFF) * 256 + (b & 0xFF             )] << 8;
    opt += (uint32_t)cacheHH[((a >> 8) & 0xFF) * 256 + ((b >> 8) & 0xFF      )] << 16;

    return opt;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mse parameters
***/
// MAE% = 0.0013 %
// MAE = 54059 
// WCE% = 0.0062 %
// WCE = 266045 
// WCRE% = 300.00 %
// EP% = 99.98 %
// MRE% = 0.083 %
// MSE = 44379.574e5 
// PDK45_PWR = 1.230 mW
// PDK45_AREA = 2044.7 um2
// PDK45_DELAY = 2.90 ns

uint64_t mult8_cgp14ep_ep65536_wc493_rcam(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_20, dout_29, dout_31, dout_64, dout_65, dout_71, dout_72, dout_73, dout_75, dout_96, dout_97, dout_101, dout_102, dout_104, dout_105, dout_106, dout_107, dout_109, dout_110, dout_115, dout_116, dout_117, dout_118, dout_136, dout_137, dout_145, dout_146, dout_147, dout_148, dout_149, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_159, dout_160, dout_161, dout_162, dout_163, dout_176, dout_177, dout_181, dout_182, dout_183, dout_184, dout_185, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_217, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_261, dout_262, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_20=((B >> 6)&1)&((A >> 1)&1);
   dout_29=((B >> 7)&1)&((A >> 0)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_64=dout_29^dout_31;
   dout_65=dout_29&((A >> 1)&1);
   dout_71=((B >> 5)&1)&((A >> 2)&1);
   dout_72=((B >> 6)&1)&((A >> 2)&1);
   dout_73=((B >> 7)&1)&((A >> 2)&1);
   dout_75=dout_64&((B >> 7)&1);
   dout_96=dout_20|dout_71;
   dout_97=dout_20&dout_71;
   dout_101=dout_75^dout_72;
   dout_102=dout_64&dout_72;
   dout_104=dout_101^dout_97;
   dout_105=dout_102|dout_97;
   dout_106=dout_65^dout_73;
   dout_107=dout_65&((A >> 2)&1);
   dout_109=dout_106^dout_105;
   dout_110=dout_107|dout_102;
   dout_115=((B >> 4)&1)&((A >> 3)&1);
   dout_116=((B >> 5)&1)&((A >> 3)&1);
   dout_117=((B >> 6)&1)&((A >> 3)&1);
   dout_118=((B >> 7)&1)&((A >> 3)&1);
   dout_136=dout_96|dout_115;
   dout_137=dout_96&dout_115;
   dout_145=dout_116|dout_104;
   dout_146=dout_109^dout_117;
   dout_147=dout_109&dout_117;
   dout_148=dout_146&dout_145;
   dout_149=dout_146^dout_145;
   dout_150=dout_147|dout_148;
   dout_151=dout_110^dout_118;
   dout_152=dout_110&((A >> 3)&1);
   dout_153=dout_118&dout_150;
   dout_154=dout_151^dout_150;
   dout_155=dout_152|dout_153;
   dout_159=((B >> 3)&1)&((A >> 4)&1);
   dout_160=((B >> 4)&1)&((A >> 4)&1);
   dout_161=((B >> 5)&1)&((A >> 4)&1);
   dout_162=((B >> 6)&1)&((A >> 4)&1);
   dout_163=((B >> 7)&1)&((A >> 4)&1);
   dout_176=dout_136|((A >> 4)&1);
   dout_177=dout_136&dout_159;
   dout_181=dout_137^dout_160;
   dout_182=dout_137&((A >> 4)&1);
   dout_183=dout_181&dout_177;
   dout_184=dout_181^dout_177;
   dout_185=dout_182|dout_183;
   dout_186=dout_149^dout_161;
   dout_187=dout_149&dout_161;
   dout_188=dout_186&dout_185;
   dout_189=dout_186^dout_185;
   dout_190=dout_187|dout_188;
   dout_191=dout_154^dout_162;
   dout_192=dout_154&dout_162;
   dout_193=dout_191&dout_190;
   dout_194=dout_191^dout_190;
   dout_195=dout_192|dout_193;
   dout_196=dout_155^dout_163;
   dout_197=dout_155&((A >> 4)&1);
   dout_198=dout_163&dout_195;
   dout_199=dout_196^dout_195;
   dout_200=dout_197|dout_198;
   dout_203=((B >> 2)&1)&((A >> 5)&1);
   dout_204=((B >> 3)&1)&((A >> 5)&1);
   dout_205=((B >> 4)&1)&((A >> 5)&1);
   dout_206=((B >> 5)&1)&((A >> 5)&1);
   dout_207=((B >> 6)&1)&((A >> 5)&1);
   dout_208=((B >> 7)&1)&((A >> 5)&1);
   dout_217=dout_176&dout_203;
   dout_221=dout_184^dout_204;
   dout_222=dout_184&dout_204;
   dout_223=dout_221&dout_217;
   dout_224=dout_221^dout_217;
   dout_225=dout_222|dout_223;
   dout_226=dout_189^dout_205;
   dout_227=dout_189&dout_205;
   dout_228=dout_226&dout_225;
   dout_229=dout_226^dout_225;
   dout_230=dout_227|dout_228;
   dout_231=dout_194^dout_206;
   dout_232=dout_194&dout_206;
   dout_233=dout_231&dout_230;
   dout_234=dout_231^dout_230;
   dout_235=dout_232|dout_233;
   dout_236=dout_199^dout_207;
   dout_237=dout_199&dout_207;
   dout_238=dout_236&dout_235;
   dout_239=dout_236^dout_235;
   dout_240=dout_237|dout_238;
   dout_241=dout_200^dout_208;
   dout_242=dout_200&((A >> 5)&1);
   dout_243=((B >> 7)&1)&dout_240;
   dout_244=dout_241^dout_240;
   dout_245=dout_242|dout_243;
   dout_247=((B >> 1)&1)&((A >> 6)&1);
   dout_248=((B >> 2)&1)&((A >> 6)&1);
   dout_249=((B >> 3)&1)&((A >> 6)&1);
   dout_250=((B >> 4)&1)&((A >> 6)&1);
   dout_251=((B >> 5)&1)&((A >> 6)&1);
   dout_252=((B >> 6)&1)&((A >> 6)&1);
   dout_253=((B >> 7)&1)&((A >> 6)&1);
   dout_261=dout_224^dout_248;
   dout_262=dout_224&dout_248;
   dout_266=dout_229^dout_249;
   dout_267=dout_229&dout_249;
   dout_268=dout_266&dout_262;
   dout_269=dout_266^dout_262;
   dout_270=dout_267|dout_268;
   dout_271=dout_234^dout_250;
   dout_272=dout_234&dout_250;
   dout_273=dout_271&dout_270;
   dout_274=dout_271^dout_270;
   dout_275=dout_272|dout_273;
   dout_276=dout_239^dout_251;
   dout_277=dout_239&dout_251;
   dout_278=dout_276&dout_275;
   dout_279=dout_276^dout_275;
   dout_280=dout_277|dout_278;
   dout_281=dout_244^dout_252;
   dout_282=dout_244&dout_252;
   dout_283=dout_281&dout_280;
   dout_284=dout_281^dout_280;
   dout_285=dout_282|dout_283;
   dout_286=dout_245^dout_253;
   dout_287=dout_245&dout_253;
   dout_288=((B >> 7)&1)&dout_285;
   dout_289=dout_286^dout_285;
   dout_290=dout_287|dout_288;
   dout_291=((B >> 0)&1)&((A >> 7)&1);
   dout_292=((B >> 1)&1)&((A >> 7)&1);
   dout_293=((B >> 2)&1)&((A >> 7)&1);
   dout_294=((B >> 3)&1)&((A >> 7)&1);
   dout_295=((B >> 4)&1)&((A >> 7)&1);
   dout_296=((B >> 5)&1)&((A >> 7)&1);
   dout_297=((B >> 6)&1)&((A >> 7)&1);
   dout_298=((B >> 7)&1)&((A >> 7)&1);
   dout_299=dout_247^dout_291;
   dout_301=dout_261^dout_292;
   dout_302=dout_261&dout_292;
   dout_303=dout_247&dout_291;
   dout_304=dout_301^dout_303;
   dout_305=dout_302|dout_303;
   dout_306=dout_269^dout_293;
   dout_307=dout_269&dout_293;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_274^dout_294;
   dout_312=dout_274&dout_294;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_279^dout_295;
   dout_317=dout_279&dout_295;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_284^dout_296;
   dout_322=dout_284&dout_296;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_289^dout_297;
   dout_327=dout_289&dout_297;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_290^dout_298;
   dout_332=dout_290&dout_298;
   dout_333=((B >> 7)&1)&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_277&1) << 0;
   O |= (dout_200&1) << 1;
   O |= (dout_262&1) << 2;
   O |= (dout_262&1) << 3;
   O |= (dout_136&1) << 4;
   O |= (dout_177&1) << 5;
   O |= (dout_247&1) << 6;
   O |= (dout_299&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

uint32_t evoapproxlib::evoapprox_t::mul16u_94L (uint16_t a, uint16_t b) {
    static uint16_t * cacheLL = NULL;
    static uint16_t * cacheLH = NULL;
    static uint16_t * cacheHL = NULL;
    static uint16_t * cacheHH = NULL;
    int fillData = cacheLL == NULL || cacheLH == NULL || cacheHL == NULL || cacheHH == NULL;

    if(!cacheLL) cacheLL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheLH) cacheLH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHL) cacheHL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHH) cacheHH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    
    if(fillData) {
        for(int i = 0; i < 256; i++) {
            for(int j = 0; j < 256; j++) {
                cacheLL[i * 256 + j] = mult8_cgp14ep_ep65536_wc16384_2_csamcsa(i, j);
                cacheLH[i * 256 + j] = mult8_cgp14ep_ep65536_wc493_rcam(i, j);
                cacheHL[i * 256 + j] = mult8_cgp14ep_ep65536_wc493_rcam(i, j);
                cacheHH[i * 256 + j] = mul8_364(i, j);
            }
        }
    }

    uint32_t opt = 0;

    opt += (uint32_t)cacheLL[(a & 0xFF       ) * 256 + (b & 0xFF             )];
    opt += (uint32_t)cacheLH[(a & 0xFF       ) * 256 + ((b >> 8) & 0xFF      )] << 8;
    opt += (uint32_t)cacheHL[((a >> 8) & 0xFF) * 256 + (b & 0xFF             )] << 8;
    opt += (uint32_t)cacheHH[((a >> 8) & 0xFF) * 256 + ((b >> 8) & 0xFF      )] << 16;

    return opt;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 0.00000057 %
// MAE = 24 
// WCE% = 0.0000018 %
// WCE = 79 
// WCRE% = 3100.00 %
// EP% = 98.12 %
// MRE% = 0.000071 %
// MSE = 892 
// PDK45_PWR = 2.135 mW
// PDK45_AREA = 3019.9 um2
// PDK45_DELAY = 3.11 ns

uint64_t mult8_cgp14_wc79_csamrca(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_20, dout_21, dout_22, dout_23, dout_29, dout_31, dout_40, dout_41, dout_42, dout_43, dout_44, dout_47, dout_49, dout_50, dout_51, dout_52, dout_53, dout_56, dout_70, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_86, dout_87, dout_88, dout_92, dout_93, dout_94, dout_95, dout_96, dout_106, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_150, dout_151, dout_155, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_171, dout_172, dout_173, dout_174, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_186, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_20=((B >> 6)&1)&((A >> 1)&1);
   dout_21=((A >> 1)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_40=((A >> 1)&1)|((A >> 0)&1);
   dout_41=dout_21&((B >> 4)&1);
   dout_42=dout_22^dout_29;
   dout_43=dout_22&dout_29;
   dout_44=dout_23^dout_20;
   dout_47=((B >> 7)&1)&dout_21;
   dout_49=((B >> 3)&1)&((A >> 2)&1);
   dout_50=((B >> 4)&1)&((A >> 2)&1);
   dout_51=((B >> 5)&1)&((A >> 2)&1);
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_56=dout_52&dout_31;
   dout_70=dout_40&dout_49;
   dout_74=dout_42^dout_50;
   dout_75=dout_42&dout_50;
   dout_76=dout_74&dout_41;
   dout_77=dout_74^dout_41;
   dout_78=dout_75|dout_76;
   dout_79=dout_44^dout_51;
   dout_80=dout_44&dout_51;
   dout_81=dout_79&dout_43;
   dout_82=dout_79^dout_43;
   dout_83=dout_80|dout_81;
   dout_84=dout_31^dout_52;
   dout_86=((B >> 6)&1)&dout_47;
   dout_87=dout_84^dout_86;
   dout_88=dout_56|dout_86;
   dout_92=((B >> 3)&1)&((A >> 3)&1);
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_106=((B >> 2)&1)&((A >> 3)&1);
   dout_112=dout_77^dout_92;
   dout_113=dout_77&dout_92;
   dout_114=dout_112&dout_70;
   dout_115=dout_112^dout_70;
   dout_116=dout_113|dout_114;
   dout_117=dout_82^dout_93;
   dout_118=dout_82&dout_93;
   dout_119=dout_117&dout_78;
   dout_120=dout_117^dout_78;
   dout_121=dout_118|dout_119;
   dout_122=dout_87^dout_94;
   dout_123=dout_87&dout_94;
   dout_124=dout_122&dout_83;
   dout_125=dout_122^dout_83;
   dout_126=dout_123|dout_124;
   dout_127=dout_53^dout_95;
   dout_128=dout_53&dout_95;
   dout_129=dout_127&dout_88;
   dout_130=dout_127^dout_88;
   dout_131=dout_128|dout_129;
   dout_133=((B >> 1)&1)&((A >> 4)&1);
   dout_134=((B >> 2)&1)&((A >> 4)&1);
   dout_135=((B >> 3)&1)&((A >> 4)&1);
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_150=dout_115^dout_134;
   dout_151=dout_115&dout_134;
   dout_155=dout_120^dout_135;
   dout_156=dout_120&dout_135;
   dout_157=dout_155&dout_116;
   dout_158=dout_155^dout_116;
   dout_159=dout_156|dout_157;
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_121;
   dout_163=dout_160^dout_121;
   dout_164=dout_161|dout_162;
   dout_165=dout_130^dout_137;
   dout_166=dout_130&dout_137;
   dout_167=dout_165&dout_126;
   dout_168=dout_165^dout_126;
   dout_169=dout_166|dout_167;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_172=dout_170&dout_131;
   dout_173=dout_170^dout_131;
   dout_174=dout_171|dout_172;
   dout_176=((B >> 1)&1)&((A >> 5)&1);
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_186=dout_133^0xFFFFFFFFFFFFFFFFU;
   dout_188=dout_150^dout_176;
   dout_189=dout_150&dout_176;
   dout_190=dout_188&dout_106;
   dout_191=dout_188^dout_106;
   dout_192=dout_189|dout_190;
   dout_193=dout_158^dout_177;
   dout_194=dout_158&dout_177;
   dout_195=dout_193&dout_151;
   dout_196=dout_193^dout_151;
   dout_197=dout_194|dout_195;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_159;
   dout_201=dout_198^dout_159;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_218=((B >> 0)&1)&((A >> 6)&1);
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_226=dout_191^dout_218;
   dout_227=dout_191&dout_218;
   dout_228=dout_226&dout_133;
   dout_229=dout_226^dout_133;
   dout_230=dout_227|dout_228;
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_233=dout_231&dout_192;
   dout_234=dout_231^dout_192;
   dout_235=dout_232|dout_233;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_197;
   dout_239=dout_236^dout_197;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_234^dout_261;
   dout_270=dout_234&dout_261;
   dout_271=dout_269&dout_230;
   dout_272=dout_269^dout_230;
   dout_273=dout_270|dout_271;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_235;
   dout_277=dout_274^dout_235;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_304=dout_277^dout_273;
   dout_305=dout_277&dout_273;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_302^dout_298;
   dout_327=dout_302&dout_298;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_268^dout_303;
   dout_332=((A >> 7)&1)&dout_303;
   dout_333=dout_331&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_134&1) << 0;
   O |= (dout_252&1) << 1;
   O |= (((A >> 5)&1)&1) << 2;
   O |= (dout_180&1) << 3;
   O |= (dout_133&1) << 4;
   O |= (dout_186&1) << 5;
   O |= (dout_229&1) << 6;
   O |= (dout_272&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

uint32_t evoapproxlib::evoapprox_t::mul16u_5FA (uint16_t a, uint16_t b) {
    static uint16_t * cacheLL = NULL;
    static uint16_t * cacheLH = NULL;
    static uint16_t * cacheHL = NULL;
    static uint16_t * cacheHH = NULL;
    int fillData = cacheLL == NULL || cacheLH == NULL || cacheHL == NULL || cacheHH == NULL;

    if(!cacheLL) cacheLL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheLH) cacheLH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHL) cacheHL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHH) cacheHH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    
    if(fillData) {
        for(int i = 0; i < 256; i++) {
            for(int j = 0; j < 256; j++) {
                cacheLL[i * 256 + j] = mult8_cgp14_wc79_csamrca(i, j);
                cacheLH[i * 256 + j] = trun8_tam00b(i, j);
                cacheHL[i * 256 + j] = mul8_364(i, j);
                cacheHH[i * 256 + j] = trun8_tam00b(i, j);
            }
        }
    }

    uint32_t opt = 0;

    opt += (uint32_t)cacheLL[(a & 0xFF       ) * 256 + (b & 0xFF             )];
    opt += (uint32_t)cacheLH[(a & 0xFF       ) * 256 + ((b >> 8) & 0xFF      )] << 8;
    opt += (uint32_t)cacheHL[((a >> 8) & 0xFF) * 256 + (b & 0xFF             )] << 8;
    opt += (uint32_t)cacheHH[((a >> 8) & 0xFF) * 256 + ((b >> 8) & 0xFF      )] << 16;

    return opt;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.0000015 %
// MAE = 64 
// WCE% = 0.000006 %
// WCE = 257 
// WCRE% = 100.00 %
// EP% = 37.50 %
// MRE% = 0.00011 %
// MSE = 16416 
// PDK45_PWR = 2.184 mW
// PDK45_AREA = 3084.2 um2
// PDK45_DELAY = 3.12 ns

uint64_t mult8_cgp14ep_ep49152_wc1_2_csamrca(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_16, dout_17, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_65, dout_66, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_87, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_98, dout_99, dout_100, dout_101, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110, dout_111, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143, dout_144, dout_145, dout_146, dout_147, dout_148, dout_149, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_171, dout_172, dout_173, dout_174, dout_175, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_183, dout_184, dout_185, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_16=((A >> 1)&1)&((B >> 6)&1);
   dout_17=((B >> 1)&1)&((A >> 0)&1);
   dout_18=((B >> 2)&1)&((A >> 0)&1);
   dout_19=((B >> 3)&1)&((A >> 0)&1);
   dout_20=((B >> 4)&1)&((A >> 0)&1);
   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_24=((B >> 0)&1)&((A >> 1)&1);
   dout_25=((B >> 1)&1)&((A >> 1)&1);
   dout_26=((B >> 2)&1)&((A >> 1)&1);
   dout_27=((B >> 3)&1)&((A >> 1)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_32=dout_17|dout_24;
   dout_33=dout_17&dout_24;
   dout_34=dout_18^dout_25;
   dout_35=dout_18&dout_25;
   dout_36=dout_19^dout_26;
   dout_37=dout_19&dout_26;
   dout_38=dout_20^dout_27;
   dout_39=dout_20&dout_27;
   dout_40=dout_21^dout_28;
   dout_41=dout_21&dout_28;
   dout_42=dout_22^dout_29;
   dout_43=dout_22&dout_29;
   dout_44=dout_23^dout_16;
   dout_45=dout_23&dout_30;
   dout_46=((B >> 0)&1)&((A >> 2)&1);
   dout_47=((B >> 1)&1)&((A >> 2)&1);
   dout_48=((B >> 2)&1)&((A >> 2)&1);
   dout_49=((B >> 3)&1)&((A >> 2)&1);
   dout_50=((B >> 4)&1)&((A >> 2)&1);
   dout_51=((B >> 5)&1)&((A >> 2)&1);
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_54=dout_34^dout_46;
   dout_55=dout_34&dout_46;
   dout_56=dout_54&dout_33;
   dout_57=dout_54^dout_33;
   dout_58=dout_55|dout_56;
   dout_59=dout_36^dout_47;
   dout_60=dout_36&dout_47;
   dout_61=dout_59&dout_35;
   dout_62=dout_59^dout_35;
   dout_63=dout_60|dout_61;
   dout_64=dout_38^dout_48;
   dout_65=dout_38&dout_48;
   dout_66=dout_64&dout_37;
   dout_67=dout_64^dout_37;
   dout_68=dout_65|dout_66;
   dout_69=dout_40^dout_49;
   dout_70=dout_40&dout_49;
   dout_71=dout_69&dout_39;
   dout_72=dout_69^dout_39;
   dout_73=dout_70|dout_71;
   dout_74=dout_42^dout_50;
   dout_75=dout_42&dout_50;
   dout_76=dout_74&dout_41;
   dout_77=dout_74^dout_41;
   dout_78=dout_75|dout_76;
   dout_79=dout_44^dout_51;
   dout_80=dout_44&dout_51;
   dout_81=dout_79&dout_43;
   dout_82=dout_79^dout_43;
   dout_83=dout_80|dout_81;
   dout_84=dout_31^dout_52;
   dout_85=dout_31&dout_52;
   dout_87=dout_84^dout_45;
   dout_88=dout_85|dout_45;
   dout_89=((B >> 0)&1)&((A >> 3)&1);
   dout_90=((B >> 1)&1)&((A >> 3)&1);
   dout_91=((B >> 2)&1)&((A >> 3)&1);
   dout_92=((B >> 3)&1)&((A >> 3)&1);
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_97=dout_62^dout_89;
   dout_98=dout_62&dout_89;
   dout_99=dout_97&dout_58;
   dout_100=dout_97^dout_58;
   dout_101=dout_98|dout_99;
   dout_102=dout_67^dout_90;
   dout_103=dout_67&dout_90;
   dout_104=dout_102&dout_63;
   dout_105=dout_102^dout_63;
   dout_106=dout_103|dout_104;
   dout_107=dout_72^dout_91;
   dout_108=dout_72&dout_91;
   dout_109=dout_107&dout_68;
   dout_110=dout_107^dout_68;
   dout_111=dout_108|dout_109;
   dout_112=dout_77^dout_92;
   dout_113=dout_77&dout_92;
   dout_114=dout_112&dout_73;
   dout_115=dout_112^dout_73;
   dout_116=dout_113|dout_114;
   dout_117=dout_82^dout_93;
   dout_118=dout_82&dout_93;
   dout_119=dout_117&dout_78;
   dout_120=dout_117^dout_78;
   dout_121=dout_118|dout_119;
   dout_122=dout_87^dout_94;
   dout_123=dout_87&dout_94;
   dout_124=dout_122&dout_83;
   dout_125=dout_122^dout_83;
   dout_126=dout_123|dout_124;
   dout_127=dout_53^dout_95;
   dout_128=dout_53&dout_95;
   dout_129=dout_127&dout_88;
   dout_130=dout_127^dout_88;
   dout_131=dout_128|dout_129;
   dout_132=((B >> 0)&1)&((A >> 4)&1);
   dout_133=((B >> 1)&1)&((A >> 4)&1);
   dout_134=((B >> 2)&1)&((A >> 4)&1);
   dout_135=((B >> 3)&1)&((A >> 4)&1);
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_140=dout_105^dout_132;
   dout_141=dout_105&dout_132;
   dout_142=dout_140&dout_101;
   dout_143=dout_140^dout_101;
   dout_144=dout_141|dout_142;
   dout_145=dout_110^dout_133;
   dout_146=dout_110&dout_133;
   dout_147=dout_145&dout_106;
   dout_148=dout_145^dout_106;
   dout_149=dout_146|dout_147;
   dout_150=dout_115^dout_134;
   dout_151=dout_115&dout_134;
   dout_152=dout_150&dout_111;
   dout_153=dout_150^dout_111;
   dout_154=dout_151|dout_152;
   dout_155=dout_120^dout_135;
   dout_156=dout_120&dout_135;
   dout_157=dout_155&dout_116;
   dout_158=dout_155^dout_116;
   dout_159=dout_156|dout_157;
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_121;
   dout_163=dout_160^dout_121;
   dout_164=dout_161|dout_162;
   dout_165=dout_130^dout_137;
   dout_166=dout_130&dout_137;
   dout_167=dout_165&dout_126;
   dout_168=dout_165^dout_126;
   dout_169=dout_166|dout_167;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_172=dout_170&dout_131;
   dout_173=dout_170^dout_131;
   dout_174=dout_171|dout_172;
   dout_175=((B >> 0)&1)&((A >> 5)&1);
   dout_176=((B >> 1)&1)&((A >> 5)&1);
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_183=dout_148^dout_175;
   dout_184=dout_148&dout_175;
   dout_185=dout_183&dout_144;
   dout_186=dout_183^dout_144;
   dout_187=dout_184|dout_185;
   dout_188=dout_153^dout_176;
   dout_189=dout_153&dout_176;
   dout_190=dout_188&dout_149;
   dout_191=dout_188^dout_149;
   dout_192=dout_189|dout_190;
   dout_193=dout_158^dout_177;
   dout_194=dout_158&dout_177;
   dout_195=dout_193&dout_154;
   dout_196=dout_193^dout_154;
   dout_197=dout_194|dout_195;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_159;
   dout_201=dout_198^dout_159;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_218=((B >> 0)&1)&((A >> 6)&1);
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_226=dout_191^dout_218;
   dout_227=dout_191&dout_218;
   dout_228=dout_226&dout_187;
   dout_229=dout_226^dout_187;
   dout_230=dout_227|dout_228;
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_233=dout_231&dout_192;
   dout_234=dout_231^dout_192;
   dout_235=dout_232|dout_233;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_197;
   dout_239=dout_236^dout_197;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_234^dout_261;
   dout_270=dout_234&dout_261;
   dout_271=dout_269&dout_230;
   dout_272=dout_269^dout_230;
   dout_273=dout_270|dout_271;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_235;
   dout_277=dout_274^dout_235;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_304=dout_277^dout_273;
   dout_305=dout_277&dout_273;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_302^dout_298;
   dout_327=dout_302&dout_298;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_268^dout_303;
   dout_332=((A >> 7)&1)&dout_303;
   dout_333=dout_331&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (0&1) << 0;
   O |= (dout_32&1) << 1;
   O |= (dout_57&1) << 2;
   O |= (dout_100&1) << 3;
   O |= (dout_143&1) << 4;
   O |= (dout_186&1) << 5;
   O |= (dout_229&1) << 6;
   O |= (dout_272&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

uint32_t evoapproxlib::evoapprox_t::mul16u_FGN (uint16_t a, uint16_t b) {
    static uint16_t * cacheLL = NULL;
    static uint16_t * cacheLH = NULL;
    static uint16_t * cacheHL = NULL;
    static uint16_t * cacheHH = NULL;
    int fillData = cacheLL == NULL || cacheLH == NULL || cacheHL == NULL || cacheHH == NULL;

    if(!cacheLL) cacheLL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheLH) cacheLH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHL) cacheHL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHH) cacheHH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    
    if(fillData) {
        for(int i = 0; i < 256; i++) {
            for(int j = 0; j < 256; j++) {
                cacheLL[i * 256 + j] = mult8_cgp14ep_ep49152_wc1_2_csamrca(i, j);
                cacheLH[i * 256 + j] = trun8_tam00b(i, j);
                cacheHL[i * 256 + j] = mult8_cgp14ep_ep49152_wc1_2_csamrca(i, j);
                cacheHH[i * 256 + j] = trun8_tam00b(i, j);
            }
        }
    }

    uint32_t opt = 0;

    opt += (uint32_t)cacheLL[(a & 0xFF       ) * 256 + (b & 0xFF             )];
    opt += (uint32_t)cacheLH[(a & 0xFF       ) * 256 + ((b >> 8) & 0xFF      )] << 8;
    opt += (uint32_t)cacheHL[((a >> 8) & 0xFF) * 256 + (b & 0xFF             )] << 8;
    opt += (uint32_t)cacheHH[((a >> 8) & 0xFF) * 256 + ((b >> 8) & 0xFF      )] << 16;

    return opt;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 0.0031 %
// MAE = 132023 
// WCE% = 0.018 %
// WCE = 780197 
// WCRE% = 162.50 %
// EP% = 99.99 %
// MRE% = 0.17 %
// MSE = 26871.835e6 
// PDK45_PWR = 0.984 mW
// PDK45_AREA = 1599.4 um2
// PDK45_DELAY = 1.89 ns



uint64_t mult8_cgp14ep_ep65536_wc1508_rcam(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_72, dout_108, dout_117, dout_118, dout_151, dout_152, dout_154, dout_162, dout_163, dout_187, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_205, dout_206, dout_207, dout_208, dout_209, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_249, dout_250, dout_251, dout_252, dout_253, dout_262, dout_266, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_300, dout_301, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_72=((B >> 6)&1)&((A >> 2)&1);
   dout_108=((B >> 7)&1)&dout_72;
   dout_117=((B >> 6)&1)&((A >> 3)&1);
   dout_118=((B >> 7)&1)&((A >> 3)&1);
   dout_151=dout_108|dout_118;
   dout_152=dout_118&((B >> 6)&1);
   dout_154=dout_151^dout_117;
   dout_162=((B >> 6)&1)&((A >> 4)&1);
   dout_163=((B >> 7)&1)&((A >> 4)&1);
   dout_187=((A >> 4)&1)&((B >> 5)&1);
   dout_191=dout_154^dout_162;
   dout_192=dout_154&dout_162;
   dout_193=dout_191&dout_187;
   dout_194=dout_191^dout_187;
   dout_195=dout_192|dout_193;
   dout_196=dout_152^dout_163;
   dout_197=dout_152&dout_163;
   dout_198=((B >> 7)&1)&dout_195;
   dout_199=dout_196^dout_195;
   dout_200=dout_197|dout_198;
   dout_205=((B >> 4)&1)&((A >> 5)&1);
   dout_206=((B >> 5)&1)&((A >> 5)&1);
   dout_207=((B >> 6)&1)&((A >> 5)&1);
   dout_208=((B >> 7)&1)&((A >> 5)&1);
   dout_209=((A >> 2)&1)&dout_118;
   dout_231=dout_194^dout_206;
   dout_232=dout_194&dout_206;
   dout_233=dout_231&dout_205;
   dout_234=dout_231^dout_205;
   dout_235=dout_232|dout_233;
   dout_236=dout_199^dout_207;
   dout_237=dout_199&dout_207;
   dout_238=dout_236&dout_235;
   dout_239=dout_236^dout_235;
   dout_240=dout_237|dout_238;
   dout_241=dout_200^dout_208;
   dout_242=dout_200&((A >> 5)&1);
   dout_243=dout_208&dout_240;
   dout_244=dout_241^dout_240;
   dout_245=dout_242|dout_243;
   dout_249=((B >> 3)&1)&((A >> 6)&1);
   dout_250=((B >> 4)&1)&((A >> 6)&1);
   dout_251=((B >> 5)&1)&((A >> 6)&1);
   dout_252=((B >> 6)&1)&((A >> 6)&1);
   dout_253=((B >> 7)&1)&((A >> 6)&1);
   dout_262=((A >> 2)&1)&((B >> 2)&1);
   dout_266=dout_209|dout_249;
   dout_270=dout_249&dout_262;
   dout_271=dout_234^dout_250;
   dout_272=dout_234&dout_250;
   dout_273=dout_271&dout_270;
   dout_274=dout_271^dout_270;
   dout_275=dout_272|dout_273;
   dout_276=dout_239^dout_251;
   dout_277=dout_239&dout_251;
   dout_278=dout_276&dout_275;
   dout_279=dout_276^dout_275;
   dout_280=dout_277|dout_278;
   dout_281=dout_244^dout_252;
   dout_282=dout_244&dout_252;
   dout_283=dout_281&dout_280;
   dout_284=dout_281^dout_280;
   dout_285=dout_282|dout_283;
   dout_286=dout_245^dout_253;
   dout_287=dout_245&dout_253;
   dout_288=dout_253&dout_285;
   dout_289=dout_286^dout_285;
   dout_290=dout_287|dout_288;
   dout_292=((B >> 1)&1)&((A >> 7)&1);
   dout_293=((B >> 2)&1)&((A >> 7)&1);
   dout_294=((B >> 3)&1)&((A >> 7)&1);
   dout_295=((B >> 4)&1)&((A >> 7)&1);
   dout_296=((B >> 5)&1)&((A >> 7)&1);
   dout_297=((B >> 6)&1)&((A >> 7)&1);
   dout_298=((B >> 7)&1)&((A >> 7)&1);
   dout_300=((B >> 7)&1)&((A >> 1)&1);
   dout_301=dout_253^dout_270;
   dout_305=dout_292|dout_300;
   dout_306=dout_266^dout_293;
   dout_307=dout_266&dout_293;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_274^dout_294;
   dout_312=dout_274&dout_294;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_279^dout_295;
   dout_317=dout_279&dout_295;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_284^dout_296;
   dout_322=dout_284&dout_296;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_289^dout_297;
   dout_327=dout_289&dout_297;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_290^dout_298;
   dout_332=dout_290&((A >> 7)&1);
   dout_333=dout_298&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_290&1) << 0;
   O |= (dout_152&1) << 1;
   O |= (dout_250&1) << 2;
   O |= (dout_198&1) << 3;
   O |= (0&1) << 4;
   O |= (dout_309&1) << 5;
   O |= (dout_206&1) << 6;
   O |= (dout_292&1) << 7;
   O |= (dout_301&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

uint32_t evoapproxlib::evoapprox_t::mul16u_3BB (uint16_t a, uint16_t b) {
    static uint16_t * cacheLL = NULL;
    static uint16_t * cacheLH = NULL;
    static uint16_t * cacheHL = NULL;
    static uint16_t * cacheHH = NULL;
    int fillData = cacheLL == NULL || cacheLH == NULL || cacheHL == NULL || cacheHH == NULL;

    if(!cacheLL) cacheLL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheLH) cacheLH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHL) cacheHL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHH) cacheHH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    
    if(fillData) {
        for(int i = 0; i < 256; i++) {
            for(int j = 0; j < 256; j++) {
                cacheLL[i * 256 + j] = mult8_cgp14ep_ep65536_wc16384_2_csamcsa(i, j);
                cacheLH[i * 256 + j] = mult8_cgp14ep_ep65536_wc1508_rcam(i, j);
                cacheHL[i * 256 + j] = mult8_cgp14ep_ep65536_wc1508_rcam(i, j);
                cacheHH[i * 256 + j] = mul8_364(i, j);
            }
        }
    }

    uint32_t opt = 0;

    opt += (uint32_t)cacheLL[(a & 0xFF       ) * 256 + (b & 0xFF             )];
    opt += (uint32_t)cacheLH[(a & 0xFF       ) * 256 + ((b >> 8) & 0xFF      )] << 8;
    opt += (uint32_t)cacheHL[((a >> 8) & 0xFF) * 256 + (b & 0xFF             )] << 8;
    opt += (uint32_t)cacheHH[((a >> 8) & 0xFF) * 256 + ((b >> 8) & 0xFF      )] << 16;

    return opt;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mse parameters
***/
// MAE% = 15.62 %
// MAE = 671055872 
// WCE% = 62.50 %
// WCE = 2684223489 
// WCRE% = 100.00 %
// EP% = 100.00 %
// MRE% = 79.49 %
// MSE = 71651.74e13 
// PDK45_PWR = 0.00063 mW
// PDK45_AREA = 4.7 um2
// PDK45_DELAY = 0.04 ns



uint32_t evoapproxlib::evoapprox_t::mul16u_G9P(uint16_t A, uint16_t B)
{
  uint32_t P, P_;
  uint16_t tmp, S_15_14,S_15_15,S_16_13,S_16_14,S_16_15;
  S_15_14 = (((A>>15)&1) & ((B>>14)&1));
  S_15_15 = (((A>>15)&1) & ((B>>15)&1));
  S_16_13 = S_15_14;
  S_16_14 = S_15_15;
  S_16_15 = 0;
  P = 0;
  P |= (S_16_13 & 1) << 29;
  P |= (S_16_14 & 1) << 30;
  P |= (S_16_15 & 1) << 31;
  return P;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 1.76 %
// MAE = 75464704 
// WCE% = 7.03 %
// WCE = 301858817 
// WCRE% = 100.00 %
// EP% = 100.00 %
// MRE% = 19.30 %
// MSE = 73909.015e11 
// PDK45_PWR = 0.101 mW
// PDK45_AREA = 244.0 um2
// PDK45_DELAY = 1.03 ns



uint32_t evoapproxlib::evoapprox_t::mul16u_H6G(uint16_t A, uint16_t B)
{
  uint32_t P, P_;
  uint16_t tmp, C_12_13,C_12_14,C_13_12,C_13_13,C_13_14,C_14_11,C_14_12,C_14_13,C_14_14,C_15_10,C_15_11,C_15_12,C_15_13,C_15_14,C_16_10,C_16_11,C_16_12,C_16_13,C_16_14,S_11_14,S_11_15,S_12_13,S_12_14,S_12_15,S_13_12,S_13_13,S_13_14,S_13_15,S_14_11,S_14_12,S_14_13,S_14_14,S_14_15,S_15_10,S_15_11,S_15_12,S_15_13,S_15_14,S_15_15,S_16_10,S_16_11,S_16_12,S_16_13,S_16_14,S_16_15,S_16_9;
  S_11_14 = (((A>>11)&1) & ((B>>14)&1));
  S_11_15 = (((A>>11)&1) & ((B>>15)&1));
  S_12_13 = S_11_14^(((A>>12)&1) & ((B>>13)&1));
  C_12_13 = S_11_14&(((A>>12)&1) & ((B>>13)&1));
  S_12_14 = S_11_15^(((A>>12)&1) & ((B>>14)&1));
  C_12_14 = S_11_15&(((A>>12)&1) & ((B>>14)&1));
  S_12_15 = (((A>>12)&1) & ((B>>15)&1));
  S_13_12 = S_12_13^(((A>>13)&1) & ((B>>12)&1));
  C_13_12 = S_12_13&(((A>>13)&1) & ((B>>12)&1));
  tmp = S_12_14^C_12_13;
  S_13_13 = tmp^(((A>>13)&1) & ((B>>13)&1));
  C_13_13 = (tmp&(((A>>13)&1) & ((B>>13)&1)))|(S_12_14&C_12_13);
  tmp = S_12_15^C_12_14;
  S_13_14 = tmp^(((A>>13)&1) & ((B>>14)&1));
  C_13_14 = (tmp&(((A>>13)&1) & ((B>>14)&1)))|(S_12_15&C_12_14);
  S_13_15 = (((A>>13)&1) & ((B>>15)&1));
  S_14_11 = S_13_12^(((A>>14)&1) & ((B>>11)&1));
  C_14_11 = S_13_12&(((A>>14)&1) & ((B>>11)&1));
  tmp = S_13_13^C_13_12;
  S_14_12 = tmp^(((A>>14)&1) & ((B>>12)&1));
  C_14_12 = (tmp&(((A>>14)&1) & ((B>>12)&1)))|(S_13_13&C_13_12);
  tmp = S_13_14^C_13_13;
  S_14_13 = tmp^(((A>>14)&1) & ((B>>13)&1));
  C_14_13 = (tmp&(((A>>14)&1) & ((B>>13)&1)))|(S_13_14&C_13_13);
  tmp = S_13_15^C_13_14;
  S_14_14 = tmp^(((A>>14)&1) & ((B>>14)&1));
  C_14_14 = (tmp&(((A>>14)&1) & ((B>>14)&1)))|(S_13_15&C_13_14);
  S_14_15 = (((A>>14)&1) & ((B>>15)&1));
  S_15_10 = S_14_11^(((A>>15)&1) & ((B>>10)&1));
  C_15_10 = S_14_11&(((A>>15)&1) & ((B>>10)&1));
  tmp = S_14_12^C_14_11;
  S_15_11 = tmp^(((A>>15)&1) & ((B>>11)&1));
  C_15_11 = (tmp&(((A>>15)&1) & ((B>>11)&1)))|(S_14_12&C_14_11);
  tmp = S_14_13^C_14_12;
  S_15_12 = tmp^(((A>>15)&1) & ((B>>12)&1));
  C_15_12 = (tmp&(((A>>15)&1) & ((B>>12)&1)))|(S_14_13&C_14_12);
  tmp = S_14_14^C_14_13;
  S_15_13 = tmp^(((A>>15)&1) & ((B>>13)&1));
  C_15_13 = (tmp&(((A>>15)&1) & ((B>>13)&1)))|(S_14_14&C_14_13);
  tmp = S_14_15^C_14_14;
  S_15_14 = tmp^(((A>>15)&1) & ((B>>14)&1));
  C_15_14 = (tmp&(((A>>15)&1) & ((B>>14)&1)))|(S_14_15&C_14_14);
  S_15_15 = (((A>>15)&1) & ((B>>15)&1));
  S_16_9 = S_15_10;
  S_16_10 = S_15_11^C_15_10;
  C_16_10 = S_15_11&C_15_10;
  tmp = S_15_12^C_16_10;
  S_16_11 = tmp^C_15_11;
  C_16_11 = (tmp&C_15_11)|(S_15_12&C_16_10);
  tmp = S_15_13^C_16_11;
  S_16_12 = tmp^C_15_12;
  C_16_12 = (tmp&C_15_12)|(S_15_13&C_16_11);
  tmp = S_15_14^C_16_12;
  S_16_13 = tmp^C_15_13;
  C_16_13 = (tmp&C_15_13)|(S_15_14&C_16_12);
  tmp = S_15_15^C_16_13;
  S_16_14 = tmp^C_15_14;
  C_16_14 = (tmp&C_15_14)|(S_15_15&C_16_13);
  S_16_15 = C_16_14;
  P = 0;
  P |= (S_16_9 & 1) << 25;
  P |= (S_16_10 & 1) << 26;
  P |= (S_16_11 & 1) << 27;
  P |= (S_16_12 & 1) << 28;
  P |= (S_16_13 & 1) << 29;
  P |= (S_16_14 & 1) << 30;
  P |= (S_16_15 & 1) << 31;
  return P;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.0027 %
// MAE = 114688 
// WCE% = 0.011 %
// WCE = 458753 
// WCRE% = 100.00 %
// EP% = 90.62 %
// MRE% = 0.058 %
// MSE = 25053.861e6 
// PDK45_PWR = 1.859 mW
// PDK45_AREA = 2332.4 um2
// PDK45_DELAY = 2.84 ns



uint32_t evoapproxlib::evoapprox_t::mul16u_GZ7(uint16_t A, uint16_t B)
{
  uint32_t P, P_;
  uint16_t tmp, C_10_0,C_10_1,C_10_10,C_10_11,C_10_12,C_10_13,C_10_14,C_10_2,C_10_3,C_10_4,C_10_5,C_10_6,C_10_7,C_10_8,C_10_9,C_11_0,C_11_1,C_11_10,C_11_11,C_11_12,C_11_13,C_11_14,C_11_2,C_11_3,C_11_4,C_11_5,C_11_6,C_11_7,C_11_8,C_11_9,C_12_0,C_12_1,C_12_10,C_12_11,C_12_12,C_12_13,C_12_14,C_12_2,C_12_3,C_12_4,C_12_5,C_12_6,C_12_7,C_12_8,C_12_9,C_13_0,C_13_1,C_13_10,C_13_11,C_13_12,C_13_13,C_13_14,C_13_2,C_13_3,C_13_4,C_13_5,C_13_6,C_13_7,C_13_8,C_13_9,C_14_0,C_14_1,C_14_10,C_14_11,C_14_12,C_14_13,C_14_14,C_14_2,C_14_3,C_14_4,C_14_5,C_14_6,C_14_7,C_14_8,C_14_9,C_15_0,C_15_1,C_15_10,C_15_11,C_15_12,C_15_13,C_15_14,C_15_2,C_15_3,C_15_4,C_15_5,C_15_6,C_15_7,C_15_8,C_15_9,C_16_0,C_16_1,C_16_10,C_16_11,C_16_12,C_16_13,C_16_14,C_16_2,C_16_3,C_16_4,C_16_5,C_16_6,C_16_7,C_16_8,C_16_9,C_4_0,C_4_1,C_4_10,C_4_11,C_4_12,C_4_13,C_4_14,C_4_2,C_4_3,C_4_4,C_4_5,C_4_6,C_4_7,C_4_8,C_4_9,C_5_0,C_5_1,C_5_10,C_5_11,C_5_12,C_5_13,C_5_14,C_5_2,C_5_3,C_5_4,C_5_5,C_5_6,C_5_7,C_5_8,C_5_9,C_6_0,C_6_1,C_6_10,C_6_11,C_6_12,C_6_13,C_6_14,C_6_2,C_6_3,C_6_4,C_6_5,C_6_6,C_6_7,C_6_8,C_6_9,C_7_0,C_7_1,C_7_10,C_7_11,C_7_12,C_7_13,C_7_14,C_7_2,C_7_3,C_7_4,C_7_5,C_7_6,C_7_7,C_7_8,C_7_9,C_8_0,C_8_1,C_8_10,C_8_11,C_8_12,C_8_13,C_8_14,C_8_2,C_8_3,C_8_4,C_8_5,C_8_6,C_8_7,C_8_8,C_8_9,C_9_0,C_9_1,C_9_10,C_9_11,C_9_12,C_9_13,C_9_14,C_9_2,C_9_3,C_9_4,C_9_5,C_9_6,C_9_7,C_9_8,C_9_9,S_10_0,S_10_1,S_10_10,S_10_11,S_10_12,S_10_13,S_10_14,S_10_15,S_10_2,S_10_3,S_10_4,S_10_5,S_10_6,S_10_7,S_10_8,S_10_9,S_11_0,S_11_1,S_11_10,S_11_11,S_11_12,S_11_13,S_11_14,S_11_15,S_11_2,S_11_3,S_11_4,S_11_5,S_11_6,S_11_7,S_11_8,S_11_9,S_12_0,S_12_1,S_12_10,S_12_11,S_12_12,S_12_13,S_12_14,S_12_15,S_12_2,S_12_3,S_12_4,S_12_5,S_12_6,S_12_7,S_12_8,S_12_9,S_13_0,S_13_1,S_13_10,S_13_11,S_13_12,S_13_13,S_13_14,S_13_15,S_13_2,S_13_3,S_13_4,S_13_5,S_13_6,S_13_7,S_13_8,S_13_9,S_14_0,S_14_1,S_14_10,S_14_11,S_14_12,S_14_13,S_14_14,S_14_15,S_14_2,S_14_3,S_14_4,S_14_5,S_14_6,S_14_7,S_14_8,S_14_9,S_15_0,S_15_1,S_15_10,S_15_11,S_15_12,S_15_13,S_15_14,S_15_15,S_15_2,S_15_3,S_15_4,S_15_5,S_15_6,S_15_7,S_15_8,S_15_9,S_16_0,S_16_1,S_16_10,S_16_11,S_16_12,S_16_13,S_16_14,S_16_15,S_16_2,S_16_3,S_16_4,S_16_5,S_16_6,S_16_7,S_16_8,S_16_9,S_3_1,S_3_10,S_3_11,S_3_12,S_3_13,S_3_14,S_3_15,S_3_2,S_3_3,S_3_4,S_3_5,S_3_6,S_3_7,S_3_8,S_3_9,S_4_0,S_4_1,S_4_10,S_4_11,S_4_12,S_4_13,S_4_14,S_4_15,S_4_2,S_4_3,S_4_4,S_4_5,S_4_6,S_4_7,S_4_8,S_4_9,S_5_0,S_5_1,S_5_10,S_5_11,S_5_12,S_5_13,S_5_14,S_5_15,S_5_2,S_5_3,S_5_4,S_5_5,S_5_6,S_5_7,S_5_8,S_5_9,S_6_0,S_6_1,S_6_10,S_6_11,S_6_12,S_6_13,S_6_14,S_6_15,S_6_2,S_6_3,S_6_4,S_6_5,S_6_6,S_6_7,S_6_8,S_6_9,S_7_0,S_7_1,S_7_10,S_7_11,S_7_12,S_7_13,S_7_14,S_7_15,S_7_2,S_7_3,S_7_4,S_7_5,S_7_6,S_7_7,S_7_8,S_7_9,S_8_0,S_8_1,S_8_10,S_8_11,S_8_12,S_8_13,S_8_14,S_8_15,S_8_2,S_8_3,S_8_4,S_8_5,S_8_6,S_8_7,S_8_8,S_8_9,S_9_0,S_9_1,S_9_10,S_9_11,S_9_12,S_9_13,S_9_14,S_9_15,S_9_2,S_9_3,S_9_4,S_9_5,S_9_6,S_9_7,S_9_8,S_9_9;
  S_3_1 = (((A>>3)&1) & ((B>>1)&1));
  S_3_2 = (((A>>3)&1) & ((B>>2)&1));
  S_3_3 = (((A>>3)&1) & ((B>>3)&1));
  S_3_4 = (((A>>3)&1) & ((B>>4)&1));
  S_3_5 = (((A>>3)&1) & ((B>>5)&1));
  S_3_6 = (((A>>3)&1) & ((B>>6)&1));
  S_3_7 = (((A>>3)&1) & ((B>>7)&1));
  S_3_8 = (((A>>3)&1) & ((B>>8)&1));
  S_3_9 = (((A>>3)&1) & ((B>>9)&1));
  S_3_10 = (((A>>3)&1) & ((B>>10)&1));
  S_3_11 = (((A>>3)&1) & ((B>>11)&1));
  S_3_12 = (((A>>3)&1) & ((B>>12)&1));
  S_3_13 = (((A>>3)&1) & ((B>>13)&1));
  S_3_14 = (((A>>3)&1) & ((B>>14)&1));
  S_3_15 = (((A>>3)&1) & ((B>>15)&1));
  S_4_0 = S_3_1^(((A>>4)&1) & ((B>>0)&1));
  C_4_0 = S_3_1&(((A>>4)&1) & ((B>>0)&1));
  S_4_1 = S_3_2^(((A>>4)&1) & ((B>>1)&1));
  C_4_1 = S_3_2&(((A>>4)&1) & ((B>>1)&1));
  S_4_2 = S_3_3^(((A>>4)&1) & ((B>>2)&1));
  C_4_2 = S_3_3&(((A>>4)&1) & ((B>>2)&1));
  S_4_3 = S_3_4^(((A>>4)&1) & ((B>>3)&1));
  C_4_3 = S_3_4&(((A>>4)&1) & ((B>>3)&1));
  S_4_4 = S_3_5^(((A>>4)&1) & ((B>>4)&1));
  C_4_4 = S_3_5&(((A>>4)&1) & ((B>>4)&1));
  S_4_5 = S_3_6^(((A>>4)&1) & ((B>>5)&1));
  C_4_5 = S_3_6&(((A>>4)&1) & ((B>>5)&1));
  S_4_6 = S_3_7^(((A>>4)&1) & ((B>>6)&1));
  C_4_6 = S_3_7&(((A>>4)&1) & ((B>>6)&1));
  S_4_7 = S_3_8^(((A>>4)&1) & ((B>>7)&1));
  C_4_7 = S_3_8&(((A>>4)&1) & ((B>>7)&1));
  S_4_8 = S_3_9^(((A>>4)&1) & ((B>>8)&1));
  C_4_8 = S_3_9&(((A>>4)&1) & ((B>>8)&1));
  S_4_9 = S_3_10^(((A>>4)&1) & ((B>>9)&1));
  C_4_9 = S_3_10&(((A>>4)&1) & ((B>>9)&1));
  S_4_10 = S_3_11^(((A>>4)&1) & ((B>>10)&1));
  C_4_10 = S_3_11&(((A>>4)&1) & ((B>>10)&1));
  S_4_11 = S_3_12^(((A>>4)&1) & ((B>>11)&1));
  C_4_11 = S_3_12&(((A>>4)&1) & ((B>>11)&1));
  S_4_12 = S_3_13^(((A>>4)&1) & ((B>>12)&1));
  C_4_12 = S_3_13&(((A>>4)&1) & ((B>>12)&1));
  S_4_13 = S_3_14^(((A>>4)&1) & ((B>>13)&1));
  C_4_13 = S_3_14&(((A>>4)&1) & ((B>>13)&1));
  S_4_14 = S_3_15^(((A>>4)&1) & ((B>>14)&1));
  C_4_14 = S_3_15&(((A>>4)&1) & ((B>>14)&1));
  S_4_15 = (((A>>4)&1) & ((B>>15)&1));
  tmp = S_4_1^C_4_0;
  S_5_0 = tmp^(((A>>5)&1) & ((B>>0)&1));
  C_5_0 = (tmp&(((A>>5)&1) & ((B>>0)&1)))|(S_4_1&C_4_0);
  tmp = S_4_2^C_4_1;
  S_5_1 = tmp^(((A>>5)&1) & ((B>>1)&1));
  C_5_1 = (tmp&(((A>>5)&1) & ((B>>1)&1)))|(S_4_2&C_4_1);
  tmp = S_4_3^C_4_2;
  S_5_2 = tmp^(((A>>5)&1) & ((B>>2)&1));
  C_5_2 = (tmp&(((A>>5)&1) & ((B>>2)&1)))|(S_4_3&C_4_2);
  tmp = S_4_4^C_4_3;
  S_5_3 = tmp^(((A>>5)&1) & ((B>>3)&1));
  C_5_3 = (tmp&(((A>>5)&1) & ((B>>3)&1)))|(S_4_4&C_4_3);
  tmp = S_4_5^C_4_4;
  S_5_4 = tmp^(((A>>5)&1) & ((B>>4)&1));
  C_5_4 = (tmp&(((A>>5)&1) & ((B>>4)&1)))|(S_4_5&C_4_4);
  tmp = S_4_6^C_4_5;
  S_5_5 = tmp^(((A>>5)&1) & ((B>>5)&1));
  C_5_5 = (tmp&(((A>>5)&1) & ((B>>5)&1)))|(S_4_6&C_4_5);
  tmp = S_4_7^C_4_6;
  S_5_6 = tmp^(((A>>5)&1) & ((B>>6)&1));
  C_5_6 = (tmp&(((A>>5)&1) & ((B>>6)&1)))|(S_4_7&C_4_6);
  tmp = S_4_8^C_4_7;
  S_5_7 = tmp^(((A>>5)&1) & ((B>>7)&1));
  C_5_7 = (tmp&(((A>>5)&1) & ((B>>7)&1)))|(S_4_8&C_4_7);
  tmp = S_4_9^C_4_8;
  S_5_8 = tmp^(((A>>5)&1) & ((B>>8)&1));
  C_5_8 = (tmp&(((A>>5)&1) & ((B>>8)&1)))|(S_4_9&C_4_8);
  tmp = S_4_10^C_4_9;
  S_5_9 = tmp^(((A>>5)&1) & ((B>>9)&1));
  C_5_9 = (tmp&(((A>>5)&1) & ((B>>9)&1)))|(S_4_10&C_4_9);
  tmp = S_4_11^C_4_10;
  S_5_10 = tmp^(((A>>5)&1) & ((B>>10)&1));
  C_5_10 = (tmp&(((A>>5)&1) & ((B>>10)&1)))|(S_4_11&C_4_10);
  tmp = S_4_12^C_4_11;
  S_5_11 = tmp^(((A>>5)&1) & ((B>>11)&1));
  C_5_11 = (tmp&(((A>>5)&1) & ((B>>11)&1)))|(S_4_12&C_4_11);
  tmp = S_4_13^C_4_12;
  S_5_12 = tmp^(((A>>5)&1) & ((B>>12)&1));
  C_5_12 = (tmp&(((A>>5)&1) & ((B>>12)&1)))|(S_4_13&C_4_12);
  tmp = S_4_14^C_4_13;
  S_5_13 = tmp^(((A>>5)&1) & ((B>>13)&1));
  C_5_13 = (tmp&(((A>>5)&1) & ((B>>13)&1)))|(S_4_14&C_4_13);
  tmp = S_4_15^C_4_14;
  S_5_14 = tmp^(((A>>5)&1) & ((B>>14)&1));
  C_5_14 = (tmp&(((A>>5)&1) & ((B>>14)&1)))|(S_4_15&C_4_14);
  S_5_15 = (((A>>5)&1) & ((B>>15)&1));
  tmp = S_5_1^C_5_0;
  S_6_0 = tmp^(((A>>6)&1) & ((B>>0)&1));
  C_6_0 = (tmp&(((A>>6)&1) & ((B>>0)&1)))|(S_5_1&C_5_0);
  tmp = S_5_2^C_5_1;
  S_6_1 = tmp^(((A>>6)&1) & ((B>>1)&1));
  C_6_1 = (tmp&(((A>>6)&1) & ((B>>1)&1)))|(S_5_2&C_5_1);
  tmp = S_5_3^C_5_2;
  S_6_2 = tmp^(((A>>6)&1) & ((B>>2)&1));
  C_6_2 = (tmp&(((A>>6)&1) & ((B>>2)&1)))|(S_5_3&C_5_2);
  tmp = S_5_4^C_5_3;
  S_6_3 = tmp^(((A>>6)&1) & ((B>>3)&1));
  C_6_3 = (tmp&(((A>>6)&1) & ((B>>3)&1)))|(S_5_4&C_5_3);
  tmp = S_5_5^C_5_4;
  S_6_4 = tmp^(((A>>6)&1) & ((B>>4)&1));
  C_6_4 = (tmp&(((A>>6)&1) & ((B>>4)&1)))|(S_5_5&C_5_4);
  tmp = S_5_6^C_5_5;
  S_6_5 = tmp^(((A>>6)&1) & ((B>>5)&1));
  C_6_5 = (tmp&(((A>>6)&1) & ((B>>5)&1)))|(S_5_6&C_5_5);
  tmp = S_5_7^C_5_6;
  S_6_6 = tmp^(((A>>6)&1) & ((B>>6)&1));
  C_6_6 = (tmp&(((A>>6)&1) & ((B>>6)&1)))|(S_5_7&C_5_6);
  tmp = S_5_8^C_5_7;
  S_6_7 = tmp^(((A>>6)&1) & ((B>>7)&1));
  C_6_7 = (tmp&(((A>>6)&1) & ((B>>7)&1)))|(S_5_8&C_5_7);
  tmp = S_5_9^C_5_8;
  S_6_8 = tmp^(((A>>6)&1) & ((B>>8)&1));
  C_6_8 = (tmp&(((A>>6)&1) & ((B>>8)&1)))|(S_5_9&C_5_8);
  tmp = S_5_10^C_5_9;
  S_6_9 = tmp^(((A>>6)&1) & ((B>>9)&1));
  C_6_9 = (tmp&(((A>>6)&1) & ((B>>9)&1)))|(S_5_10&C_5_9);
  tmp = S_5_11^C_5_10;
  S_6_10 = tmp^(((A>>6)&1) & ((B>>10)&1));
  C_6_10 = (tmp&(((A>>6)&1) & ((B>>10)&1)))|(S_5_11&C_5_10);
  tmp = S_5_12^C_5_11;
  S_6_11 = tmp^(((A>>6)&1) & ((B>>11)&1));
  C_6_11 = (tmp&(((A>>6)&1) & ((B>>11)&1)))|(S_5_12&C_5_11);
  tmp = S_5_13^C_5_12;
  S_6_12 = tmp^(((A>>6)&1) & ((B>>12)&1));
  C_6_12 = (tmp&(((A>>6)&1) & ((B>>12)&1)))|(S_5_13&C_5_12);
  tmp = S_5_14^C_5_13;
  S_6_13 = tmp^(((A>>6)&1) & ((B>>13)&1));
  C_6_13 = (tmp&(((A>>6)&1) & ((B>>13)&1)))|(S_5_14&C_5_13);
  tmp = S_5_15^C_5_14;
  S_6_14 = tmp^(((A>>6)&1) & ((B>>14)&1));
  C_6_14 = (tmp&(((A>>6)&1) & ((B>>14)&1)))|(S_5_15&C_5_14);
  S_6_15 = (((A>>6)&1) & ((B>>15)&1));
  tmp = S_6_1^C_6_0;
  S_7_0 = tmp^(((A>>7)&1) & ((B>>0)&1));
  C_7_0 = (tmp&(((A>>7)&1) & ((B>>0)&1)))|(S_6_1&C_6_0);
  tmp = S_6_2^C_6_1;
  S_7_1 = tmp^(((A>>7)&1) & ((B>>1)&1));
  C_7_1 = (tmp&(((A>>7)&1) & ((B>>1)&1)))|(S_6_2&C_6_1);
  tmp = S_6_3^C_6_2;
  S_7_2 = tmp^(((A>>7)&1) & ((B>>2)&1));
  C_7_2 = (tmp&(((A>>7)&1) & ((B>>2)&1)))|(S_6_3&C_6_2);
  tmp = S_6_4^C_6_3;
  S_7_3 = tmp^(((A>>7)&1) & ((B>>3)&1));
  C_7_3 = (tmp&(((A>>7)&1) & ((B>>3)&1)))|(S_6_4&C_6_3);
  tmp = S_6_5^C_6_4;
  S_7_4 = tmp^(((A>>7)&1) & ((B>>4)&1));
  C_7_4 = (tmp&(((A>>7)&1) & ((B>>4)&1)))|(S_6_5&C_6_4);
  tmp = S_6_6^C_6_5;
  S_7_5 = tmp^(((A>>7)&1) & ((B>>5)&1));
  C_7_5 = (tmp&(((A>>7)&1) & ((B>>5)&1)))|(S_6_6&C_6_5);
  tmp = S_6_7^C_6_6;
  S_7_6 = tmp^(((A>>7)&1) & ((B>>6)&1));
  C_7_6 = (tmp&(((A>>7)&1) & ((B>>6)&1)))|(S_6_7&C_6_6);
  tmp = S_6_8^C_6_7;
  S_7_7 = tmp^(((A>>7)&1) & ((B>>7)&1));
  C_7_7 = (tmp&(((A>>7)&1) & ((B>>7)&1)))|(S_6_8&C_6_7);
  tmp = S_6_9^C_6_8;
  S_7_8 = tmp^(((A>>7)&1) & ((B>>8)&1));
  C_7_8 = (tmp&(((A>>7)&1) & ((B>>8)&1)))|(S_6_9&C_6_8);
  tmp = S_6_10^C_6_9;
  S_7_9 = tmp^(((A>>7)&1) & ((B>>9)&1));
  C_7_9 = (tmp&(((A>>7)&1) & ((B>>9)&1)))|(S_6_10&C_6_9);
  tmp = S_6_11^C_6_10;
  S_7_10 = tmp^(((A>>7)&1) & ((B>>10)&1));
  C_7_10 = (tmp&(((A>>7)&1) & ((B>>10)&1)))|(S_6_11&C_6_10);
  tmp = S_6_12^C_6_11;
  S_7_11 = tmp^(((A>>7)&1) & ((B>>11)&1));
  C_7_11 = (tmp&(((A>>7)&1) & ((B>>11)&1)))|(S_6_12&C_6_11);
  tmp = S_6_13^C_6_12;
  S_7_12 = tmp^(((A>>7)&1) & ((B>>12)&1));
  C_7_12 = (tmp&(((A>>7)&1) & ((B>>12)&1)))|(S_6_13&C_6_12);
  tmp = S_6_14^C_6_13;
  S_7_13 = tmp^(((A>>7)&1) & ((B>>13)&1));
  C_7_13 = (tmp&(((A>>7)&1) & ((B>>13)&1)))|(S_6_14&C_6_13);
  tmp = S_6_15^C_6_14;
  S_7_14 = tmp^(((A>>7)&1) & ((B>>14)&1));
  C_7_14 = (tmp&(((A>>7)&1) & ((B>>14)&1)))|(S_6_15&C_6_14);
  S_7_15 = (((A>>7)&1) & ((B>>15)&1));
  tmp = S_7_1^C_7_0;
  S_8_0 = tmp^(((A>>8)&1) & ((B>>0)&1));
  C_8_0 = (tmp&(((A>>8)&1) & ((B>>0)&1)))|(S_7_1&C_7_0);
  tmp = S_7_2^C_7_1;
  S_8_1 = tmp^(((A>>8)&1) & ((B>>1)&1));
  C_8_1 = (tmp&(((A>>8)&1) & ((B>>1)&1)))|(S_7_2&C_7_1);
  tmp = S_7_3^C_7_2;
  S_8_2 = tmp^(((A>>8)&1) & ((B>>2)&1));
  C_8_2 = (tmp&(((A>>8)&1) & ((B>>2)&1)))|(S_7_3&C_7_2);
  tmp = S_7_4^C_7_3;
  S_8_3 = tmp^(((A>>8)&1) & ((B>>3)&1));
  C_8_3 = (tmp&(((A>>8)&1) & ((B>>3)&1)))|(S_7_4&C_7_3);
  tmp = S_7_5^C_7_4;
  S_8_4 = tmp^(((A>>8)&1) & ((B>>4)&1));
  C_8_4 = (tmp&(((A>>8)&1) & ((B>>4)&1)))|(S_7_5&C_7_4);
  tmp = S_7_6^C_7_5;
  S_8_5 = tmp^(((A>>8)&1) & ((B>>5)&1));
  C_8_5 = (tmp&(((A>>8)&1) & ((B>>5)&1)))|(S_7_6&C_7_5);
  tmp = S_7_7^C_7_6;
  S_8_6 = tmp^(((A>>8)&1) & ((B>>6)&1));
  C_8_6 = (tmp&(((A>>8)&1) & ((B>>6)&1)))|(S_7_7&C_7_6);
  tmp = S_7_8^C_7_7;
  S_8_7 = tmp^(((A>>8)&1) & ((B>>7)&1));
  C_8_7 = (tmp&(((A>>8)&1) & ((B>>7)&1)))|(S_7_8&C_7_7);
  tmp = S_7_9^C_7_8;
  S_8_8 = tmp^(((A>>8)&1) & ((B>>8)&1));
  C_8_8 = (tmp&(((A>>8)&1) & ((B>>8)&1)))|(S_7_9&C_7_8);
  tmp = S_7_10^C_7_9;
  S_8_9 = tmp^(((A>>8)&1) & ((B>>9)&1));
  C_8_9 = (tmp&(((A>>8)&1) & ((B>>9)&1)))|(S_7_10&C_7_9);
  tmp = S_7_11^C_7_10;
  S_8_10 = tmp^(((A>>8)&1) & ((B>>10)&1));
  C_8_10 = (tmp&(((A>>8)&1) & ((B>>10)&1)))|(S_7_11&C_7_10);
  tmp = S_7_12^C_7_11;
  S_8_11 = tmp^(((A>>8)&1) & ((B>>11)&1));
  C_8_11 = (tmp&(((A>>8)&1) & ((B>>11)&1)))|(S_7_12&C_7_11);
  tmp = S_7_13^C_7_12;
  S_8_12 = tmp^(((A>>8)&1) & ((B>>12)&1));
  C_8_12 = (tmp&(((A>>8)&1) & ((B>>12)&1)))|(S_7_13&C_7_12);
  tmp = S_7_14^C_7_13;
  S_8_13 = tmp^(((A>>8)&1) & ((B>>13)&1));
  C_8_13 = (tmp&(((A>>8)&1) & ((B>>13)&1)))|(S_7_14&C_7_13);
  tmp = S_7_15^C_7_14;
  S_8_14 = tmp^(((A>>8)&1) & ((B>>14)&1));
  C_8_14 = (tmp&(((A>>8)&1) & ((B>>14)&1)))|(S_7_15&C_7_14);
  S_8_15 = (((A>>8)&1) & ((B>>15)&1));
  tmp = S_8_1^C_8_0;
  S_9_0 = tmp^(((A>>9)&1) & ((B>>0)&1));
  C_9_0 = (tmp&(((A>>9)&1) & ((B>>0)&1)))|(S_8_1&C_8_0);
  tmp = S_8_2^C_8_1;
  S_9_1 = tmp^(((A>>9)&1) & ((B>>1)&1));
  C_9_1 = (tmp&(((A>>9)&1) & ((B>>1)&1)))|(S_8_2&C_8_1);
  tmp = S_8_3^C_8_2;
  S_9_2 = tmp^(((A>>9)&1) & ((B>>2)&1));
  C_9_2 = (tmp&(((A>>9)&1) & ((B>>2)&1)))|(S_8_3&C_8_2);
  tmp = S_8_4^C_8_3;
  S_9_3 = tmp^(((A>>9)&1) & ((B>>3)&1));
  C_9_3 = (tmp&(((A>>9)&1) & ((B>>3)&1)))|(S_8_4&C_8_3);
  tmp = S_8_5^C_8_4;
  S_9_4 = tmp^(((A>>9)&1) & ((B>>4)&1));
  C_9_4 = (tmp&(((A>>9)&1) & ((B>>4)&1)))|(S_8_5&C_8_4);
  tmp = S_8_6^C_8_5;
  S_9_5 = tmp^(((A>>9)&1) & ((B>>5)&1));
  C_9_5 = (tmp&(((A>>9)&1) & ((B>>5)&1)))|(S_8_6&C_8_5);
  tmp = S_8_7^C_8_6;
  S_9_6 = tmp^(((A>>9)&1) & ((B>>6)&1));
  C_9_6 = (tmp&(((A>>9)&1) & ((B>>6)&1)))|(S_8_7&C_8_6);
  tmp = S_8_8^C_8_7;
  S_9_7 = tmp^(((A>>9)&1) & ((B>>7)&1));
  C_9_7 = (tmp&(((A>>9)&1) & ((B>>7)&1)))|(S_8_8&C_8_7);
  tmp = S_8_9^C_8_8;
  S_9_8 = tmp^(((A>>9)&1) & ((B>>8)&1));
  C_9_8 = (tmp&(((A>>9)&1) & ((B>>8)&1)))|(S_8_9&C_8_8);
  tmp = S_8_10^C_8_9;
  S_9_9 = tmp^(((A>>9)&1) & ((B>>9)&1));
  C_9_9 = (tmp&(((A>>9)&1) & ((B>>9)&1)))|(S_8_10&C_8_9);
  tmp = S_8_11^C_8_10;
  S_9_10 = tmp^(((A>>9)&1) & ((B>>10)&1));
  C_9_10 = (tmp&(((A>>9)&1) & ((B>>10)&1)))|(S_8_11&C_8_10);
  tmp = S_8_12^C_8_11;
  S_9_11 = tmp^(((A>>9)&1) & ((B>>11)&1));
  C_9_11 = (tmp&(((A>>9)&1) & ((B>>11)&1)))|(S_8_12&C_8_11);
  tmp = S_8_13^C_8_12;
  S_9_12 = tmp^(((A>>9)&1) & ((B>>12)&1));
  C_9_12 = (tmp&(((A>>9)&1) & ((B>>12)&1)))|(S_8_13&C_8_12);
  tmp = S_8_14^C_8_13;
  S_9_13 = tmp^(((A>>9)&1) & ((B>>13)&1));
  C_9_13 = (tmp&(((A>>9)&1) & ((B>>13)&1)))|(S_8_14&C_8_13);
  tmp = S_8_15^C_8_14;
  S_9_14 = tmp^(((A>>9)&1) & ((B>>14)&1));
  C_9_14 = (tmp&(((A>>9)&1) & ((B>>14)&1)))|(S_8_15&C_8_14);
  S_9_15 = (((A>>9)&1) & ((B>>15)&1));
  tmp = S_9_1^C_9_0;
  S_10_0 = tmp^(((A>>10)&1) & ((B>>0)&1));
  C_10_0 = (tmp&(((A>>10)&1) & ((B>>0)&1)))|(S_9_1&C_9_0);
  tmp = S_9_2^C_9_1;
  S_10_1 = tmp^(((A>>10)&1) & ((B>>1)&1));
  C_10_1 = (tmp&(((A>>10)&1) & ((B>>1)&1)))|(S_9_2&C_9_1);
  tmp = S_9_3^C_9_2;
  S_10_2 = tmp^(((A>>10)&1) & ((B>>2)&1));
  C_10_2 = (tmp&(((A>>10)&1) & ((B>>2)&1)))|(S_9_3&C_9_2);
  tmp = S_9_4^C_9_3;
  S_10_3 = tmp^(((A>>10)&1) & ((B>>3)&1));
  C_10_3 = (tmp&(((A>>10)&1) & ((B>>3)&1)))|(S_9_4&C_9_3);
  tmp = S_9_5^C_9_4;
  S_10_4 = tmp^(((A>>10)&1) & ((B>>4)&1));
  C_10_4 = (tmp&(((A>>10)&1) & ((B>>4)&1)))|(S_9_5&C_9_4);
  tmp = S_9_6^C_9_5;
  S_10_5 = tmp^(((A>>10)&1) & ((B>>5)&1));
  C_10_5 = (tmp&(((A>>10)&1) & ((B>>5)&1)))|(S_9_6&C_9_5);
  tmp = S_9_7^C_9_6;
  S_10_6 = tmp^(((A>>10)&1) & ((B>>6)&1));
  C_10_6 = (tmp&(((A>>10)&1) & ((B>>6)&1)))|(S_9_7&C_9_6);
  tmp = S_9_8^C_9_7;
  S_10_7 = tmp^(((A>>10)&1) & ((B>>7)&1));
  C_10_7 = (tmp&(((A>>10)&1) & ((B>>7)&1)))|(S_9_8&C_9_7);
  tmp = S_9_9^C_9_8;
  S_10_8 = tmp^(((A>>10)&1) & ((B>>8)&1));
  C_10_8 = (tmp&(((A>>10)&1) & ((B>>8)&1)))|(S_9_9&C_9_8);
  tmp = S_9_10^C_9_9;
  S_10_9 = tmp^(((A>>10)&1) & ((B>>9)&1));
  C_10_9 = (tmp&(((A>>10)&1) & ((B>>9)&1)))|(S_9_10&C_9_9);
  tmp = S_9_11^C_9_10;
  S_10_10 = tmp^(((A>>10)&1) & ((B>>10)&1));
  C_10_10 = (tmp&(((A>>10)&1) & ((B>>10)&1)))|(S_9_11&C_9_10);
  tmp = S_9_12^C_9_11;
  S_10_11 = tmp^(((A>>10)&1) & ((B>>11)&1));
  C_10_11 = (tmp&(((A>>10)&1) & ((B>>11)&1)))|(S_9_12&C_9_11);
  tmp = S_9_13^C_9_12;
  S_10_12 = tmp^(((A>>10)&1) & ((B>>12)&1));
  C_10_12 = (tmp&(((A>>10)&1) & ((B>>12)&1)))|(S_9_13&C_9_12);
  tmp = S_9_14^C_9_13;
  S_10_13 = tmp^(((A>>10)&1) & ((B>>13)&1));
  C_10_13 = (tmp&(((A>>10)&1) & ((B>>13)&1)))|(S_9_14&C_9_13);
  tmp = S_9_15^C_9_14;
  S_10_14 = tmp^(((A>>10)&1) & ((B>>14)&1));
  C_10_14 = (tmp&(((A>>10)&1) & ((B>>14)&1)))|(S_9_15&C_9_14);
  S_10_15 = (((A>>10)&1) & ((B>>15)&1));
  tmp = S_10_1^C_10_0;
  S_11_0 = tmp^(((A>>11)&1) & ((B>>0)&1));
  C_11_0 = (tmp&(((A>>11)&1) & ((B>>0)&1)))|(S_10_1&C_10_0);
  tmp = S_10_2^C_10_1;
  S_11_1 = tmp^(((A>>11)&1) & ((B>>1)&1));
  C_11_1 = (tmp&(((A>>11)&1) & ((B>>1)&1)))|(S_10_2&C_10_1);
  tmp = S_10_3^C_10_2;
  S_11_2 = tmp^(((A>>11)&1) & ((B>>2)&1));
  C_11_2 = (tmp&(((A>>11)&1) & ((B>>2)&1)))|(S_10_3&C_10_2);
  tmp = S_10_4^C_10_3;
  S_11_3 = tmp^(((A>>11)&1) & ((B>>3)&1));
  C_11_3 = (tmp&(((A>>11)&1) & ((B>>3)&1)))|(S_10_4&C_10_3);
  tmp = S_10_5^C_10_4;
  S_11_4 = tmp^(((A>>11)&1) & ((B>>4)&1));
  C_11_4 = (tmp&(((A>>11)&1) & ((B>>4)&1)))|(S_10_5&C_10_4);
  tmp = S_10_6^C_10_5;
  S_11_5 = tmp^(((A>>11)&1) & ((B>>5)&1));
  C_11_5 = (tmp&(((A>>11)&1) & ((B>>5)&1)))|(S_10_6&C_10_5);
  tmp = S_10_7^C_10_6;
  S_11_6 = tmp^(((A>>11)&1) & ((B>>6)&1));
  C_11_6 = (tmp&(((A>>11)&1) & ((B>>6)&1)))|(S_10_7&C_10_6);
  tmp = S_10_8^C_10_7;
  S_11_7 = tmp^(((A>>11)&1) & ((B>>7)&1));
  C_11_7 = (tmp&(((A>>11)&1) & ((B>>7)&1)))|(S_10_8&C_10_7);
  tmp = S_10_9^C_10_8;
  S_11_8 = tmp^(((A>>11)&1) & ((B>>8)&1));
  C_11_8 = (tmp&(((A>>11)&1) & ((B>>8)&1)))|(S_10_9&C_10_8);
  tmp = S_10_10^C_10_9;
  S_11_9 = tmp^(((A>>11)&1) & ((B>>9)&1));
  C_11_9 = (tmp&(((A>>11)&1) & ((B>>9)&1)))|(S_10_10&C_10_9);
  tmp = S_10_11^C_10_10;
  S_11_10 = tmp^(((A>>11)&1) & ((B>>10)&1));
  C_11_10 = (tmp&(((A>>11)&1) & ((B>>10)&1)))|(S_10_11&C_10_10);
  tmp = S_10_12^C_10_11;
  S_11_11 = tmp^(((A>>11)&1) & ((B>>11)&1));
  C_11_11 = (tmp&(((A>>11)&1) & ((B>>11)&1)))|(S_10_12&C_10_11);
  tmp = S_10_13^C_10_12;
  S_11_12 = tmp^(((A>>11)&1) & ((B>>12)&1));
  C_11_12 = (tmp&(((A>>11)&1) & ((B>>12)&1)))|(S_10_13&C_10_12);
  tmp = S_10_14^C_10_13;
  S_11_13 = tmp^(((A>>11)&1) & ((B>>13)&1));
  C_11_13 = (tmp&(((A>>11)&1) & ((B>>13)&1)))|(S_10_14&C_10_13);
  tmp = S_10_15^C_10_14;
  S_11_14 = tmp^(((A>>11)&1) & ((B>>14)&1));
  C_11_14 = (tmp&(((A>>11)&1) & ((B>>14)&1)))|(S_10_15&C_10_14);
  S_11_15 = (((A>>11)&1) & ((B>>15)&1));
  tmp = S_11_1^C_11_0;
  S_12_0 = tmp^(((A>>12)&1) & ((B>>0)&1));
  C_12_0 = (tmp&(((A>>12)&1) & ((B>>0)&1)))|(S_11_1&C_11_0);
  tmp = S_11_2^C_11_1;
  S_12_1 = tmp^(((A>>12)&1) & ((B>>1)&1));
  C_12_1 = (tmp&(((A>>12)&1) & ((B>>1)&1)))|(S_11_2&C_11_1);
  tmp = S_11_3^C_11_2;
  S_12_2 = tmp^(((A>>12)&1) & ((B>>2)&1));
  C_12_2 = (tmp&(((A>>12)&1) & ((B>>2)&1)))|(S_11_3&C_11_2);
  tmp = S_11_4^C_11_3;
  S_12_3 = tmp^(((A>>12)&1) & ((B>>3)&1));
  C_12_3 = (tmp&(((A>>12)&1) & ((B>>3)&1)))|(S_11_4&C_11_3);
  tmp = S_11_5^C_11_4;
  S_12_4 = tmp^(((A>>12)&1) & ((B>>4)&1));
  C_12_4 = (tmp&(((A>>12)&1) & ((B>>4)&1)))|(S_11_5&C_11_4);
  tmp = S_11_6^C_11_5;
  S_12_5 = tmp^(((A>>12)&1) & ((B>>5)&1));
  C_12_5 = (tmp&(((A>>12)&1) & ((B>>5)&1)))|(S_11_6&C_11_5);
  tmp = S_11_7^C_11_6;
  S_12_6 = tmp^(((A>>12)&1) & ((B>>6)&1));
  C_12_6 = (tmp&(((A>>12)&1) & ((B>>6)&1)))|(S_11_7&C_11_6);
  tmp = S_11_8^C_11_7;
  S_12_7 = tmp^(((A>>12)&1) & ((B>>7)&1));
  C_12_7 = (tmp&(((A>>12)&1) & ((B>>7)&1)))|(S_11_8&C_11_7);
  tmp = S_11_9^C_11_8;
  S_12_8 = tmp^(((A>>12)&1) & ((B>>8)&1));
  C_12_8 = (tmp&(((A>>12)&1) & ((B>>8)&1)))|(S_11_9&C_11_8);
  tmp = S_11_10^C_11_9;
  S_12_9 = tmp^(((A>>12)&1) & ((B>>9)&1));
  C_12_9 = (tmp&(((A>>12)&1) & ((B>>9)&1)))|(S_11_10&C_11_9);
  tmp = S_11_11^C_11_10;
  S_12_10 = tmp^(((A>>12)&1) & ((B>>10)&1));
  C_12_10 = (tmp&(((A>>12)&1) & ((B>>10)&1)))|(S_11_11&C_11_10);
  tmp = S_11_12^C_11_11;
  S_12_11 = tmp^(((A>>12)&1) & ((B>>11)&1));
  C_12_11 = (tmp&(((A>>12)&1) & ((B>>11)&1)))|(S_11_12&C_11_11);
  tmp = S_11_13^C_11_12;
  S_12_12 = tmp^(((A>>12)&1) & ((B>>12)&1));
  C_12_12 = (tmp&(((A>>12)&1) & ((B>>12)&1)))|(S_11_13&C_11_12);
  tmp = S_11_14^C_11_13;
  S_12_13 = tmp^(((A>>12)&1) & ((B>>13)&1));
  C_12_13 = (tmp&(((A>>12)&1) & ((B>>13)&1)))|(S_11_14&C_11_13);
  tmp = S_11_15^C_11_14;
  S_12_14 = tmp^(((A>>12)&1) & ((B>>14)&1));
  C_12_14 = (tmp&(((A>>12)&1) & ((B>>14)&1)))|(S_11_15&C_11_14);
  S_12_15 = (((A>>12)&1) & ((B>>15)&1));
  tmp = S_12_1^C_12_0;
  S_13_0 = tmp^(((A>>13)&1) & ((B>>0)&1));
  C_13_0 = (tmp&(((A>>13)&1) & ((B>>0)&1)))|(S_12_1&C_12_0);
  tmp = S_12_2^C_12_1;
  S_13_1 = tmp^(((A>>13)&1) & ((B>>1)&1));
  C_13_1 = (tmp&(((A>>13)&1) & ((B>>1)&1)))|(S_12_2&C_12_1);
  tmp = S_12_3^C_12_2;
  S_13_2 = tmp^(((A>>13)&1) & ((B>>2)&1));
  C_13_2 = (tmp&(((A>>13)&1) & ((B>>2)&1)))|(S_12_3&C_12_2);
  tmp = S_12_4^C_12_3;
  S_13_3 = tmp^(((A>>13)&1) & ((B>>3)&1));
  C_13_3 = (tmp&(((A>>13)&1) & ((B>>3)&1)))|(S_12_4&C_12_3);
  tmp = S_12_5^C_12_4;
  S_13_4 = tmp^(((A>>13)&1) & ((B>>4)&1));
  C_13_4 = (tmp&(((A>>13)&1) & ((B>>4)&1)))|(S_12_5&C_12_4);
  tmp = S_12_6^C_12_5;
  S_13_5 = tmp^(((A>>13)&1) & ((B>>5)&1));
  C_13_5 = (tmp&(((A>>13)&1) & ((B>>5)&1)))|(S_12_6&C_12_5);
  tmp = S_12_7^C_12_6;
  S_13_6 = tmp^(((A>>13)&1) & ((B>>6)&1));
  C_13_6 = (tmp&(((A>>13)&1) & ((B>>6)&1)))|(S_12_7&C_12_6);
  tmp = S_12_8^C_12_7;
  S_13_7 = tmp^(((A>>13)&1) & ((B>>7)&1));
  C_13_7 = (tmp&(((A>>13)&1) & ((B>>7)&1)))|(S_12_8&C_12_7);
  tmp = S_12_9^C_12_8;
  S_13_8 = tmp^(((A>>13)&1) & ((B>>8)&1));
  C_13_8 = (tmp&(((A>>13)&1) & ((B>>8)&1)))|(S_12_9&C_12_8);
  tmp = S_12_10^C_12_9;
  S_13_9 = tmp^(((A>>13)&1) & ((B>>9)&1));
  C_13_9 = (tmp&(((A>>13)&1) & ((B>>9)&1)))|(S_12_10&C_12_9);
  tmp = S_12_11^C_12_10;
  S_13_10 = tmp^(((A>>13)&1) & ((B>>10)&1));
  C_13_10 = (tmp&(((A>>13)&1) & ((B>>10)&1)))|(S_12_11&C_12_10);
  tmp = S_12_12^C_12_11;
  S_13_11 = tmp^(((A>>13)&1) & ((B>>11)&1));
  C_13_11 = (tmp&(((A>>13)&1) & ((B>>11)&1)))|(S_12_12&C_12_11);
  tmp = S_12_13^C_12_12;
  S_13_12 = tmp^(((A>>13)&1) & ((B>>12)&1));
  C_13_12 = (tmp&(((A>>13)&1) & ((B>>12)&1)))|(S_12_13&C_12_12);
  tmp = S_12_14^C_12_13;
  S_13_13 = tmp^(((A>>13)&1) & ((B>>13)&1));
  C_13_13 = (tmp&(((A>>13)&1) & ((B>>13)&1)))|(S_12_14&C_12_13);
  tmp = S_12_15^C_12_14;
  S_13_14 = tmp^(((A>>13)&1) & ((B>>14)&1));
  C_13_14 = (tmp&(((A>>13)&1) & ((B>>14)&1)))|(S_12_15&C_12_14);
  S_13_15 = (((A>>13)&1) & ((B>>15)&1));
  tmp = S_13_1^C_13_0;
  S_14_0 = tmp^(((A>>14)&1) & ((B>>0)&1));
  C_14_0 = (tmp&(((A>>14)&1) & ((B>>0)&1)))|(S_13_1&C_13_0);
  tmp = S_13_2^C_13_1;
  S_14_1 = tmp^(((A>>14)&1) & ((B>>1)&1));
  C_14_1 = (tmp&(((A>>14)&1) & ((B>>1)&1)))|(S_13_2&C_13_1);
  tmp = S_13_3^C_13_2;
  S_14_2 = tmp^(((A>>14)&1) & ((B>>2)&1));
  C_14_2 = (tmp&(((A>>14)&1) & ((B>>2)&1)))|(S_13_3&C_13_2);
  tmp = S_13_4^C_13_3;
  S_14_3 = tmp^(((A>>14)&1) & ((B>>3)&1));
  C_14_3 = (tmp&(((A>>14)&1) & ((B>>3)&1)))|(S_13_4&C_13_3);
  tmp = S_13_5^C_13_4;
  S_14_4 = tmp^(((A>>14)&1) & ((B>>4)&1));
  C_14_4 = (tmp&(((A>>14)&1) & ((B>>4)&1)))|(S_13_5&C_13_4);
  tmp = S_13_6^C_13_5;
  S_14_5 = tmp^(((A>>14)&1) & ((B>>5)&1));
  C_14_5 = (tmp&(((A>>14)&1) & ((B>>5)&1)))|(S_13_6&C_13_5);
  tmp = S_13_7^C_13_6;
  S_14_6 = tmp^(((A>>14)&1) & ((B>>6)&1));
  C_14_6 = (tmp&(((A>>14)&1) & ((B>>6)&1)))|(S_13_7&C_13_6);
  tmp = S_13_8^C_13_7;
  S_14_7 = tmp^(((A>>14)&1) & ((B>>7)&1));
  C_14_7 = (tmp&(((A>>14)&1) & ((B>>7)&1)))|(S_13_8&C_13_7);
  tmp = S_13_9^C_13_8;
  S_14_8 = tmp^(((A>>14)&1) & ((B>>8)&1));
  C_14_8 = (tmp&(((A>>14)&1) & ((B>>8)&1)))|(S_13_9&C_13_8);
  tmp = S_13_10^C_13_9;
  S_14_9 = tmp^(((A>>14)&1) & ((B>>9)&1));
  C_14_9 = (tmp&(((A>>14)&1) & ((B>>9)&1)))|(S_13_10&C_13_9);
  tmp = S_13_11^C_13_10;
  S_14_10 = tmp^(((A>>14)&1) & ((B>>10)&1));
  C_14_10 = (tmp&(((A>>14)&1) & ((B>>10)&1)))|(S_13_11&C_13_10);
  tmp = S_13_12^C_13_11;
  S_14_11 = tmp^(((A>>14)&1) & ((B>>11)&1));
  C_14_11 = (tmp&(((A>>14)&1) & ((B>>11)&1)))|(S_13_12&C_13_11);
  tmp = S_13_13^C_13_12;
  S_14_12 = tmp^(((A>>14)&1) & ((B>>12)&1));
  C_14_12 = (tmp&(((A>>14)&1) & ((B>>12)&1)))|(S_13_13&C_13_12);
  tmp = S_13_14^C_13_13;
  S_14_13 = tmp^(((A>>14)&1) & ((B>>13)&1));
  C_14_13 = (tmp&(((A>>14)&1) & ((B>>13)&1)))|(S_13_14&C_13_13);
  tmp = S_13_15^C_13_14;
  S_14_14 = tmp^(((A>>14)&1) & ((B>>14)&1));
  C_14_14 = (tmp&(((A>>14)&1) & ((B>>14)&1)))|(S_13_15&C_13_14);
  S_14_15 = (((A>>14)&1) & ((B>>15)&1));
  tmp = S_14_1^C_14_0;
  S_15_0 = tmp^(((A>>15)&1) & ((B>>0)&1));
  C_15_0 = (tmp&(((A>>15)&1) & ((B>>0)&1)))|(S_14_1&C_14_0);
  tmp = S_14_2^C_14_1;
  S_15_1 = tmp^(((A>>15)&1) & ((B>>1)&1));
  C_15_1 = (tmp&(((A>>15)&1) & ((B>>1)&1)))|(S_14_2&C_14_1);
  tmp = S_14_3^C_14_2;
  S_15_2 = tmp^(((A>>15)&1) & ((B>>2)&1));
  C_15_2 = (tmp&(((A>>15)&1) & ((B>>2)&1)))|(S_14_3&C_14_2);
  tmp = S_14_4^C_14_3;
  S_15_3 = tmp^(((A>>15)&1) & ((B>>3)&1));
  C_15_3 = (tmp&(((A>>15)&1) & ((B>>3)&1)))|(S_14_4&C_14_3);
  tmp = S_14_5^C_14_4;
  S_15_4 = tmp^(((A>>15)&1) & ((B>>4)&1));
  C_15_4 = (tmp&(((A>>15)&1) & ((B>>4)&1)))|(S_14_5&C_14_4);
  tmp = S_14_6^C_14_5;
  S_15_5 = tmp^(((A>>15)&1) & ((B>>5)&1));
  C_15_5 = (tmp&(((A>>15)&1) & ((B>>5)&1)))|(S_14_6&C_14_5);
  tmp = S_14_7^C_14_6;
  S_15_6 = tmp^(((A>>15)&1) & ((B>>6)&1));
  C_15_6 = (tmp&(((A>>15)&1) & ((B>>6)&1)))|(S_14_7&C_14_6);
  tmp = S_14_8^C_14_7;
  S_15_7 = tmp^(((A>>15)&1) & ((B>>7)&1));
  C_15_7 = (tmp&(((A>>15)&1) & ((B>>7)&1)))|(S_14_8&C_14_7);
  tmp = S_14_9^C_14_8;
  S_15_8 = tmp^(((A>>15)&1) & ((B>>8)&1));
  C_15_8 = (tmp&(((A>>15)&1) & ((B>>8)&1)))|(S_14_9&C_14_8);
  tmp = S_14_10^C_14_9;
  S_15_9 = tmp^(((A>>15)&1) & ((B>>9)&1));
  C_15_9 = (tmp&(((A>>15)&1) & ((B>>9)&1)))|(S_14_10&C_14_9);
  tmp = S_14_11^C_14_10;
  S_15_10 = tmp^(((A>>15)&1) & ((B>>10)&1));
  C_15_10 = (tmp&(((A>>15)&1) & ((B>>10)&1)))|(S_14_11&C_14_10);
  tmp = S_14_12^C_14_11;
  S_15_11 = tmp^(((A>>15)&1) & ((B>>11)&1));
  C_15_11 = (tmp&(((A>>15)&1) & ((B>>11)&1)))|(S_14_12&C_14_11);
  tmp = S_14_13^C_14_12;
  S_15_12 = tmp^(((A>>15)&1) & ((B>>12)&1));
  C_15_12 = (tmp&(((A>>15)&1) & ((B>>12)&1)))|(S_14_13&C_14_12);
  tmp = S_14_14^C_14_13;
  S_15_13 = tmp^(((A>>15)&1) & ((B>>13)&1));
  C_15_13 = (tmp&(((A>>15)&1) & ((B>>13)&1)))|(S_14_14&C_14_13);
  tmp = S_14_15^C_14_14;
  S_15_14 = tmp^(((A>>15)&1) & ((B>>14)&1));
  C_15_14 = (tmp&(((A>>15)&1) & ((B>>14)&1)))|(S_14_15&C_14_14);
  S_15_15 = (((A>>15)&1) & ((B>>15)&1));
  S_16_0 = S_15_1^C_15_0;
  C_16_0 = S_15_1&C_15_0;
  tmp = S_15_2^C_16_0;
  S_16_1 = tmp^C_15_1;
  C_16_1 = (tmp&C_15_1)|(S_15_2&C_16_0);
  tmp = S_15_3^C_16_1;
  S_16_2 = tmp^C_15_2;
  C_16_2 = (tmp&C_15_2)|(S_15_3&C_16_1);
  tmp = S_15_4^C_16_2;
  S_16_3 = tmp^C_15_3;
  C_16_3 = (tmp&C_15_3)|(S_15_4&C_16_2);
  tmp = S_15_5^C_16_3;
  S_16_4 = tmp^C_15_4;
  C_16_4 = (tmp&C_15_4)|(S_15_5&C_16_3);
  tmp = S_15_6^C_16_4;
  S_16_5 = tmp^C_15_5;
  C_16_5 = (tmp&C_15_5)|(S_15_6&C_16_4);
  tmp = S_15_7^C_16_5;
  S_16_6 = tmp^C_15_6;
  C_16_6 = (tmp&C_15_6)|(S_15_7&C_16_5);
  tmp = S_15_8^C_16_6;
  S_16_7 = tmp^C_15_7;
  C_16_7 = (tmp&C_15_7)|(S_15_8&C_16_6);
  tmp = S_15_9^C_16_7;
  S_16_8 = tmp^C_15_8;
  C_16_8 = (tmp&C_15_8)|(S_15_9&C_16_7);
  tmp = S_15_10^C_16_8;
  S_16_9 = tmp^C_15_9;
  C_16_9 = (tmp&C_15_9)|(S_15_10&C_16_8);
  tmp = S_15_11^C_16_9;
  S_16_10 = tmp^C_15_10;
  C_16_10 = (tmp&C_15_10)|(S_15_11&C_16_9);
  tmp = S_15_12^C_16_10;
  S_16_11 = tmp^C_15_11;
  C_16_11 = (tmp&C_15_11)|(S_15_12&C_16_10);
  tmp = S_15_13^C_16_11;
  S_16_12 = tmp^C_15_12;
  C_16_12 = (tmp&C_15_12)|(S_15_13&C_16_11);
  tmp = S_15_14^C_16_12;
  S_16_13 = tmp^C_15_13;
  C_16_13 = (tmp&C_15_13)|(S_15_14&C_16_12);
  tmp = S_15_15^C_16_13;
  S_16_14 = tmp^C_15_14;
  C_16_14 = (tmp&C_15_14)|(S_15_15&C_16_13);
  S_16_15 = C_16_14;
  P = 0;
  P |= (S_4_0 & 1) << 4;
  P |= (S_5_0 & 1) << 5;
  P |= (S_6_0 & 1) << 6;
  P |= (S_7_0 & 1) << 7;
  P |= (S_8_0 & 1) << 8;
  P |= (S_9_0 & 1) << 9;
  P |= (S_10_0 & 1) << 10;
  P |= (S_11_0 & 1) << 11;
  P |= (S_12_0 & 1) << 12;
  P |= (S_13_0 & 1) << 13;
  P |= (S_14_0 & 1) << 14;
  P |= (S_15_0 & 1) << 15;
  P |= (S_16_0 & 1) << 16;
  P |= (S_16_1 & 1) << 17;
  P |= (S_16_2 & 1) << 18;
  P |= (S_16_3 & 1) << 19;
  P |= (S_16_4 & 1) << 20;
  P |= (S_16_5 & 1) << 21;
  P |= (S_16_6 & 1) << 22;
  P |= (S_16_7 & 1) << 23;
  P |= (S_16_8 & 1) << 24;
  P |= (S_16_9 & 1) << 25;
  P |= (S_16_10 & 1) << 26;
  P |= (S_16_11 & 1) << 27;
  P |= (S_16_12 & 1) << 28;
  P |= (S_16_13 & 1) << 29;
  P |= (S_16_14 & 1) << 30;
  P |= (S_16_15 & 1) << 31;
  return P;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 0.0000045 %
// MAE = 195 
// WCE% = 0.000021 %
// WCE = 907 
// WCRE% = 100.00 %
// EP% = 98.71 %
// MRE% = 0.0005 %
// MSE = 58920 
// PDK45_PWR = 1.952 mW
// PDK45_AREA = 2800.8 um2
// PDK45_DELAY = 2.79 ns



uint64_t mult8_cgp14zr_wc907_rcam(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_65, dout_72, dout_73, dout_101, dout_102, dout_106, dout_107, dout_108, dout_109, dout_110, dout_116, dout_117, dout_118, dout_146, dout_148, dout_149, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_160, dout_161, dout_162, dout_163, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_203, dout_205, dout_206, dout_207, dout_208, dout_222, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_249, dout_250, dout_251, dout_252, dout_253, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_306, dout_307, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_65=((B >> 7)&1)&((A >> 1)&1);
   dout_72=((B >> 6)&1)&((A >> 2)&1);
   dout_73=((B >> 7)&1)&((A >> 2)&1);
   dout_101=((B >> 5)&1)|((B >> 6)&1);
   dout_102=((B >> 5)&1)&dout_72;
   dout_106=dout_65^dout_73;
   dout_107=dout_65&((A >> 2)&1);
   dout_108=((B >> 7)&1)&dout_102;
   dout_109=dout_106^dout_102;
   dout_110=dout_107|dout_108;
   dout_116=dout_101&((A >> 3)&1);
   dout_117=((B >> 6)&1)&((A >> 3)&1);
   dout_118=((B >> 7)&1)&((A >> 3)&1);
   dout_146=dout_109^dout_117;
   dout_148=dout_106&dout_116;
   dout_149=dout_146^dout_116;
   dout_150=dout_117|dout_148;
   dout_151=dout_110^dout_118;
   dout_152=dout_107&((A >> 3)&1);
   dout_153=dout_118&dout_150;
   dout_154=dout_151^dout_150;
   dout_155=dout_152|dout_153;
   dout_160=((B >> 4)&1)&((A >> 4)&1);
   dout_161=((B >> 5)&1)&((A >> 4)&1);
   dout_162=((B >> 6)&1)&((A >> 4)&1);
   dout_163=((B >> 7)&1)&((A >> 4)&1);
   dout_186=dout_149^dout_161;
   dout_187=dout_149&dout_161;
   dout_188=dout_186&dout_160;
   dout_189=dout_186^dout_160;
   dout_190=dout_187|dout_188;
   dout_191=dout_154^dout_162;
   dout_192=dout_154&dout_162;
   dout_193=dout_191&dout_190;
   dout_194=dout_191^dout_190;
   dout_195=dout_192|dout_193;
   dout_196=dout_155^dout_163;
   dout_197=dout_155&((A >> 4)&1);
   dout_198=((B >> 7)&1)&dout_195;
   dout_199=dout_196^dout_195;
   dout_200=dout_197|dout_198;
   dout_203=((B >> 2)&1)&((A >> 6)&1);
   dout_205=((B >> 4)&1)&((A >> 5)&1);
   dout_206=((B >> 5)&1)&((A >> 5)&1);
   dout_207=((B >> 6)&1)&((A >> 5)&1);
   dout_208=((B >> 7)&1)&((A >> 5)&1);
   dout_222=((B >> 3)&1)&((A >> 5)&1);
   dout_226=dout_189^dout_205;
   dout_227=dout_189&dout_205;
   dout_228=dout_226&dout_222;
   dout_229=dout_226^dout_222;
   dout_230=dout_227|dout_228;
   dout_231=dout_194^dout_206;
   dout_232=dout_194&dout_206;
   dout_233=dout_231&dout_230;
   dout_234=dout_231^dout_230;
   dout_235=dout_232|dout_233;
   dout_236=dout_199^dout_207;
   dout_237=dout_199&dout_207;
   dout_238=dout_236&dout_235;
   dout_239=dout_236^dout_235;
   dout_240=dout_237|dout_238;
   dout_241=dout_200^dout_208;
   dout_242=dout_200&((A >> 5)&1);
   dout_243=dout_208&dout_240;
   dout_244=dout_241^dout_240;
   dout_245=dout_242|dout_243;
   dout_249=((B >> 3)&1)&((A >> 6)&1);
   dout_250=((B >> 4)&1)&((A >> 6)&1);
   dout_251=((B >> 5)&1)&((A >> 6)&1);
   dout_252=((B >> 6)&1)&((A >> 6)&1);
   dout_253=((B >> 7)&1)&((A >> 6)&1);
   dout_266=dout_229^dout_249;
   dout_267=dout_229&dout_249;
   dout_268=dout_266&dout_203;
   dout_269=dout_266^dout_203;
   dout_270=dout_267|dout_268;
   dout_271=dout_234^dout_250;
   dout_272=dout_234&dout_250;
   dout_273=dout_271&dout_270;
   dout_274=dout_271^dout_270;
   dout_275=dout_272|dout_273;
   dout_276=dout_239^dout_251;
   dout_277=dout_239&dout_251;
   dout_278=dout_276&dout_275;
   dout_279=dout_276^dout_275;
   dout_280=dout_277|dout_278;
   dout_281=dout_244^dout_252;
   dout_282=dout_244&dout_252;
   dout_283=dout_281&dout_280;
   dout_284=dout_281^dout_280;
   dout_285=dout_282|dout_283;
   dout_286=dout_245^dout_253;
   dout_287=dout_245&((A >> 6)&1);
   dout_288=((B >> 7)&1)&dout_285;
   dout_289=dout_286^dout_285;
   dout_290=dout_287|dout_288;
   dout_292=((B >> 1)&1)&((A >> 7)&1);
   dout_293=((B >> 2)&1)&((A >> 7)&1);
   dout_294=((B >> 3)&1)&((A >> 7)&1);
   dout_295=((B >> 4)&1)&((A >> 7)&1);
   dout_296=((B >> 5)&1)&((A >> 7)&1);
   dout_297=((B >> 6)&1)&((A >> 7)&1);
   dout_298=((B >> 7)&1)&((A >> 7)&1);
   dout_306=dout_269^dout_293;
   dout_307=dout_269&dout_293;
   dout_311=dout_274^dout_294;
   dout_312=dout_274&dout_294;
   dout_313=dout_311&dout_307;
   dout_314=dout_311^dout_307;
   dout_315=dout_312|dout_313;
   dout_316=dout_279^dout_295;
   dout_317=dout_279&dout_295;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_284^dout_296;
   dout_322=dout_284&dout_296;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_289^dout_297;
   dout_327=dout_289&dout_297;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_290^dout_298;
   dout_332=dout_290&((A >> 7)&1);
   dout_333=((B >> 7)&1)&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_249&1) << 0;
   O |= (dout_293&1) << 1;
   O |= (dout_312&1) << 2;
   O |= (0&1) << 3;
   O |= (dout_317&1) << 4;
   O |= (0&1) << 5;
   O |= (dout_72&1) << 6;
   O |= (dout_292&1) << 7;
   O |= (dout_292&1) << 8;
   O |= (dout_306&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

uint32_t evoapproxlib::evoapprox_t::mul16u_DAE (uint16_t a, uint16_t b) {
    static uint16_t * cacheLL = NULL;
    static uint16_t * cacheLH = NULL;
    static uint16_t * cacheHL = NULL;
    static uint16_t * cacheHH = NULL;
    int fillData = cacheLL == NULL || cacheLH == NULL || cacheHL == NULL || cacheHH == NULL;

    if(!cacheLL) cacheLL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheLH) cacheLH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHL) cacheHL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHH) cacheHH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    
    if(fillData) {
        for(int i = 0; i < 256; i++) {
            for(int j = 0; j < 256; j++) {
                cacheLL[i * 256 + j] = mult8_cgp14zr_wc907_rcam(i, j);
                cacheLH[i * 256 + j] = trun8_tam00b(i, j);
                cacheHL[i * 256 + j] = mul8_364(i, j);
                cacheHH[i * 256 + j] = trun8_tam00b(i, j);
            }
        }
    }

    uint32_t opt = 0;

    opt += (uint32_t)cacheLL[(a & 0xFF       ) * 256 + (b & 0xFF             )];
    opt += (uint32_t)cacheLH[(a & 0xFF       ) * 256 + ((b >> 8) & 0xFF      )] << 8;
    opt += (uint32_t)cacheHL[((a >> 8) & 0xFF) * 256 + (b & 0xFF             )] << 8;
    opt += (uint32_t)cacheHH[((a >> 8) & 0xFF) * 256 + ((b >> 8) & 0xFF      )] << 16;

    return opt;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.011 %
// MAE = 463046 
// WCE% = 0.058 %
// WCE = 2472129 
// WCRE% = 1500.00 %
// EP% = 100.00 %
// MRE% = 0.46 %
// MSE = 32818.049e7 
// PDK45_PWR = 0.791 mW
// PDK45_AREA = 1284.9 um2
// PDK45_DELAY = 2.03 ns



uint64_t mult8_cgp14_wc3_csamcsa(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_65, dout_66, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_87, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_98, dout_99, dout_100, dout_101, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110, dout_111, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143, dout_144, dout_145, dout_146, dout_147, dout_148, dout_149, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_171, dout_172, dout_173, dout_174, dout_175, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_183, dout_184, dout_185, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_335, dout_336, dout_338, dout_339, dout_340, dout_341, dout_344, dout_345, dout_348, dout_349, dout_350, dout_352, dout_353, dout_354, dout_355, dout_356, dout_357, dout_358, dout_361, dout_362;   int avg=0;

   dout_18=((B >> 2)&1)&((A >> 0)&1);
   dout_19=((B >> 3)&1)&((A >> 0)&1);
   dout_20=((B >> 4)&1)&((A >> 0)&1);
   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&dout_21;
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_25=((B >> 1)&1)&((A >> 1)&1);
   dout_26=((B >> 2)&1)&((A >> 1)&1);
   dout_27=((B >> 3)&1)&((A >> 1)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_32=((A >> 0)&1)&((B >> 6)&1);
   dout_34=dout_18^dout_25;
   dout_35=dout_18&dout_25;
   dout_36=dout_19^dout_26;
   dout_37=dout_19&dout_26;
   dout_38=dout_20^dout_27;
   dout_39=dout_20&dout_27;
   dout_40=dout_21^dout_28;
   dout_41=dout_21&dout_28;
   dout_42=dout_32^dout_29;
   dout_43=dout_22&((A >> 1)&1);
   dout_44=dout_23^dout_30;
   dout_45=dout_31&dout_32;
   dout_46=((B >> 0)&1)&((A >> 2)&1);
   dout_47=((B >> 1)&1)&((A >> 2)&1);
   dout_48=((B >> 2)&1)&((A >> 2)&1);
   dout_49=((B >> 3)&1)&((A >> 2)&1);
   dout_50=((B >> 4)&1)&((A >> 2)&1);
   dout_51=((B >> 5)&1)&((A >> 2)&1);
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_54=dout_34^dout_46;
   dout_55=dout_34&dout_46;
   dout_59=dout_36^dout_47;
   dout_60=dout_36&dout_47;
   dout_61=dout_59&dout_35;
   dout_62=dout_59^dout_35;
   dout_63=dout_60|dout_61;
   dout_64=dout_38^dout_48;
   dout_65=dout_38&dout_48;
   dout_66=dout_64&dout_37;
   dout_67=dout_64^dout_37;
   dout_68=dout_65|dout_66;
   dout_69=dout_40^dout_49;
   dout_70=dout_40&dout_49;
   dout_71=dout_69&dout_39;
   dout_72=dout_69^dout_39;
   dout_73=dout_70|dout_71;
   dout_74=dout_42^dout_50;
   dout_75=dout_42&dout_50;
   dout_76=dout_74&dout_41;
   dout_77=dout_74^dout_41;
   dout_78=dout_75|dout_76;
   dout_79=dout_44^dout_51;
   dout_80=dout_44&dout_51;
   dout_81=dout_79&dout_43;
   dout_82=dout_79^dout_43;
   dout_83=dout_80|dout_81;
   dout_84=dout_31^dout_52;
   dout_85=dout_31&dout_52;
   dout_87=dout_84^dout_45;
   dout_88=dout_85|dout_45;
   dout_89=((B >> 0)&1)&((A >> 3)&1);
   dout_90=((B >> 1)&1)&((A >> 3)&1);
   dout_91=((B >> 2)&1)&((A >> 3)&1);
   dout_92=((B >> 3)&1)&((A >> 3)&1);
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_97=dout_62^dout_89;
   dout_98=dout_62&dout_89;
   dout_99=dout_97&dout_55;
   dout_100=dout_97^dout_55;
   dout_101=dout_98|dout_99;
   dout_102=dout_67^dout_90;
   dout_103=dout_67&dout_90;
   dout_104=dout_102&dout_63;
   dout_105=dout_102^dout_63;
   dout_106=dout_103|dout_104;
   dout_107=dout_72^dout_91;
   dout_108=dout_72&dout_91;
   dout_109=dout_107&dout_68;
   dout_110=dout_107^dout_68;
   dout_111=dout_108|dout_109;
   dout_112=dout_77^dout_92;
   dout_113=dout_77&dout_92;
   dout_114=dout_112&dout_73;
   dout_115=dout_112^dout_73;
   dout_116=dout_113|dout_114;
   dout_117=dout_82^dout_93;
   dout_118=dout_82&dout_93;
   dout_119=dout_117&dout_78;
   dout_120=dout_117^dout_78;
   dout_121=dout_118|dout_119;
   dout_122=dout_87^dout_94;
   dout_123=dout_87&dout_94;
   dout_124=dout_122&dout_83;
   dout_125=dout_122^dout_83;
   dout_126=dout_123|dout_124;
   dout_127=dout_53^dout_95;
   dout_128=dout_53&dout_95;
   dout_129=dout_127&dout_88;
   dout_130=dout_127^dout_88;
   dout_131=dout_128|dout_129;
   dout_132=((B >> 0)&1)&((A >> 4)&1);
   dout_133=((B >> 1)&1)&((A >> 4)&1);
   dout_134=((B >> 2)&1)&((A >> 4)&1);
   dout_135=((B >> 3)&1)&((A >> 4)&1);
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_140=dout_105^dout_132;
   dout_141=dout_105&dout_132;
   dout_142=dout_140&dout_101;
   dout_143=dout_140^dout_101;
   dout_144=dout_141|dout_142;
   dout_145=dout_110^dout_133;
   dout_146=dout_110&dout_133;
   dout_147=dout_145&dout_106;
   dout_148=dout_145^dout_106;
   dout_149=dout_146|dout_147;
   dout_150=dout_115^dout_134;
   dout_151=dout_115&dout_134;
   dout_152=dout_150&dout_111;
   dout_153=dout_150^dout_111;
   dout_154=dout_151|dout_152;
   dout_155=dout_120^dout_135;
   dout_156=dout_120&dout_135;
   dout_157=dout_155&dout_116;
   dout_158=dout_155^dout_116;
   dout_159=dout_156|dout_157;
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_121;
   dout_163=dout_160^dout_121;
   dout_164=dout_161|dout_162;
   dout_165=dout_130^dout_137;
   dout_166=dout_130&dout_137;
   dout_167=dout_165&dout_126;
   dout_168=dout_165^dout_126;
   dout_169=dout_166|dout_167;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_172=dout_170&dout_131;
   dout_173=dout_170^dout_131;
   dout_174=dout_171|dout_172;
   dout_175=((B >> 0)&1)&((A >> 5)&1);
   dout_176=((B >> 1)&1)&((A >> 5)&1);
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_183=dout_148^dout_175;
   dout_184=dout_148&dout_175;
   dout_185=dout_183&dout_144;
   dout_186=dout_183^dout_144;
   dout_187=dout_184|dout_185;
   dout_188=dout_153^dout_176;
   dout_189=dout_153&dout_176;
   dout_190=dout_188&dout_149;
   dout_191=dout_188^dout_149;
   dout_192=dout_189|dout_190;
   dout_193=dout_158^dout_177;
   dout_194=dout_158&dout_177;
   dout_195=dout_193&dout_154;
   dout_196=dout_193^dout_154;
   dout_197=dout_194|dout_195;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_159;
   dout_201=dout_198^dout_159;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_218=((B >> 0)&1)&((A >> 6)&1);
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_226=dout_191^dout_218;
   dout_227=dout_191&dout_218;
   dout_228=dout_226&dout_187;
   dout_229=dout_226^dout_187;
   dout_230=dout_227|dout_228;
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_233=dout_231&dout_192;
   dout_234=dout_231^dout_192;
   dout_235=dout_232|dout_233;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_197;
   dout_239=dout_236^dout_197;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_234^dout_261;
   dout_270=dout_234&dout_261;
   dout_271=dout_269&dout_230;
   dout_272=dout_269^dout_230;
   dout_273=dout_270|dout_271;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_235;
   dout_277=dout_274^dout_235;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_304=dout_277^dout_273;
   dout_305=dout_277&dout_273;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_320^0xFFFFFFFFFFFFFFFFU;
   dout_322=dout_297&dout_293;
   dout_323=dout_302^dout_298;
   dout_324=dout_302&dout_298;
   dout_325=dout_323&dout_322;
   dout_326=dout_323^dout_322;
   dout_327=dout_324|dout_325;
   dout_328=dout_268^dout_303;
   dout_329=((A >> 7)&1)&dout_303;
   dout_330=dout_328&dout_327;
   dout_331=dout_328^dout_327;
   dout_332=dout_329|dout_330;
   dout_333=dout_297^dout_293;
   dout_335=dout_333^0xFFFFFFFFFFFFFFFFU;
   dout_336=dout_322|dout_333;
   dout_338=dout_320^0xFFFFFFFFFFFFFFFFU;
   dout_339=dout_323&dout_336;
   dout_340=dout_323^dout_336;
   dout_341=dout_324|dout_339;
   dout_344=dout_328&dout_341;
   dout_345=dout_328^dout_341;
   dout_348=dout_333&dout_338;
   dout_349=dout_335&dout_320;
   dout_350=dout_348|dout_349;
   dout_352=dout_326&dout_321;
   dout_353=dout_340&dout_320;
   dout_354=dout_352|dout_353;
   dout_355=dout_320^0xFFFFFFFFFFFFFFFFU;
   dout_356=dout_331&dout_355;
   dout_357=dout_345&dout_320;
   dout_358=dout_356|dout_357;
   dout_361=dout_344&dout_320;
   dout_362=dout_332|dout_361;

   O = 0;
   O |= (dout_265&1) << 0;
   O |= (dout_25&1) << 1;
   O |= (dout_54&1) << 2;
   O |= (dout_100&1) << 3;
   O |= (dout_143&1) << 4;
   O |= (dout_186&1) << 5;
   O |= (dout_229&1) << 6;
   O |= (dout_272&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_350&1) << 12;
   O |= (dout_354&1) << 13;
   O |= (dout_358&1) << 14;
   O |= (dout_362&1) << 15;
   return O;
}

uint64_t mult8_cgp14ep_ep65536_wc4545_rcam(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_163, dout_208, dout_241, dout_242, dout_251, dout_252, dout_253, dout_260, dout_272, dout_281, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_295, dout_296, dout_297, dout_298, dout_312, dout_313, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_163=((B >> 7)&1)&((A >> 4)&1);
   dout_208=((B >> 7)&1)&((A >> 5)&1);
   dout_241=dout_163^dout_208;
   dout_242=dout_163&((A >> 5)&1);
   dout_251=((B >> 5)&1)&((A >> 6)&1);
   dout_252=((B >> 6)&1)&((A >> 6)&1);
   dout_253=((B >> 7)&1)&((A >> 6)&1);
   dout_260=dout_252&dout_241;
   dout_272=((A >> 5)&1)&((B >> 6)&1);
   dout_281=dout_241^dout_252;
   dout_283=dout_281&dout_251;
   dout_284=dout_281^dout_251;
   dout_285=dout_260|dout_283;
   dout_286=dout_242^dout_253;
   dout_287=dout_242&dout_253;
   dout_288=dout_253&dout_285;
   dout_289=dout_286^dout_285;
   dout_290=dout_287|dout_288;
   dout_295=((B >> 4)&1)&((A >> 7)&1);
   dout_296=((B >> 5)&1)&((A >> 7)&1);
   dout_297=((B >> 6)&1)&((A >> 7)&1);
   dout_298=((B >> 7)&1)&((A >> 7)&1);
   dout_312=((A >> 7)&1)&((B >> 3)&1);
   dout_313=((B >> 4)&1)&((A >> 3)&1);
   dout_315=dout_312|dout_313;
   dout_316=dout_272^dout_295;
   dout_317=dout_272&dout_295;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_284^dout_296;
   dout_322=dout_284&dout_296;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_289^dout_297;
   dout_327=dout_289&dout_297;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_290^dout_298;
   dout_332=dout_290&((A >> 7)&1);
   dout_333=((B >> 7)&1)&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (0&1) << 0;
   O |= (dout_287&1) << 1;
   O |= (dout_331&1) << 2;
   O |= (dout_288&1) << 3;
   O |= (0&1) << 4;
   O |= (dout_298&1) << 5;
   O |= (0&1) << 6;
   O |= (dout_331&1) << 7;
   O |= (dout_295&1) << 8;
   O |= (dout_298&1) << 9;
   O |= (dout_272&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

uint32_t evoapproxlib::evoapprox_t::mul16u_8VH (uint16_t a, uint16_t b) {
    static uint16_t * cacheLL = NULL;
    static uint16_t * cacheLH = NULL;
    static uint16_t * cacheHL = NULL;
    static uint16_t * cacheHH = NULL;
    int fillData = cacheLL == NULL || cacheLH == NULL || cacheHL == NULL || cacheHH == NULL;

    if(!cacheLL) cacheLL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheLH) cacheLH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHL) cacheHL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHH) cacheHH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    
    if(fillData) {
        for(int i = 0; i < 256; i++) {
            for(int j = 0; j < 256; j++) {
                cacheLL[i * 256 + j] = mult8_cgp14ep_ep65536_wc16384_2_csamcsa(i, j);
                cacheLH[i * 256 + j] = mult8_cgp14ep_ep65536_wc4545_rcam(i, j);
                cacheHL[i * 256 + j] = mult8_cgp14ep_ep65536_wc4545_rcam(i, j);
                cacheHH[i * 256 + j] = mult8_cgp14_wc3_csamcsa(i, j);
            }
        }
    }

    uint32_t opt = 0;

    opt += (uint32_t)cacheLL[(a & 0xFF       ) * 256 + (b & 0xFF             )];
    opt += (uint32_t)cacheLH[(a & 0xFF       ) * 256 + ((b >> 8) & 0xFF      )] << 8;
    opt += (uint32_t)cacheHL[((a >> 8) & 0xFF) * 256 + (b & 0xFF             )] << 8;
    opt += (uint32_t)cacheHH[((a >> 8) & 0xFF) * 256 + ((b >> 8) & 0xFF      )] << 16;

    return opt;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mse parameters
***/
// MAE% = 0.000000068 %
// MAE = 2.9 
// WCE% = 0.00000021 %
// WCE = 9.0 
// WCRE% = 100.00 %
// EP% = 71.09 %
// MRE% = 0.0000097 %
// MSE = 16 
// PDK45_PWR = 2.180 mW
// PDK45_AREA = 3109.1 um2
// PDK45_DELAY = 3.11 ns



uint64_t mult8_cgp14ep_ep64716_wc9_2_csamrca(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_25, dout_27, dout_28, dout_29, dout_30, dout_31, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_59, dout_60, dout_61, dout_63, dout_64, dout_65, dout_66, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_86, dout_87, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_100, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110, dout_111, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143, dout_144, dout_145, dout_146, dout_147, dout_148, dout_149, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_171, dout_172, dout_173, dout_174, dout_175, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_183, dout_184, dout_185, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_18=((B >> 2)&1)&((A >> 1)&1);
   dout_19=((B >> 3)&1)&((A >> 0)&1);
   dout_20=((B >> 4)&1)&((A >> 0)&1);
   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_25=((B >> 0)&1)&((A >> 2)&1);
   dout_27=((B >> 3)&1)&((A >> 1)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_34=dout_18|dout_25;
   dout_35=dout_19&dout_25;
   dout_36=dout_19^dout_18;
   dout_37=dout_19&dout_18;
   dout_38=dout_20^dout_27;
   dout_39=dout_20&dout_27;
   dout_40=dout_21^dout_28;
   dout_41=dout_21&dout_28;
   dout_42=dout_22^dout_29;
   dout_43=dout_22&dout_29;
   dout_44=dout_23^dout_30;
   dout_45=((A >> 0)&1)&((B >> 6)&1);
   dout_47=((B >> 1)&1)&((A >> 2)&1);
   dout_48=((B >> 2)&1)&((A >> 2)&1);
   dout_49=((B >> 3)&1)&((A >> 2)&1);
   dout_50=((B >> 4)&1)&((A >> 2)&1);
   dout_51=((B >> 5)&1)&((A >> 2)&1);
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_59=dout_36|dout_47;
   dout_60=dout_36&dout_47;
   dout_61=dout_47&dout_35;
   dout_63=dout_60|dout_61;
   dout_64=dout_38^dout_48;
   dout_65=dout_38&dout_48;
   dout_66=dout_64&dout_37;
   dout_67=dout_64^dout_37;
   dout_68=dout_65|dout_66;
   dout_69=dout_40^dout_49;
   dout_70=dout_40&dout_49;
   dout_71=dout_69&dout_39;
   dout_72=dout_69^dout_39;
   dout_73=dout_70|dout_71;
   dout_74=dout_42^dout_50;
   dout_75=dout_42&dout_50;
   dout_76=dout_74&dout_41;
   dout_77=dout_74^dout_41;
   dout_78=dout_75|dout_76;
   dout_79=dout_44^dout_51;
   dout_80=dout_44&dout_51;
   dout_81=dout_79&dout_43;
   dout_82=dout_79^dout_43;
   dout_83=dout_80|dout_81;
   dout_84=dout_31^dout_52;
   dout_85=dout_31&dout_52;
   dout_86=dout_31&dout_45;
   dout_87=dout_84^dout_86;
   dout_88=dout_85|dout_86;
   dout_89=((B >> 0)&1)&((A >> 3)&1);
   dout_90=((B >> 1)&1)&((A >> 3)&1);
   dout_91=((B >> 2)&1)&((A >> 3)&1);
   dout_92=((B >> 3)&1)&((A >> 3)&1);
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_97=dout_59|dout_89;
   dout_100=dout_97^dout_89;
   dout_102=dout_67^dout_90;
   dout_103=dout_67&dout_90;
   dout_104=dout_102&dout_63;
   dout_105=dout_102^dout_63;
   dout_106=dout_103|dout_104;
   dout_107=dout_72^dout_91;
   dout_108=dout_72&dout_91;
   dout_109=dout_107&dout_68;
   dout_110=dout_107^dout_68;
   dout_111=dout_108|dout_109;
   dout_112=dout_77^dout_92;
   dout_113=dout_77&dout_92;
   dout_114=dout_112&dout_73;
   dout_115=dout_112^dout_73;
   dout_116=dout_113|dout_114;
   dout_117=dout_82^dout_93;
   dout_118=dout_82&dout_93;
   dout_119=dout_117&dout_78;
   dout_120=dout_117^dout_78;
   dout_121=dout_118|dout_119;
   dout_122=dout_87^dout_94;
   dout_123=dout_87&dout_94;
   dout_124=dout_122&dout_83;
   dout_125=dout_122^dout_83;
   dout_126=dout_123|dout_124;
   dout_127=dout_53^dout_95;
   dout_128=dout_53&dout_95;
   dout_129=dout_127&dout_88;
   dout_130=dout_127^dout_88;
   dout_131=dout_128|dout_129;
   dout_132=((B >> 0)&1)&((A >> 4)&1);
   dout_133=((B >> 1)&1)&((A >> 4)&1);
   dout_134=((B >> 2)&1)&((A >> 4)&1);
   dout_135=((B >> 3)&1)&((A >> 4)&1);
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_140=dout_105^dout_132;
   dout_141=dout_105&dout_132;
   dout_142=dout_140&dout_89;
   dout_143=dout_140^dout_89;
   dout_144=dout_141|dout_142;
   dout_145=dout_110^dout_133;
   dout_146=dout_110&dout_133;
   dout_147=dout_145&dout_106;
   dout_148=dout_145^dout_106;
   dout_149=dout_146|dout_147;
   dout_150=dout_115^dout_134;
   dout_151=dout_115&dout_134;
   dout_152=dout_150&dout_111;
   dout_153=dout_150^dout_111;
   dout_154=dout_151|dout_152;
   dout_155=dout_120^dout_135;
   dout_156=dout_120&dout_135;
   dout_157=dout_155&dout_116;
   dout_158=dout_155^dout_116;
   dout_159=dout_156|dout_157;
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_121;
   dout_163=dout_160^dout_121;
   dout_164=dout_161|dout_162;
   dout_165=dout_130^dout_137;
   dout_166=dout_130&dout_137;
   dout_167=dout_165&dout_126;
   dout_168=dout_165^dout_126;
   dout_169=dout_166|dout_167;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_172=dout_170&dout_131;
   dout_173=dout_170^dout_131;
   dout_174=dout_171|dout_172;
   dout_175=((B >> 0)&1)&((A >> 5)&1);
   dout_176=((B >> 1)&1)&((A >> 5)&1);
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_183=dout_148^dout_175;
   dout_184=dout_148&dout_175;
   dout_185=dout_183&dout_144;
   dout_186=dout_183^dout_144;
   dout_187=dout_184|dout_185;
   dout_188=dout_153^dout_176;
   dout_189=dout_153&dout_176;
   dout_190=dout_188&dout_149;
   dout_191=dout_188^dout_149;
   dout_192=dout_189|dout_190;
   dout_193=dout_158^dout_177;
   dout_194=dout_158&dout_177;
   dout_195=dout_193&dout_154;
   dout_196=dout_193^dout_154;
   dout_197=dout_194|dout_195;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_159;
   dout_201=dout_198^dout_159;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_218=((B >> 0)&1)&((A >> 6)&1);
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_226=dout_191^dout_218;
   dout_227=dout_191&dout_218;
   dout_228=dout_226&dout_187;
   dout_229=dout_226^dout_187;
   dout_230=dout_227|dout_228;
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_233=dout_231&dout_192;
   dout_234=dout_231^dout_192;
   dout_235=dout_232|dout_233;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_197;
   dout_239=dout_236^dout_197;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_234^dout_261;
   dout_270=dout_234&dout_261;
   dout_271=dout_269&dout_230;
   dout_272=dout_269^dout_230;
   dout_273=dout_270|dout_271;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_235;
   dout_277=dout_274^dout_235;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_304=dout_277^dout_273;
   dout_305=dout_277&dout_273;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_302^dout_298;
   dout_327=dout_302&dout_298;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_268^dout_303;
   dout_332=((A >> 7)&1)&dout_303;
   dout_333=dout_331&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_133&1) << 0;
   O |= (0&1) << 1;
   O |= (dout_34&1) << 2;
   O |= (dout_100&1) << 3;
   O |= (dout_143&1) << 4;
   O |= (dout_186&1) << 5;
   O |= (dout_229&1) << 6;
   O |= (dout_272&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

uint32_t evoapproxlib::evoapprox_t::mul16u_52B (uint16_t a, uint16_t b) {
    static uint16_t * cacheLL = NULL;
    static uint16_t * cacheLH = NULL;
    static uint16_t * cacheHL = NULL;
    static uint16_t * cacheHH = NULL;
    int fillData = cacheLL == NULL || cacheLH == NULL || cacheHL == NULL || cacheHH == NULL;

    if(!cacheLL) cacheLL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheLH) cacheLH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHL) cacheHL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHH) cacheHH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    
    if(fillData) {
        for(int i = 0; i < 256; i++) {
            for(int j = 0; j < 256; j++) {
                cacheLL[i * 256 + j] = mult8_cgp14ep_ep64716_wc9_2_csamrca(i, j);
                cacheLH[i * 256 + j] = mul8_364(i, j);
                cacheHL[i * 256 + j] = mul8_364(i, j);
                cacheHH[i * 256 + j] = mul8_364(i, j);
            }
        }
    }

    uint32_t opt = 0;

    opt += (uint32_t)cacheLL[(a & 0xFF       ) * 256 + (b & 0xFF             )];
    opt += (uint32_t)cacheLH[(a & 0xFF       ) * 256 + ((b >> 8) & 0xFF      )] << 8;
    opt += (uint32_t)cacheHL[((a >> 8) & 0xFF) * 256 + (b & 0xFF             )] << 8;
    opt += (uint32_t)cacheHH[((a >> 8) & 0xFF) * 256 + ((b >> 8) & 0xFF      )] << 16;

    return opt;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.00038 %
// MAE = 16480 
// WCE% = 0.0015 %
// WCE = 66049 
// WCRE% = 100.00 %
// EP% = 56.25 %
// MRE% = 0.014 %
// MSE = 10779.731e5 
// PDK45_PWR = 2.153 mW
// PDK45_AREA = 3086.1 um2
// PDK45_DELAY = 3.03 ns

uint32_t evoapproxlib::evoapprox_t::mul16u_34S (uint16_t a, uint16_t b) {
    static uint16_t * cacheLL = NULL;
    static uint16_t * cacheLH = NULL;
    static uint16_t * cacheHL = NULL;
    static uint16_t * cacheHH = NULL;
    int fillData = cacheLL == NULL || cacheLH == NULL || cacheHL == NULL || cacheHH == NULL;

    if(!cacheLL) cacheLL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheLH) cacheLH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHL) cacheHL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHH) cacheHH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    
    if(fillData) {
        for(int i = 0; i < 256; i++) {
            for(int j = 0; j < 256; j++) {
                cacheLL[i * 256 + j] = mult8_cgp14ep_ep49152_wc1_2_csamrca(i, j);
                cacheLH[i * 256 + j] = mult8_cgp14ep_ep49152_wc1_2_csamrca(i, j);
                cacheHL[i * 256 + j] = mult8_cgp14ep_ep49152_wc1_2_csamrca(i, j);
                cacheHH[i * 256 + j] = mult8_cgp14ep_ep49152_wc1_2_csamrca(i, j);
            }
        }
    }

    uint32_t opt = 0;

    opt += (uint32_t)cacheLL[(a & 0xFF       ) * 256 + (b & 0xFF             )];
    opt += (uint32_t)cacheLH[(a & 0xFF       ) * 256 + ((b >> 8) & 0xFF      )] << 8;
    opt += (uint32_t)cacheHL[((a >> 8) & 0xFF) * 256 + (b & 0xFF             )] << 8;
    opt += (uint32_t)cacheHH[((a >> 8) & 0xFF) * 256 + ((b >> 8) & 0xFF      )] << 16;

    return opt;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 0.000026 %
// MAE = 1137 
// WCE% = 0.00011 %
// WCE = 4801 
// WCRE% = 1500.00 %
// EP% = 99.26 %
// MRE% = 0.0024 %
// MSE = 20028.834e2 
// PDK45_PWR = 1.783 mW
// PDK45_AREA = 2589.1 um2
// PDK45_DELAY = 2.32 ns



uint32_t evoapproxlib::evoapprox_t::mul16u_EHF (uint16_t a, uint16_t b) {
    static uint16_t * cacheLL = NULL;
    static uint16_t * cacheLH = NULL;
    static uint16_t * cacheHL = NULL;
    static uint16_t * cacheHH = NULL;
    int fillData = cacheLL == NULL || cacheLH == NULL || cacheHL == NULL || cacheHH == NULL;

    if(!cacheLL) cacheLL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheLH) cacheLH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHL) cacheHL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHH) cacheHH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    
    if(fillData) {
        for(int i = 0; i < 256; i++) {
            for(int j = 0; j < 256; j++) {
                cacheLL[i * 256 + j] = mult8_cgp14ep_ep65536_wc4545_rcam(i, j);
                cacheLH[i * 256 + j] = mult8_cgp14ep_ep49152_wc1_2_csamrca(i, j);
                cacheHL[i * 256 + j] = mul8_364(i, j);
                cacheHH[i * 256 + j] = mul8_364(i, j);
            }
        }
    }

    uint32_t opt = 0;

    opt += (uint32_t)cacheLL[(a & 0xFF       ) * 256 + (b & 0xFF             )];
    opt += (uint32_t)cacheLH[(a & 0xFF       ) * 256 + ((b >> 8) & 0xFF      )] << 8;
    opt += (uint32_t)cacheHL[((a >> 8) & 0xFF) * 256 + (b & 0xFF             )] << 8;
    opt += (uint32_t)cacheHH[((a >> 8) & 0xFF) * 256 + ((b >> 8) & 0xFF      )] << 16;

    return opt;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 0.00000003 %
// MAE = 1.3 
// WCE% = 0.000000093 %
// WCE = 4.0 
// WCRE% = 100.00 %
// EP% = 64.06 %
// MRE% = 0.0000044 %
// MSE = 3.6 
// PDK45_PWR = 2.188 mW
// PDK45_AREA = 3118.5 um2
// PDK45_DELAY = 3.11 ns



uint64_t mult8_cgp14ep_ep55705_wc4_csamrca(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_17, dout_19, dout_20, dout_21, dout_22, dout_23, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_56, dout_57, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_65, dout_66, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_86, dout_87, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_98, dout_99, dout_100, dout_101, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110, dout_111, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143, dout_144, dout_145, dout_146, dout_147, dout_148, dout_149, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_171, dout_172, dout_173, dout_174, dout_175, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_183, dout_184, dout_185, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_17=((B >> 1)&1)&((A >> 1)&1);
   dout_19=((B >> 3)&1)&((A >> 0)&1);
   dout_20=((B >> 4)&1)&((A >> 0)&1);
   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_26=((B >> 2)&1)&((A >> 1)&1);
   dout_27=((B >> 3)&1)&((A >> 1)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_35=((B >> 2)&1)&((A >> 0)&1);
   dout_36=dout_19^dout_26;
   dout_37=dout_19&dout_26;
   dout_38=dout_20^dout_27;
   dout_39=dout_20&dout_27;
   dout_40=dout_21^dout_28;
   dout_41=dout_21&dout_28;
   dout_42=dout_22^dout_29;
   dout_43=dout_22&dout_29;
   dout_44=dout_23^dout_30;
   dout_45=((B >> 6)&1)&dout_31;
   dout_46=((B >> 0)&1)&((A >> 2)&1);
   dout_47=((B >> 1)&1)&((A >> 2)&1);
   dout_48=((B >> 2)&1)&((A >> 2)&1);
   dout_49=((B >> 3)&1)&((A >> 2)&1);
   dout_50=((B >> 4)&1)&((A >> 2)&1);
   dout_51=((B >> 5)&1)&((A >> 2)&1);
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_56=dout_46&dout_17;
   dout_57=dout_46|dout_17;
   dout_59=dout_36^dout_47;
   dout_60=dout_36&dout_47;
   dout_61=dout_59&dout_35;
   dout_62=dout_59^dout_35;
   dout_63=dout_60|dout_61;
   dout_64=dout_38^dout_48;
   dout_65=dout_38&dout_48;
   dout_66=dout_64&dout_37;
   dout_67=dout_64^dout_37;
   dout_68=dout_65|dout_66;
   dout_69=dout_40^dout_49;
   dout_70=dout_40&dout_49;
   dout_71=dout_69&dout_39;
   dout_72=dout_69^dout_39;
   dout_73=dout_70|dout_71;
   dout_74=dout_42^dout_50;
   dout_75=dout_42&dout_50;
   dout_76=dout_74&dout_41;
   dout_77=dout_74^dout_41;
   dout_78=dout_75|dout_76;
   dout_79=dout_44^dout_51;
   dout_80=dout_44&dout_51;
   dout_81=dout_79&dout_43;
   dout_82=dout_79^dout_43;
   dout_83=dout_80|dout_81;
   dout_84=dout_31^dout_52;
   dout_85=dout_45&((A >> 2)&1);
   dout_86=((A >> 0)&1)&dout_45;
   dout_87=dout_84^dout_86;
   dout_88=dout_85|dout_86;
   dout_89=((B >> 0)&1)&((A >> 3)&1);
   dout_90=((B >> 1)&1)&((A >> 3)&1);
   dout_91=((B >> 2)&1)&((A >> 3)&1);
   dout_92=((B >> 3)&1)&((A >> 3)&1);
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_97=dout_62^dout_89;
   dout_98=dout_62&dout_89;
   dout_99=dout_97&dout_56;
   dout_100=dout_97^dout_56;
   dout_101=dout_98|dout_99;
   dout_102=dout_67^dout_90;
   dout_103=dout_67&dout_90;
   dout_104=dout_102&dout_63;
   dout_105=dout_102^dout_63;
   dout_106=dout_103|dout_104;
   dout_107=dout_72^dout_91;
   dout_108=dout_72&dout_91;
   dout_109=dout_107&dout_68;
   dout_110=dout_107^dout_68;
   dout_111=dout_108|dout_109;
   dout_112=dout_77^dout_92;
   dout_113=dout_77&dout_92;
   dout_114=dout_112&dout_73;
   dout_115=dout_112^dout_73;
   dout_116=dout_113|dout_114;
   dout_117=dout_82^dout_93;
   dout_118=dout_82&dout_93;
   dout_119=dout_117&dout_78;
   dout_120=dout_117^dout_78;
   dout_121=dout_118|dout_119;
   dout_122=dout_87^dout_94;
   dout_123=dout_87&dout_94;
   dout_124=dout_122&dout_83;
   dout_125=dout_122^dout_83;
   dout_126=dout_123|dout_124;
   dout_127=dout_53^dout_95;
   dout_128=dout_53&dout_95;
   dout_129=dout_127&dout_88;
   dout_130=dout_127^dout_88;
   dout_131=dout_128|dout_129;
   dout_132=((B >> 0)&1)&((A >> 4)&1);
   dout_133=((B >> 1)&1)&((A >> 4)&1);
   dout_134=((B >> 2)&1)&((A >> 4)&1);
   dout_135=((B >> 3)&1)&((A >> 4)&1);
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_140=dout_105^dout_132;
   dout_141=dout_105&dout_132;
   dout_142=dout_140&dout_101;
   dout_143=dout_140^dout_101;
   dout_144=dout_141|dout_142;
   dout_145=dout_110^dout_133;
   dout_146=dout_110&dout_133;
   dout_147=dout_145&dout_106;
   dout_148=dout_145^dout_106;
   dout_149=dout_146|dout_147;
   dout_150=dout_115^dout_134;
   dout_151=dout_115&dout_134;
   dout_152=dout_150&dout_111;
   dout_153=dout_150^dout_111;
   dout_154=dout_151|dout_152;
   dout_155=dout_120^dout_135;
   dout_156=dout_120&dout_135;
   dout_157=dout_155&dout_116;
   dout_158=dout_155^dout_116;
   dout_159=dout_156|dout_157;
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_121;
   dout_163=dout_160^dout_121;
   dout_164=dout_161|dout_162;
   dout_165=dout_130^dout_137;
   dout_166=dout_130&dout_137;
   dout_167=dout_165&dout_126;
   dout_168=dout_165^dout_126;
   dout_169=dout_166|dout_167;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_172=dout_170&dout_131;
   dout_173=dout_170^dout_131;
   dout_174=dout_171|dout_172;
   dout_175=((B >> 0)&1)&((A >> 5)&1);
   dout_176=((B >> 1)&1)&((A >> 5)&1);
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_183=dout_148^dout_175;
   dout_184=dout_148&dout_175;
   dout_185=dout_183&dout_144;
   dout_186=dout_183^dout_144;
   dout_187=dout_184|dout_185;
   dout_188=dout_153^dout_176;
   dout_189=dout_153&dout_176;
   dout_190=dout_188&dout_149;
   dout_191=dout_188^dout_149;
   dout_192=dout_189|dout_190;
   dout_193=dout_158^dout_177;
   dout_194=dout_158&dout_177;
   dout_195=dout_193&dout_154;
   dout_196=dout_193^dout_154;
   dout_197=dout_194|dout_195;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_159;
   dout_201=dout_198^dout_159;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_218=((B >> 0)&1)&((A >> 6)&1);
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_226=dout_191^dout_218;
   dout_227=dout_191&dout_218;
   dout_228=dout_226&dout_187;
   dout_229=dout_226^dout_187;
   dout_230=dout_227|dout_228;
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_233=dout_231&dout_192;
   dout_234=dout_231^dout_192;
   dout_235=dout_232|dout_233;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_197;
   dout_239=dout_236^dout_197;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_234^dout_261;
   dout_270=dout_234&dout_261;
   dout_271=dout_269&dout_230;
   dout_272=dout_269^dout_230;
   dout_273=dout_270|dout_271;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_235;
   dout_277=dout_274^dout_235;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_304=dout_277^dout_273;
   dout_305=dout_277&dout_273;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_302^dout_298;
   dout_327=dout_302&dout_298;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_268^dout_303;
   dout_332=((A >> 7)&1)&dout_303;
   dout_333=dout_331&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_57&1) << 0;
   O |= (0&1) << 1;
   O |= (dout_57&1) << 2;
   O |= (dout_100&1) << 3;
   O |= (dout_143&1) << 4;
   O |= (dout_186&1) << 5;
   O |= (dout_229&1) << 6;
   O |= (dout_272&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

uint32_t evoapproxlib::evoapprox_t::mul16u_AQ1 (uint16_t a, uint16_t b) {
    static uint16_t * cacheLL = NULL;
    static uint16_t * cacheLH = NULL;
    static uint16_t * cacheHL = NULL;
    static uint16_t * cacheHH = NULL;
    int fillData = cacheLL == NULL || cacheLH == NULL || cacheHL == NULL || cacheHH == NULL;

    if(!cacheLL) cacheLL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheLH) cacheLH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHL) cacheHL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHH) cacheHH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    
    if(fillData) {
        for(int i = 0; i < 256; i++) {
            for(int j = 0; j < 256; j++) {
                cacheLL[i * 256 + j] = mult8_cgp14ep_ep55705_wc4_csamrca(i, j);
                cacheLH[i * 256 + j] = mul8_364(i, j);
                cacheHL[i * 256 + j] = mul8_364(i, j);
                cacheHH[i * 256 + j] = mul8_364(i, j);
            }
        }
    }

    uint32_t opt = 0;

    opt += (uint32_t)cacheLL[(a & 0xFF       ) * 256 + (b & 0xFF             )];
    opt += (uint32_t)cacheLH[(a & 0xFF       ) * 256 + ((b >> 8) & 0xFF      )] << 8;
    opt += (uint32_t)cacheHL[((a >> 8) & 0xFF) * 256 + (b & 0xFF             )] << 8;
    opt += (uint32_t)cacheHH[((a >> 8) & 0xFF) * 256 + ((b >> 8) & 0xFF      )] << 16;

    return opt;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 0.10 %
// MAE = 4423680 
// WCE% = 0.41 %
// WCE = 17694721 
// WCRE% = 100.00 %
// EP% = 100.00 %
// MRE% = 2.07 %
// MSE = 24400.46e9 
// PDK45_PWR = 0.482 mW
// PDK45_AREA = 746.2 um2
// PDK45_DELAY = 2.03 ns



uint32_t evoapproxlib::evoapprox_t::mul16u_GPF(uint16_t A, uint16_t B)
{
  uint32_t P, P_;
  uint16_t tmp, C_10_10,C_10_11,C_10_12,C_10_13,C_10_14,C_11_10,C_11_11,C_11_12,C_11_13,C_11_14,C_11_9,C_12_10,C_12_11,C_12_12,C_12_13,C_12_14,C_12_8,C_12_9,C_13_10,C_13_11,C_13_12,C_13_13,C_13_14,C_13_7,C_13_8,C_13_9,C_14_10,C_14_11,C_14_12,C_14_13,C_14_14,C_14_6,C_14_7,C_14_8,C_14_9,C_15_10,C_15_11,C_15_12,C_15_13,C_15_14,C_15_5,C_15_6,C_15_7,C_15_8,C_15_9,C_16_10,C_16_11,C_16_12,C_16_13,C_16_14,C_16_5,C_16_6,C_16_7,C_16_8,C_16_9,C_8_12,C_8_13,C_8_14,C_9_11,C_9_12,C_9_13,C_9_14,S_10_10,S_10_11,S_10_12,S_10_13,S_10_14,S_10_15,S_11_10,S_11_11,S_11_12,S_11_13,S_11_14,S_11_15,S_11_9,S_12_10,S_12_11,S_12_12,S_12_13,S_12_14,S_12_15,S_12_8,S_12_9,S_13_10,S_13_11,S_13_12,S_13_13,S_13_14,S_13_15,S_13_7,S_13_8,S_13_9,S_14_10,S_14_11,S_14_12,S_14_13,S_14_14,S_14_15,S_14_6,S_14_7,S_14_8,S_14_9,S_15_10,S_15_11,S_15_12,S_15_13,S_15_14,S_15_15,S_15_5,S_15_6,S_15_7,S_15_8,S_15_9,S_16_10,S_16_11,S_16_12,S_16_13,S_16_14,S_16_15,S_16_4,S_16_5,S_16_6,S_16_7,S_16_8,S_16_9,S_7_13,S_7_14,S_7_15,S_8_12,S_8_13,S_8_14,S_8_15,S_9_11,S_9_12,S_9_13,S_9_14,S_9_15;
  S_7_13 = (((A>>7)&1) & ((B>>13)&1));
  S_7_14 = (((A>>7)&1) & ((B>>14)&1));
  S_7_15 = (((A>>7)&1) & ((B>>15)&1));
  S_8_12 = S_7_13^(((A>>8)&1) & ((B>>12)&1));
  C_8_12 = S_7_13&(((A>>8)&1) & ((B>>12)&1));
  S_8_13 = S_7_14^(((A>>8)&1) & ((B>>13)&1));
  C_8_13 = S_7_14&(((A>>8)&1) & ((B>>13)&1));
  S_8_14 = S_7_15^(((A>>8)&1) & ((B>>14)&1));
  C_8_14 = S_7_15&(((A>>8)&1) & ((B>>14)&1));
  S_8_15 = (((A>>8)&1) & ((B>>15)&1));
  S_9_11 = S_8_12^(((A>>9)&1) & ((B>>11)&1));
  C_9_11 = S_8_12&(((A>>9)&1) & ((B>>11)&1));
  tmp = S_8_13^C_8_12;
  S_9_12 = tmp^(((A>>9)&1) & ((B>>12)&1));
  C_9_12 = (tmp&(((A>>9)&1) & ((B>>12)&1)))|(S_8_13&C_8_12);
  tmp = S_8_14^C_8_13;
  S_9_13 = tmp^(((A>>9)&1) & ((B>>13)&1));
  C_9_13 = (tmp&(((A>>9)&1) & ((B>>13)&1)))|(S_8_14&C_8_13);
  tmp = S_8_15^C_8_14;
  S_9_14 = tmp^(((A>>9)&1) & ((B>>14)&1));
  C_9_14 = (tmp&(((A>>9)&1) & ((B>>14)&1)))|(S_8_15&C_8_14);
  S_9_15 = (((A>>9)&1) & ((B>>15)&1));
  S_10_10 = S_9_11^(((A>>10)&1) & ((B>>10)&1));
  C_10_10 = S_9_11&(((A>>10)&1) & ((B>>10)&1));
  tmp = S_9_12^C_9_11;
  S_10_11 = tmp^(((A>>10)&1) & ((B>>11)&1));
  C_10_11 = (tmp&(((A>>10)&1) & ((B>>11)&1)))|(S_9_12&C_9_11);
  tmp = S_9_13^C_9_12;
  S_10_12 = tmp^(((A>>10)&1) & ((B>>12)&1));
  C_10_12 = (tmp&(((A>>10)&1) & ((B>>12)&1)))|(S_9_13&C_9_12);
  tmp = S_9_14^C_9_13;
  S_10_13 = tmp^(((A>>10)&1) & ((B>>13)&1));
  C_10_13 = (tmp&(((A>>10)&1) & ((B>>13)&1)))|(S_9_14&C_9_13);
  tmp = S_9_15^C_9_14;
  S_10_14 = tmp^(((A>>10)&1) & ((B>>14)&1));
  C_10_14 = (tmp&(((A>>10)&1) & ((B>>14)&1)))|(S_9_15&C_9_14);
  S_10_15 = (((A>>10)&1) & ((B>>15)&1));
  S_11_9 = S_10_10^(((A>>11)&1) & ((B>>9)&1));
  C_11_9 = S_10_10&(((A>>11)&1) & ((B>>9)&1));
  tmp = S_10_11^C_10_10;
  S_11_10 = tmp^(((A>>11)&1) & ((B>>10)&1));
  C_11_10 = (tmp&(((A>>11)&1) & ((B>>10)&1)))|(S_10_11&C_10_10);
  tmp = S_10_12^C_10_11;
  S_11_11 = tmp^(((A>>11)&1) & ((B>>11)&1));
  C_11_11 = (tmp&(((A>>11)&1) & ((B>>11)&1)))|(S_10_12&C_10_11);
  tmp = S_10_13^C_10_12;
  S_11_12 = tmp^(((A>>11)&1) & ((B>>12)&1));
  C_11_12 = (tmp&(((A>>11)&1) & ((B>>12)&1)))|(S_10_13&C_10_12);
  tmp = S_10_14^C_10_13;
  S_11_13 = tmp^(((A>>11)&1) & ((B>>13)&1));
  C_11_13 = (tmp&(((A>>11)&1) & ((B>>13)&1)))|(S_10_14&C_10_13);
  tmp = S_10_15^C_10_14;
  S_11_14 = tmp^(((A>>11)&1) & ((B>>14)&1));
  C_11_14 = (tmp&(((A>>11)&1) & ((B>>14)&1)))|(S_10_15&C_10_14);
  S_11_15 = (((A>>11)&1) & ((B>>15)&1));
  S_12_8 = S_11_9^(((A>>12)&1) & ((B>>8)&1));
  C_12_8 = S_11_9&(((A>>12)&1) & ((B>>8)&1));
  tmp = S_11_10^C_11_9;
  S_12_9 = tmp^(((A>>12)&1) & ((B>>9)&1));
  C_12_9 = (tmp&(((A>>12)&1) & ((B>>9)&1)))|(S_11_10&C_11_9);
  tmp = S_11_11^C_11_10;
  S_12_10 = tmp^(((A>>12)&1) & ((B>>10)&1));
  C_12_10 = (tmp&(((A>>12)&1) & ((B>>10)&1)))|(S_11_11&C_11_10);
  tmp = S_11_12^C_11_11;
  S_12_11 = tmp^(((A>>12)&1) & ((B>>11)&1));
  C_12_11 = (tmp&(((A>>12)&1) & ((B>>11)&1)))|(S_11_12&C_11_11);
  tmp = S_11_13^C_11_12;
  S_12_12 = tmp^(((A>>12)&1) & ((B>>12)&1));
  C_12_12 = (tmp&(((A>>12)&1) & ((B>>12)&1)))|(S_11_13&C_11_12);
  tmp = S_11_14^C_11_13;
  S_12_13 = tmp^(((A>>12)&1) & ((B>>13)&1));
  C_12_13 = (tmp&(((A>>12)&1) & ((B>>13)&1)))|(S_11_14&C_11_13);
  tmp = S_11_15^C_11_14;
  S_12_14 = tmp^(((A>>12)&1) & ((B>>14)&1));
  C_12_14 = (tmp&(((A>>12)&1) & ((B>>14)&1)))|(S_11_15&C_11_14);
  S_12_15 = (((A>>12)&1) & ((B>>15)&1));
  S_13_7 = S_12_8^(((A>>13)&1) & ((B>>7)&1));
  C_13_7 = S_12_8&(((A>>13)&1) & ((B>>7)&1));
  tmp = S_12_9^C_12_8;
  S_13_8 = tmp^(((A>>13)&1) & ((B>>8)&1));
  C_13_8 = (tmp&(((A>>13)&1) & ((B>>8)&1)))|(S_12_9&C_12_8);
  tmp = S_12_10^C_12_9;
  S_13_9 = tmp^(((A>>13)&1) & ((B>>9)&1));
  C_13_9 = (tmp&(((A>>13)&1) & ((B>>9)&1)))|(S_12_10&C_12_9);
  tmp = S_12_11^C_12_10;
  S_13_10 = tmp^(((A>>13)&1) & ((B>>10)&1));
  C_13_10 = (tmp&(((A>>13)&1) & ((B>>10)&1)))|(S_12_11&C_12_10);
  tmp = S_12_12^C_12_11;
  S_13_11 = tmp^(((A>>13)&1) & ((B>>11)&1));
  C_13_11 = (tmp&(((A>>13)&1) & ((B>>11)&1)))|(S_12_12&C_12_11);
  tmp = S_12_13^C_12_12;
  S_13_12 = tmp^(((A>>13)&1) & ((B>>12)&1));
  C_13_12 = (tmp&(((A>>13)&1) & ((B>>12)&1)))|(S_12_13&C_12_12);
  tmp = S_12_14^C_12_13;
  S_13_13 = tmp^(((A>>13)&1) & ((B>>13)&1));
  C_13_13 = (tmp&(((A>>13)&1) & ((B>>13)&1)))|(S_12_14&C_12_13);
  tmp = S_12_15^C_12_14;
  S_13_14 = tmp^(((A>>13)&1) & ((B>>14)&1));
  C_13_14 = (tmp&(((A>>13)&1) & ((B>>14)&1)))|(S_12_15&C_12_14);
  S_13_15 = (((A>>13)&1) & ((B>>15)&1));
  S_14_6 = S_13_7^(((A>>14)&1) & ((B>>6)&1));
  C_14_6 = S_13_7&(((A>>14)&1) & ((B>>6)&1));
  tmp = S_13_8^C_13_7;
  S_14_7 = tmp^(((A>>14)&1) & ((B>>7)&1));
  C_14_7 = (tmp&(((A>>14)&1) & ((B>>7)&1)))|(S_13_8&C_13_7);
  tmp = S_13_9^C_13_8;
  S_14_8 = tmp^(((A>>14)&1) & ((B>>8)&1));
  C_14_8 = (tmp&(((A>>14)&1) & ((B>>8)&1)))|(S_13_9&C_13_8);
  tmp = S_13_10^C_13_9;
  S_14_9 = tmp^(((A>>14)&1) & ((B>>9)&1));
  C_14_9 = (tmp&(((A>>14)&1) & ((B>>9)&1)))|(S_13_10&C_13_9);
  tmp = S_13_11^C_13_10;
  S_14_10 = tmp^(((A>>14)&1) & ((B>>10)&1));
  C_14_10 = (tmp&(((A>>14)&1) & ((B>>10)&1)))|(S_13_11&C_13_10);
  tmp = S_13_12^C_13_11;
  S_14_11 = tmp^(((A>>14)&1) & ((B>>11)&1));
  C_14_11 = (tmp&(((A>>14)&1) & ((B>>11)&1)))|(S_13_12&C_13_11);
  tmp = S_13_13^C_13_12;
  S_14_12 = tmp^(((A>>14)&1) & ((B>>12)&1));
  C_14_12 = (tmp&(((A>>14)&1) & ((B>>12)&1)))|(S_13_13&C_13_12);
  tmp = S_13_14^C_13_13;
  S_14_13 = tmp^(((A>>14)&1) & ((B>>13)&1));
  C_14_13 = (tmp&(((A>>14)&1) & ((B>>13)&1)))|(S_13_14&C_13_13);
  tmp = S_13_15^C_13_14;
  S_14_14 = tmp^(((A>>14)&1) & ((B>>14)&1));
  C_14_14 = (tmp&(((A>>14)&1) & ((B>>14)&1)))|(S_13_15&C_13_14);
  S_14_15 = (((A>>14)&1) & ((B>>15)&1));
  S_15_5 = S_14_6^(((A>>15)&1) & ((B>>5)&1));
  C_15_5 = S_14_6&(((A>>15)&1) & ((B>>5)&1));
  tmp = S_14_7^C_14_6;
  S_15_6 = tmp^(((A>>15)&1) & ((B>>6)&1));
  C_15_6 = (tmp&(((A>>15)&1) & ((B>>6)&1)))|(S_14_7&C_14_6);
  tmp = S_14_8^C_14_7;
  S_15_7 = tmp^(((A>>15)&1) & ((B>>7)&1));
  C_15_7 = (tmp&(((A>>15)&1) & ((B>>7)&1)))|(S_14_8&C_14_7);
  tmp = S_14_9^C_14_8;
  S_15_8 = tmp^(((A>>15)&1) & ((B>>8)&1));
  C_15_8 = (tmp&(((A>>15)&1) & ((B>>8)&1)))|(S_14_9&C_14_8);
  tmp = S_14_10^C_14_9;
  S_15_9 = tmp^(((A>>15)&1) & ((B>>9)&1));
  C_15_9 = (tmp&(((A>>15)&1) & ((B>>9)&1)))|(S_14_10&C_14_9);
  tmp = S_14_11^C_14_10;
  S_15_10 = tmp^(((A>>15)&1) & ((B>>10)&1));
  C_15_10 = (tmp&(((A>>15)&1) & ((B>>10)&1)))|(S_14_11&C_14_10);
  tmp = S_14_12^C_14_11;
  S_15_11 = tmp^(((A>>15)&1) & ((B>>11)&1));
  C_15_11 = (tmp&(((A>>15)&1) & ((B>>11)&1)))|(S_14_12&C_14_11);
  tmp = S_14_13^C_14_12;
  S_15_12 = tmp^(((A>>15)&1) & ((B>>12)&1));
  C_15_12 = (tmp&(((A>>15)&1) & ((B>>12)&1)))|(S_14_13&C_14_12);
  tmp = S_14_14^C_14_13;
  S_15_13 = tmp^(((A>>15)&1) & ((B>>13)&1));
  C_15_13 = (tmp&(((A>>15)&1) & ((B>>13)&1)))|(S_14_14&C_14_13);
  tmp = S_14_15^C_14_14;
  S_15_14 = tmp^(((A>>15)&1) & ((B>>14)&1));
  C_15_14 = (tmp&(((A>>15)&1) & ((B>>14)&1)))|(S_14_15&C_14_14);
  S_15_15 = (((A>>15)&1) & ((B>>15)&1));
  S_16_4 = S_15_5;
  S_16_5 = S_15_6^C_15_5;
  C_16_5 = S_15_6&C_15_5;
  tmp = S_15_7^C_16_5;
  S_16_6 = tmp^C_15_6;
  C_16_6 = (tmp&C_15_6)|(S_15_7&C_16_5);
  tmp = S_15_8^C_16_6;
  S_16_7 = tmp^C_15_7;
  C_16_7 = (tmp&C_15_7)|(S_15_8&C_16_6);
  tmp = S_15_9^C_16_7;
  S_16_8 = tmp^C_15_8;
  C_16_8 = (tmp&C_15_8)|(S_15_9&C_16_7);
  tmp = S_15_10^C_16_8;
  S_16_9 = tmp^C_15_9;
  C_16_9 = (tmp&C_15_9)|(S_15_10&C_16_8);
  tmp = S_15_11^C_16_9;
  S_16_10 = tmp^C_15_10;
  C_16_10 = (tmp&C_15_10)|(S_15_11&C_16_9);
  tmp = S_15_12^C_16_10;
  S_16_11 = tmp^C_15_11;
  C_16_11 = (tmp&C_15_11)|(S_15_12&C_16_10);
  tmp = S_15_13^C_16_11;
  S_16_12 = tmp^C_15_12;
  C_16_12 = (tmp&C_15_12)|(S_15_13&C_16_11);
  tmp = S_15_14^C_16_12;
  S_16_13 = tmp^C_15_13;
  C_16_13 = (tmp&C_15_13)|(S_15_14&C_16_12);
  tmp = S_15_15^C_16_13;
  S_16_14 = tmp^C_15_14;
  C_16_14 = (tmp&C_15_14)|(S_15_15&C_16_13);
  S_16_15 = C_16_14;
  P = 0;
  P |= (S_16_4 & 1) << 20;
  P |= (S_16_5 & 1) << 21;
  P |= (S_16_6 & 1) << 22;
  P |= (S_16_7 & 1) << 23;
  P |= (S_16_8 & 1) << 24;
  P |= (S_16_9 & 1) << 25;
  P |= (S_16_10 & 1) << 26;
  P |= (S_16_11 & 1) << 27;
  P |= (S_16_12 & 1) << 28;
  P |= (S_16_13 & 1) << 29;
  P |= (S_16_14 & 1) << 30;
  P |= (S_16_15 & 1) << 31;
  return P;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 18.75 %
// MAE = 805273600 
// WCE% = 75.00 %
// WCE = 3221094401 
// WCRE% = 100.00 %
// EP% = 100.00 %
// MRE% = 87.99 %
// MSE = 10407.645e14 
// PDK45_PWR = 0.0003 mW
// PDK45_AREA = 2.3 um2
// PDK45_DELAY = 0.04 ns



uint32_t evoapproxlib::evoapprox_t::mul16u_HF0(uint16_t A, uint16_t B)
{
  uint32_t P, P_;
  uint16_t tmp, S_15_15,S_16_14;
  S_15_15 = (((A>>15)&1) & ((B>>15)&1));
  S_16_14 = S_15_15;
  P = 0;
  P |= (S_16_14 & 1) << 30;
  return P;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 0.77 %
// MAE = 33259520 
// WCE% = 3.10 %
// WCE = 133038081 
// WCRE% = 100.00 %
// EP% = 100.00 %
// MRE% = 9.15 %
// MSE = 15436.2e11 
// PDK45_PWR = 0.176 mW
// PDK45_AREA = 385.8 um2
// PDK45_DELAY = 1.01 ns



uint32_t evoapproxlib::evoapprox_t::mul16u_HGK(uint16_t A, uint16_t B)
{
  uint32_t P, P_;
  uint16_t tmp, C_11_10,C_11_11,C_11_12,C_11_13,C_11_14,C_12_10,C_12_11,C_12_12,C_12_13,C_12_14,C_13_10,C_13_11,C_13_12,C_13_13,C_13_14,C_14_10,C_14_11,C_14_12,C_14_13,C_14_14,C_15_10,C_15_11,C_15_12,C_15_13,C_15_14,C_16_10,C_16_11,C_16_12,C_16_13,C_16_14,S_10_10,S_10_11,S_10_12,S_10_13,S_10_14,S_10_15,S_11_10,S_11_11,S_11_12,S_11_13,S_11_14,S_11_15,S_11_9,S_12_10,S_12_11,S_12_12,S_12_13,S_12_14,S_12_15,S_12_8,S_12_9,S_13_10,S_13_11,S_13_12,S_13_13,S_13_14,S_13_15,S_13_7,S_13_8,S_13_9,S_14_10,S_14_11,S_14_12,S_14_13,S_14_14,S_14_15,S_14_6,S_14_7,S_14_8,S_14_9,S_15_10,S_15_11,S_15_12,S_15_13,S_15_14,S_15_15,S_15_5,S_15_6,S_15_7,S_15_8,S_15_9,S_16_10,S_16_11,S_16_12,S_16_13,S_16_14,S_16_15,S_16_4,S_16_5,S_16_6,S_16_7,S_16_8,S_16_9;
  S_10_10 = (((A>>10)&1) & ((B>>10)&1));
  S_10_11 = (((A>>10)&1) & ((B>>11)&1));
  S_10_12 = (((A>>10)&1) & ((B>>12)&1));
  S_10_13 = (((A>>10)&1) & ((B>>13)&1));
  S_10_14 = (((A>>10)&1) & ((B>>14)&1));
  S_10_15 = (((A>>10)&1) & ((B>>15)&1));
  S_11_9 = S_10_10;
  S_11_10 = S_10_11^(((A>>11)&1) & ((B>>10)&1));
  C_11_10 = S_10_11&(((A>>11)&1) & ((B>>10)&1));
  S_11_11 = S_10_12^(((A>>11)&1) & ((B>>11)&1));
  C_11_11 = S_10_12&(((A>>11)&1) & ((B>>11)&1));
  S_11_12 = S_10_13^(((A>>11)&1) & ((B>>12)&1));
  C_11_12 = S_10_13&(((A>>11)&1) & ((B>>12)&1));
  S_11_13 = S_10_14^(((A>>11)&1) & ((B>>13)&1));
  C_11_13 = S_10_14&(((A>>11)&1) & ((B>>13)&1));
  S_11_14 = S_10_15^(((A>>11)&1) & ((B>>14)&1));
  C_11_14 = S_10_15&(((A>>11)&1) & ((B>>14)&1));
  S_11_15 = (((A>>11)&1) & ((B>>15)&1));
  S_12_8 = S_11_9;
  S_12_9 = S_11_10;
  tmp = S_11_11^C_11_10;
  S_12_10 = tmp^(((A>>12)&1) & ((B>>10)&1));
  C_12_10 = (tmp&(((A>>12)&1) & ((B>>10)&1)))|(S_11_11&C_11_10);
  tmp = S_11_12^C_11_11;
  S_12_11 = tmp^(((A>>12)&1) & ((B>>11)&1));
  C_12_11 = (tmp&(((A>>12)&1) & ((B>>11)&1)))|(S_11_12&C_11_11);
  tmp = S_11_13^C_11_12;
  S_12_12 = tmp^(((A>>12)&1) & ((B>>12)&1));
  C_12_12 = (tmp&(((A>>12)&1) & ((B>>12)&1)))|(S_11_13&C_11_12);
  tmp = S_11_14^C_11_13;
  S_12_13 = tmp^(((A>>12)&1) & ((B>>13)&1));
  C_12_13 = (tmp&(((A>>12)&1) & ((B>>13)&1)))|(S_11_14&C_11_13);
  tmp = S_11_15^C_11_14;
  S_12_14 = tmp^(((A>>12)&1) & ((B>>14)&1));
  C_12_14 = (tmp&(((A>>12)&1) & ((B>>14)&1)))|(S_11_15&C_11_14);
  S_12_15 = (((A>>12)&1) & ((B>>15)&1));
  S_13_7 = S_12_8;
  S_13_8 = S_12_9;
  S_13_9 = S_12_10;
  tmp = S_12_11^C_12_10;
  S_13_10 = tmp^(((A>>13)&1) & ((B>>10)&1));
  C_13_10 = (tmp&(((A>>13)&1) & ((B>>10)&1)))|(S_12_11&C_12_10);
  tmp = S_12_12^C_12_11;
  S_13_11 = tmp^(((A>>13)&1) & ((B>>11)&1));
  C_13_11 = (tmp&(((A>>13)&1) & ((B>>11)&1)))|(S_12_12&C_12_11);
  tmp = S_12_13^C_12_12;
  S_13_12 = tmp^(((A>>13)&1) & ((B>>12)&1));
  C_13_12 = (tmp&(((A>>13)&1) & ((B>>12)&1)))|(S_12_13&C_12_12);
  tmp = S_12_14^C_12_13;
  S_13_13 = tmp^(((A>>13)&1) & ((B>>13)&1));
  C_13_13 = (tmp&(((A>>13)&1) & ((B>>13)&1)))|(S_12_14&C_12_13);
  tmp = S_12_15^C_12_14;
  S_13_14 = tmp^(((A>>13)&1) & ((B>>14)&1));
  C_13_14 = (tmp&(((A>>13)&1) & ((B>>14)&1)))|(S_12_15&C_12_14);
  S_13_15 = (((A>>13)&1) & ((B>>15)&1));
  S_14_6 = S_13_7;
  S_14_7 = S_13_8;
  S_14_8 = S_13_9;
  S_14_9 = S_13_10;
  tmp = S_13_11^C_13_10;
  S_14_10 = tmp^(((A>>14)&1) & ((B>>10)&1));
  C_14_10 = (tmp&(((A>>14)&1) & ((B>>10)&1)))|(S_13_11&C_13_10);
  tmp = S_13_12^C_13_11;
  S_14_11 = tmp^(((A>>14)&1) & ((B>>11)&1));
  C_14_11 = (tmp&(((A>>14)&1) & ((B>>11)&1)))|(S_13_12&C_13_11);
  tmp = S_13_13^C_13_12;
  S_14_12 = tmp^(((A>>14)&1) & ((B>>12)&1));
  C_14_12 = (tmp&(((A>>14)&1) & ((B>>12)&1)))|(S_13_13&C_13_12);
  tmp = S_13_14^C_13_13;
  S_14_13 = tmp^(((A>>14)&1) & ((B>>13)&1));
  C_14_13 = (tmp&(((A>>14)&1) & ((B>>13)&1)))|(S_13_14&C_13_13);
  tmp = S_13_15^C_13_14;
  S_14_14 = tmp^(((A>>14)&1) & ((B>>14)&1));
  C_14_14 = (tmp&(((A>>14)&1) & ((B>>14)&1)))|(S_13_15&C_13_14);
  S_14_15 = (((A>>14)&1) & ((B>>15)&1));
  S_15_5 = S_14_6;
  S_15_6 = S_14_7;
  S_15_7 = S_14_8;
  S_15_8 = S_14_9;
  S_15_9 = S_14_10;
  tmp = S_14_11^C_14_10;
  S_15_10 = tmp^(((A>>15)&1) & ((B>>10)&1));
  C_15_10 = (tmp&(((A>>15)&1) & ((B>>10)&1)))|(S_14_11&C_14_10);
  tmp = S_14_12^C_14_11;
  S_15_11 = tmp^(((A>>15)&1) & ((B>>11)&1));
  C_15_11 = (tmp&(((A>>15)&1) & ((B>>11)&1)))|(S_14_12&C_14_11);
  tmp = S_14_13^C_14_12;
  S_15_12 = tmp^(((A>>15)&1) & ((B>>12)&1));
  C_15_12 = (tmp&(((A>>15)&1) & ((B>>12)&1)))|(S_14_13&C_14_12);
  tmp = S_14_14^C_14_13;
  S_15_13 = tmp^(((A>>15)&1) & ((B>>13)&1));
  C_15_13 = (tmp&(((A>>15)&1) & ((B>>13)&1)))|(S_14_14&C_14_13);
  tmp = S_14_15^C_14_14;
  S_15_14 = tmp^(((A>>15)&1) & ((B>>14)&1));
  C_15_14 = (tmp&(((A>>15)&1) & ((B>>14)&1)))|(S_14_15&C_14_14);
  S_15_15 = (((A>>15)&1) & ((B>>15)&1));
  S_16_4 = S_15_5;
  S_16_5 = S_15_6;
  S_16_6 = S_15_7;
  S_16_7 = S_15_8;
  S_16_8 = S_15_9;
  S_16_9 = S_15_10;
  S_16_10 = S_15_11^C_15_10;
  C_16_10 = S_15_11&C_15_10;
  tmp = S_15_12^C_16_10;
  S_16_11 = tmp^C_15_11;
  C_16_11 = (tmp&C_15_11)|(S_15_12&C_16_10);
  tmp = S_15_13^C_16_11;
  S_16_12 = tmp^C_15_12;
  C_16_12 = (tmp&C_15_12)|(S_15_13&C_16_11);
  tmp = S_15_14^C_16_12;
  S_16_13 = tmp^C_15_13;
  C_16_13 = (tmp&C_15_13)|(S_15_14&C_16_12);
  tmp = S_15_15^C_16_13;
  S_16_14 = tmp^C_15_14;
  C_16_14 = (tmp&C_15_14)|(S_15_15&C_16_13);
  S_16_15 = C_16_14;
  P = 0;
  P |= (S_16_4 & 1) << 20;
  P |= (S_16_5 & 1) << 21;
  P |= (S_16_6 & 1) << 22;
  P |= (S_16_7 & 1) << 23;
  P |= (S_16_8 & 1) << 24;
  P |= (S_16_9 & 1) << 25;
  P |= (S_16_10 & 1) << 26;
  P |= (S_16_11 & 1) << 27;
  P |= (S_16_12 & 1) << 28;
  P |= (S_16_13 & 1) << 29;
  P |= (S_16_14 & 1) << 30;
  P |= (S_16_15 & 1) << 31;
  return P;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.000075 %
// MAE = 3230 
// WCE% = 0.00042 %
// WCE = 18075 
// WCRE% = 300.39 %
// EP% = 99.84 %
// MRE% = 0.0067 %
// MSE = 16238.254e3 
// PDK45_PWR = 1.648 mW
// PDK45_AREA = 2404.2 um2
// PDK45_DELAY = 2.44 ns



uint64_t mult8_cgp14ep_ep64716_wc26_csamrca(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_20, dout_21, dout_22, dout_23, dout_27, dout_28, dout_29, dout_30, dout_31, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_63, dout_64, dout_65, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_87, dout_88, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_103, dout_105, dout_107, dout_108, dout_109, dout_110, dout_111, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_145, dout_146, dout_147, dout_148, dout_149, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_171, dout_172, dout_173, dout_174, dout_175, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_183, dout_184, dout_185, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_20=((B >> 4)&1)&((A >> 0)&1);
   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_27=((B >> 3)&1)&((A >> 1)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_38=dout_20|dout_27;
   dout_39=dout_20&dout_27;
   dout_40=dout_21^dout_28;
   dout_41=dout_21&dout_28;
   dout_42=dout_22^dout_29;
   dout_43=dout_22&dout_29;
   dout_44=dout_23^dout_30;
   dout_45=dout_23&dout_30;
   dout_48=((B >> 2)&1)&((A >> 2)&1);
   dout_49=((B >> 3)&1)&((A >> 2)&1);
   dout_50=((B >> 4)&1)&((A >> 2)&1);
   dout_51=((B >> 5)&1)&((A >> 2)&1);
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_63=((A >> 3)&1)&((B >> 1)&1);
   dout_64=dout_38|dout_48;
   dout_65=dout_38&dout_48;
   dout_69=dout_40^dout_49;
   dout_70=dout_40&dout_49;
   dout_71=dout_69&dout_39;
   dout_72=dout_69^dout_39;
   dout_73=dout_70|dout_71;
   dout_74=dout_42^dout_50;
   dout_75=dout_42&dout_50;
   dout_76=dout_74&dout_41;
   dout_77=dout_74^dout_41;
   dout_78=dout_75|dout_76;
   dout_79=dout_44^dout_51;
   dout_80=dout_44&dout_51;
   dout_81=dout_79&dout_43;
   dout_82=dout_79^dout_43;
   dout_83=dout_80|dout_81;
   dout_84=dout_31^dout_52;
   dout_85=dout_31&dout_52;
   dout_87=dout_84^dout_45;
   dout_88=dout_85|dout_45;
   dout_91=((B >> 2)&1)&((A >> 3)&1);
   dout_92=((B >> 3)&1)&((A >> 3)&1);
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_103=dout_64&dout_63;
   dout_105=dout_64|dout_63;
   dout_107=dout_72^dout_91;
   dout_108=dout_72&dout_91;
   dout_109=dout_107&dout_65;
   dout_110=dout_107^dout_65;
   dout_111=dout_108|dout_109;
   dout_112=dout_77^dout_92;
   dout_113=dout_77&dout_92;
   dout_114=dout_112&dout_73;
   dout_115=dout_112^dout_73;
   dout_116=dout_113|dout_114;
   dout_117=dout_82^dout_93;
   dout_118=dout_82&dout_93;
   dout_119=dout_117&dout_78;
   dout_120=dout_117^dout_78;
   dout_121=dout_118|dout_119;
   dout_122=dout_87^dout_94;
   dout_123=dout_87&dout_94;
   dout_124=dout_122&dout_83;
   dout_125=dout_122^dout_83;
   dout_126=dout_123|dout_124;
   dout_127=dout_53^dout_95;
   dout_128=dout_53&dout_95;
   dout_129=dout_127&dout_88;
   dout_130=dout_127^dout_88;
   dout_131=dout_128|dout_129;
   dout_132=((B >> 0)&1)&((A >> 4)&1);
   dout_133=((B >> 1)&1)&((A >> 4)&1);
   dout_134=((B >> 2)&1)&((A >> 4)&1);
   dout_135=((B >> 3)&1)&((A >> 4)&1);
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_140=dout_105^dout_132;
   dout_141=dout_105&dout_132;
   dout_145=dout_110^dout_133;
   dout_146=dout_110&dout_133;
   dout_147=dout_145&dout_103;
   dout_148=dout_145^dout_103;
   dout_149=dout_146|dout_147;
   dout_150=dout_115^dout_134;
   dout_151=dout_115&dout_134;
   dout_152=dout_150&dout_111;
   dout_153=dout_150^dout_111;
   dout_154=dout_151|dout_152;
   dout_155=dout_120^dout_135;
   dout_156=dout_120&dout_135;
   dout_157=dout_155&dout_116;
   dout_158=dout_155^dout_116;
   dout_159=dout_156|dout_157;
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_121;
   dout_163=dout_160^dout_121;
   dout_164=dout_161|dout_162;
   dout_165=dout_130^dout_137;
   dout_166=dout_130&dout_137;
   dout_167=dout_165&dout_126;
   dout_168=dout_165^dout_126;
   dout_169=dout_166|dout_167;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_172=dout_170&dout_131;
   dout_173=dout_170^dout_131;
   dout_174=dout_171|dout_172;
   dout_175=((B >> 0)&1)&((A >> 5)&1);
   dout_176=((B >> 1)&1)&((A >> 5)&1);
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_183=dout_148^dout_175;
   dout_184=dout_148&dout_175;
   dout_185=dout_183&dout_141;
   dout_186=dout_183^dout_141;
   dout_187=dout_184|dout_185;
   dout_188=dout_153^dout_176;
   dout_189=dout_153&dout_176;
   dout_190=dout_188&dout_149;
   dout_191=dout_188^dout_149;
   dout_192=dout_189|dout_190;
   dout_193=dout_158^dout_177;
   dout_194=dout_158&dout_177;
   dout_195=dout_193&dout_154;
   dout_196=dout_193^dout_154;
   dout_197=dout_194|dout_195;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_159;
   dout_201=dout_198^dout_159;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_218=((B >> 0)&1)&((A >> 6)&1);
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_226=dout_191^dout_218;
   dout_227=dout_191&dout_218;
   dout_228=dout_226&dout_187;
   dout_229=dout_226^dout_187;
   dout_230=dout_227|dout_228;
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_233=dout_231&dout_192;
   dout_234=dout_231^dout_192;
   dout_235=dout_232|dout_233;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_197;
   dout_239=dout_236^dout_197;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_234^dout_261;
   dout_270=dout_234&dout_261;
   dout_271=dout_269&dout_230;
   dout_272=dout_269^dout_230;
   dout_273=dout_270|dout_271;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_235;
   dout_277=dout_274^dout_235;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_304=dout_277^dout_273;
   dout_305=dout_277&dout_273;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_302^dout_298;
   dout_327=dout_302&dout_298;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_268^dout_303;
   dout_332=((A >> 7)&1)&dout_303;
   dout_333=dout_331&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (0&1) << 0;
   O |= (dout_218&1) << 1;
   O |= (dout_132&1) << 2;
   O |= (dout_105&1) << 3;
   O |= (dout_140&1) << 4;
   O |= (dout_186&1) << 5;
   O |= (dout_229&1) << 6;
   O |= (dout_272&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

uint64_t mult8_cgp14zr_wc7391_rcam(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_242, dout_246, dout_251, dout_252, dout_253, dout_286, dout_288, dout_289, dout_290, dout_295, dout_296, dout_297, dout_298, dout_323, dout_324, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_242=((A >> 5)&1)&((B >> 7)&1);
   dout_246=dout_242&((A >> 6)&1);
   dout_251=((B >> 5)&1)&((A >> 4)&1);
   dout_252=((B >> 6)&1)&((A >> 6)&1);
   dout_253=((B >> 7)&1)&((A >> 6)&1);
   dout_286=dout_242^dout_253;
   dout_288=((B >> 7)&1)&dout_252;
   dout_289=dout_286^dout_252;
   dout_290=dout_246|dout_288;
   dout_295=((B >> 4)&1)&((A >> 7)&1);
   dout_296=((B >> 5)&1)&((A >> 7)&1);
   dout_297=((B >> 6)&1)&((A >> 7)&1);
   dout_298=((B >> 7)&1)&((A >> 7)&1);
   dout_323=dout_296&((B >> 4)&1);
   dout_324=dout_296^dout_295;
   dout_326=dout_289^dout_297;
   dout_327=dout_289&dout_297;
   dout_328=dout_326&dout_323;
   dout_329=dout_326^dout_323;
   dout_330=dout_327|dout_328;
   dout_331=dout_290^dout_298;
   dout_332=dout_290&dout_298;
   dout_333=((B >> 7)&1)&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (0&1) << 0;
   O |= (dout_251&1) << 1;
   O |= (0&1) << 2;
   O |= (0&1) << 3;
   O |= (0&1) << 4;
   O |= (0&1) << 5;
   O |= (dout_332&1) << 6;
   O |= (dout_335&1) << 7;
   O |= (dout_298&1) << 8;
   O |= (0&1) << 9;
   O |= (dout_329&1) << 10;
   O |= (dout_251&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

uint32_t evoapproxlib::evoapprox_t::mul16u_F6B (uint16_t a, uint16_t b) {
    static uint16_t * cacheLL = NULL;
    static uint16_t * cacheLH = NULL;
    static uint16_t * cacheHL = NULL;
    static uint16_t * cacheHH = NULL;
    int fillData = cacheLL == NULL || cacheLH == NULL || cacheHL == NULL || cacheHH == NULL;

    if(!cacheLL) cacheLL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheLH) cacheLH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHL) cacheHL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHH) cacheHH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    
    if(fillData) {
        for(int i = 0; i < 256; i++) {
            for(int j = 0; j < 256; j++) {
                cacheLL[i * 256 + j] = mult8_cgp14zr_wc7391_rcam(i, j);
                cacheLH[i * 256 + j] = mult8_cgp14ep_ep64716_wc26_csamrca(i, j);
                cacheHL[i * 256 + j] = mult8_cgp14ep_ep64716_wc26_csamrca(i, j);
                cacheHH[i * 256 + j] = mul8_364(i, j);
            }
        }
    }

    uint32_t opt = 0;

    opt += (uint32_t)cacheLL[(a & 0xFF       ) * 256 + (b & 0xFF             )];
    opt += (uint32_t)cacheLH[(a & 0xFF       ) * 256 + ((b >> 8) & 0xFF      )] << 8;
    opt += (uint32_t)cacheHL[((a >> 8) & 0xFF) * 256 + (b & 0xFF             )] << 8;
    opt += (uint32_t)cacheHH[((a >> 8) & 0xFF) * 256 + ((b >> 8) & 0xFF      )] << 16;

    return opt;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mre parameters
***/
// MAE% = 0.000003 %
// MAE = 129 
// WCE% = 0.000012 %
// WCE = 508 
// WCRE% = 7900.00 %
// EP% = 99.11 %
// MRE% = 0.00034 %
// MSE = 25453 
// PDK45_PWR = 2.002 mW
// PDK45_AREA = 2889.5 um2
// PDK45_DELAY = 2.90 ns



uint64_t mult8_cgp14_wc508_rcam(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_16, dout_31, dout_33, dout_60, dout_64, dout_65, dout_73, dout_106, dout_108, dout_109, dout_116, dout_117, dout_118, dout_137, dout_143, dout_144, dout_146, dout_147, dout_148, dout_149, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_160, dout_161, dout_162, dout_163, dout_177, dout_181, dout_182, dout_183, dout_184, dout_185, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_256, dout_257, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_301, dout_302, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_16=((B >> 7)&1)&((A >> 2)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_33=((A >> 2)&1)&((B >> 6)&1);
   dout_60=((B >> 6)&1)&dout_16;
   dout_64=dout_33|dout_31;
   dout_65=dout_60&((A >> 1)&1);
   dout_73=((B >> 7)&1)&((A >> 2)&1);
   dout_106=dout_65^dout_73;
   dout_108=dout_73&dout_64;
   dout_109=dout_106^dout_64;
   dout_116=((B >> 5)&1)&((A >> 3)&1);
   dout_117=((B >> 6)&1)&((A >> 3)&1);
   dout_118=((B >> 7)&1)&((A >> 3)&1);
   dout_137=((A >> 3)&1)&((B >> 4)&1);
   dout_143=dout_116&dout_137;
   dout_144=dout_116^dout_137;
   dout_146=dout_109^dout_117;
   dout_147=dout_109&dout_117;
   dout_148=dout_146&dout_143;
   dout_149=dout_146^dout_143;
   dout_150=dout_147|dout_148;
   dout_151=dout_108^dout_118;
   dout_152=dout_108&dout_118;
   dout_153=((B >> 7)&1)&dout_150;
   dout_154=dout_151^dout_150;
   dout_155=dout_152|dout_153;
   dout_160=((B >> 4)&1)&((A >> 4)&1);
   dout_161=((B >> 5)&1)&((A >> 4)&1);
   dout_162=((B >> 6)&1)&((A >> 4)&1);
   dout_163=((B >> 7)&1)&((A >> 4)&1);
   dout_177=((A >> 4)&1)&((B >> 3)&1);
   dout_181=dout_144^dout_160;
   dout_182=dout_144&dout_160;
   dout_183=dout_181&dout_177;
   dout_184=dout_181^dout_177;
   dout_185=dout_182|dout_183;
   dout_186=dout_149^dout_161;
   dout_187=dout_149&dout_161;
   dout_188=dout_186&dout_185;
   dout_189=dout_186^dout_185;
   dout_190=dout_187|dout_188;
   dout_191=dout_154^dout_162;
   dout_192=dout_154&dout_162;
   dout_193=dout_191&dout_190;
   dout_194=dout_191^dout_190;
   dout_195=dout_192|dout_193;
   dout_196=dout_155^dout_163;
   dout_197=dout_155&dout_163;
   dout_198=((B >> 7)&1)&dout_195;
   dout_199=dout_196^dout_195;
   dout_200=dout_197|dout_198;
   dout_203=((B >> 2)&1)&((A >> 5)&1);
   dout_204=((B >> 3)&1)&((A >> 5)&1);
   dout_205=((B >> 4)&1)&((A >> 5)&1);
   dout_206=((B >> 5)&1)&((A >> 5)&1);
   dout_207=((B >> 6)&1)&((A >> 5)&1);
   dout_208=((B >> 7)&1)&((A >> 5)&1);
   dout_221=dout_184^dout_204;
   dout_222=dout_184&dout_204;
   dout_223=dout_221&dout_203;
   dout_224=dout_221^dout_203;
   dout_225=dout_222|dout_223;
   dout_226=dout_189^dout_205;
   dout_227=dout_189&dout_205;
   dout_228=dout_226&dout_225;
   dout_229=dout_226^dout_225;
   dout_230=dout_227|dout_228;
   dout_231=dout_194^dout_206;
   dout_232=dout_194&dout_206;
   dout_233=dout_231&dout_230;
   dout_234=dout_231^dout_230;
   dout_235=dout_232|dout_233;
   dout_236=dout_199^dout_207;
   dout_237=dout_199&dout_207;
   dout_238=dout_236&dout_235;
   dout_239=dout_236^dout_235;
   dout_240=dout_237|dout_238;
   dout_241=dout_200^dout_208;
   dout_242=dout_200&dout_208;
   dout_243=((B >> 7)&1)&dout_240;
   dout_244=dout_241^dout_240;
   dout_245=dout_242|dout_243;
   dout_247=((B >> 1)&1)&((A >> 6)&1);
   dout_248=((B >> 2)&1)&((A >> 6)&1);
   dout_249=((B >> 3)&1)&((A >> 6)&1);
   dout_250=((B >> 4)&1)&((A >> 6)&1);
   dout_251=((B >> 5)&1)&((A >> 6)&1);
   dout_252=((B >> 6)&1)&((A >> 6)&1);
   dout_253=((B >> 7)&1)&((A >> 6)&1);
   dout_256=((B >> 5)&1)^dout_247;
   dout_257=((B >> 5)&1)&dout_247;
   dout_261=dout_224^dout_248;
   dout_262=dout_224&dout_248;
   dout_263=dout_261&dout_257;
   dout_264=dout_261^dout_257;
   dout_265=dout_262|dout_263;
   dout_266=dout_229^dout_249;
   dout_267=dout_229&dout_249;
   dout_268=dout_266&dout_265;
   dout_269=dout_266^dout_265;
   dout_270=dout_267|dout_268;
   dout_271=dout_234^dout_250;
   dout_272=dout_234&dout_250;
   dout_273=dout_271&dout_270;
   dout_274=dout_271^dout_270;
   dout_275=dout_272|dout_273;
   dout_276=dout_239^dout_251;
   dout_277=dout_239&dout_251;
   dout_278=dout_276&dout_275;
   dout_279=dout_276^dout_275;
   dout_280=dout_277|dout_278;
   dout_281=dout_244^dout_252;
   dout_282=dout_244&dout_252;
   dout_283=dout_281&dout_280;
   dout_284=dout_281^dout_280;
   dout_285=dout_282|dout_283;
   dout_286=dout_245^dout_253;
   dout_287=dout_245&dout_253;
   dout_288=((B >> 7)&1)&dout_285;
   dout_289=dout_286^dout_285;
   dout_290=dout_287|dout_288;
   dout_292=((B >> 1)&1)&((A >> 7)&1);
   dout_293=((B >> 2)&1)&((A >> 7)&1);
   dout_294=((B >> 3)&1)&((A >> 7)&1);
   dout_295=((B >> 4)&1)&((A >> 7)&1);
   dout_296=((B >> 5)&1)&((A >> 7)&1);
   dout_297=((B >> 6)&1)&((A >> 7)&1);
   dout_298=((B >> 7)&1)&((A >> 7)&1);
   dout_301=dout_264^dout_292;
   dout_302=dout_264&dout_292;
   dout_306=dout_269^dout_293;
   dout_307=dout_269&dout_293;
   dout_308=dout_306&dout_302;
   dout_309=dout_306^dout_302;
   dout_310=dout_307|dout_308;
   dout_311=dout_274^dout_294;
   dout_312=dout_274&dout_294;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_279^dout_295;
   dout_317=dout_279&dout_295;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_284^dout_296;
   dout_322=dout_284&dout_296;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_289^dout_297;
   dout_327=dout_289&dout_297;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_290^dout_298;
   dout_332=dout_290&((A >> 7)&1);
   dout_333=dout_298&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_256&1) << 0;
   O |= (dout_205&1) << 1;
   O |= (dout_294&1) << 2;
   O |= (0&1) << 3;
   O |= (((A >> 0)&1)&1) << 4;
   O |= (dout_292&1) << 5;
   O |= (((A >> 0)&1)&1) << 6;
   O |= (dout_256&1) << 7;
   O |= (dout_301&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

uint32_t evoapproxlib::evoapprox_t::mul16u_A7Z (uint16_t a, uint16_t b) {
    static uint16_t * cacheLL = NULL;
    static uint16_t * cacheLH = NULL;
    static uint16_t * cacheHL = NULL;
    static uint16_t * cacheHH = NULL;
    int fillData = cacheLL == NULL || cacheLH == NULL || cacheHL == NULL || cacheHH == NULL;

    if(!cacheLL) cacheLL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheLH) cacheLH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHL) cacheHL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHH) cacheHH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    
    if(fillData) {
        for(int i = 0; i < 256; i++) {
            for(int j = 0; j < 256; j++) {
                cacheLL[i * 256 + j] = mult8_cgp14_wc508_rcam(i, j);
                cacheLH[i * 256 + j] = mul8_364(i, j);
                cacheHL[i * 256 + j] = mul8_364(i, j);
                cacheHH[i * 256 + j] = mul8_364(i, j);
            }
        }
    }

    uint32_t opt = 0;

    opt += (uint32_t)cacheLL[(a & 0xFF       ) * 256 + (b & 0xFF             )];
    opt += (uint32_t)cacheLH[(a & 0xFF       ) * 256 + ((b >> 8) & 0xFF      )] << 8;
    opt += (uint32_t)cacheHL[((a >> 8) & 0xFF) * 256 + (b & 0xFF             )] << 8;
    opt += (uint32_t)cacheHH[((a >> 8) & 0xFF) * 256 + ((b >> 8) & 0xFF      )] << 16;

    return opt;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mae parameters
***/
// MAE% = 1.54 %
// MAE = 66027520 
// WCE% = 6.15 %
// WCE = 264110081 
// WCRE% = 100.00 %
// EP% = 100.00 %
// MRE% = 15.90 %
// MSE = 61094.229e11 
// PDK45_PWR = 0.106 mW
// PDK45_AREA = 269.4 um2
// PDK45_DELAY = 0.81 ns



uint32_t evoapproxlib::evoapprox_t::mul16u_HGP(uint16_t A, uint16_t B)
{
  uint32_t P, P_;
  uint16_t tmp, C_12_11,C_12_12,C_12_13,C_12_14,C_13_11,C_13_12,C_13_13,C_13_14,C_14_11,C_14_12,C_14_13,C_14_14,C_15_11,C_15_12,C_15_13,C_15_14,S_11_11,S_11_12,S_11_13,S_11_14,S_11_15,S_12_10,S_12_11,S_12_12,S_12_13,S_12_14,S_12_15,S_13_10,S_13_11,S_13_12,S_13_13,S_13_14,S_13_15,S_13_9,S_14_10,S_14_11,S_14_12,S_14_13,S_14_14,S_14_15,S_14_8,S_14_9,S_15_10,S_15_11,S_15_12,S_15_13,S_15_14,S_15_15,S_15_7,S_15_8,S_15_9,S_16_10,S_16_11,S_16_12,S_16_13,S_16_14,S_16_15,S_16_6,S_16_7,S_16_8,S_16_9;
  S_11_11 = (((A>>11)&1) & ((B>>11)&1));
  S_11_12 = (((A>>11)&1) & ((B>>12)&1));
  S_11_13 = (((A>>11)&1) & ((B>>13)&1));
  S_11_14 = (((A>>11)&1) & ((B>>14)&1));
  S_11_15 = (((A>>11)&1) & ((B>>15)&1));
  S_12_10 = S_11_11;
  S_12_11 = S_11_12^(((A>>12)&1) & ((B>>11)&1));
  C_12_11 = S_11_12&(((A>>12)&1) & ((B>>11)&1));
  S_12_12 = S_11_13^(((A>>12)&1) & ((B>>12)&1));
  C_12_12 = S_11_13&(((A>>12)&1) & ((B>>12)&1));
  S_12_13 = S_11_14^(((A>>12)&1) & ((B>>13)&1));
  C_12_13 = S_11_14&(((A>>12)&1) & ((B>>13)&1));
  S_12_14 = S_11_15^(((A>>12)&1) & ((B>>14)&1));
  C_12_14 = S_11_15&(((A>>12)&1) & ((B>>14)&1));
  S_12_15 = (((A>>12)&1) & ((B>>15)&1));
  S_13_9 = S_12_10;
  S_13_10 = S_12_11;
  tmp = S_12_12^C_12_11;
  S_13_11 = tmp^(((A>>13)&1) & ((B>>11)&1));
  C_13_11 = (tmp&(((A>>13)&1) & ((B>>11)&1)))|(S_12_12&C_12_11);
  tmp = S_12_13^C_12_12;
  S_13_12 = tmp^(((A>>13)&1) & ((B>>12)&1));
  C_13_12 = (tmp&(((A>>13)&1) & ((B>>12)&1)))|(S_12_13&C_12_12);
  tmp = S_12_14^C_12_13;
  S_13_13 = tmp^(((A>>13)&1) & ((B>>13)&1));
  C_13_13 = (tmp&(((A>>13)&1) & ((B>>13)&1)))|(S_12_14&C_12_13);
  tmp = S_12_15^C_12_14;
  S_13_14 = tmp^(((A>>13)&1) & ((B>>14)&1));
  C_13_14 = (tmp&(((A>>13)&1) & ((B>>14)&1)))|(S_12_15&C_12_14);
  S_13_15 = (((A>>13)&1) & ((B>>15)&1));
  S_14_8 = S_13_9;
  S_14_9 = S_13_10;
  S_14_10 = S_13_11;
  tmp = S_13_12^C_13_11;
  S_14_11 = tmp^(((A>>14)&1) & ((B>>11)&1));
  C_14_11 = (tmp&(((A>>14)&1) & ((B>>11)&1)))|(S_13_12&C_13_11);
  tmp = S_13_13^C_13_12;
  S_14_12 = tmp^(((A>>14)&1) & ((B>>12)&1));
  C_14_12 = (tmp&(((A>>14)&1) & ((B>>12)&1)))|(S_13_13&C_13_12);
  tmp = S_13_14^C_13_13;
  S_14_13 = tmp^(((A>>14)&1) & ((B>>13)&1));
  C_14_13 = (tmp&(((A>>14)&1) & ((B>>13)&1)))|(S_13_14&C_13_13);
  tmp = S_13_15^C_13_14;
  S_14_14 = tmp^(((A>>14)&1) & ((B>>14)&1));
  C_14_14 = (tmp&(((A>>14)&1) & ((B>>14)&1)))|(S_13_15&C_13_14);
  S_14_15 = (((A>>14)&1) & ((B>>15)&1));
  S_15_7 = S_14_8;
  S_15_8 = S_14_9;
  S_15_9 = S_14_10;
  S_15_10 = S_14_11;
  tmp = S_14_12^C_14_11;
  S_15_11 = tmp^(((A>>15)&1) & ((B>>11)&1));
  C_15_11 = (tmp&(((A>>15)&1) & ((B>>11)&1)))|(S_14_12&C_14_11);
  tmp = S_14_13^C_14_12;
  S_15_12 = tmp^(((A>>15)&1) & ((B>>12)&1));
  C_15_12 = (tmp&(((A>>15)&1) & ((B>>12)&1)))|(S_14_13&C_14_12);
  tmp = S_14_14^C_14_13;
  S_15_13 = tmp^(((A>>15)&1) & ((B>>13)&1));
  C_15_13 = (tmp&(((A>>15)&1) & ((B>>13)&1)))|(S_14_14&C_14_13);
  tmp = S_14_15^C_14_14;
  S_15_14 = tmp^(((A>>15)&1) & ((B>>14)&1));
  C_15_14 = (tmp&(((A>>15)&1) & ((B>>14)&1)))|(S_14_15&C_14_14);
  S_15_15 = (((A>>15)&1) & ((B>>15)&1));
  S_16_6 = S_15_7;
  S_16_7 = S_15_8;
  S_16_8 = S_15_9;
  S_16_9 = S_15_10;
  S_16_10 = S_15_11;
  P_ = (((C_15_11 & 1)<<0)|((C_15_12 & 1)<<1)|((C_15_13 & 1)<<2)|((C_15_14 & 1)<<3)) + (((S_15_12 & 1)<<0)|((S_15_13 & 1)<<1)|((S_15_14 & 1)<<2)|((S_15_15 & 1)<<3));
  S_16_11 = (P_ >> 0) & 1;
  S_16_12 = (P_ >> 1) & 1;
  S_16_13 = (P_ >> 2) & 1;
  S_16_14 = (P_ >> 3) & 1;
  S_16_15 = (P_ >> 4) & 1;
  P = 0;
  P |= (S_16_6 & 1) << 22;
  P |= (S_16_7 & 1) << 23;
  P |= (S_16_8 & 1) << 24;
  P |= (S_16_9 & 1) << 25;
  P |= (S_16_10 & 1) << 26;
  P |= (S_16_11 & 1) << 27;
  P |= (S_16_12 & 1) << 28;
  P |= (S_16_13 & 1) << 29;
  P |= (S_16_14 & 1) << 30;
  P |= (S_16_15 & 1) << 31;
  return P;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.00000086 %
// MAE = 37 
// WCE% = 0.0000027 %
// WCE = 115 
// WCRE% = 8300.00 %
// EP% = 97.72 %
// MRE% = 0.00013 %
// MSE = 2008 
// PDK45_PWR = 2.106 mW
// PDK45_AREA = 2992.3 um2
// PDK45_DELAY = 3.09 ns



uint64_t mult8_cgp14_wc115_5_csamrca(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_22, dout_23, dout_28, dout_29, dout_30, dout_31, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_49, dout_50, dout_51, dout_52, dout_53, dout_70, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_87, dout_88, dout_92, dout_93, dout_94, dout_95, dout_96, dout_108, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_171, dout_172, dout_173, dout_174, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_189, dout_190, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_229, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_40=((A >> 0)&1)|((A >> 1)&1);
   dout_41=((A >> 0)&1)&dout_28;
   dout_42=dout_22^dout_29;
   dout_43=dout_22&dout_29;
   dout_44=dout_23^dout_30;
   dout_45=dout_23&dout_30;
   dout_49=((B >> 3)&1)&((A >> 2)&1);
   dout_50=((B >> 4)&1)&((A >> 2)&1);
   dout_51=((B >> 5)&1)&((A >> 2)&1);
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_70=dout_40&dout_49;
   dout_74=dout_42^dout_50;
   dout_75=dout_42&dout_50;
   dout_76=dout_74&dout_41;
   dout_77=dout_74^dout_41;
   dout_78=dout_75|dout_76;
   dout_79=dout_44^dout_51;
   dout_80=dout_44&dout_51;
   dout_81=dout_79&dout_43;
   dout_82=dout_79^dout_43;
   dout_83=dout_80|dout_81;
   dout_84=dout_31^dout_52;
   dout_85=dout_31&dout_52;
   dout_87=dout_84^dout_45;
   dout_88=dout_85|dout_45;
   dout_92=((B >> 3)&1)&((A >> 3)&1);
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_108=((A >> 3)&1)&((B >> 2)&1);
   dout_112=dout_77^dout_92;
   dout_113=dout_77&dout_92;
   dout_114=dout_112&dout_70;
   dout_115=dout_112^dout_70;
   dout_116=dout_113|dout_114;
   dout_117=dout_82^dout_93;
   dout_118=dout_82&dout_93;
   dout_119=dout_117&dout_78;
   dout_120=dout_117^dout_78;
   dout_121=dout_118|dout_119;
   dout_122=dout_87^dout_94;
   dout_123=dout_87&dout_94;
   dout_124=dout_122&dout_83;
   dout_125=dout_122^dout_83;
   dout_126=dout_123|dout_124;
   dout_127=dout_53^dout_95;
   dout_128=dout_53&dout_95;
   dout_129=dout_127&dout_88;
   dout_130=dout_127^dout_88;
   dout_131=dout_128|dout_129;
   dout_134=((B >> 2)&1)&((A >> 4)&1);
   dout_135=((B >> 3)&1)&((A >> 4)&1);
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_150=dout_115|dout_134;
   dout_151=dout_115&dout_134;
   dout_152=dout_150&dout_108;
   dout_153=dout_150^dout_108;
   dout_154=dout_151|dout_152;
   dout_155=dout_120^dout_135;
   dout_156=dout_120&dout_135;
   dout_157=dout_155&dout_116;
   dout_158=dout_155^dout_116;
   dout_159=dout_156|dout_157;
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_121;
   dout_163=dout_160^dout_121;
   dout_164=dout_161|dout_162;
   dout_165=dout_130^dout_137;
   dout_166=dout_130&dout_137;
   dout_167=dout_165&dout_126;
   dout_168=dout_165^dout_126;
   dout_169=dout_166|dout_167;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_172=dout_170&dout_131;
   dout_173=dout_170^dout_131;
   dout_174=dout_171|dout_172;
   dout_176=((B >> 1)&1)&((A >> 5)&1);
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_189=dout_153&dout_176;
   dout_190=dout_176&((A >> 4)&1);
   dout_192=dout_189|dout_190;
   dout_193=dout_158^dout_177;
   dout_194=dout_158&dout_177;
   dout_195=dout_193&dout_154;
   dout_196=dout_193^dout_154;
   dout_197=dout_194|dout_195;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_159;
   dout_201=dout_198^dout_159;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_218=((B >> 0)&1)&((A >> 6)&1);
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_229=dout_218^0xFFFFFFFFFFFFFFFFU;
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_233=dout_231&dout_192;
   dout_234=dout_231^dout_192;
   dout_235=dout_232|dout_233;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_197;
   dout_239=dout_236^dout_197;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_234^dout_261;
   dout_270=dout_234&dout_261;
   dout_271=dout_269&dout_218;
   dout_272=dout_269^dout_218;
   dout_273=dout_270|dout_271;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_235;
   dout_277=dout_274^dout_235;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_304=dout_277^dout_273;
   dout_305=dout_277&dout_273;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_302^dout_298;
   dout_327=dout_302&dout_298;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_268^dout_303;
   dout_332=((A >> 7)&1)&dout_303;
   dout_333=dout_331&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_75&1) << 0;
   O |= (dout_137&1) << 1;
   O |= (((B >> 0)&1)&1) << 2;
   O |= (dout_172&1) << 3;
   O |= (((B >> 0)&1)&1) << 4;
   O |= (0&1) << 5;
   O |= (dout_229&1) << 6;
   O |= (dout_272&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

uint32_t evoapproxlib::evoapprox_t::mul16u_4YJ (uint16_t a, uint16_t b) {
    static uint16_t * cacheLL = NULL;
    static uint16_t * cacheLH = NULL;
    static uint16_t * cacheHL = NULL;
    static uint16_t * cacheHH = NULL;
    int fillData = cacheLL == NULL || cacheLH == NULL || cacheHL == NULL || cacheHH == NULL;

    if(!cacheLL) cacheLL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheLH) cacheLH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHL) cacheHL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHH) cacheHH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    
    if(fillData) {
        for(int i = 0; i < 256; i++) {
            for(int j = 0; j < 256; j++) {
                cacheLL[i * 256 + j] = mult8_cgp14_wc115_5_csamrca(i, j);
                cacheLH[i * 256 + j] = mul8_364(i, j);
                cacheHL[i * 256 + j] = mul8_364(i, j);
                cacheHH[i * 256 + j] = mul8_364(i, j);
            }
        }
    }

    uint32_t opt = 0;

    opt += (uint32_t)cacheLL[(a & 0xFF       ) * 256 + (b & 0xFF             )];
    opt += (uint32_t)cacheLH[(a & 0xFF       ) * 256 + ((b >> 8) & 0xFF      )] << 8;
    opt += (uint32_t)cacheHL[((a >> 8) & 0xFF) * 256 + (b & 0xFF             )] << 8;
    opt += (uint32_t)cacheHH[((a >> 8) & 0xFF) * 256 + ((b >> 8) & 0xFF      )] << 16;

    return opt;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and wce parameters
***/
// MAE% = 0.0000086 %
// MAE = 370 
// WCE% = 0.000037 %
// WCE = 1577 
// WCRE% = 103.12 %
// EP% = 98.99 %
// MRE% = 0.00091 %
// MSE = 209723 
// PDK45_PWR = 1.893 mW
// PDK45_AREA = 2782.9 um2
// PDK45_DELAY = 2.52 ns



uint64_t mult8_cgp14zr_wc1577_csamrca(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_52, dout_53, dout_85, dout_95, dout_96, dout_127, dout_128, dout_130, dout_137, dout_138, dout_139, dout_165, dout_166, dout_170, dout_171, dout_173, dout_174, dout_180, dout_181, dout_182, dout_199, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_222, dout_223, dout_224, dout_225, dout_239, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_309, dout_313, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_52=((B >> 7)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_85=((A >> 3)&1)&dout_52;
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_127=dout_53^dout_95;
   dout_128=dout_53&((A >> 3)&1);
   dout_130=dout_127^dout_85;
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_165=dout_130|dout_137;
   dout_166=dout_130&dout_137;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_173=dout_170^dout_85;
   dout_174=dout_171|dout_128;
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_199=((B >> 3)&1)&((A >> 6)&1);
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_166;
   dout_211=dout_208^dout_166;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_239=((A >> 5)&1)&((B >> 4)&1);
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_165;
   dout_249=dout_246^dout_165;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_199;
   dout_287=dout_284^dout_199;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_309=dout_239^dout_263;
   dout_313=dout_239&dout_263;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_313;
   dout_319=dout_316^dout_313;
   dout_320=dout_317|dout_318;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_302^dout_298;
   dout_327=dout_302&dout_298;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_268^dout_303;
   dout_332=((A >> 7)&1)&dout_303;
   dout_333=dout_268&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_217&1) << 0;
   O |= (dout_291&1) << 1;
   O |= (dout_309&1) << 2;
   O |= (0&1) << 3;
   O |= (dout_127&1) << 4;
   O |= (dout_225&1) << 5;
   O |= (dout_254&1) << 6;
   O |= (dout_214&1) << 7;
   O |= (dout_309&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_287&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

uint32_t evoapproxlib::evoapprox_t::mul16u_3HJ (uint16_t a, uint16_t b) {
    static uint16_t * cacheLL = NULL;
    static uint16_t * cacheLH = NULL;
    static uint16_t * cacheHL = NULL;
    static uint16_t * cacheHH = NULL;
    int fillData = cacheLL == NULL || cacheLH == NULL || cacheHL == NULL || cacheHH == NULL;

    if(!cacheLL) cacheLL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheLH) cacheLH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHL) cacheHL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHH) cacheHH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    
    if(fillData) {
        for(int i = 0; i < 256; i++) {
            for(int j = 0; j < 256; j++) {
                cacheLL[i * 256 + j] = mult8_cgp14zr_wc1577_csamrca(i, j);
                cacheLH[i * 256 + j] = mul8_364(i, j);
                cacheHL[i * 256 + j] = mul8_364(i, j);
                cacheHH[i * 256 + j] = mul8_364(i, j);
            }
        }
    }

    uint32_t opt = 0;

    opt += (uint32_t)cacheLL[(a & 0xFF       ) * 256 + (b & 0xFF             )];
    opt += (uint32_t)cacheLH[(a & 0xFF       ) * 256 + ((b >> 8) & 0xFF      )] << 8;
    opt += (uint32_t)cacheHL[((a >> 8) & 0xFF) * 256 + (b & 0xFF             )] << 8;
    opt += (uint32_t)cacheHH[((a >> 8) & 0xFF) * 256 + ((b >> 8) & 0xFF      )] << 16;

    return opt;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and ep parameters
***/
// MAE% = 0.00029 %
// MAE = 12374 
// WCE% = 0.0015 %
// WCE = 66049 
// WCRE% = 100.00 %
// EP% = 47.90 %
// MRE% = 0.012 %
// MSE = 80900.511e4 
// PDK45_PWR = 2.173 mW
// PDK45_AREA = 3052.3 um2
// PDK45_DELAY = 3.13 ns



uint64_t mult8_cgp14ep_ep13107_wc1_csamrca(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_17, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_65, dout_66, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_86, dout_87, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_98, dout_99, dout_100, dout_101, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110, dout_111, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143, dout_144, dout_145, dout_146, dout_147, dout_148, dout_149, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_171, dout_172, dout_173, dout_174, dout_175, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_183, dout_184, dout_185, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_17=((B >> 1)&1)&((A >> 0)&1);
   dout_18=((B >> 2)&1)&((A >> 0)&1);
   dout_19=((B >> 3)&1)&((A >> 0)&1);
   dout_20=((B >> 4)&1)&((A >> 0)&1);
   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_24=((B >> 0)&1)&((A >> 1)&1);
   dout_25=((B >> 1)&1)&((A >> 1)&1);
   dout_26=((B >> 2)&1)&((A >> 1)&1);
   dout_27=((B >> 3)&1)&((A >> 1)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_32=dout_17^dout_24;
   dout_33=dout_17&dout_24;
   dout_34=dout_18^dout_25;
   dout_35=dout_18&dout_25;
   dout_36=dout_19^dout_26;
   dout_37=dout_19&dout_26;
   dout_38=dout_20^dout_27;
   dout_39=dout_20&dout_27;
   dout_40=dout_21^dout_28;
   dout_41=dout_21&dout_28;
   dout_42=dout_22^dout_29;
   dout_43=dout_22&dout_29;
   dout_44=dout_23^dout_30;
   dout_45=dout_23&((B >> 6)&1);
   dout_46=((B >> 0)&1)&((A >> 2)&1);
   dout_47=((B >> 1)&1)&((A >> 2)&1);
   dout_48=((B >> 2)&1)&((A >> 2)&1);
   dout_49=((B >> 3)&1)&((A >> 2)&1);
   dout_50=((B >> 4)&1)&((A >> 2)&1);
   dout_51=((B >> 5)&1)&((A >> 2)&1);
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_54=dout_34^dout_46;
   dout_55=dout_34&dout_46;
   dout_56=dout_54&dout_33;
   dout_57=dout_54^dout_33;
   dout_58=dout_55|dout_56;
   dout_59=dout_36^dout_47;
   dout_60=dout_36&dout_47;
   dout_61=dout_59&dout_35;
   dout_62=dout_59^dout_35;
   dout_63=dout_60|dout_61;
   dout_64=dout_38^dout_48;
   dout_65=dout_38&dout_48;
   dout_66=dout_64&dout_37;
   dout_67=dout_64^dout_37;
   dout_68=dout_65|dout_66;
   dout_69=dout_40^dout_49;
   dout_70=dout_40&dout_49;
   dout_71=dout_69&dout_39;
   dout_72=dout_69^dout_39;
   dout_73=dout_70|dout_71;
   dout_74=dout_42^dout_50;
   dout_75=dout_42&dout_50;
   dout_76=dout_74&dout_41;
   dout_77=dout_74^dout_41;
   dout_78=dout_75|dout_76;
   dout_79=dout_44^dout_51;
   dout_80=dout_44&dout_51;
   dout_81=dout_79&dout_43;
   dout_82=dout_79^dout_43;
   dout_83=dout_80|dout_81;
   dout_84=dout_31^dout_52;
   dout_85=dout_31&dout_52;
   dout_86=((A >> 1)&1)&dout_45;
   dout_87=dout_84^dout_86;
   dout_88=dout_85|dout_86;
   dout_89=((B >> 0)&1)&((A >> 3)&1);
   dout_90=((B >> 1)&1)&((A >> 3)&1);
   dout_91=((B >> 2)&1)&((A >> 3)&1);
   dout_92=((B >> 3)&1)&((A >> 3)&1);
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_97=dout_62^dout_89;
   dout_98=dout_62&dout_89;
   dout_99=dout_97&dout_58;
   dout_100=dout_97^dout_58;
   dout_101=dout_98|dout_99;
   dout_102=dout_67^dout_90;
   dout_103=dout_67&dout_90;
   dout_104=dout_102&dout_63;
   dout_105=dout_102^dout_63;
   dout_106=dout_103|dout_104;
   dout_107=dout_72^dout_91;
   dout_108=dout_72&dout_91;
   dout_109=dout_107&dout_68;
   dout_110=dout_107^dout_68;
   dout_111=dout_108|dout_109;
   dout_112=dout_77^dout_92;
   dout_113=dout_77&dout_92;
   dout_114=dout_112&dout_73;
   dout_115=dout_112^dout_73;
   dout_116=dout_113|dout_114;
   dout_117=dout_82^dout_93;
   dout_118=dout_82&dout_93;
   dout_119=dout_117&dout_78;
   dout_120=dout_117^dout_78;
   dout_121=dout_118|dout_119;
   dout_122=dout_87^dout_94;
   dout_123=dout_87&dout_94;
   dout_124=dout_122&dout_83;
   dout_125=dout_122^dout_83;
   dout_126=dout_123|dout_124;
   dout_127=dout_53^dout_95;
   dout_128=dout_53&dout_95;
   dout_129=dout_127&dout_88;
   dout_130=dout_127^dout_88;
   dout_131=dout_128|dout_129;
   dout_132=((B >> 0)&1)&((A >> 4)&1);
   dout_133=((B >> 1)&1)&((A >> 4)&1);
   dout_134=((B >> 2)&1)&((A >> 4)&1);
   dout_135=((B >> 3)&1)&((A >> 4)&1);
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_140=dout_105^dout_132;
   dout_141=dout_105&dout_132;
   dout_142=dout_140&dout_101;
   dout_143=dout_140^dout_101;
   dout_144=dout_141|dout_142;
   dout_145=dout_110^dout_133;
   dout_146=dout_110&dout_133;
   dout_147=dout_145&dout_106;
   dout_148=dout_145^dout_106;
   dout_149=dout_146|dout_147;
   dout_150=dout_115^dout_134;
   dout_151=dout_115&dout_134;
   dout_152=dout_150&dout_111;
   dout_153=dout_150^dout_111;
   dout_154=dout_151|dout_152;
   dout_155=dout_120^dout_135;
   dout_156=dout_120&dout_135;
   dout_157=dout_155&dout_116;
   dout_158=dout_155^dout_116;
   dout_159=dout_156|dout_157;
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_121;
   dout_163=dout_160^dout_121;
   dout_164=dout_161|dout_162;
   dout_165=dout_130^dout_137;
   dout_166=dout_130&dout_137;
   dout_167=dout_165&dout_126;
   dout_168=dout_165^dout_126;
   dout_169=dout_166|dout_167;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_172=dout_170&dout_131;
   dout_173=dout_170^dout_131;
   dout_174=dout_171|dout_172;
   dout_175=((B >> 0)&1)&((A >> 5)&1);
   dout_176=((B >> 1)&1)&((A >> 5)&1);
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_183=dout_148^dout_175;
   dout_184=dout_148&dout_175;
   dout_185=dout_183&dout_144;
   dout_186=dout_183^dout_144;
   dout_187=dout_184|dout_185;
   dout_188=dout_153^dout_176;
   dout_189=dout_153&dout_176;
   dout_190=dout_188&dout_149;
   dout_191=dout_188^dout_149;
   dout_192=dout_189|dout_190;
   dout_193=dout_158^dout_177;
   dout_194=dout_158&dout_177;
   dout_195=dout_193&dout_154;
   dout_196=dout_193^dout_154;
   dout_197=dout_194|dout_195;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_159;
   dout_201=dout_198^dout_159;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_218=((B >> 0)&1)&((A >> 6)&1);
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_226=dout_191^dout_218;
   dout_227=dout_191&dout_218;
   dout_228=dout_226&dout_187;
   dout_229=dout_226^dout_187;
   dout_230=dout_227|dout_228;
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_233=dout_231&dout_192;
   dout_234=dout_231^dout_192;
   dout_235=dout_232|dout_233;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_197;
   dout_239=dout_236^dout_197;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_234^dout_261;
   dout_270=dout_234&dout_261;
   dout_271=dout_269&dout_230;
   dout_272=dout_269^dout_230;
   dout_273=dout_270|dout_271;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_235;
   dout_277=dout_274^dout_235;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_304=dout_277^dout_273;
   dout_305=dout_277&dout_273;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_321=dout_297^dout_293;
   dout_322=dout_297&dout_293;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_302^dout_298;
   dout_327=dout_302&dout_298;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_268^dout_303;
   dout_332=((A >> 7)&1)&dout_303;
   dout_333=dout_331&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (dout_58&1) << 0;
   O |= (dout_32&1) << 1;
   O |= (dout_57&1) << 2;
   O |= (dout_100&1) << 3;
   O |= (dout_143&1) << 4;
   O |= (dout_186&1) << 5;
   O |= (dout_229&1) << 6;
   O |= (dout_272&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

uint32_t evoapproxlib::evoapprox_t::mul16u_60L (uint16_t a, uint16_t b) {
    static uint16_t * cacheLL = NULL;
    static uint16_t * cacheLH = NULL;
    static uint16_t * cacheHL = NULL;
    static uint16_t * cacheHH = NULL;
    int fillData = cacheLL == NULL || cacheLH == NULL || cacheHL == NULL || cacheHH == NULL;

    if(!cacheLL) cacheLL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheLH) cacheLH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHL) cacheHL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHH) cacheHH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    
    if(fillData) {
        for(int i = 0; i < 256; i++) {
            for(int j = 0; j < 256; j++) {
                cacheLL[i * 256 + j] = mult8_cgp14ep_ep13107_wc1_csamrca(i, j);
                cacheLH[i * 256 + j] = mult8_cgp14ep_ep13107_wc1_csamrca(i, j);
                cacheHL[i * 256 + j] = mult8_cgp14ep_ep13107_wc1_csamrca(i, j);
                cacheHH[i * 256 + j] = mult8_cgp14ep_ep13107_wc1_csamrca(i, j);
            }
        }
    }

    uint32_t opt = 0;

    opt += (uint32_t)cacheLL[(a & 0xFF       ) * 256 + (b & 0xFF             )];
    opt += (uint32_t)cacheLH[(a & 0xFF       ) * 256 + ((b >> 8) & 0xFF      )] << 8;
    opt += (uint32_t)cacheHL[((a >> 8) & 0xFF) * 256 + (b & 0xFF             )] << 8;
    opt += (uint32_t)cacheHH[((a >> 8) & 0xFF) * 256 + ((b >> 8) & 0xFF      )] << 16;

    return opt;
}
/***
* This code is a part of EvoApproxLib library (ehw.fit.vutbr.cz/approxlib) distributed under The MIT License.
* When used, please cite the following article(s): V. Mrazek, Z. Vasicek, L. Sekanina, H. Jiang and J. Han, "Scalable Construction of Approximate Multipliers With Formally Guaranteed Worst Case Error" in IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 26, no. 11, pp. 2572-2576, Nov. 2018. doi: 10.1109/TVLSI.2018.2856362 
* This file contains a circuit from a sub-set of pareto optimal circuits with respect to the pwr and mse parameters
***/
// MAE% = 0.000011 %
// MAE = 459 
// WCE% = 0.000051 %
// WCE = 2181 
// WCRE% = 300.00 %
// EP% = 99.15 %
// MRE% = 0.0011 %
// MSE = 329216 
// PDK45_PWR = 1.855 mW
// PDK45_AREA = 2685.3 um2
// PDK45_DELAY = 2.62 ns


uint64_t mult8_cgp14ep_ep63078_wc1_csamcsa(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_16, dout_17, dout_18, dout_19, dout_20, dout_21, dout_22, dout_23, dout_24, dout_25, dout_26, dout_27, dout_28, dout_29, dout_30, dout_31, dout_32, dout_33, dout_34, dout_35, dout_36, dout_37, dout_38, dout_39, dout_40, dout_41, dout_42, dout_43, dout_44, dout_45, dout_46, dout_47, dout_48, dout_49, dout_50, dout_51, dout_52, dout_53, dout_54, dout_55, dout_56, dout_57, dout_58, dout_59, dout_60, dout_61, dout_62, dout_63, dout_64, dout_65, dout_66, dout_67, dout_68, dout_69, dout_70, dout_71, dout_72, dout_73, dout_74, dout_75, dout_76, dout_77, dout_78, dout_79, dout_80, dout_81, dout_82, dout_83, dout_84, dout_85, dout_87, dout_88, dout_89, dout_90, dout_91, dout_92, dout_93, dout_94, dout_95, dout_96, dout_97, dout_98, dout_99, dout_100, dout_101, dout_102, dout_103, dout_104, dout_105, dout_106, dout_107, dout_108, dout_109, dout_110, dout_111, dout_112, dout_113, dout_114, dout_115, dout_116, dout_117, dout_118, dout_119, dout_120, dout_121, dout_122, dout_123, dout_124, dout_125, dout_126, dout_127, dout_128, dout_129, dout_130, dout_131, dout_132, dout_133, dout_134, dout_135, dout_136, dout_137, dout_138, dout_139, dout_140, dout_141, dout_142, dout_143, dout_144, dout_145, dout_146, dout_147, dout_148, dout_149, dout_150, dout_151, dout_152, dout_153, dout_154, dout_155, dout_156, dout_157, dout_158, dout_159, dout_160, dout_161, dout_162, dout_163, dout_164, dout_165, dout_166, dout_167, dout_168, dout_169, dout_170, dout_171, dout_172, dout_173, dout_174, dout_175, dout_176, dout_177, dout_178, dout_179, dout_180, dout_181, dout_182, dout_183, dout_184, dout_185, dout_186, dout_187, dout_188, dout_189, dout_190, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_201, dout_202, dout_203, dout_204, dout_205, dout_206, dout_207, dout_208, dout_209, dout_210, dout_211, dout_212, dout_213, dout_214, dout_215, dout_216, dout_217, dout_218, dout_219, dout_220, dout_221, dout_222, dout_223, dout_224, dout_225, dout_226, dout_227, dout_228, dout_229, dout_230, dout_231, dout_232, dout_233, dout_234, dout_235, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_246, dout_247, dout_248, dout_249, dout_250, dout_251, dout_252, dout_253, dout_254, dout_255, dout_256, dout_257, dout_258, dout_259, dout_260, dout_261, dout_262, dout_263, dout_264, dout_265, dout_266, dout_267, dout_268, dout_269, dout_270, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_291, dout_292, dout_293, dout_294, dout_295, dout_296, dout_297, dout_298, dout_299, dout_300, dout_301, dout_302, dout_303, dout_304, dout_305, dout_306, dout_307, dout_308, dout_309, dout_310, dout_311, dout_312, dout_313, dout_314, dout_315, dout_316, dout_317, dout_318, dout_319, dout_320, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_335, dout_336, dout_339, dout_340, dout_341, dout_344, dout_345, dout_347, dout_348, dout_349, dout_350, dout_351, dout_352, dout_353, dout_354, dout_355, dout_356, dout_357, dout_358, dout_361, dout_362;   int avg=0;

   dout_16=((A >> 1)&1)&((B >> 6)&1);
   dout_17=((B >> 1)&1)&((A >> 0)&1);
   dout_18=((B >> 2)&1)&((A >> 0)&1);
   dout_19=((B >> 3)&1)&((A >> 0)&1);
   dout_20=((B >> 4)&1)&((A >> 0)&1);
   dout_21=((B >> 5)&1)&((A >> 0)&1);
   dout_22=((B >> 6)&1)&((A >> 0)&1);
   dout_23=((B >> 7)&1)&((A >> 0)&1);
   dout_24=((B >> 0)&1)&((A >> 1)&1);
   dout_25=((B >> 1)&1)&((A >> 1)&1);
   dout_26=((B >> 2)&1)&((A >> 1)&1);
   dout_27=((B >> 3)&1)&((A >> 1)&1);
   dout_28=((B >> 4)&1)&((A >> 1)&1);
   dout_29=((B >> 5)&1)&((A >> 1)&1);
   dout_30=((B >> 6)&1)&((A >> 1)&1);
   dout_31=((B >> 7)&1)&((A >> 1)&1);
   dout_32=dout_17|dout_24;
   dout_33=dout_17&dout_24;
   dout_34=dout_18^dout_25;
   dout_35=dout_18&dout_25;
   dout_36=dout_19^dout_26;
   dout_37=dout_19&dout_26;
   dout_38=dout_20^dout_27;
   dout_39=dout_20&dout_27;
   dout_40=dout_21^dout_28;
   dout_41=dout_21&dout_28;
   dout_42=dout_22^dout_29;
   dout_43=dout_22&dout_29;
   dout_44=dout_23^dout_16;
   dout_45=dout_23&dout_30;
   dout_46=((B >> 0)&1)&((A >> 2)&1);
   dout_47=((B >> 1)&1)&((A >> 2)&1);
   dout_48=((B >> 2)&1)&((A >> 2)&1);
   dout_49=((B >> 3)&1)&((A >> 2)&1);
   dout_50=((B >> 4)&1)&((A >> 2)&1);
   dout_51=((B >> 5)&1)&((A >> 2)&1);
   dout_52=((B >> 6)&1)&((A >> 2)&1);
   dout_53=((B >> 7)&1)&((A >> 2)&1);
   dout_54=dout_34^dout_46;
   dout_55=dout_34&dout_46;
   dout_56=dout_54&dout_33;
   dout_57=dout_54^dout_33;
   dout_58=dout_55|dout_56;
   dout_59=dout_36^dout_47;
   dout_60=dout_36&dout_47;
   dout_61=dout_59&dout_35;
   dout_62=dout_59^dout_35;
   dout_63=dout_60|dout_61;
   dout_64=dout_38^dout_48;
   dout_65=dout_38&dout_48;
   dout_66=dout_64&dout_37;
   dout_67=dout_64^dout_37;
   dout_68=dout_65|dout_66;
   dout_69=dout_40^dout_49;
   dout_70=dout_40&dout_49;
   dout_71=dout_69&dout_39;
   dout_72=dout_69^dout_39;
   dout_73=dout_70|dout_71;
   dout_74=dout_42^dout_50;
   dout_75=dout_42&dout_50;
   dout_76=dout_74&dout_41;
   dout_77=dout_74^dout_41;
   dout_78=dout_75|dout_76;
   dout_79=dout_44^dout_51;
   dout_80=dout_44&dout_51;
   dout_81=dout_79&dout_43;
   dout_82=dout_79^dout_43;
   dout_83=dout_80|dout_81;
   dout_84=dout_31^dout_52;
   dout_85=dout_31&dout_52;
   dout_87=dout_84^dout_45;
   dout_88=dout_85|dout_45;
   dout_89=((B >> 0)&1)&((A >> 3)&1);
   dout_90=((B >> 1)&1)&((A >> 3)&1);
   dout_91=((B >> 2)&1)&((A >> 3)&1);
   dout_92=((B >> 3)&1)&((A >> 3)&1);
   dout_93=((B >> 4)&1)&((A >> 3)&1);
   dout_94=((B >> 5)&1)&((A >> 3)&1);
   dout_95=((B >> 6)&1)&((A >> 3)&1);
   dout_96=((B >> 7)&1)&((A >> 3)&1);
   dout_97=dout_62^dout_89;
   dout_98=dout_62&dout_89;
   dout_99=dout_97&dout_58;
   dout_100=dout_97^dout_58;
   dout_101=dout_98|dout_99;
   dout_102=dout_67^dout_90;
   dout_103=dout_67&dout_90;
   dout_104=dout_102&dout_63;
   dout_105=dout_102^dout_63;
   dout_106=dout_103|dout_104;
   dout_107=dout_72^dout_91;
   dout_108=dout_72&dout_91;
   dout_109=dout_107&dout_68;
   dout_110=dout_107^dout_68;
   dout_111=dout_108|dout_109;
   dout_112=dout_77^dout_92;
   dout_113=dout_77&dout_92;
   dout_114=dout_112&dout_73;
   dout_115=dout_112^dout_73;
   dout_116=dout_113|dout_114;
   dout_117=dout_82^dout_93;
   dout_118=dout_82&dout_93;
   dout_119=dout_117&dout_78;
   dout_120=dout_117^dout_78;
   dout_121=dout_118|dout_119;
   dout_122=dout_87^dout_94;
   dout_123=dout_87&dout_94;
   dout_124=dout_122&dout_83;
   dout_125=dout_122^dout_83;
   dout_126=dout_123|dout_124;
   dout_127=dout_53^dout_95;
   dout_128=dout_53&dout_95;
   dout_129=dout_127&dout_88;
   dout_130=dout_127^dout_88;
   dout_131=dout_128|dout_129;
   dout_132=((B >> 0)&1)&((A >> 4)&1);
   dout_133=((B >> 1)&1)&((A >> 4)&1);
   dout_134=((B >> 2)&1)&((A >> 4)&1);
   dout_135=((B >> 3)&1)&((A >> 4)&1);
   dout_136=((B >> 4)&1)&((A >> 4)&1);
   dout_137=((B >> 5)&1)&((A >> 4)&1);
   dout_138=((B >> 6)&1)&((A >> 4)&1);
   dout_139=((B >> 7)&1)&((A >> 4)&1);
   dout_140=dout_105^dout_132;
   dout_141=dout_105&dout_132;
   dout_142=dout_140&dout_101;
   dout_143=dout_140^dout_101;
   dout_144=dout_141|dout_142;
   dout_145=dout_110^dout_133;
   dout_146=dout_110&dout_133;
   dout_147=dout_145&dout_106;
   dout_148=dout_145^dout_106;
   dout_149=dout_146|dout_147;
   dout_150=dout_115^dout_134;
   dout_151=dout_115&dout_134;
   dout_152=dout_150&dout_111;
   dout_153=dout_150^dout_111;
   dout_154=dout_151|dout_152;
   dout_155=dout_120^dout_135;
   dout_156=dout_120&dout_135;
   dout_157=dout_155&dout_116;
   dout_158=dout_155^dout_116;
   dout_159=dout_156|dout_157;
   dout_160=dout_125^dout_136;
   dout_161=dout_125&dout_136;
   dout_162=dout_160&dout_121;
   dout_163=dout_160^dout_121;
   dout_164=dout_161|dout_162;
   dout_165=dout_130^dout_137;
   dout_166=dout_130&dout_137;
   dout_167=dout_165&dout_126;
   dout_168=dout_165^dout_126;
   dout_169=dout_166|dout_167;
   dout_170=dout_96^dout_138;
   dout_171=dout_96&dout_138;
   dout_172=dout_170&dout_131;
   dout_173=dout_170^dout_131;
   dout_174=dout_171|dout_172;
   dout_175=((B >> 0)&1)&((A >> 5)&1);
   dout_176=((B >> 1)&1)&((A >> 5)&1);
   dout_177=((B >> 2)&1)&((A >> 5)&1);
   dout_178=((B >> 3)&1)&((A >> 5)&1);
   dout_179=((B >> 4)&1)&((A >> 5)&1);
   dout_180=((B >> 5)&1)&((A >> 5)&1);
   dout_181=((B >> 6)&1)&((A >> 5)&1);
   dout_182=((B >> 7)&1)&((A >> 5)&1);
   dout_183=dout_148^dout_175;
   dout_184=dout_148&dout_175;
   dout_185=dout_183&dout_144;
   dout_186=dout_183^dout_144;
   dout_187=dout_184|dout_185;
   dout_188=dout_153^dout_176;
   dout_189=dout_153&dout_176;
   dout_190=dout_188&dout_149;
   dout_191=dout_188^dout_149;
   dout_192=dout_189|dout_190;
   dout_193=dout_158^dout_177;
   dout_194=dout_158&dout_177;
   dout_195=dout_193&dout_154;
   dout_196=dout_193^dout_154;
   dout_197=dout_194|dout_195;
   dout_198=dout_163^dout_178;
   dout_199=dout_163&dout_178;
   dout_200=dout_198&dout_159;
   dout_201=dout_198^dout_159;
   dout_202=dout_199|dout_200;
   dout_203=dout_168^dout_179;
   dout_204=dout_168&dout_179;
   dout_205=dout_203&dout_164;
   dout_206=dout_203^dout_164;
   dout_207=dout_204|dout_205;
   dout_208=dout_173^dout_180;
   dout_209=dout_173&dout_180;
   dout_210=dout_208&dout_169;
   dout_211=dout_208^dout_169;
   dout_212=dout_209|dout_210;
   dout_213=dout_139^dout_181;
   dout_214=dout_139&dout_181;
   dout_215=dout_213&dout_174;
   dout_216=dout_213^dout_174;
   dout_217=dout_214|dout_215;
   dout_218=((B >> 0)&1)&((A >> 6)&1);
   dout_219=((B >> 1)&1)&((A >> 6)&1);
   dout_220=((B >> 2)&1)&((A >> 6)&1);
   dout_221=((B >> 3)&1)&((A >> 6)&1);
   dout_222=((B >> 4)&1)&((A >> 6)&1);
   dout_223=((B >> 5)&1)&((A >> 6)&1);
   dout_224=((B >> 6)&1)&((A >> 6)&1);
   dout_225=((B >> 7)&1)&((A >> 6)&1);
   dout_226=dout_191^dout_218;
   dout_227=dout_191&dout_218;
   dout_228=dout_226&dout_187;
   dout_229=dout_226^dout_187;
   dout_230=dout_227|dout_228;
   dout_231=dout_196^dout_219;
   dout_232=dout_196&dout_219;
   dout_233=dout_231&dout_192;
   dout_234=dout_231^dout_192;
   dout_235=dout_232|dout_233;
   dout_236=dout_201^dout_220;
   dout_237=dout_201&dout_220;
   dout_238=dout_236&dout_197;
   dout_239=dout_236^dout_197;
   dout_240=dout_237|dout_238;
   dout_241=dout_206^dout_221;
   dout_242=dout_206&dout_221;
   dout_243=dout_241&dout_202;
   dout_244=dout_241^dout_202;
   dout_245=dout_242|dout_243;
   dout_246=dout_211^dout_222;
   dout_247=dout_211&dout_222;
   dout_248=dout_246&dout_207;
   dout_249=dout_246^dout_207;
   dout_250=dout_247|dout_248;
   dout_251=dout_216^dout_223;
   dout_252=dout_216&dout_223;
   dout_253=dout_251&dout_212;
   dout_254=dout_251^dout_212;
   dout_255=dout_252|dout_253;
   dout_256=dout_182^dout_224;
   dout_257=dout_182&dout_224;
   dout_258=dout_256&dout_217;
   dout_259=dout_256^dout_217;
   dout_260=dout_257|dout_258;
   dout_261=((B >> 0)&1)&((A >> 7)&1);
   dout_262=((B >> 1)&1)&((A >> 7)&1);
   dout_263=((B >> 2)&1)&((A >> 7)&1);
   dout_264=((B >> 3)&1)&((A >> 7)&1);
   dout_265=((B >> 4)&1)&((A >> 7)&1);
   dout_266=((B >> 5)&1)&((A >> 7)&1);
   dout_267=((B >> 6)&1)&((A >> 7)&1);
   dout_268=((B >> 7)&1)&((A >> 7)&1);
   dout_269=dout_234^dout_261;
   dout_270=dout_234&dout_261;
   dout_271=dout_269&dout_230;
   dout_272=dout_269^dout_230;
   dout_273=dout_270|dout_271;
   dout_274=dout_239^dout_262;
   dout_275=dout_239&dout_262;
   dout_276=dout_274&dout_235;
   dout_277=dout_274^dout_235;
   dout_278=dout_275|dout_276;
   dout_279=dout_244^dout_263;
   dout_280=dout_244&dout_263;
   dout_281=dout_279&dout_240;
   dout_282=dout_279^dout_240;
   dout_283=dout_280|dout_281;
   dout_284=dout_249^dout_264;
   dout_285=dout_249&dout_264;
   dout_286=dout_284&dout_245;
   dout_287=dout_284^dout_245;
   dout_288=dout_285|dout_286;
   dout_289=dout_254^dout_265;
   dout_290=dout_254&dout_265;
   dout_291=dout_289&dout_250;
   dout_292=dout_289^dout_250;
   dout_293=dout_290|dout_291;
   dout_294=dout_259^dout_266;
   dout_295=dout_259&dout_266;
   dout_296=dout_294&dout_255;
   dout_297=dout_294^dout_255;
   dout_298=dout_295|dout_296;
   dout_299=dout_225^dout_267;
   dout_300=dout_225&dout_267;
   dout_301=dout_299&dout_260;
   dout_302=dout_299^dout_260;
   dout_303=dout_300|dout_301;
   dout_304=dout_277^dout_273;
   dout_305=dout_277&dout_273;
   dout_306=dout_282^dout_278;
   dout_307=dout_282&dout_278;
   dout_308=dout_306&dout_305;
   dout_309=dout_306^dout_305;
   dout_310=dout_307|dout_308;
   dout_311=dout_287^dout_283;
   dout_312=dout_287&dout_283;
   dout_313=dout_311&dout_310;
   dout_314=dout_311^dout_310;
   dout_315=dout_312|dout_313;
   dout_316=dout_292^dout_288;
   dout_317=dout_292&dout_288;
   dout_318=dout_316&dout_315;
   dout_319=dout_316^dout_315;
   dout_320=dout_317|dout_318;
   dout_322=dout_297&dout_293;
   dout_323=dout_302^dout_298;
   dout_324=dout_302&dout_298;
   dout_325=dout_323&dout_322;
   dout_326=dout_323^dout_322;
   dout_327=dout_324|dout_325;
   dout_328=dout_268^dout_303;
   dout_329=dout_268&dout_303;
   dout_330=dout_328&dout_327;
   dout_331=dout_328^dout_327;
   dout_332=dout_329|dout_330;
   dout_333=dout_297^dout_293;
   dout_335=dout_333^0xFFFFFFFFFFFFFFFFU;
   dout_336=dout_322|dout_333;
   dout_339=dout_323&dout_336;
   dout_340=dout_323^dout_336;
   dout_341=dout_327|dout_339;
   dout_344=dout_328&dout_339;
   dout_345=dout_328^dout_341;
   dout_347=dout_320^0xFFFFFFFFFFFFFFFFU;
   dout_348=dout_333&dout_347;
   dout_349=dout_335&dout_320;
   dout_350=dout_348|dout_349;
   dout_351=dout_320^0xFFFFFFFFFFFFFFFFU;
   dout_352=dout_326&dout_351;
   dout_353=dout_340&dout_320;
   dout_354=dout_352|dout_353;
   dout_355=dout_320^0xFFFFFFFFFFFFFFFFU;
   dout_356=dout_331&dout_355;
   dout_357=dout_345&dout_320;
   dout_358=dout_356|dout_357;
   dout_361=dout_344&dout_320;
   dout_362=dout_332|dout_361;

   O = 0;
   O |= (0&1) << 0;
   O |= (dout_32&1) << 1;
   O |= (dout_57&1) << 2;
   O |= (dout_100&1) << 3;
   O |= (dout_143&1) << 4;
   O |= (dout_186&1) << 5;
   O |= (dout_229&1) << 6;
   O |= (dout_272&1) << 7;
   O |= (dout_304&1) << 8;
   O |= (dout_309&1) << 9;
   O |= (dout_314&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_350&1) << 12;
   O |= (dout_354&1) << 13;
   O |= (dout_358&1) << 14;
   O |= (dout_362&1) << 15;
   return O;
}

uint64_t mult8_cgp14zr_wc1925_rcam(const uint64_t B,const uint64_t A)
{
   uint64_t O, dout_72, dout_118, dout_147, dout_151, dout_152, dout_153, dout_154, dout_155, dout_161, dout_162, dout_163, dout_191, dout_192, dout_193, dout_194, dout_195, dout_196, dout_197, dout_198, dout_199, dout_200, dout_205, dout_206, dout_207, dout_208, dout_231, dout_232, dout_236, dout_237, dout_238, dout_239, dout_240, dout_241, dout_242, dout_243, dout_244, dout_245, dout_249, dout_250, dout_251, dout_252, dout_253, dout_271, dout_272, dout_273, dout_274, dout_275, dout_276, dout_277, dout_278, dout_279, dout_280, dout_281, dout_282, dout_283, dout_284, dout_285, dout_286, dout_287, dout_288, dout_289, dout_290, dout_295, dout_296, dout_297, dout_298, dout_307, dout_316, dout_317, dout_318, dout_319, dout_320, dout_321, dout_322, dout_323, dout_324, dout_325, dout_326, dout_327, dout_328, dout_329, dout_330, dout_331, dout_332, dout_333, dout_334, dout_335;   int avg=0;

   dout_72=((B >> 7)&1)&((A >> 2)&1);
   dout_118=((B >> 7)&1)&((A >> 3)&1);
   dout_147=((B >> 6)&1)&((A >> 3)&1);
   dout_151=dout_72^dout_118;
   dout_152=dout_72&((A >> 3)&1);
   dout_153=((B >> 7)&1)&dout_147;
   dout_154=dout_151^dout_147;
   dout_155=dout_152|dout_153;
   dout_161=((B >> 5)&1)&((A >> 4)&1);
   dout_162=((B >> 6)&1)&((A >> 4)&1);
   dout_163=((B >> 7)&1)&((A >> 4)&1);
   dout_191=dout_154^dout_162;
   dout_192=dout_154&dout_162;
   dout_193=dout_191&dout_161;
   dout_194=dout_191^dout_161;
   dout_195=dout_192|dout_193;
   dout_196=dout_155^dout_163;
   dout_197=dout_155&dout_163;
   dout_198=((B >> 7)&1)&dout_195;
   dout_199=dout_196^dout_195;
   dout_200=dout_197|dout_198;
   dout_205=((B >> 4)&1)&((A >> 5)&1);
   dout_206=((B >> 5)&1)&((A >> 5)&1);
   dout_207=((B >> 6)&1)&((A >> 5)&1);
   dout_208=((B >> 7)&1)&((A >> 5)&1);
   dout_231=dout_194^dout_206;
   dout_232=dout_194&dout_206;
   dout_236=dout_199^dout_207;
   dout_237=dout_199&dout_207;
   dout_238=dout_236&dout_232;
   dout_239=dout_236^dout_232;
   dout_240=dout_237|dout_238;
   dout_241=dout_200^dout_208;
   dout_242=dout_200&dout_208;
   dout_243=((B >> 7)&1)&dout_240;
   dout_244=dout_241^dout_240;
   dout_245=dout_242|dout_243;
   dout_249=((B >> 2)&1)&((A >> 6)&1);
   dout_250=((B >> 4)&1)&((A >> 6)&1);
   dout_251=((B >> 5)&1)&((A >> 6)&1);
   dout_252=((B >> 6)&1)&((A >> 6)&1);
   dout_253=((B >> 7)&1)&((A >> 6)&1);
   dout_271=dout_231^dout_250;
   dout_272=dout_231&dout_250;
   dout_273=dout_271&dout_249;
   dout_274=dout_271^dout_249;
   dout_275=dout_272|dout_273;
   dout_276=dout_239^dout_251;
   dout_277=dout_239&dout_251;
   dout_278=dout_276&dout_275;
   dout_279=dout_276^dout_275;
   dout_280=dout_277|dout_278;
   dout_281=dout_244^dout_252;
   dout_282=dout_244&dout_252;
   dout_283=dout_281&dout_280;
   dout_284=dout_281^dout_280;
   dout_285=dout_282|dout_283;
   dout_286=dout_245^dout_253;
   dout_287=dout_245&dout_253;
   dout_288=dout_253&dout_285;
   dout_289=dout_286^dout_285;
   dout_290=dout_287|dout_288;
   dout_295=((B >> 4)&1)&((A >> 7)&1);
   dout_296=((B >> 5)&1)&((A >> 7)&1);
   dout_297=((B >> 6)&1)&((A >> 7)&1);
   dout_298=((B >> 7)&1)&((A >> 7)&1);
   dout_307=((A >> 7)&1)&((B >> 3)&1);
   dout_316=dout_279^dout_295;
   dout_317=dout_279&dout_295;
   dout_318=dout_316&dout_307;
   dout_319=dout_316^dout_307;
   dout_320=dout_317|dout_318;
   dout_321=dout_284^dout_296;
   dout_322=dout_284&dout_296;
   dout_323=dout_321&dout_320;
   dout_324=dout_321^dout_320;
   dout_325=dout_322|dout_323;
   dout_326=dout_289^dout_297;
   dout_327=dout_289&dout_297;
   dout_328=dout_326&dout_325;
   dout_329=dout_326^dout_325;
   dout_330=dout_327|dout_328;
   dout_331=dout_290^dout_298;
   dout_332=dout_290&((A >> 7)&1);
   dout_333=dout_298&dout_330;
   dout_334=dout_331^dout_330;
   dout_335=dout_332|dout_333;

   O = 0;
   O |= (0&1) << 0;
   O |= (dout_205&1) << 1;
   O |= (dout_163&1) << 2;
   O |= (dout_194&1) << 3;
   O |= (0&1) << 4;
   O |= (dout_250&1) << 5;
   O |= (0&1) << 6;
   O |= (0&1) << 7;
   O |= (dout_205&1) << 8;
   O |= (dout_205&1) << 9;
   O |= (dout_274&1) << 10;
   O |= (dout_319&1) << 11;
   O |= (dout_324&1) << 12;
   O |= (dout_329&1) << 13;
   O |= (dout_334&1) << 14;
   O |= (dout_335&1) << 15;
   return O;
}

uint32_t evoapproxlib::evoapprox_t::mul16u_679 (uint16_t a, uint16_t b) {
    static uint16_t * cacheLL = NULL;
    static uint16_t * cacheLH = NULL;
    static uint16_t * cacheHL = NULL;
    static uint16_t * cacheHH = NULL;
    int fillData = cacheLL == NULL || cacheLH == NULL || cacheHL == NULL || cacheHH == NULL;

    if(!cacheLL) cacheLL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheLH) cacheLH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHL) cacheHL = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    if(!cacheHH) cacheHH = (uint16_t *)malloc(256 * 256 * sizeof(uint16_t));
    
    if(fillData) {
        for(int i = 0; i < 256; i++) {
            for(int j = 0; j < 256; j++) {
                cacheLL[i * 256 + j] = mult8_cgp14zr_wc1925_rcam(i, j);
                cacheLH[i * 256 + j] = mult8_cgp14ep_ep63078_wc1_csamcsa(i, j);
                cacheHL[i * 256 + j] = trun8_tam00b(i, j);
                cacheHH[i * 256 + j] = trun8_tam00b(i, j);
            }
        }
    }

    uint32_t opt = 0;

    opt += (uint32_t)cacheLL[(a & 0xFF       ) * 256 + (b & 0xFF             )];
    opt += (uint32_t)cacheLH[(a & 0xFF       ) * 256 + ((b >> 8) & 0xFF      )] << 8;
    opt += (uint32_t)cacheHL[((a >> 8) & 0xFF) * 256 + (b & 0xFF             )] << 8;
    opt += (uint32_t)cacheHH[((a >> 8) & 0xFF) * 256 + ((b >> 8) & 0xFF      )] << 16;

    return opt;
}
