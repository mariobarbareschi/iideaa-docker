stages:
  - Analysis
  - Targeted Code Coverage
  - All Code Coverage
  - Fedora
  - openSUSE

variables:
  CTEST_OUTPUT_ON_FAILURE: '1'

# Analysis

cmake-format Check:
  image: stabletec/build-core:fedora
  stage: Analysis
  tags: 
    - docker-linux
  allow_failure: true
  script:
    - pip install cmake-format
    - cmake-format --version
    - cmake-format -i $(find . -name "*.cmake")
    - cmake-format -i $(find . -name "CMakeLists.txt")
    - git diff --exit-code

clang-format Check:
  image: stabletec/build-core:fedora
  stage: Analysis
  tags: 
    - docker-linux
  allow_failure: true
  script:
    - clang-format --version
    - clang-format -i $(find . -name "*.c")
    - clang-format -i $(find . -name "*.cpp")
    - clang-format -i $(find . -name "*.h")
    - clang-format -i $(find . -name "*.hpp")
    - git diff --exit-code

# Targeted Code Coverage

Targeted CC GCC Static:
  image: stabletec/build-core:fedora-gcc
  stage: Targeted Code Coverage
  tags:
    - docker-linux
  script:
    - mkdir build && cd build
    - cmake ../example/code-coverage-target/ -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON ${CMAKE_OPTIONS}
    - ninja
    - ninja ccov
  
Targeted CC GCC Shared:
  image: stabletec/build-core:fedora-gcc
  variables:
    CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=ON
  stage: Targeted Code Coverage
  tags:
    - docker-linux
  script:
    - mkdir build && cd build
    - cmake ../example/code-coverage-target/ -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON ${CMAKE_OPTIONS}
    - ninja
    - ninja ccov

Targeted CC Clang Static:
  image: stabletec/build-core:fedora-clang
  stage: Targeted Code Coverage
  tags:
    - docker-linux
  script:
    - mkdir build && cd build
    - cmake ../example/code-coverage-target/ -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON ${CMAKE_OPTIONS}
    - ninja
    - ninja ccov
    - ninja ccov-report
  
Targeted CC Clang Shared:
  image: stabletec/build-core:fedora-clang
  variables:
    CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=ON
  stage: Targeted Code Coverage
  tags:
    - docker-linux
  script:
    - mkdir build && cd build
    - cmake ../example/code-coverage-target/ -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON ${CMAKE_OPTIONS}
    - ninja
    - ninja ccov
    - ninja ccov-report

# All Code Coverage

All CC GCC Static:
  image: stabletec/build-core:fedora-gcc
  stage: All Code Coverage
  tags:
    - docker-linux
  script:
    - mkdir build && cd build
    - cmake ../example/code-coverage-all/ -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON ${CMAKE_OPTIONS}
    - ninja
    - ninja ccov
    - ninja ccov-all
  
All CC GCC Shared:
  image: stabletec/build-core:fedora-gcc
  variables:
    CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=ON
  stage: All Code Coverage
  tags:
    - docker-linux
  script:
    - mkdir build && cd build
    - cmake ../example/code-coverage-all/ -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON ${CMAKE_OPTIONS}
    - ninja
    - ninja ccov
    - ninja ccov-all

All CC Clang Static:
  image: stabletec/build-core:fedora-clang
  stage: All Code Coverage
  tags:
    - docker-linux
  script:
    - mkdir build && cd build
    - cmake ../example/code-coverage-all/ -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON ${CMAKE_OPTIONS}
    - ninja
    - ninja 
    - ninja ccov-all
    - ninja ccov-report
    - ninja ccov-all-report
  
All CC Clang Shared:
  image: stabletec/build-core:fedora-clang
  variables:
    CMAKE_OPTIONS: -DBUILD_SHARED_LIBS=ON
  stage: All Code Coverage
  tags:
    - docker-linux
  script:
    - mkdir build && cd build
    - cmake ../example/code-coverage-all/ -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON ${CMAKE_OPTIONS}
    - ninja
    - ninja ccov
    - ninja ccov-all
    - ninja ccov-report
    - ninja ccov-all-report

# Fedora

.fedora_success_template: &fedora_success_template
  stage: Fedora
  image: stabletec/build-core:fedora-clang
  tags:
    - docker-linux
  script:
    - mkdir build && cd build
    - cmake ../example/all -GNinja -DCMAKE_BUILD_TYPE=Release ${CMAKE_OPTIONS}
    - ninja
    - ninja test

.fedora_failure_template: &fedora_failure_template
  stage: Fedora
  image: stabletec/build-core:fedora-clang
  tags:
    - docker-linux
  script:
    - mkdir build && cd build
    - cmake ../example/all -GNinja -DCMAKE_BUILD_TYPE=Release ${CMAKE_OPTIONS}
    - ninja
    - "! ninja test"

Fedora Static Analysis:
  variables:
    CMAKE_OPTIONS: -DCLANG_TIDY=ON -DCPPCHECK=ON
  <<: *fedora_success_template

Fedora ThreadSanitizer:
  variables:
    CMAKE_OPTIONS: -DUSE_SANITIZER=Thread
  <<: *fedora_failure_template

Fedora AddressSanitizer:
  variables:
    CMAKE_OPTIONS: -DUSE_SANITIZER=Address
  <<: *fedora_failure_template

Fedora LeakSanitizer:
  variables:
    CMAKE_OPTIONS: -DUSE_SANITIZER=Leak
  <<: *fedora_failure_template

Fedora UndefinedSanitizer:
  variables:
    CMAKE_OPTIONS: -DUSE_SANITIZER=Undefined
  <<: *fedora_success_template

# openSUSE

.opensuse_success_template: &opensuse_success_template
  stage: openSUSE
  image: stabletec/build-core:opensuse-clang
  tags:
    - docker-linux
  script:
    - mkdir build && cd build
    - cmake ../example/all -GNinja -DCMAKE_BUILD_TYPE=Release ${CMAKE_OPTIONS}
    - ninja
    - ninja test

.opensuse_failure_template: &opensuse_failure_template
  stage: openSUSE
  image: stabletec/build-core:opensuse-clang
  tags:
    - docker-linux
  script:
    - mkdir build && cd build
    - cmake ../example/all -GNinja -DCMAKE_BUILD_TYPE=Release ${CMAKE_OPTIONS}
    - ninja
    - "! ninja test"

openSUSE Static Analysis:
  variables:
    CMAKE_OPTIONS: -DCLANG_TIDY=ON -DCPPCHECK=ON
  <<: *opensuse_success_template

openSUSE ThreadSanitizer:
  variables:
    CMAKE_OPTIONS: -DUSE_SANITIZER=Thread
  <<: *opensuse_failure_template

openSUSE AddressSanitizer:
  variables:
    CMAKE_OPTIONS: -DUSE_SANITIZER=Address
  <<: *opensuse_failure_template

openSUSE LeakSanitizer:
  variables:
    CMAKE_OPTIONS: -DUSE_SANITIZER=Leak
  <<: *opensuse_failure_template

openSUSE UndefinedSanitizer:
  variables:
    CMAKE_OPTIONS: -DUSE_SANITIZER=Undefined
  <<: *opensuse_success_template